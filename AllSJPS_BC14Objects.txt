OBJECT Table 5200 Employee
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:36:24;
    Modified=Yes;
    Version List=NAVW114.53;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,First Name,Middle Name,Last Name;
    OnInsert=VAR
               ResourcesSetup@1000 : Record 314;
               Resource@1001 : Record 156;
             BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               HumanResSetup.GET;
               IF "No." = '' THEN BEGIN
                 HumanResSetup.TESTFIELD("Employee Nos.");
                 NoSeriesMgt.InitSeries(HumanResSetup."Employee Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               IF HumanResSetup."Automatically Create Resource" THEN BEGIN
                 ResourcesSetup.GET;
                 Resource.INIT;
                 IF NoSeriesMgt.ManualNoAllowed(ResourcesSetup."Resource Nos.") THEN BEGIN
                   Resource."No." := "No.";
                   Resource.INSERT(TRUE);
                 END ELSE
                   Resource.INSERT(TRUE);
                 "Resource No." := Resource."No.";
               END;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Employee,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               UpdateSearchName;
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               "Last Date Modified" := TODAY;
               IF Res.READPERMISSION THEN
                 EmployeeResUpdate.HumanResToRes(xRec,Rec);
               IF SalespersonPurchaser.READPERMISSION THEN
                 EmployeeSalespersonUpdate.HumanResToSalesPerson(xRec,Rec);
               UpdateSearchName;
             END;

    OnDelete=BEGIN
               AlternativeAddr.SETRANGE("Employee No.","No.");
               AlternativeAddr.DELETEALL;

               EmployeeQualification.SETRANGE("Employee No.","No.");
               EmployeeQualification.DELETEALL;

               Relative.SETRANGE("Employee No.","No.");
               Relative.DELETEALL;

               EmployeeAbsence.SETRANGE("Employee No.","No.");
               EmployeeAbsence.DELETEALL;

               MiscArticleInformation.SETRANGE("Employee No.","No.");
               MiscArticleInformation.DELETEALL;

               ConfidentialInformation.SETRANGE("Employee No.","No.");
               ConfidentialInformation.DELETEALL;

               HumanResComment.SETRANGE("No.","No.");
               HumanResComment.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::Employee,"No.");
             END;

    OnRename=BEGIN
               DimMgt.RenameDefaultDim(DATABASE::Employee,xRec."No.","No.");
               "Last Modified Date Time" := CURRENTDATETIME;
               "Last Date Modified" := TODAY;
               UpdateSearchName;
             END;

    CaptionML=[ENU=Employee;
               ENN=Employee];
    LookupPageID=Page5201;
    DrillDownPageID=Page5201;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HumanResSetup.GET;
                                                                  NoSeriesMgt.TestManual(HumanResSetup."Employee Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 2   ;   ;First Name          ;Text30        ;CaptionML=[ENU=First Name;
                                                              ENN=First Name] }
    { 3   ;   ;Middle Name         ;Text30        ;CaptionML=[ENU=Middle Name;
                                                              ENN=Middle Name] }
    { 4   ;   ;Last Name           ;Text30        ;CaptionML=[ENU=Last Name;
                                                              ENN=Last Name] }
    { 5   ;   ;Initials            ;Text30        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Initials)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Initials;
                                                              END;

                                                   CaptionML=[ENU=Initials;
                                                              ENN=Initials] }
    { 6   ;   ;Job Title           ;Text30        ;CaptionML=[ENU=Job Title;
                                                              ENN=Job Title] }
    { 7   ;   ;Search Name         ;Code250       ;OnValidate=BEGIN
                                                                IF "Search Name" = '' THEN
                                                                  "Search Name" := SetSearchNameToFullnameAndInitials;
                                                              END;

                                                   CaptionML=[ENU=Search Name;
                                                              ENN=Search Name] }
    { 8   ;   ;Address             ;Text100       ;CaptionML=[ENU=Address;
                                                              ENN=Address] }
    { 9   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENN=Address 2] }
    { 10  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 11  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Postcode] }
    { 12  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 13  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 14  ;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              ENN=Mobile Phone No.] }
    { 15  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 16  ;   ;Alt. Address Code   ;Code10        ;TableRelation="Alternative Address".Code WHERE (Employee No.=FIELD(No.));
                                                   CaptionML=[ENU=Alt. Address Code;
                                                              ENN=Alt. Address Code] }
    { 17  ;   ;Alt. Address Start Date;Date       ;CaptionML=[ENU=Alt. Address Start Date;
                                                              ENN=Alt. Address Start Date] }
    { 18  ;   ;Alt. Address End Date;Date         ;CaptionML=[ENU=Alt. Address End Date;
                                                              ENN=Alt. Address End Date] }
    { 19  ;   ;Picture             ;BLOB          ;ObsoleteState=Pending;
                                                   ObsoleteReason=Replaced by Image field;
                                                   CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 20  ;   ;Birth Date          ;Date          ;CaptionML=[ENU=Birth Date;
                                                              ENN=Birth Date] }
    { 21  ;   ;Social Security No. ;Text30        ;CaptionML=[ENU=Social Security No.;
                                                              ENN=Social Security No.] }
    { 22  ;   ;Union Code          ;Code10        ;TableRelation=Union;
                                                   CaptionML=[ENU=Union Code;
                                                              ENN=Union Code] }
    { 23  ;   ;Union Membership No.;Text30        ;CaptionML=[ENU=Union Membership No.;
                                                              ENN=Union Membership No.] }
    { 24  ;   ;Gender              ;Option        ;CaptionML=[ENU=Gender;
                                                              ENN=Gender];
                                                   OptionCaptionML=[ENU=" ,Female,Male";
                                                                    ENN=" ,Female,Male"];
                                                   OptionString=[ ,Female,Male] }
    { 25  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 26  ;   ;Manager No.         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Manager No.;
                                                              ENN=Manager No.] }
    { 27  ;   ;Emplymt. Contract Code;Code10      ;TableRelation="Employment Contract";
                                                   CaptionML=[ENU=Emplymt. Contract Code;
                                                              ENN=Emplymt. Contract Code] }
    { 28  ;   ;Statistics Group Code;Code10       ;TableRelation="Employee Statistics Group";
                                                   CaptionML=[ENU=Statistics Group Code;
                                                              ENN=Statistics Group Code] }
    { 29  ;   ;Employment Date     ;Date          ;CaptionML=[ENU=Employment Date;
                                                              ENN=Employment Date] }
    { 31  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                EmployeeQualification.SETRANGE("Employee No.","No.");
                                                                EmployeeQualification.MODIFYALL("Employee Status",Status);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Active,Inactive,Terminated;
                                                                    ENN=Active,Inactive,Terminated];
                                                   OptionString=Active,Inactive,Terminated }
    { 32  ;   ;Inactive Date       ;Date          ;CaptionML=[ENU=Inactive Date;
                                                              ENN=Inactive Date] }
    { 33  ;   ;Cause of Inactivity Code;Code10    ;TableRelation="Cause of Inactivity";
                                                   CaptionML=[ENU=Cause of Inactivity Code;
                                                              ENN=Cause of Inactivity Code] }
    { 34  ;   ;Termination Date    ;Date          ;CaptionML=[ENU=Termination Date;
                                                              ENN=Termination Date] }
    { 35  ;   ;Grounds for Term. Code;Code10      ;TableRelation="Grounds for Termination";
                                                   CaptionML=[ENU=Grounds for Term. Code;
                                                              ENN=Grounds for Term. Code] }
    { 36  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 37  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 38  ;   ;Resource No.        ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                IF ("Resource No." <> '') AND Res.WRITEPERMISSION THEN BEGIN
                                                                  CheckIfAnEmployeeIsLinkedToTheResource("Resource No.");
                                                                  EmployeeResUpdate.ResUpdate(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Resource No.;
                                                              ENN=Resource No.] }
    { 39  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Employee),
                                                                                                          No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 40  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENN=Last Date Modified];
                                                   Editable=No }
    { 41  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 42  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENN=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 43  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENN=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 44  ;   ;Cause of Absence Filter;Code10     ;FieldClass=FlowFilter;
                                                   TableRelation="Cause of Absence";
                                                   CaptionML=[ENU=Cause of Absence Filter;
                                                              ENN=Cause of Absence Filter] }
    { 45  ;   ;Total Absence (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Employee Absence"."Quantity (Base)" WHERE (Employee No.=FIELD(No.),
                                                                                                               Cause of Absence Code=FIELD(Cause of Absence Filter),
                                                                                                               From Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Total Absence (Base);
                                                              ENN=Total Absence (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 46  ;   ;Extension           ;Text30        ;CaptionML=[ENU=Extension;
                                                              ENN=Extension] }
    { 47  ;   ;Employee No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No. Filter;
                                                              ENN=Employee No. Filter] }
    { 48  ;   ;Pager               ;Text30        ;CaptionML=[ENU=Pager;
                                                              ENN=Pager] }
    { 49  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 50  ;   ;Company E-Mail      ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("Company E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Company Email;
                                                              ENN=Company Email] }
    { 51  ;   ;Title               ;Text30        ;CaptionML=[ENU=Title;
                                                              ENN=Title] }
    { 52  ;   ;Salespers./Purch. Code;Code20      ;TableRelation=Salesperson/Purchaser WHERE (Blocked=CONST(No));
                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENN=Salespers./Purch. Code] }
    { 53  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 54  ;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENN=Last Modified Date Time];
                                                   Editable=No }
    { 55  ;   ;Employee Posting Group;Code20      ;TableRelation="Employee Posting Group";
                                                   CaptionML=[ENU=Employee Posting Group;
                                                              ENN=Employee Posting Group] }
    { 56  ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENN=Bank Sort Code] }
    { 57  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              ENN=Bank Account No.] }
    { 58  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              ENN=IBAN] }
    { 59  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Employee Ledger Entry".Amount WHERE (Employee No.=FIELD(No.),
                                                                                                                   Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                   Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              ENN=Balance];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;SWIFT Code          ;Code20        ;TableRelation="SWIFT Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=SWIFT Code;
                                                              ENN=SWIFT Code] }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=[ENU=Application Method;
                                                              ENN=Application Method];
                                                   OptionCaptionML=[ENU=Manual,Apply to Oldest;
                                                                    ENN=Manual,Apply to Oldest];
                                                   OptionString=Manual,Apply to Oldest }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=[ENU=Image;
                                                              ENN=Image] }
    { 150 ;   ;Privacy Blocked     ;Boolean       ;CaptionML=[ENU=Privacy Blocked;
                                                              ENN=Privacy Blocked] }
    { 1100;   ;Cost Center Code    ;Code20        ;TableRelation="Cost Center";
                                                   CaptionML=[ENU=Cost Center Code;
                                                              ENN=Cost Centre Code] }
    { 1101;   ;Cost Object Code    ;Code20        ;TableRelation="Cost Object";
                                                   CaptionML=[ENU=Cost Object Code;
                                                              ENN=Cost Object Code] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50000;  ;Change Department Code;Code10      ;TableRelation=Departments.Code;
                                                   OnValidate=VAR
                                                                Departments@1000000000 : Record 72001;
                                                              BEGIN
                                                                IF Departments.GET("Department Code") THEN
                                                                   "Department Name" := Departments.Description
                                                                ELSE
                                                                   "Department Name" := '';
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 50001;  ;Employee No Old     ;Code20        ;DataClassification=ToBeClassified }
    { 50002;  ;Employee No New     ;Code20        ;DataClassification=ToBeClassified }
    { 50003;  ;U.G Qualification   ;Text30        ;DataClassification=ToBeClassified }
    { 50004;  ;P.G Qualification   ;Text30        ;DataClassification=ToBeClassified }
    { 50005;  ;B.Ed                ;Boolean       ;DataClassification=ToBeClassified }
    { 50006;  ;M.Ed                ;Boolean       ;DataClassification=ToBeClassified }
    { 50007;  ;Scale               ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=,UT,TGT,PGT;
                                                   OptionString=,UT,TGT,PGT }
    { 50008;  ;DOJ EPF             ;Date          ;DataClassification=ToBeClassified }
    { 50009;  ;DOJ EPS             ;Date          ;DataClassification=ToBeClassified }
    { 50010;  ;Date of Exit EPF    ;Date          ;DataClassification=ToBeClassified }
    { 50011;  ;Date of Exit EPS    ;Date          ;DataClassification=ToBeClassified }
    { 50012;  ;Nominee Name        ;Text50        ;DataClassification=ToBeClassified }
    { 50013;  ;International Worker;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=Y,N;
                                                   OptionString=Y,N }
    { 50102;  ;Class Handled       ;Text30        ;DataClassification=ToBeClassified }
    { 50200;  ;Relationship With the Member;Option;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=F,S;
                                                   OptionString=F,S }
    { 50201;  ;Reason for Leaving  ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,Cessation,Superannuation,Retirement,Death in Service,Permanent Disablement";
                                                   OptionString=[ ,Cessation,Superannuation,Retirement,Death in Service,Permanent Disablement] }
    { 51000;  ;Class From          ;Code10        ;TableRelation=Class;
                                                   OnValidate=VAR
                                                                RecNewEMp@1102155000 : Record 71091;
                                                              BEGIN
                                                                RecNewEMp.RESET;
                                                                RecNewEMp.SETRANGE("Employee No.","No.");
                                                                RecNewEMp.SETRANGE("Company Name",COMPANYNAME);
                                                                IF RecNewEMp.FINDFIRST THEN
                                                                BEGIN
                                                                  RecNewEMp."Class From" := "Class From";
                                                                  RecNewEMp.MODIFY;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 51001;  ;Class To            ;Code10        ;TableRelation=Class;
                                                   OnValidate=VAR
                                                                RecNewEMp@1102155000 : Record 71091;
                                                              BEGIN
                                                                RecNewEMp.RESET;
                                                                RecNewEMp.SETRANGE("Employee No.","No.");
                                                                RecNewEMp.SETRANGE("Company Name",COMPANYNAME);
                                                                IF RecNewEMp.FINDFIRST THEN
                                                                BEGIN
                                                                  RecNewEMp."Class To" := "Class To";
                                                                  RecNewEMp.MODIFY;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 70121;  ;Employee Image File ;Text250       ;OnValidate=BEGIN
                                                                RecNewEmp.SETRANGE("Employee No.","No.");
                                                                RecNewEmp.SETRANGE("Company Name",COMPANYNAME);
                                                                IF RecNewEmp.FINDFIRST THEN BEGIN
                                                                  // >> SJ6.01
                                                                  //RecNewEmp.INIT;
                                                                  //RecNewEmp."Employee No." := "No.";
                                                                  //RecNewEmp."Company Name" := COMPANYNAME;
                                                                  // << SJ6.01

                                                                  RecNewEmp.Name := "First Name";
                                                                  RecNewEmp."Employee Category" := "Employee Category";
                                                                  RecNewEmp.Gender := Gender;
                                                                  RecNewEmp."Employee Image File" := "Employee Image File";
                                                                  RecNewEmp."Employment Date" := "Employment Date";

                                                                  RecNewEmp.MODIFY;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Employee Image File }
    { 70122;  ;Employee Type       ;Option        ;OnValidate=VAR
                                                                RecEmpnew@1102155000 : Record 71091;
                                                              BEGIN
                                                                RecNewEmp.RESET;
                                                                RecNewEmp.SETRANGE("Employee No.","No.");
                                                                RecNewEmp.SETRANGE("Company Name",COMPANYNAME);
                                                                IF RecNewEmp.FINDFIRST THEN
                                                                BEGIN
                                                                  RecNewEmp."Employee Type" := "Employee Type";
                                                                  RecNewEmp.MODIFY;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Employee Type;
                                                   OptionCaptionML=ENU=" ,Teaching,Non-Teaching,HOD,Principal,Sub Staff,HM";
                                                   OptionString=[ ,Teaching,Non-Teaching,HOD,Principal,Sub Staff,HM] }
    { 70123;  ;Department          ;Code20        ;TableRelation=Department;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Department }
    { 71120;  ;Working Shift Code  ;Code20        ;TableRelation=Shift.Code WHERE (Location Code=FIELD(Location Code),
                                                                                   Salary Plan Code=FIELD(Salary Plan Code));
                                                   DataClassification=ToBeClassified }
    { 71121;  ;Driving Licence No  ;Code20        ;DataClassification=ToBeClassified }
    { 71122;  ;Driving Expiry Date ;Date          ;DataClassification=ToBeClassified }
    { 71123;  ;Passport No         ;Code20        ;DataClassification=ToBeClassified }
    { 71124;  ;Passport Expiry Date;Date          ;DataClassification=ToBeClassified }
    { 71125;  ;Voter ID No         ;Code20        ;DataClassification=ToBeClassified }
    { 71126;  ;PAN No              ;Code20        ;DataClassification=ToBeClassified }
    { 71127;  ;PF No               ;Code20        ;DataClassification=ToBeClassified }
    { 71128;  ;ESI No              ;Code20        ;DataClassification=ToBeClassified }
    { 71129;  ;ESI Dispensary Location;Text50     ;DataClassification=ToBeClassified }
    { 71130;  ;Payment Method      ;Option        ;DataClassification=ToBeClassified;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 71131;  ;Bank Code           ;Code10        ;DataClassification=ToBeClassified }
    { 71132;  ;Bank Name           ;Code50        ;DataClassification=ToBeClassified }
    { 71133;  ;Bank Branch         ;Code50        ;DataClassification=ToBeClassified }
    { 71134;  ;Account Type        ;Text30        ;DataClassification=ToBeClassified }
    { 71135;  ;Account No          ;Code20        ;DataClassification=ToBeClassified }
    { 71136;  ;Father's / Husband  Name;Text50    ;DataClassification=ToBeClassified }
    { 71137;  ;Spouse Name         ;Text50        ;DataClassification=ToBeClassified }
    { 71138;  ;Spouse Education    ;Text50        ;DataClassification=ToBeClassified }
    { 71139;  ;Marital Status      ;Boolean       ;DataClassification=ToBeClassified }
    { 71140;  ;Marriage Date       ;Date          ;DataClassification=ToBeClassified }
    { 71141;  ;No of Children      ;Integer       ;DataClassification=ToBeClassified }
    { 71142;  ;Blood Donar         ;Boolean       ;DataClassification=ToBeClassified }
    { 71143;  ;Blood Group         ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,A+,A-,B+,B-,AB+,AB-,O+,O-,A1+,A1-";
                                                   OptionString=[ ,A+,A-,B+,B-,AB+,AB-,O+,O-,A1+,A1-] }
    { 71144;  ;Nationality         ;Text50        ;DataClassification=ToBeClassified }
    { 71145;  ;Religion            ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,Hindu,Muslim,Christian";
                                                   OptionString=[ ,Hindu,Muslim,Christian] }
    { 71146;  ;Caste               ;Text50        ;DataClassification=ToBeClassified }
    { 71147;  ;Date of Joining     ;Date          ;DataClassification=ToBeClassified }
    { 71148;  ;Date of Confirmation;Date          ;DataClassification=ToBeClassified }
    { 71149;  ;Retirement Type     ;Option        ;DataClassification=ToBeClassified;
                                                   OptionString=[ ,VRS,Family Pension,Pension] }
    { 71150;  ;Accommodation       ;Boolean       ;DataClassification=ToBeClassified }
    { 71151;  ;Accommodation Type  ;Option        ;DataClassification=ToBeClassified;
                                                   OptionString=[ ,Residential,Company Quaters] }
    { 71152;  ;Quarter No          ;Code20        ;DataClassification=ToBeClassified }
    { 71153;  ;Grade Code          ;Code20        ;TableRelation=Grades."Grade Code" WHERE (Location Code=FIELD(Location Code),
                                                                                            Salary Plan Code=FIELD(Salary Plan Code));
                                                   OnValidate=BEGIN
                                                                "Insert Pay Elements";
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 71154;  ;PF Applicable       ;Boolean       ;DataClassification=ToBeClassified }
    { 71155;  ;EPS Applicable      ;Boolean       ;DataClassification=ToBeClassified }
    { 71156;  ;VPF Applicable      ;Boolean       ;DataClassification=ToBeClassified }
    { 71157;  ;ESI Applicable      ;Boolean       ;DataClassification=ToBeClassified }
    { 71158;  ;PT Applicable       ;Boolean       ;DataClassification=ToBeClassified }
    { 71159;  ;LWF Applicable      ;Boolean       ;DataClassification=ToBeClassified }
    { 71160;  ;OT Applicable       ;Boolean       ;DataClassification=ToBeClassified }
    { 71161;  ;Leave Encashment Applicable;Boolean;DataClassification=ToBeClassified }
    { 71162;  ;Bonus Applicable    ;Boolean       ;DataClassification=ToBeClassified }
    { 71163;  ;Gratuity Applicable ;Boolean       ;DataClassification=ToBeClassified }
    { 71164;  ;Probationary        ;Boolean       ;DataClassification=ToBeClassified }
    { 71165;  ;Emp Posting Group   ;Code20        ;TableRelation="Payroll Employee Posting Group".Code WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code));
                                                   DataClassification=ToBeClassified }
    { 71166;  ;Pay Bus. Posting Group;Code20      ;TableRelation="Payroll Business Posting Group".Code WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code));
                                                   DataClassification=ToBeClassified }
    { 71167;  ;PT Branch Code      ;Code20        ;TableRelation="Professional Tax Header"."Branch Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                Salary Plan Code=FIELD(Salary Plan Code));
                                                   DataClassification=ToBeClassified }
    { 71168;  ;Stop Payment        ;Boolean       ;DataClassification=ToBeClassified }
    { 71169;  ;Blocked             ;Boolean       ;DataClassification=ToBeClassified }
    { 71170;  ;Mail Send To HR     ;Boolean       ;DataClassification=ToBeClassified;
                                                   Editable=Yes }
    { 71171;  ;Current Status      ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU="Current Employee,Retirement,Job Resigned,Terminated,Death,Transfer, ";
                                                   OptionString=[Current Employee,Retirement,Job Resigned,Terminated,Death,Transfer, ] }
    { 71172;  ;Date of Relieving   ;Date          ;DataClassification=ToBeClassified }
    { 71173;  ;Final Settlement Over;Boolean      ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 71174;  ;Designation Code    ;Code20        ;TableRelation=Designation;
                                                   DataClassification=ToBeClassified }
    { 71175;  ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   DataClassification=ToBeClassified }
    { 71176;  ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   DataClassification=ToBeClassified }
    { 71177;  ;Over Time Multiplier;Decimal       ;DataClassification=ToBeClassified }
    { 71178;  ;PF Enrollment Date  ;Date          ;DataClassification=ToBeClassified }
    { 71179;  ;Employee VPF ( Employee) %;Decimal ;DataClassification=ToBeClassified }
    { 71180;  ;Attendance Generated;Boolean       ;DataClassification=ToBeClassified }
    { 71181;  ;Leave Generated     ;Boolean       ;DataClassification=ToBeClassified }
    { 71182;  ;Scale of Pay        ;Text50        ;DataClassification=ToBeClassified }
    { 71183;  ;Non Teaching / Teaching;Option     ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,Non Teaching,Teaching";
                                                   OptionString=[ ,Non Teaching,Teaching] }
    { 71184;  ;CVAttachment1       ;Text50        ;DataClassification=ToBeClassified }
    { 71185;  ;CVAttachment2       ;Text50        ;DataClassification=ToBeClassified }
    { 71186;  ;OT Type             ;Option        ;OnValidate=BEGIN
                                                                IF "OT Type" = "OT Type"::"Fixed Amount" THEN
                                                                   "Over Time Multiplier" := 0;

                                                                IF "OT Type" = "OT Type"::"Hourly Based" THEN
                                                                   "OT Fixed Amount" := 0;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,Fixed Amount,Hourly Based,Per Daily Amount  ";
                                                   OptionString=[ ,Fixed Amount,Hourly Based,Per Daily Amount  ] }
    { 71187;  ;OT Fixed Amount     ;Decimal       ;DataClassification=ToBeClassified }
    { 71188;  ;Attendance Bonus Applicable;Boolean;DataClassification=ToBeClassified }
    { 71189;  ;Attendance Bonus Amount;Decimal    ;DataClassification=ToBeClassified }
    { 71190;  ;Salary Advance      ;Decimal       ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 71191;  ;Credit Days Applicable;Boolean     ;DataClassification=ToBeClassified }
    { 71192;  ;Insurance Applicable;Boolean       ;DataClassification=ToBeClassified }
    { 71193;  ;Medical Reimbu. Applicable;Boolean ;DataClassification=ToBeClassified }
    { 71194;  ;Calc. Based on Gross Amount;Boolean;OnValidate=BEGIN
                                                                "Calc. Based on Daily Wages" := FALSE;
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 71195;  ;Calc. Based on Daily Wages;Boolean ;OnValidate=BEGIN
                                                                "Calc. Based on Gross Amount" := FALSE;
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 71196;  ;Employee Category   ;Option        ;OnValidate=BEGIN
                                                                IF "Employee Category" = "Employee Category"::"Staff Permanent" THEN BEGIN
                                                                   "ESI Applicable" := FALSE;
                                                                   "PF Applicable"  := TRUE;
                                                                   "EPS Applicable" := TRUE;
                                                                   "VPF Applicable" := FALSE;
                                                                   "PT Applicable"  := TRUE;
                                                                   "LWF Applicable" := TRUE;
                                                                   "OT Applicable"  := FALSE;
                                                                   "Leave Encashment Applicable" := FALSE;
                                                                   "Bonus Applicable" := FALSE;
                                                                   "Gratuity Applicable" := FALSE;
                                                                   "Calc. Based on Gross Amount" := FALSE;
                                                                   "Calc. Based on Daily Wages" := FALSE;
                                                                   "Weekly Off Cut" := FALSE;
                                                                   "Weekly Off / Holiday Cut" := FALSE;
                                                                   "Layoff Applicable" := FALSE;
                                                                   "Attendance Bonus Applicable" := FALSE;
                                                                   "Attendance Bonus Amount" := 0;
                                                                   "Extra Allowance Applicable" := FALSE;
                                                                END;

                                                                IF "Employee Category" = "Employee Category"::"Staff Temporary" THEN BEGIN
                                                                   "ESI Applicable" := FALSE;
                                                                   "PF Applicable"  := FALSE;
                                                                   "EPS Applicable" := FALSE;
                                                                   "VPF Applicable" := FALSE;
                                                                   "PT Applicable"  := FALSE;
                                                                   "LWF Applicable" := FALSE;
                                                                   "OT Applicable"  := FALSE;
                                                                   "Leave Encashment Applicable" := FALSE;
                                                                   "Bonus Applicable"   := FALSE;
                                                                   "Gratuity Applicable" := FALSE;
                                                                   "Calc. Based on Gross Amount" := FALSE;
                                                                   "Calc. Based on Daily Wages" := FALSE;
                                                                   "Weekly Off Cut" := FALSE;
                                                                   "Weekly Off / Holiday Cut" := FALSE;
                                                                   "Layoff Applicable" := FALSE;
                                                                   "Attendance Bonus Applicable" := FALSE;
                                                                   "Attendance Bonus Amount" := 0;
                                                                   "Extra Allowance Applicable" := FALSE;
                                                                END;

                                                                IF "Employee Category" = "Employee Category"::"Class IV Permanent" THEN BEGIN
                                                                   "ESI Applicable" := FALSE;
                                                                   "PF Applicable"  := TRUE;
                                                                   "EPS Applicable" := TRUE;
                                                                   "VPF Applicable" := FALSE;
                                                                   "PT Applicable"  := TRUE;
                                                                   "LWF Applicable" := TRUE;
                                                                   "OT Applicable"  := FALSE;
                                                                   "OT Type" := "OT Type"::"Hourly Based";
                                                                   "Over Time Multiplier" := 1;
                                                                   "Leave Encashment Applicable" := FALSE;
                                                                   "Bonus Applicable"   := FALSE;
                                                                   "Gratuity Applicable" := FALSE;
                                                                   "Calc. Based on Gross Amount" := FALSE;
                                                                   "Calc. Based on Daily Wages" := FALSE;
                                                                   "Weekly Off Cut" := FALSE;
                                                                   "Weekly Off / Holiday Cut" := FALSE;
                                                                   "Layoff Applicable" := FALSE;
                                                                   "Attendance Bonus Applicable" := FALSE;
                                                                   "Attendance Bonus Amount" := 0;
                                                                   "Extra Allowance Applicable" := FALSE;
                                                                END;

                                                                IF "Employee Category" = "Employee Category"::"Class IV Temporary" THEN BEGIN
                                                                   "ESI Applicable" := FALSE;
                                                                   "PF Applicable"  := FALSE;
                                                                   "EPS Applicable" := FALSE;
                                                                   "VPF Applicable" := FALSE;
                                                                   "PT Applicable"  := FALSE;
                                                                   "LWF Applicable" := FALSE;
                                                                   "OT Applicable"  := FALSE;
                                                                   "OT Type" := "OT Type"::"Hourly Based";
                                                                   "Over Time Multiplier" := 1;
                                                                   "Leave Encashment Applicable" := FALSE;
                                                                   "Bonus Applicable"   := FALSE;
                                                                   "Gratuity Applicable" := FALSE;
                                                                   "Calc. Based on Gross Amount" := FALSE;
                                                                   "Calc. Based on Daily Wages" := FALSE;
                                                                   "Weekly Off Cut" := FALSE;
                                                                   "Weekly Off / Holiday Cut" := FALSE;
                                                                   "Layoff Applicable" := FALSE;
                                                                   "Attendance Bonus Applicable" := FALSE;
                                                                   "Attendance Bonus Amount" := 0;
                                                                   "Extra Allowance Applicable" := FALSE;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 71200;  ;Hourly Rated Employee;Boolean      ;DataClassification=ToBeClassified }
    { 71201;  ;Payment Salary Plan ;Code20        ;TableRelation="Salary Plan";
                                                   DataClassification=ToBeClassified }
    { 71202;  ;Division Code       ;Code10        ;TableRelation=Divisions.Code;
                                                   DataClassification=ToBeClassified }
    { 71203;  ;Division Name       ;Text50        ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 71204;  ;Department Code     ;Code10        ;TableRelation=Departments.Code;
                                                   DataClassification=ToBeClassified }
    { 71205;  ;Department Name     ;Text50        ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 71206;  ;Section Code        ;Code10        ;TableRelation=Sections.Code;
                                                   DataClassification=ToBeClassified }
    { 71207;  ;Section Name        ;Text50        ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 71208;  ;Weekly Off Cut      ;Boolean       ;DataClassification=ToBeClassified }
    { 71209;  ;Weekly Off / Holiday Cut;Boolean   ;DataClassification=ToBeClassified }
    { 71210;  ;Layoff Applicable   ;Boolean       ;DataClassification=ToBeClassified }
    { 71211;  ;Extra Allowance Applicable;Boolean ;DataClassification=ToBeClassified }
    { 71212;  ;Multiple Punch Required;Boolean    ;DataClassification=ToBeClassified }
    { 71213;  ;Metro / Non Metro   ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=Metro,Non Metro;
                                                   OptionString=Metro,Non Metro }
    { 71214;  ;Filter Employee     ;Boolean       ;DataClassification=ToBeClassified }
    { 71215;  ;Make Default Punch  ;Boolean       ;DataClassification=ToBeClassified }
    { 71216;  ;Additional Duties 1 ;Text250       ;DataClassification=ToBeClassified }
    { 71217;  ;Additional Duties 2 ;Text250       ;DataClassification=ToBeClassified }
    { 71218;  ;UAN No.             ;Text30        ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Status,Union Code                        }
    {    ;Status,Emplymt. Contract Code            }
    {    ;Last Name,First Name,Middle Name         }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,First Name,Last Name,Initials,Job Title }
    { 2   ;Brick               ;Last Name,First Name,Job Title,Image     }
  }
  CODE
  {
    VAR
      HumanResSetup@1000 : Record 5218;
      Res@1002 : Record 156;
      PostCode@1003 : Record 225;
      AlternativeAddr@1004 : Record 5201;
      EmployeeQualification@1005 : Record 5203;
      Relative@1006 : Record 5205;
      EmployeeAbsence@1007 : Record 5207;
      MiscArticleInformation@1008 : Record 5214;
      ConfidentialInformation@1009 : Record 5216;
      HumanResComment@1010 : Record 5208;
      SalespersonPurchaser@1011 : Record 13;
      NoSeriesMgt@1012 : Codeunit 396;
      EmployeeResUpdate@1013 : Codeunit 5200;
      EmployeeSalespersonUpdate@1014 : Codeunit 5201;
      DimMgt@1015 : Codeunit 408;
      Text000@1016 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      BlockedEmplForJnrlErr@1001 : TextConst '@@@="%1 = employee no.";ENU=You cannot create this document because employee %1 is blocked due to privacy.;ENN=You cannot create this document because employee %1 is blocked due to privacy.';
      BlockedEmplForJnrlPostingErr@1017 : TextConst '@@@="%1 = employee no.";ENU=You cannot post this document because employee %1 is blocked due to privacy.;ENN=You cannot post this document because employee %1 is blocked due to privacy.';
      EmployeeLinkedToResourceErr@1018 : TextConst '@@@="%1 = employee no.";ENU=You cannot link multiple employees to the same resource. Employee %1 is already linked to that resource.;ENN=You cannot link multiple employees to the same resource. Employee %1 is already linked to that resource.';
      RecNewEmp@1000000000 : Record 71091;

    [External]
    PROCEDURE AssistEdit@2() : Boolean;
    BEGIN
      HumanResSetup.GET;
      HumanResSetup.TESTFIELD("Employee Nos.");
      IF NoSeriesMgt.SelectSeries(HumanResSetup."Employee Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE FullName@1() : Text[100];
    VAR
      NewFullName@1000 : Text[100];
      Handled@1001 : Boolean;
    BEGIN
      OnBeforeGetFullName(Rec,NewFullName,Handled);
      IF Handled THEN
        EXIT(NewFullName);

      IF "Middle Name" = '' THEN
        EXIT("First Name" + ' ' + "Last Name");

      EXIT("First Name" + ' ' + "Middle Name" + ' ' + "Last Name");
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::Employee,"No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Employee,GETPOSITION)
      ELSE
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE UpdateSearchName@4();
    VAR
      PrevSearchName@1000 : Code[250];
    BEGIN
      PrevSearchName := xRec.FullName + ' ' + xRec.Initials;
      IF ((("First Name" <> xRec."First Name") OR ("Middle Name" <> xRec."Middle Name") OR ("Last Name" <> xRec."Last Name") OR
           (Initials <> xRec.Initials)) AND ("Search Name" = PrevSearchName))
      THEN
        "Search Name" := SetSearchNameToFullnameAndInitials;
    END;

    LOCAL PROCEDURE SetSearchNameToFullnameAndInitials@3() : Code[250];
    BEGIN
      EXIT(FullName + ' ' + Initials);
    END;

    [External]
    PROCEDURE GetBankAccountNo@5() : Text;
    BEGIN
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    [External]
    PROCEDURE CheckBlockedEmployeeOnJnls@8(IsPosting@1000 : Boolean);
    BEGIN
      IF IsOnBeforeCheckBlockedEmployeeHandled(IsPosting) THEN
        EXIT;
      IF "Privacy Blocked" THEN BEGIN
        IF IsPosting THEN
          ERROR(BlockedEmplForJnrlPostingErr,"No.");
        ERROR(BlockedEmplForJnrlErr,"No.")
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetFullName@6(Employee@1000 : Record 5200;VAR NewFullName@1001 : Text[100];VAR Handled@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE CheckIfAnEmployeeIsLinkedToTheResource@10(ResourceNo@1000 : Code[20]);
    VAR
      Employee@1001 : Record 5200;
    BEGIN
      Employee.SETFILTER("No.",'<>%1',"No.");
      Employee.SETRANGE("Resource No.",ResourceNo);
      IF Employee.FINDFIRST THEN
        ERROR(EmployeeLinkedToResourceErr,Employee."No.");
    END;

    LOCAL PROCEDURE IsOnBeforeCheckBlockedEmployeeHandled@9(IsPosting@1000 : Boolean) IsHandled : Boolean;
    BEGIN
      OnBeforeCheckBlockedEmployee(Rec,IsPosting,IsHandled);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBlockedEmployee@11(Employee@1000 : Record 5200;IsPosting@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    PROCEDURE "Insert Pay Elements"@1000000000();
    VAR
      GradeElements@1000000001 : Record 72062;
      EmployeePayElements@1000000000 : Record 72078;
      Grade@1102159000 : Record 72061;
    BEGIN
      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code",   "Location Code");
      EmployeePayElements.SETRANGE("Salary Plan Code","Salary Plan Code");
      EmployeePayElements.SETRANGE("Employee No", "No.");
      IF EmployeePayElements.FIND('-') THEN

      IF EmployeePayElements.COUNT > 0 THEN BEGIN
         IF NOT CONFIRM('Pay Element already defined for the Employee (Do U Want to Delete Previous Record)',FALSE) THEN
            EXIT
         ELSE
            EmployeePayElements.DELETEALL;
       END;

       GradeElements.RESET;
       GradeElements.SETRANGE("Location Code",   "Location Code");
       GradeElements.SETRANGE("Salary Plan Code","Salary Plan Code");
       GradeElements.SETRANGE("Grade Code",      "Grade Code");
       IF GradeElements.FIND('-') THEN BEGIN

          IF GradeElements.COUNT < 1 THEN
             MESSAGE('%1','Pay Element not defined in Grade Pay Element');

         REPEAT
           EmployeePayElements.INIT;
           EmployeePayElements."Location Code"           := "Location Code";
           EmployeePayElements."Salary Plan Code"        := "Salary Plan Code";
           EmployeePayElements."Effective Date"          := GradeElements."Effective Date";
           EmployeePayElements."Pay Element Code"        := GradeElements."Pay Element Code";
           EmployeePayElements."Employee No"             := "No.";
           EmployeePayElements.Description               := GradeElements.Description;
           EmployeePayElements."Pay Type"                := GradeElements."Pay Type";
           EmployeePayElements."Fixed/Percent"           := GradeElements."Fixed / Percent";
           EmployeePayElements."Amount Calculation Type" := GradeElements."Amount Calculation Type";
           EmployeePayElements."Base Pay Elements"       := GradeElements."Base Pay Elements";
           EmployeePayElements."Percent (%)"             := GradeElements."Percent (%)";
           EmployeePayElements.Amount                    := GradeElements.Amount;
           EmployeePayElements."Sorting Order"           := GradeElements."Sorting Order";
           IF EmployeePayElements.INSERT THEN;
         UNTIL GradeElements.NEXT = 0;
      END;

      Grade.RESET;
      Grade.SETRANGE("Location Code",   "Location Code");
      Grade.SETRANGE("Salary Plan Code","Salary Plan Code");
      Grade.SETRANGE("Grade Code",      "Grade Code");
      IF Grade.FIND('-') THEN
      BEGIN
         "Scale of Pay"        := Grade."Scale of Pay";
         "PF Applicable"       := Grade."PF Applicable";
         "EPS Applicable"      := Grade."EPS Applicable";
         "VPF Applicable"      := Grade."VPF Applicable";
         "ESI Applicable"      := Grade."ESI Applicable";
         "PT Applicable"       := Grade."PT Applicable";
         "LWF Applicable"      := Grade."LWF Applicable";
         "OT Applicable"       := Grade."OT Applicable";
         "Leave Encashment Applicable" := Grade."Leave Encashment Applicable";
         "Bonus Applicable"    := Grade."Bonus Applicable";
         "Gratuity Applicable" := Grade."Gratuity Applicable";
         "PT Branch Code"      := Grade."PT Branch Code";
         "Over Time Multiplier" := Grade."Over Time Multiplier";
         "Employee VPF ( Employee) %" := Grade."Employee VPF ( Employee) %";
      END;
    END;

    PROCEDURE "Delete Resigned Employee"@1102155000();
    VAR
      DailyAttendance@1000000000 : Record 72080;
      MonthlyAttendance@1000000001 : Record 72082;
      ProcessedSalary@1000000002 : Record 72090;
    BEGIN
      IF NOT CONFIRM('Are you sure, Do you Want to delete all the Attendance Details <Yes/No>...',FALSE) THEN
         EXIT;

      IF "Date of Relieving" <> 0D THEN BEGIN
         IF "Current Status" = "Current Status"::"Current Employee" THEN
             ERROR('Please Change the Current status as Retirement/Resigned/Terminated/Death');
      END;

      IF "Date of Relieving" <> 0D THEN BEGIN
         Status          := Status::Inactive;
         "Inactive Date" := "Date of Relieving";
      END;

      IF "Date of Relieving" = 0D THEN BEGIN
         Status          := Status::Active;
         "Inactive Date" := 0D;
      END;

      IF "Date of Relieving" <> 0D THEN BEGIN
           DailyAttendance.RESET;
           DailyAttendance.SETRANGE("Location Code", "Location Code");
           DailyAttendance.SETRANGE("Salary Plan Code","Salary Plan Code");
           DailyAttendance.SETRANGE("Employee No","No.");
           DailyAttendance.SETFILTER("Attendance Date",'>%1',"Date of Relieving");
           IF DailyAttendance.FIND('-') THEN
              DailyAttendance.DELETEALL;

           MonthlyAttendance.RESET;
           MonthlyAttendance.SETRANGE("Location Code","Location Code");
           MonthlyAttendance.SETRANGE("Salary Plan Code","Salary Plan Code");
           MonthlyAttendance.SETRANGE("Employee No","No.");
           MonthlyAttendance.SETFILTER(Month,'>%1',DATE2DMY("Date of Relieving",2));
           MonthlyAttendance.SETFILTER(Year, '>=%1',DATE2DMY("Date of Relieving",3));
           IF MonthlyAttendance.FIND('-') THEN
              MonthlyAttendance.DELETEALL;

           MonthlyAttendance.RESET;
           MonthlyAttendance.SETRANGE("Location Code","Location Code");
           MonthlyAttendance.SETRANGE("Salary Plan Code","Salary Plan Code");
           MonthlyAttendance.SETRANGE("Employee No","No.");
           MonthlyAttendance.SETFILTER(Year,'>%1', DATE2DMY("Date of Relieving",3));
           IF MonthlyAttendance.FIND('-') THEN
              MonthlyAttendance.DELETEALL;

           ProcessedSalary.RESET;
           ProcessedSalary.SETRANGE("Location Code","Location Code");
           ProcessedSalary.SETRANGE("Salary Plan Code","Salary Plan Code");
           ProcessedSalary.SETRANGE("Employee No","No.");
           ProcessedSalary.SETFILTER(Month, '>%1', DATE2DMY("Date of Relieving",2));
           ProcessedSalary.SETFILTER(Year, '>=%1', DATE2DMY("Date of Relieving",3));
           IF ProcessedSalary.FIND('-') THEN
              ProcessedSalary.DELETEALL;

           ProcessedSalary.RESET;
           ProcessedSalary.SETRANGE("Location Code", "Location Code");
           ProcessedSalary.SETRANGE("Salary Plan Code","Salary Plan Code");
           ProcessedSalary.SETRANGE("Employee No","No.");
           ProcessedSalary.SETFILTER(Year, '>%1', DATE2DMY("Date of Relieving",3));
           IF ProcessedSalary.FIND('-') THEN
              ProcessedSalary.DELETEALL;
      END;
      MESSAGE('Resigned Employee Deleted..!!');
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50010 Fee Structure
{
  OBJECT-PROPERTIES
  {
    Date=21-03-14;
    Time=19:22:00;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
  }
  FIELDS
  {
    { 1   ;   ;Academic Year       ;Code10         }
    { 2   ;   ;From Class          ;Integer        }
    { 3   ;   ;To Class            ;Integer        }
    { 4   ;   ;Fee Code            ;Code20        ;TableRelation="Fee Components";
                                                   OnValidate=BEGIN
                                                                IF FeeComponent.GET("Fee Code") THEN BEGIN
                                                                  "Fee Description" := FeeComponent.Description;
                                                                  "G/L Account":= FeeComponent."G/L Account";
                                                                END;
                                                              END;
                                                               }
    { 5   ;   ;Fee Description     ;Text30         }
    { 6   ;   ;Amount              ;Decimal       ;Editable=Yes }
    { 7   ;   ;Type Of Fees        ;Option        ;OptionCaptionML=ENU=" ,Initial,Term1,Term2";
                                                   OptionString=[ ,Initial,Term1,Term2] }
    { 8   ;   ;Company             ;Code30         }
    { 9   ;   ;G/L Account         ;Code20         }
    { 10  ;   ;Thai                ;Boolean        }
    { 11  ;   ;Group               ;Option        ;OptionCaptionML=ENU=" ,Group A,Group B,Group C,Group D,Group E,Group F";
                                                   OptionString=[ ,Group A,Group B,Group C,Group D,Group E,Group F] }
    { 12  ;   ;Staff Child         ;Boolean        }
    { 13  ;   ;Group Subject       ;Code20        ;TableRelation=Subject }
    { 14  ;   ;Caution Depoit Select;Boolean       }
  }
  KEYS
  {
    {    ;Academic Year,From Class,To Class,Fee Code,Company,Type Of Fees;
                                                   Clustered=Yes }
    {    ;Fee Code                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FeeComponent@1000000000 : Record 71905;

    BEGIN
    END.
  }
}

OBJECT Table 50012 Allocation
{
  OBJECT-PROPERTIES
  {
    Date=24-08-11;
    Time=16:03:47;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Document No         ;Code20        ;Editable=Yes }
    { 2   ;   ;Line No.            ;Integer       ;Editable=No }
    { 3   ;   ;Company             ;Text30        ;TableRelation=Company;
                                                   Editable=Yes }
    { 4   ;   ;Balance             ;Decimal       ;Editable=No }
    { 5   ;   ;Amount              ;Decimal       ;OnValidate=BEGIN

                                                                AllocationRec.RESET;
                                                                AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                AllocationRec.SETFILTER(AllocationRec.Cnt,'<>%1',Cnt);
                                                                IF AllocationRec.FINDSET THEN
                                                                REPEAT
                                                                  Tot:=Tot+AllocationRec.Amount;
                                                                UNTIL AllocationRec.NEXT = 0;

                                                                  GenJnlLineRec.RESET;
                                                                  GenJnlLineRec.SETRANGE(GenJnlLineRec."Document No.","Document No");
                                                                  GenJnlLineRec.SETRANGE(GenJnlLineRec."Line No.","Line No.");
                                                                  IF GenJnlLineRec.FINDFIRST THEN
                                                                  BEGIN
                                                                    IF (Tot + Amount) > GenJnlLineRec."Credit Amount" THEN
                                                                      ERROR('Total Value Exeeds the amount entered in Journal');
                                                                  END;


                                                                    {
                                                                    CASE Cnt OF


                                                                    1  :  BEGIN
                                                                            CLEAR(Tot);
                                                                            AllocationRec.RESET;
                                                                            AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                            AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                            AllocationRec.SETFILTER(AllocationRec.Cnt,'<>%1',Cnt);
                                                                            IF AllocationRec.FINDSET THEN
                                                                            REPEAT
                                                                              Tot:=Tot+AllocationRec.Amount;
                                                                            UNTIL AllocationRec.NEXT = 0;
                                                                           // IF Tot+Amount- > GenJnlLineRec."Credit Amount" THEN
                                                                            //  ERROR('Total Value Exeeds the amount entered in Journal')
                                                                          //  ELSE
                                                                            BEGIN
                                                                              AllocationRec.RESET;
                                                                              AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                              AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                              AllocationRec.SETRANGE(AllocationRec.Cnt,2);
                                                                              IF AllocationRec.FINDFIRST THEN
                                                                              BEGIN
                                                                                 Temp:=Tot-AllocationRec.Amount-xRec.Amount;


                                                                               // MESSAGE('%1',GenJnlLineRec."Credit Amount" - Tot);
                                                                              //  EXIT;
                                                                               // MESSAGE('%1',AllocationRec.Amount);
                                                                                AllocationRec.Amount:=  GenJnlLineRec."Credit Amount" - (Temp + Amount) ;
                                                                   //             MESSAGE('%1',AllocationRec.Amount);
                                                                                AllocationRec.MODIFY;
                                                                              END;

                                                                            END;

                                                                          END;

                                                                    2  :  BEGIN
                                                                            AllocationRec.RESET;
                                                                            AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                            AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                            AllocationRec.SETFILTER(AllocationRec.Cnt,'<>%1',Cnt);
                                                                            IF AllocationRec.FINDSET THEN
                                                                            REPEAT
                                                                              Tot:=Tot+AllocationRec.Amount;
                                                                            UNTIL AllocationRec.NEXT = 0;
                                                                            IF Tot+Amount > GenJnlLineRec."Credit Amount" THEN
                                                                              ERROR('Total Value Exeeds the amount entered in Journal')
                                                                            ELSE
                                                                            BEGIN
                                                                              AllocationRec.RESET;
                                                                              AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                              AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                              AllocationRec.SETRANGE(AllocationRec.Cnt,3);
                                                                              IF AllocationRec.FINDFIRST THEN
                                                                              BEGIN
                                                                                AllocationRec.Amount:=  GenJnlLineRec."Credit Amount" - Tot;
                                                                                AllocationRec.MODIFY;
                                                                              END;

                                                                            END;


                                                                          END;

                                                                    3  :  BEGIN
                                                                            AllocationRec.RESET;
                                                                            AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                            AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                            AllocationRec.SETFILTER(AllocationRec.Cnt,'<>%1',Cnt);
                                                                            IF AllocationRec.FINDSET THEN
                                                                            REPEAT
                                                                              Tot:=Tot+AllocationRec.Amount;
                                                                            UNTIL AllocationRec.NEXT = 0;
                                                                            IF Tot+Amount > GenJnlLineRec."Credit Amount" THEN
                                                                              ERROR('Total Value Exeeds the amount entered in Journal')
                                                                            ELSE
                                                                            BEGIN
                                                                              AllocationRec.RESET;
                                                                              AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                              AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                              AllocationRec.SETRANGE(AllocationRec.Cnt,4);
                                                                              IF AllocationRec.FINDFIRST THEN
                                                                              BEGIN
                                                                                AllocationRec.Amount:=  GenJnlLineRec."Credit Amount" - Tot;
                                                                                AllocationRec.MODIFY;
                                                                              END;

                                                                            END;

                                                                           END;

                                                                    4  :  BEGIN
                                                                            AllocationRec.RESET;
                                                                            AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                            AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                            AllocationRec.SETFILTER(AllocationRec.Cnt,'<>%1',Cnt);
                                                                            IF AllocationRec.FINDSET THEN
                                                                            REPEAT
                                                                              Tot:=Tot+AllocationRec.Amount;
                                                                            UNTIL AllocationRec.NEXT = 0;
                                                                            IF Tot+Amount > GenJnlLineRec."Credit Amount" THEN
                                                                              ERROR('Total Value Exeeds the amount entered in Journal')
                                                                            ELSE
                                                                            BEGIN
                                                                              AllocationRec.RESET;
                                                                              AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                              AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                              AllocationRec.SETRANGE(AllocationRec.Cnt,3);
                                                                              IF AllocationRec.FINDFIRST THEN
                                                                              BEGIN
                                                                                AllocationRec.Amount:=  GenJnlLineRec."Credit Amount" - Tot;
                                                                                AllocationRec.MODIFY;
                                                                              END;

                                                                            END;

                                                                          END;

                                                                    END; // Case




                                                                 }







                                                                  {
                                                                  AllocationRec.RESET;
                                                                  AllocationRec.SETRANGE(AllocationRec."Document No","Document No");
                                                                  AllocationRec.SETRANGE(AllocationRec."Line No.","Line No.");
                                                                  AllocationRec.SETFILTER(AllocationRec.Cnt,'<>%1',Cnt);
                                                                  IF AllocationRec.FINDSET THEN
                                                                  REPEAT
                                                                    Tot:=Tot+AllocationRec.Amount;
                                                                  UNTIL AllocationRec.NEXT = 0;




                                                                  GenJnlLineRec.RESET;
                                                                  GenJnlLineRec.SETRANGE(GenJnlLineRec."Document No.","Document No");
                                                                  GenJnlLineRec.SETRANGE(GenJnlLineRec."Line No.","Line No.");
                                                                  IF GenJnlLineRec.FINDFIRST THEN
                                                                  BEGIN
                                                                    IF (Tot + Amount-xRec.Amount) > GenJnlLineRec."Credit Amount" THEN
                                                                      ERROR('Total Value Exeeds the amount entered in Journal');
                                                                  END;

                                                                  {GenJnlLineRec.RESET;
                                                                  GenJnlLineRec.SETRANGE(GenJnlLineRec."Document No.","Document No");
                                                                  GenJnlLineRec.SETRANGE(GenJnlLineRec."Line No.","Line No.");
                                                                  IF GenJnlLineRec.FINDFIRST THEN
                                                                  BEGIN
                                                                    IF (Tot + Amount-xRec.Amount) < GenJnlLineRec."Credit Amount" THEN

                                                                  END;

                                                                   }
                                                                   }
                                                              END;
                                                               }
    { 6   ;   ;Cnt                 ;Integer        }
    { 7   ;   ;Student No.         ;Code20        ;TableRelation=Customer }
    { 8   ;   ;Type Of Payment     ;Option        ;OptionCaptionML=ENU=" ,Cash,Cheque";
                                                   OptionString=[ ,Cash,Cheque] }
    { 9   ;   ;Posting Date        ;Date           }
  }
  KEYS
  {
    {    ;Document No,Line No.,Company            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AllocationRec@1000000000 : Record 50012;
      Tot@1000000001 : Decimal;
      GenJnlLineRec@1000000002 : Record 81;
      Temp@1000000003 : Decimal;

    BEGIN
    END.
  }
}

OBJECT Table 50035 Competition Values
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer        }
    { 3   ;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No. }
    { 4   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name }
    { 10  ;   ;Student Division    ;Code20        ;TableRelation="Student Division";
                                                   CaptionML=ENU=Student Division;
                                                   Editable=Yes }
    { 12  ;   ;Points              ;Decimal       ;CaptionML=ENU=Points;
                                                   Editable=Yes }
    { 13  ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 21  ;   ;Event Code          ;Code20        ;TableRelation="Event Master" }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Student No.,Student Name,Points          }
    {    ;Student Division,Points                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 60000 Menu
{
  OBJECT-PROPERTIES
  {
    Date=15-06-11;
    Time=13:01:07;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    LookupPageID=Page60001;
    DrillDownPageID=Page60001;
  }
  FIELDS
  {
    { 1   ;   ;Date                ;Date           }
    { 2   ;   ;Campus              ;Option        ;OptionCaptionML=ENU=" ,MontFord,West Brook";
                                                   OptionString=[ ,MontFord,West Brook] }
    { 3   ;   ;Food Time           ;Option        ;OptionCaptionML=ENU=" ,BreakFast,Lunch,Evening Break,Dinner";
                                                   OptionString=[ ,BreakFast,Lunch,Evening Break,Dinner] }
    { 4   ;   ;Menu                ;Text250        }
  }
  KEYS
  {
    {    ;Date,Campus,Food Time                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 60008 ParentInvoiceSetup
{
  OBJECT-PROPERTIES
  {
    Date=10-01-14;
    Time=15:29:11;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;StartDate           ;Date           }
    { 2   ;   ;EndDate             ;Date           }
    { 3   ;   ;Amount              ;Decimal        }
    { 4   ;   ;IsGreaterThan       ;Boolean        }
  }
  KEYS
  {
    {    ;StartDate                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71000 Admission Setup
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VANDHANA
               "User ID" := USERID;
               // Stop 01.VANDHANA
             END;

    CaptionML=ENU=Admission Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Enquiry No.         ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Enquiry No. }
    { 3   ;   ;Application No.     ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Application No. }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 5   ;   ;Appl Cost Method    ;Option        ;CaptionML=ENU=Appl Cost Method;
                                                   OptionCaptionML=ENU=" ,Common,Classwise";
                                                   OptionString=[ ,Common,Classwise] }
    { 6   ;   ;Application Cost    ;Decimal       ;CaptionML=ENU=Application Cost;
                                                   BlankZero=Yes }
    { 7   ;   ;Registration Cost   ;Decimal       ;CaptionML=ENU=Registration Cost;
                                                   BlankZero=Yes }
    { 8   ;   ;Journal Template Name;Code20       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 9   ;   ;Application Sales Batch Name;Code20;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=ENU=Application Sales Batch Name }
    { 10  ;   ;Application Cost Account No.;Code20;TableRelation="G/L Account";
                                                   CaptionML=ENU=Application Cost Account No. }
    { 11  ;   ;Registration Cost Account No.;Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=ENU=Registration Cost Account No. }
    { 12  ;   ;Application Cost Needed;Boolean    ;CaptionML=ENU=Application Cost Needed }
    { 13  ;   ;Registration Cost Needed;Boolean   ;CaptionML=ENU=Registration Cost Needed }
    { 14  ;   ;Admission Year      ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Admission Year }
    { 15  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 16  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 17  ;   ;Student No.         ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Student No. }
    { 21  ;   ;Registration Batch Name;Code20     ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=ENU=Registration Batch Name }
    { 22  ;   ;Application Sales Posting No.;Code20;
                                                   TableRelation="No. Series";
                                                   CaptionML=ENU=Application Sales Posting No. }
    { 23  ;   ;Registration Posting No.;Code20    ;TableRelation="No. Series";
                                                   CaptionML=ENU=Registration Posting No. }
    { 24  ;   ;Evaluation No.      ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Evaluation No. }
    { 25  ;   ;Selection No.       ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Selection No. }
    { 26  ;   ;Application Sale Method;Option     ;CaptionML=ENU=Application Sale Method;
                                                   OptionCaptionML=ENU=" ,Common,Classwise";
                                                   OptionString=[ ,Common,Classwise] }
    { 27  ;   ;Application Sales From;Date        ;CaptionML=ENU=Application Sales From }
    { 28  ;   ;Application Sales To;Date          ;CaptionML=ENU=Application Sales To }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

      No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
      01   17/09/09    Kathir                      Table Created by Kathir
      02   19/10/09    VANDHANA   OnInsert()       Code to assign the User ID.
      03   16.11.09    VIGNESH                     New Fields Application Sale Method, Application Sales from, Application Sales To added
    }
    END.
  }
}

OBJECT Table 71001 Enquiry
{
  OBJECT-PROPERTIES
  {
    Date=01-08-24;
    Time=17:53:09;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR

               AdmSetup.GET;
               IF "No Series" = '' THEN BEGIN
                 AdmSetup.TESTFIELD("Enquiry No.");
                 NoSeriesMgt.InitSeries(AdmSetup."Enquiry No.",xRec."No Series",0D,"No.","No Series");
               END;

               // Stop 01.KATHIR

               // Start 07.KATHIR
               "Academic Year" := EduVert.GetAdmissionYear;
               // Stop 07.KATHIR

               // Start 09.KAHTHIR
               "Enquiry Date" := WORKDATE;
               // Stop 09.KATHIR

               // Start 10.VANDHANA
               "User ID" := USERID;
               // Stop 10.VANDHANA
             END;

    CaptionML=ENU=Enquiry;
    LookupPageID=Page71002;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code10        ;CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Enquiry Gender      ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 4   ;   ;Type Of Enquiry     ;Code10        ;TableRelation="Enquiry Type";
                                                   CaptionML=ENU=Type Of Enquiry }
    { 5   ;   ;Enquiry Source      ;Code10        ;TableRelation="Enquiry Source";
                                                   CaptionML=ENU=Enquiry Source }
    { 6   ;   ;Enquirer Name       ;Text50        ;CaptionML=ENU=Enquirer Name }
    { 7   ;   ;Relationship with Applicant;Text30 ;CaptionML=ENU=Relationship with Applicant }
    { 8   ;   ;Media Vehicle       ;Code20        ;TableRelation="Media Vehicle";
                                                   CaptionML=ENU=Media Vehicle }
    { 9   ;   ;Date of Birth       ;Date          ;OnValidate=BEGIN
                                                                // Stop 19.Ankesh
                                                                IF "Date of Birth" <> 0D THEN BEGIN
                                                                  Age := TODAY - "Date of Birth";
                                                                  TempAge := ROUND(Age / 365,1,'<');
                                                                  Age2 := Age MOD 365;
                                                                  Months := ROUND(Age2 / 30,1,'<');
                                                                  Age := TempAge;
                                                                END
                                                                ELSE BEGIN
                                                                  CLEAR(Age);
                                                                  CLEAR(Months);
                                                                END;
                                                                // Stop 19.Ankesh
                                                              END;

                                                   CaptionML=ENU=Date of Birth }
    { 10  ;   ;Father's Name       ;Text50        ;CaptionML=ENU=Father's Name }
    { 11  ;   ;Mother's Name       ;Text50        ;CaptionML=ENU=Mother's Name }
    { 12  ;   ;Citizenship         ;Code10        ;TableRelation=Citizenship;
                                                   CaptionML=ENU=Citizenship }
    { 13  ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 14  ;   ;Enquiry Date        ;Date          ;CaptionML=ENU=Enquiry Date }
    { 15  ;   ;Class Applied       ;Code10        ;TableRelation="Class Card";
                                                   OnValidate=BEGIN
                                                                // Start 16.VIGNESH
                                                                ClassCardLook.ValidateClass("Class Applied","Curriculum Intrested","Academic Year");
                                                                // Stop 16.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 12.VIGNESH
                                                              ClassCardLook.LookUpClass("Class Applied","Curriculum Intrested","Academic Year");
                                                              // Stop 12.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Class Applied }
    { 16  ;   ;Hostel Accomodation ;Boolean       ;CaptionML=ENU=Hostel Accomodation }
    { 17  ;   ;Name Of The Previous Institute;Text80;
                                                   CaptionML=ENU=Name Of The Previous Institute }
    { 18  ;   ;Medium Of Instruction;Code10       ;TableRelation="Medium of Instruction";
                                                   CaptionML=ENU=Medium Of Instruction }
    { 20  ;   ;Curriculum Intrested;Code10        ;TableRelation="Class Card".Curriculum;
                                                   OnValidate=BEGIN
                                                                // Start 18.VIGNESH
                                                                ClassCardLook.ValidateCurriculum("Class Applied","Curriculum Intrested","Academic Year");
                                                                // Stop 18.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 13.VIGNESH
                                                              ClassCardLook.LookUpCurriculum("Class Applied","Curriculum Intrested","Academic Year");
                                                              // Stop 13.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Curriculum Intrested }
    { 21  ;   ;Class Last Attended ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Class Last Attended }
    { 22  ;   ;Curriculum Followed ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum Followed }
    { 23  ;   ;Address To          ;Code10        ;TableRelation=Relative;
                                                   CaptionML=ENU=Address To }
    { 24  ;   ;Addressee           ;Text50        ;CaptionML=ENU=Addressee }
    { 25  ;   ;Address 1           ;Text50        ;CaptionML=ENU=Address 1 }
    { 26  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 27  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                // Start 02.KATHIR
                                                                //Postcode.ValidateCity(City,"Post Code");
                                                                Postcode.ValidateCity(City,"Post Code",State,"Country Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                // Stop 02.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 03.KATHIR
                                                              //Postcode.LookUpCity(City,"Post Code",TRUE);
                                                              Postcode.LookupPostCode(City,"Post Code",State,"Country Code");
                                                              // Stop 03.KATHIR
                                                            END;

                                                   CaptionML=ENU=City }
    { 28  ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                // Start 04.KATHIR
                                                                //Postcode.ValidatePostCode(City,"Post Code");
                                                                Postcode.ValidatePostCode(City,"Post Code",State,"Country Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                // Stop 04.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 05.KATHIR
                                                              //Postcode.LookUpPostCode(City,"Post Code",TRUE);
                                                              Postcode.LookupPostCode(City,"Post Code",State,"Country Code");
                                                              // Stop 05.KATHIR
                                                            END;

                                                   CaptionML=ENU=Post Code }
    { 29  ;   ;Country Code        ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country Code }
    { 30  ;   ;E-Mail Address      ;Text50        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail Address }
    { 31  ;   ;Mobile Number       ;Text30        ;CaptionML=ENU=Mobile Number }
    { 32  ;   ;Phone Number        ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone Number }
    { 33  ;   ;State               ;Text30        ;CaptionML=ENU=State }
    { 34  ;   ;No Series           ;Code20        ;CaptionML=ENU=No Series }
    { 35  ;   ;Age                 ;Integer       ;CaptionML=ENU=Age;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 36  ;   ;Months              ;Integer       ;CaptionML=ENU=Months;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 38  ;   ;Campaign            ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign }
    { 2000;   ;Address 3           ;Text100       ;CaptionML=ENU=Address 3 }
    { 2001;   ;Enquiry Closed      ;Boolean       ;CaptionML=ENU=Enquiry Closed }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class Applied,Curriculum Intrested,Academic Year }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AdmSetup@1102155000 : Record 71000;
      NoSeriesMgt@1102155001 : Codeunit 396;
      Enquiry@1102155002 : Record 71001;
      Postcode@1102155003 : Record 225;
      EduVert@1000000000 : Codeunit 71880;
      Age2@1102155005 : Decimal;
      TempAge@1102155004 : Decimal;
      ClassCard@1102155006 : Record 71006;
      ClassCardLook@1102155007 : Record 71006;
      Text000@1102155008 : TextConst 'ENU=Age limit exceeded';

    PROCEDURE Assistedit@1102155002(OldEnquiry@1102155000 : Record 71001) : Boolean;
    BEGIN
      // Start 06.KATHIR
      WITH Enquiry DO BEGIN
        Enquiry := Rec;
        AdmSetup.GET;
        AdmSetup.TESTFIELD("Enquiry No.");
        IF NoSeriesMgt.SelectSeries(AdmSetup."Enquiry No.",OldEnquiry."No Series","No Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Enquiry;
          EXIT(TRUE);
        END;
      END;
      // Stop 06.KATHIR
    END;

    BEGIN
    {
         No     Date    Sign     Trigger                          Description
      -----------------------------------------------------------------------------------------------
        01     17/09/09 KATHIR   OnInsert                             Code added for No.Series
        02     17/09/09 KATHIR   City-OnValidate                      Code added for Validate PostCode
        03     17/09/09 KATHIR   City-Onlookup                        Code added for Validate PostCode
        04     17/09/09 KATHIR   PostCode-OnValidate                  Code added for Validate PostCode
        05     17/09/09 KATHIR   PostCode-Onlookup                    Code added for Validate PostCode
        06     17/09/09 KATHIR   AssistEdit                           Code added for No.Series
        07     18/09/09 KATHIR   OnInsert                             Code added for Academic year from Setup
        08     21/09/09 KATHIR   DateOfBirth-OnValidate               Code added to Caluate Age
        09     22/09/09 KATHIR   OnInsert                             Code added to display Workdate in Enquiry date
        10     19/10/09 VANDHANA OnInsert()                           Code to assign the User ID.
        11     16/10/09 VIGNESH  Date of Birth - OnValidate()         Code modified to validate the age based on the setup
        12     23/11/09 VIGNESH  Class Applied - OnLookup()           Code added to get the Look up value for Class & Curriculum
        13     23/11/09 VIGNESH  Curriculum Intrested - OnLookup()    Code added to get the Look up value for Class & Curriculum
        16     23/11/09 VIGNESH  Class Applied - OnValidate()         Code added to get the validate value for Class & Curriculum
        18     23/11/09 VIGNESH  Curriculum Intrested - OnValidate()  Code added to get the Validat value for Class&Curriculum last attend
        19     09/06/10 Ankesh   Date of Birth - OnValidate()         Code modified because of Web Service 'Class Applied' Error.
    }
    END.
  }
}

OBJECT Table 71002 Application
{
  OBJECT-PROPERTIES
  {
    Date=01-08-24;
    Time=17:58:08;
    Modified=Yes;
    Version List=EDU4.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               "Academic Year" := EduVertical.GetAdmissionYear;
               //"Academic Year" := EduVertical.GetAdmissionYear;
               // Stop 01.KATHIR

               // Start 02.KATHIR
               AdmissionSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 AdmissionSetup.TESTFIELD("Application No.");
                 NoSeriesMgt.InitSeries(AdmissionSetup."Application No.",xRec."No.Series",0D,"No.","No.Series");
               END;
               // Stop 02.KATHIR

               // Start 03.KATHIR
               "Date of Sale" := TODAY;
               // Stop 03.KATHIR

               // Start 14. VANDHANA
               "User ID" := USERID;
               // Stop 14. VANDHANA


               "Registration Date":=TODAY;
             END;

    CaptionML=ENU=Application;
    LookupPageID=Page71004;
    DrillDownPageID=Page71004;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 05.KATHIR
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AdmissionSetup.GET;
                                                                  NoSeriesMgt.TestManual(AdmissionSetup."Application No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 05.KATHIR
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name of the pupil   ;Text30        ;OnValidate=VAR
                                                                ContBusRel@1001 : Record 5054;
                                                                Cust@1000 : Record 18;
                                                                Vend@1002 : Record 23;
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Applicant Gender    ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 9   ;   ;Date of Birth       ;Date          ;OnValidate=BEGIN
                                                                // Start 11.VIGNESH
                                                                IF GUIALLOWED THEN BEGIN
                                                                TESTFIELD(Class);
                                                                TESTFIELD("Curriculum Intrested");

                                                                ClassCard.RESET;
                                                                ClassCard.SETRANGE(Class,Class);
                                                                ClassCard.SETRANGE(Curriculum,"Curriculum Intrested");
                                                                ClassCard.SETRANGE(ClassCard."Academic Year","Academic Year");
                                                                IF ClassCard.FINDFIRST THEN BEGIN
                                                                  IF ClassCard."Cut Off Age as on" <> 0D THEN BEGIN
                                                                    IF "Date of Birth" <> 0D THEN BEGIN
                                                                      Age := ClassCard."Cut Off Age as on" - "Date of Birth";
                                                                      TempAge := ROUND(Age / 365,1,'=');
                                                                      Age2 := Age MOD 365;
                                                                      Months := ROUND(Age2 / 30,1,'=');
                                                                      Age := TempAge - 1;
                                                                    END ELSE BEGIN
                                                                      CLEAR(Age);
                                                                      CLEAR(Months);
                                                                    END;
                                                                  END;
                                                                END;
                                                                END;
                                                                // Stop 11.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Date of Birth }
    { 10  ;   ;Father's Name       ;Text100       ;CaptionML=ENU=Father's Name }
    { 11  ;   ;Mother's Name       ;Text100       ;CaptionML=ENU=Mother's Name }
    { 12  ;   ;Citizenship         ;Code20        ;TableRelation=Citizenship;
                                                   CaptionML=ENU=Citizenship }
    { 13  ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 15  ;   ;Class               ;Code10        ;TableRelation="Class Card".Class;
                                                   OnValidate=BEGIN
                                                                IF GUIALLOWED THEN BEGIN
                                                                // Start 16.VIGNESH

                                                                ClassCardLook.ValidateClass(Class,"Curriculum Intrested","Academic Year");
                                                                AdmSetup.GET;
                                                                ClassCard.GET(Class,"Curriculum Intrested","Academic Year");
                                                                // Start 15.VIGNESH
                                                                IF AdmSetup."Application Sale Method" = AdmSetup."Application Sale Method"::Common THEN BEGIN
                                                                  IF (AdmSetup."Application Sales From" <> 0D) AND (AdmSetup."Application Sales To" <> 0D) THEN
                                                                    IF (AdmSetup."Application Sales From" > TODAY) OR (AdmSetup."Application Sales To" < TODAY) THEN
                                                                      ERROR(Text001);
                                                                END ELSE
                                                                  IF AdmSetup."Application Sale Method" = AdmSetup."Application Sale Method"::Classwise THEN BEGIN
                                                                    ClassCard.GET(Class,"Curriculum Intrested","Academic Year");
                                                                    IF (ClassCard."Application Sale From" <> 0D) AND (ClassCard."Application Sale Till" <> 0D) THEN
                                                                      IF (ClassCard."Application Sale From" > TODAY) AND (ClassCard."Application Sale Till" < TODAY) THEN
                                                                        MESSAGE(Text002);
                                                                  END;

                                                                IF AdmSetup."Appl Cost Method" = AdmSetup."Appl Cost Method"::Common THEN BEGIN
                                                                  "Application Cost" := AdmSetup."Application Cost";
                                                                  "Registration Cost" := AdmSetup."Registration Cost";
                                                                END ELSE
                                                                  IF AdmSetup."Appl Cost Method" = AdmSetup."Appl Cost Method"::Classwise THEN BEGIN
                                                                    "Application Cost" := ClassCard."Application Cost";
                                                                    "Registration Cost" := ClassCard."Registration Cost";
                                                                  END;

                                                                // Stop 15.VIGNESH
                                                                // Stop 12.KATHIR

                                                                // Stop 16.VIGNESH
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 17.VIGNESH
                                                              ClassCardLook.LookUpClass(Class,"Curriculum Intrested","Academic Year");
                                                              AdmSetup.GET;
                                                              ClassCard.GET(Class,"Curriculum Intrested","Academic Year");
                                                              IF AdmSetup."Application Sale Method" = AdmSetup."Application Sale Method"::Common THEN BEGIN
                                                                IF (AdmSetup."Application Sales From" <> 0D) AND (AdmSetup."Application Sales To" <> 0D) THEN
                                                                  IF (AdmSetup."Application Sales From" > TODAY) OR (AdmSetup."Application Sales To" < TODAY) THEN
                                                                    ERROR(Text001);
                                                              END ELSE
                                                                IF AdmSetup."Application Sale Method" = AdmSetup."Application Sale Method"::Classwise THEN BEGIN
                                                                  ClassCard.GET(Class,"Curriculum Intrested","Academic Year");
                                                                  IF (ClassCard."Application Sale From" <> 0D) AND (ClassCard."Application Sale Till" <> 0D) THEN
                                                                    IF (ClassCard."Application Sale From" > TODAY) AND (ClassCard."Application Sale Till" < TODAY) THEN
                                                                      MESSAGE(Text002);
                                                                END;

                                                              IF AdmSetup."Appl Cost Method" = AdmSetup."Appl Cost Method"::Common THEN BEGIN
                                                                "Application Cost" := AdmSetup."Application Cost";
                                                                "Registration Cost" := AdmSetup."Registration Cost";
                                                              END ELSE
                                                                IF AdmSetup."Appl Cost Method" = AdmSetup."Appl Cost Method"::Classwise THEN BEGIN
                                                                  "Application Cost" := ClassCard."Application Cost";
                                                                  "Registration Cost" := ClassCard."Registration Cost";
                                                                END;

                                                              // Stop 17.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Class }
    { 16  ;   ;Hostel Acommodation ;Boolean       ;CaptionML=ENU=Hostel Acommodation }
    { 17  ;   ;Previous School     ;Text150       ;CaptionML=ENU=Previous School }
    { 18  ;   ;Medium of Instruction;Code10       ;TableRelation="Medium of Instruction";
                                                   CaptionML=ENU=Medium of Instruction }
    { 19  ;   ;Presently Residing with;Code10     ;TableRelation=Relative;
                                                   CaptionML=ENU=Presently Residing with }
    { 20  ;   ;Curriculum Intrested;Code10        ;TableRelation="Class Card".Curriculum;
                                                   OnValidate=BEGIN
                                                                // Start 18.VIGNESH
                                                                ClassCardLook.ValidateCurriculum(Class,"Curriculum Intrested","Academic Year");
                                                                // Stop 18.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 19.VIGNESH
                                                              ClassCardLook.LookUpCurriculum(Class,"Curriculum Intrested","Academic Year");
                                                              // Stop 19.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Curriculum Intrested }
    { 21  ;   ;Previous Class      ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Previous Class }
    { 22  ;   ;Previous Curriculum ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Previous Curriculum }
    { 23  ;   ;Address To          ;Code20        ;TableRelation=Relative;
                                                   CaptionML=ENU=Address To }
    { 24  ;   ;Addressee           ;Text100       ;CaptionML=ENU=Addressee }
    { 25  ;   ;Address1            ;Text100       ;CaptionML=ENU=Address1 }
    { 26  ;   ;Address2            ;Text100       ;CaptionML=ENU=Address2 }
    { 27  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                // Start 06.KATHIR
                                                                //Postcode.ValidateCity(City,"Post Code");
                                                                Postcode.ValidateCity(City,"Post Code",State,Country,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                // Stop 06.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 07.KATHIR
                                                              //Postcode.LookUpCity(City,"Post Code",TRUE);
                                                              Postcode.LookupPostCode(City,"Post Code",State,Country);
                                                              // Stop 07.KATHIR
                                                            END;

                                                   CaptionML=ENU=City }
    { 28  ;   ;Post Code           ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                // Start 08.KATHIR
                                                                //Postcode.ValidatePostCode(City,"Post Code");
                                                                Postcode.ValidatePostCode(City,"Post Code",State,Country,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                // Stop 08.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 09.KATHIR
                                                              //Postcode.LookUpPostCode(City,"Post Code",TRUE);
                                                              Postcode.LookupPostCode(City,"Post Code",State,Country);
                                                              // Stop 09.KATHIR
                                                            END;

                                                   CaptionML=ENU=Post Code }
    { 29  ;   ;Country             ;Code20        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 30  ;   ;E-Mail Address      ;Text30        ;CaptionML=ENU=E-Mail Address }
    { 31  ;   ;Mobile Number       ;Text30        ;CaptionML=ENU=Mobile Number }
    { 32  ;   ;Phone Number        ;Text30        ;CaptionML=ENU=Phone Number }
    { 33  ;   ;State               ;Text30        ;CaptionML=ENU=State }
    { 37  ;   ;Visa Exp Date       ;Date          ;CaptionML=ENU=Visa Exp Date }
    { 38  ;   ;Passport No.        ;Text20        ;CaptionML=ENU=Passport No. }
    { 39  ;   ;Passport Exp Date   ;Date          ;CaptionML=ENU=Passport Exp Date }
    { 40  ;   ;Visa No.            ;Text20        ;CaptionML=ENU=Visa No. }
    { 49  ;   ;Food Habits         ;Option        ;CaptionML=ENU=Food Habits;
                                                   OptionCaptionML=ENU=" ,Veg,Non Veg";
                                                   OptionString=[ ,Veg,Non Veg] }
    { 50  ;   ;Applicant Image     ;BLOB          ;CaptionML=ENU=Applicant Image }
    { 51  ;   ;Father Image        ;BLOB          ;CaptionML=ENU=Father Image }
    { 52  ;   ;Mother Image        ;BLOB          ;CaptionML=ENU=Mother Image }
    { 53  ;   ;Guardian Image      ;BLOB          ;CaptionML=ENU=Guardian Image }
    { 54  ;   ;Mother's Qualification;Text30      ;CaptionML=ENU=Mother's Qualification }
    { 55  ;   ;Mother's Occupation ;Text30        ;CaptionML=ENU=Mother's Occupation }
    { 56  ;   ;Guardian Name       ;Text100       ;CaptionML=ENU=Guardian Name }
    { 58  ;   ;Application Status  ;Option        ;CaptionML=ENU=Application Status;
                                                   OptionCaptionML=ENU=" ,Sold,Received,Selected,Admitted";
                                                   OptionString=[ ,Sold,Received,Selected,Admitted];
                                                   Editable=Yes }
    { 59  ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 60  ;   ;Promotion Granted   ;Boolean       ;CaptionML=ENU=Promotion Granted }
    { 61  ;   ;Cheque / DD Date    ;Date          ;CaptionML=ENU=Cheque / DD Date }
    { 62  ;   ;Bank Name           ;Text50        ;CaptionML=ENU=Bank Name }
    { 63  ;   ;Date of Sale        ;Date          ;CaptionML=ENU=Date of Sale }
    { 64  ;   ;Date of Receive     ;Date          ;CaptionML=ENU=Date of Receive }
    { 70  ;   ;Father's Occupation ;Text30        ;CaptionML=ENU=Father's Occupation }
    { 71  ;   ;Mother's Annual Income;Decimal     ;CaptionML=ENU=Mother's Annual Income;
                                                   BlankZero=Yes }
    { 72  ;   ;Guardian Qualification;Text30      ;CaptionML=ENU=Guardian Qualification }
    { 73  ;   ;Guardian Occupation ;Text30        ;CaptionML=ENU=Guardian Occupation }
    { 74  ;   ;Guardian Annual Income;Decimal     ;CaptionML=ENU=Guardian Annual Income }
    { 75  ;   ;Applicant Relationship;Code20      ;TableRelation=Relative;
                                                   CaptionML=ENU=Applicant Relationship }
    { 76  ;   ;Enquiry No.         ;Code10        ;TableRelation=Enquiry WHERE (Enquiry Closed=CONST(No));
                                                   OnValidate=BEGIN
                                                                // Start 13.KATHIR
                                                                AdmSetup.GET;
                                                                IF Enquiry.GET("Enquiry No.") THEN BEGIN
                                                                  TRANSFERFIELDS(Enquiry);
                                                                  VALIDATE("Date of Birth");
                                                                //  VALIDATE("Curriculum Intrested");
                                                                  "No." := xRec."No.";
                                                                END;

                                                                // Start 15.VIGNESH
                                                                AdmSetup.GET;
                                                                IF AdmSetup."Application Sale Method" = AdmSetup."Application Sale Method"::Common THEN BEGIN
                                                                  IF (AdmSetup."Application Sales From" <> 0D) AND (AdmSetup."Application Sales To" <> 0D) THEN
                                                                    IF (AdmSetup."Application Sales From" > TODAY) OR (AdmSetup."Application Sales To" < TODAY) THEN
                                                                      ERROR(Text001);
                                                                END ELSE
                                                                  IF AdmSetup."Application Sale Method" = AdmSetup."Application Sale Method"::Classwise THEN BEGIN
                                                                    ClassCard.GET(Class,"Curriculum Intrested","Academic Year");
                                                                    IF (ClassCard."Application Sale From" <> 0D) AND (ClassCard."Application Sale Till" <> 0D) THEN
                                                                      IF (ClassCard."Application Sale From" > TODAY) AND (ClassCard."Application Sale Till" < TODAY) THEN
                                                                        MESSAGE(Text002);
                                                                  END;

                                                                IF AdmSetup."Appl Cost Method" = AdmSetup."Appl Cost Method"::Common THEN BEGIN
                                                                  "Application Cost" := AdmSetup."Application Cost";
                                                                  "Registration Cost" := AdmSetup."Registration Cost";
                                                                END ELSE
                                                                  IF AdmSetup."Appl Cost Method" = AdmSetup."Appl Cost Method"::Classwise THEN BEGIN
                                                                    "Application Cost" := ClassCard."Application Cost";
                                                                    "Registration Cost" := ClassCard."Registration Cost";
                                                                  END;
                                                                // Stop 15.VIGNESH
                                                                // Stop 12.KATHIR
                                                              END;

                                                   CaptionML=ENU=Enquiry No. }
    { 77  ;   ;Religion            ;Code20        ;TableRelation=Religion.Code;
                                                   CaptionML=ENU=Religion }
    { 78  ;   ;Father's Qualification;Text30      ;CaptionML=ENU=Father's Qualification }
    { 79  ;   ;Caste               ;Code20        ;CaptionML=ENU=Caste }
    { 81  ;   ;Age                 ;Integer       ;CaptionML=ENU=Age;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 82  ;   ;Months              ;Integer       ;CaptionML=ENU=Months;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 83  ;   ;Registration Cost   ;Decimal       ;CaptionML=ENU=Registration Cost }
    { 90  ;   ;Mode of Sale        ;Code10        ;TableRelation="Enquiry Type";
                                                   CaptionML=ENU=Mode of Sale }
    { 91  ;   ;Application Cost    ;Decimal       ;CaptionML=ENU=Application Cost;
                                                   BlankZero=Yes;
                                                   Editable=Yes }
    { 92  ;   ;Mode of Payment     ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Mode of Payment }
    { 93  ;   ;Cheque / DD No.     ;Text30        ;CaptionML=ENU=Cheque / DD No. }
    { 94  ;   ;Prospectus          ;Boolean       ;CaptionML=ENU=Prospectus }
    { 95  ;   ;Prospectus No.      ;Text30        ;CaptionML=ENU=Prospectus No. }
    { 96  ;   ;Father's Annual Income;Decimal     ;CaptionML=ENU=Father's Annual Income;
                                                   BlankZero=Yes }
    { 97  ;   ;Exam Code           ;Code10        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Code }
    { 98  ;   ;Community           ;Code10        ;TableRelation=Community;
                                                   CaptionML=ENU=Community }
    { 99  ;   ;Mother Tongue       ;Code10        ;TableRelation="Mother Tongue";
                                                   CaptionML=ENU=Mother Tongue }
    { 500 ;   ;Spot                ;Boolean       ;CaptionML=ENU=Spot }
    { 501 ;   ;Recommender Designation;Text50     ;CaptionML=ENU=Recommender Designation }
    { 502 ;   ;Recommended By      ;Text50        ;CaptionML=ENU=Recommended By }
    { 503 ;   ;Recommended List No ;Text50        ;CaptionML=ENU=Recommended List No }
    { 504 ;   ;Check Age Limit     ;Boolean       ;CaptionML=ENU=Check Age Limit }
    { 505 ;   ;Recommendation      ;Boolean       ;CaptionML=ENU=Recommendation }
    { 1000;   ;Section             ;Code10        ;TableRelation=Section;
                                                   CaptionML=ENU=Section }
    { 1017;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No. }
    { 2000;   ;Address 3           ;Text100       ;CaptionML=ENU=Address 3 }
    { 10001;  ;Fee Classification  ;Code10        ;TableRelation="Fee Classification";
                                                   CaptionML=ENU=Fee Classification }
    { 10002;  ;Quota               ;Code10        ;TableRelation=Quota;
                                                   CaptionML=ENU=Quota }
    { 10003;  ;Physically Challanged;Boolean      ;CaptionML=ENU=Physically Challanged }
    { 10004;  ;Staff Child         ;Boolean       ;CaptionML=ENU=Staff Child }
    { 10005;  ;Staff Code          ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Staff Code }
    { 50000;  ;Bank Fees           ;Decimal        }
    { 51000;  ;Rank                ;Integer       ;CaptionML=ENU=Rank }
    { 51001;  ;Evaluation Total    ;Decimal       ;CaptionML=ENU=Evaluation Total }
    { 51002;  ;Selection Number    ;Code10        ;CaptionML=ENU=Selection Number }
    { 51100;  ;Reg DD / Cheque No  ;Text30         }
    { 51101;  ;Reg DD / Cheque Date;Date           }
    { 60000;  ;Height              ;Decimal       ;CaptionML=ENU=Height;
                                                   BlankZero=Yes }
    { 60001;  ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   BlankZero=Yes }
    { 70000;  ;Second Language     ;Option        ;OptionCaptionML=ENU=" ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai";
                                                   OptionString=[ ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai] }
    { 70001;  ;Thai Student        ;Boolean        }
    { 70003;  ;Sibling No.         ;Code20        ;TableRelation=Student }
    { 70004;  ;Previous Percentage ;Integer        }
    { 70005;  ;Vaccinated          ;Boolean        }
    { 70006;  ;Roll No Allotted Date;Date          }
    { 70007;  ;Registration Date   ;Date           }
    { 70008;  ;Group               ;Option        ;OptionCaptionML=ENU=" ,Group A,Group B,Group C,Group D";
                                                   OptionString=[ ,Group A,Group B,Group C,Group D] }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 71000;  ;Free Prospectus     ;Boolean       ;OnValidate=BEGIN
                                                                "Application Cost":=0;
                                                              END;
                                                               }
    { 71001;  ;Reason              ;Text250       ;OnValidate=BEGIN
                                                                "Application Cost":=0;
                                                              END;
                                                               }
    { 71002;  ;StateDesc           ;Text50         }
    { 71003;  ;Send Prospectus     ;Boolean        }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class,Curriculum Intrested,Academic Year }
    {    ;Rank                                     }
    {    ;Selection Number,Application Status      }
    {    ;Class,Curriculum Intrested,Academic Year,Application Status }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Postcode@1102155000 : Record 225;
      EduVertical@1102155004 : Codeunit 71880;
      AdmissionSetup@1102155003 : Record 71000;
      NoSeriesMgt@1102155002 : Codeunit 396;
      Enquiry@1102155001 : Record 71001;
      Application@1102155005 : Record 71002;
      Age2@1102155007 : Decimal;
      TempAge@1102155006 : Decimal;
      AdmSetup@1102155008 : Record 71000;
      Classrec@1102155009 : Record 71041;
      ClassCard@1102155011 : Record 71006;
      ClassCardLook@1102155010 : Record 71006;
      ClassSection@1102155012 : Record 71015;
      Text000@1102155013 : TextConst 'ENU=Age limit exceeded';
      Text001@1102155014 : TextConst 'ENU=Sale of Application Closed';
      Text002@1102155015 : TextConst 'ENU=Sale of Application Closed';

    PROCEDURE Assistedit@1102155001(OldApplication@1102155000 : Record 71002) : Boolean;
    BEGIN
      // Start 10.KATHIR
      WITH Application DO BEGIN
        Application := Rec;
        AdmissionSetup.GET;
        AdmissionSetup.TESTFIELD("Application No.");
        IF NoSeriesMgt.SelectSeries(AdmissionSetup."Application No.",OldApplication."No.Series","No.Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Application;
          EXIT(TRUE);
        END;
      END;
      // Stop 10.KATHIR
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                                 Description
      -----------------------------------------------------------------------------------------------
      01  19/09/09   KATHIR   OnInsert                            Code added for inserting the "Academic Year" field
      02  19/09/09   KATHIR   OnInsert                            Code added for No series generation
      03  19/09/09   KATHIR   OnInsert                            Code added for inserting the "Date of Sale" field
      05  19/09/09   KATHIR   No.- Onvalidate()                   Code added for No series generation
      06  19/09/09   KATHIR   City - OnValidate()                 Code added to validate city
      07  19/09/09   KATHIR   City - OnLookup()                   Code added to look up the city
      08  19/09/09   KATHIR   Post Code - OnValidate()            Code added to validate Post code
      09  19/09/09   KATHIR   Post Code - OnLookup()              Code added to look up the Post Code
      10  19/09/09   KATHIR   OnAssistEdit()                      Code added for No series generation
      11  19/09/09   KATHIR   DateOfBirth-OnValidate()            Code added to Calculate the Age
      13  22/09/09   KATHIR   Enquiry No. -OnValidate             Code added to Transfer values from Enquiry to admission
      14  19/10/09   VANDHANA OnInsert()                          Code to assign the User ID.
      15  16/11/09   VIGNESH  Curriculum Intrested - OnValidate() Code added to validate the sale based on the setup date
      16  23/11/09 VIGNESH  Class - OnLookup()                    Code added to get the Look up value for Class & Curriculum
      17  23/11/09 VIGNESH  Curriculum Intrested - OnLookup()     Code added to get the Look up value for Class & Curriculum
      18  23/11/09 VIGNESH  Class - OnLookup()                    Code added to get the Look up value for Class&Curriculum last attend
      19  23/11/09 VIGNESH  Curriculum intrested - OnLookup()      Code added to get the Look up value for Class&Curriculum last attend
    }
    END.
  }
}

OBJECT Table 71003 Application Mark
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 04. VANDHANA
               "User ID" := USERID;
               "Academic Year" := Eduvertical.GetAdmissionYear;
               // Stop 04. VANDHANA
             END;

    CaptionML=ENU=Application Mark;
  }
  FIELDS
  {
    { 1   ;   ;Application No      ;Code20        ;CaptionML=ENU=Application No }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Mark Obtained       ;Decimal       ;OnValidate=BEGIN
                                                                // Start 02.KATHIR
                                                                IF Maximum < "Mark Obtained" THEN BEGIN
                                                                  MESSAGE(Text000);
                                                                  "Mark Obtained" := 0;
                                                                END
                                                                // Stop 02.KATHIR
                                                              END;

                                                   CaptionML=ENU=Mark Obtained;
                                                   BlankZero=Yes }
    { 4   ;   ;Maximum             ;Decimal       ;OnValidate=BEGIN
                                                                // Start 03.KATHIR
                                                                IF Maximum < "Mark Obtained" THEN BEGIN
                                                                  MESSAGE(Text000);
                                                                  "Mark Obtained" := 0;
                                                                END
                                                                // Stop 03.KATHIR
                                                              END;

                                                   CaptionML=ENU=Maximum;
                                                   BlankZero=Yes }
    { 5   ;   ;Month               ;Option        ;CaptionML=ENU=Month;
                                                   OptionCaptionML=ENU=" ,January,February,March,April,May,June,July,August,September,October,November,December";
                                                   OptionString=[ ,January,February,March,April,May,June,July,August,September,October,November,December] }
    { 6   ;   ;Year of passing     ;Integer       ;CaptionML=ENU=Year of passing;
                                                   BlankZero=Yes }
    { 7   ;   ;Register Number     ;Code20        ;CaptionML=ENU=Register Number }
    { 8   ;   ;Exam Code           ;Code20        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Code }
    { 11  ;   ;Academic Year       ;Code20        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 12  ;   ;Subject Code        ;Code10        ;TableRelation=Subject;
                                                   OnValidate=BEGIN
                                                                // Start 01. KATHIR
                                                                IF PreQual.GET("Subject Code") THEN
                                                                  Description := PreQual.Description
                                                                ELSE
                                                                  Description := '';
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Subject Code }
    { 13  ;   ;Grade               ;Code10        ;TableRelation="Admission Grade";
                                                   OnValidate=BEGIN
                                                                IF Grade <> '' THEN
                                                                BEGIN
                                                                  AdmissionGrade.RESET;
                                                                  AdmissionGrade.SETRANGE(AdmissionGrade.Code,Grade);
                                                                  AdmissionGrade.SETRANGE(AdmissionGrade."Academic Year","Academic Year");
                                                                  IF AdmissionGrade.FINDFIRST THEN
                                                                  BEGIN
                                                                    "Mark Obtained" := AdmissionGrade."Obtained Mark";
                                                                    Maximum := AdmissionGrade."Maximum Mark";
                                                                  END;
                                                                END;
                                                              END;
                                                               }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Application No,Subject Code             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PreQual@1102155000 : Record 71004;
      Text000@1102155001 : TextConst 'ENU=Please ener valid mark';
      AdmissionGrade@1102159000 : Record 71017;
      Eduvertical@1102159001 : Codeunit 71880;

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  21/09/09  KATHIR    PreQualification Code        Code Added to Get PreQualification description
                                OnValidate()
        02  22/09/09  KATHIR    Mark Obtained - OnValidate() Code Added to Validate Marks Obtained
        03  22/09/09  KATHIR    Maximum - OnValidate()       Code Added to Validate Marks Obtained
        04  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71004 Subject
{
  OBJECT-PROPERTIES
  {
    Date=27-01-18;
    Time=14:26:14;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Subject;
    LookupPageID=Page71006;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Scholastic,Non-Scholastic;
                                                   OptionString=Scholastic,Non-Scholastic }
    { 4   ;   ;Subject Group       ;Code20        ;TableRelation="Subject Group";
                                                   CaptionML=ENU=Subject Group }
    { 5   ;   ;Compulsory          ;Boolean        }
    { 6   ;   ;Period Length       ;Integer        }
    { 50  ;   ;II Lang Type        ;Option        ;OptionCaptionML=ENU=" ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai";
                                                   OptionString=[ ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai] }
    { 51  ;   ;Subject Order       ;Decimal        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71005 Application Co-Curricular
{
  OBJECT-PROPERTIES
  {
    Date=26-02-18;
    Time=09:27:04;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Application Co-Curricular;
  }
  FIELDS
  {
    { 1   ;   ;Application No.     ;Code10        ;CaptionML=ENU=Application No. }
    { 2   ;   ;Co-Curricular Code  ;Code20        ;TableRelation="Co-Curricular Activities";
                                                   CaptionML=ENU=Co-Curricular Code }
    { 3   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 4   ;   ;Classification Code ;Code20        ;TableRelation="Co-Curricular Classification"."Classification Code" WHERE (Co-Curricular Code=FIELD(Co-Curricular Code));
                                                   OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "Co-CurricularClassification".GET("Co-Curricular Code","Classification Code") THEN
                                                                BEGIN
                                                                  Description := "Co-CurricularClassification".Description;
                                                                  "Student No." := Stud."No.";
                                                                END
                                                                ELSE
                                                                BEGIN
                                                                  Description := '';
                                                                END;
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Classification Code }
    { 5   ;   ;Student No.         ;Code20        ;TableRelation=Student }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Student No.,Co-Curricular Code          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      "Co-CurricularActivities"@1102155000 : Record 71892;
      "Co-CurricularClassification"@1102155001 : Record 71898;
      Stud@1000000000 : Record 71046;

    BEGIN
    {
        No   Date      Sign     Trigger                             Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                            Code to assign User ID.
        02  16.11.09  VIGNESH   Co-Curricular Code - OnValidate()   Code added to validate the Description field
        03  16.11.09  Vignesh                                       added new filed classification CODE
    }
    END.
  }
}

OBJECT Table 71006 Class Card
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:33:58;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Class Card;
    LookupPageID=Page71011;
    DrillDownPageID=Page71011;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Class Code;
                                                   SQL Data Type=Integer }
    { 3   ;   ;Curriculum          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year;
                                                   Editable=Yes }
    { 5   ;   ;Application Cost    ;Decimal       ;CaptionML=ENU=Application Cost;
                                                   BlankZero=Yes }
    { 6   ;   ;Registration Cost   ;Decimal       ;CaptionML=ENU=Registration Cost;
                                                   BlankZero=Yes }
    { 15  ;   ;Miniimum Age Limit  ;Integer       ;CaptionML=ENU=Miniimum Age Limit;
                                                   BlankZero=Yes }
    { 16  ;   ;Maximum Age Limit   ;Integer       ;CaptionML=ENU=Maximum Age Limit;
                                                   BlankZero=Yes }
    { 18  ;   ;Application Sale From;Date         ;CaptionML=ENU=Application Sale From }
    { 19  ;   ;Application Sale Till;Date         ;CaptionML=ENU=Application Sale Till }
    { 20  ;   ;Application Receive From;Date      ;CaptionML=ENU=Application Receive From }
    { 21  ;   ;Application Receive Till;Date      ;CaptionML=ENU=Application Receive Till }
    { 22  ;   ;Capacity            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Class Section".Capacity WHERE (Class=FIELD(Class),
                                                                                                   Curriculum=FIELD(Curriculum),
                                                                                                   Academic Year=FIELD(FILTER(Academic Year))));
                                                   CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 23  ;   ;Present Strength    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Student WHERE (Class=FIELD(Class),
                                                                                    Curriculum=FIELD(Curriculum),
                                                                                    Academic Year=FIELD(FILTER(Academic Year))));
                                                   CaptionML=ENU=Present Strength;
                                                   Editable=No }
    { 24  ;   ;Marks System        ;Option        ;CaptionML=ENU=Marks System;
                                                   OptionCaptionML=ENU=Marks,Grade;
                                                   OptionString=Marks,Grade }
    { 25  ;   ;Promotion Percentage;Decimal       ;CaptionML=ENU=Promotion Percentage }
    { 26  ;   ;Promoted            ;Boolean       ;CaptionML=ENU=Promoted }
    { 27  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed }
    { 28  ;   ;Cut Off Age as on   ;Date          ;CaptionML=ENU=Cut Off Age as on }
    { 29  ;   ;Consolidated Grades ;Option        ;CaptionML=ENU=Consolidated Grades;
                                                   OptionCaptionML=ENU=" ,Points,Marks";
                                                   OptionString=[ ,Points,Marks] }
    { 30  ;   ;Sequence            ;Integer       ;CaptionML=ENU=Sequence }
    { 31  ;   ;Withdrawal          ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Withdrawal WHERE (Class=FIELD(Class),
                                                                                       Curriculum=FIELD(Curriculum),
                                                                                       Academic Year=FIELD(FILTER(Academic Year))));
                                                   CaptionML=ENU=Withdrawal;
                                                   Editable=No }
    { 32  ;   ;Edu. Calendar Code  ;Code20        ;TableRelation=Table71921 }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class,Curriculum,Academic Year          ;Clustered=Yes }
    {    ;Curriculum,Class                         }
    {    ;Sequence                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassCard@1102155000 : Record 71006;
      EducationSetup@1102155001 : Record 71884;

    PROCEDURE LookUpClass@1102155000(VAR getClass@1102155000 : Code[10];VAR getCurriculum@1102155001 : Code[20];VAR getAcademic@1102159000 : Code[20]);
    VAR
      ClassCardRec@1102155002 : Record 71006;
    BEGIN
      // Start 03.VIGNESH
      IF NOT GUIALLOWED THEN
        EXIT;
      ClassCardRec.Class := getClass;
      ClassCardRec.Curriculum := getCurriculum;
      ClassCardRec."Academic Year" := getAcademic;
      ClassCardRec.SETRANGE(ClassCardRec."Academic Year",getAcademic);
      ClassCardRec.Closed := FALSE;
      IF PAGE.RUNMODAL(71011,ClassCardRec,ClassCardRec.Class) = ACTION::LookupOK THEN BEGIN
        getClass := ClassCardRec.Class;
        getCurriculum := ClassCardRec.Curriculum;
        getAcademic := ClassCardRec."Academic Year";
      END;
      // Stop 04.VIGNESH
    END;

    PROCEDURE LookUpCurriculum@1102155002(VAR getClass@1102155000 : Code[10];VAR getCurriculum@1102155001 : Code[20];VAR getAcademic@1102159000 : Code[20]);
    VAR
      ClassCardRec@1102155002 : Record 71006;
    BEGIN
      // Start 04.VIGNESH
      IF NOT GUIALLOWED THEN
        EXIT;
      ClassCardRec.SETCURRENTKEY(Curriculum,Class,"Academic Year");
      ClassCardRec.Class := getClass;
      ClassCardRec.Curriculum := getCurriculum;
      ClassCardRec."Academic Year" := getAcademic;
      ClassCardRec.Closed := FALSE;
      ClassCardRec.SETRANGE(ClassCardRec."Academic Year",getAcademic);
      IF PAGE.RUNMODAL(71011,ClassCardRec,ClassCardRec.Curriculum) = ACTION::LookupOK THEN BEGIN
        getClass := ClassCardRec.Class;
        getCurriculum := ClassCardRec.Curriculum;
        getAcademic := ClassCardRec."Academic Year";
      END;
      // Stop 04.VIGNESH
    END;

    PROCEDURE ValidateClass@1102155001(VAR getClass@1102155001 : Code[10];VAR getCurriculum@1102155000 : Code[20];VAR getAcademic@1102159000 : Code[20]);
    VAR
      ClassCardRec@1102155002 : Record 71006;
      ClassCardRec1@1102155003 : Record 71006;
    BEGIN
      // Start 05.VIGNESH
      IF NOT GUIALLOWED THEN
        EXIT;
      IF getClass <> '' THEN BEGIN
        IF STRPOS(getClass,'*') = STRLEN(getClass) THEN
          ClassCardRec.SETFILTER(Class,getClass)
        ELSE
          ClassCardRec.SETRANGE(Class,getClass);

        IF ClassCardRec.ISEMPTY THEN
          EXIT;
        ClassCardRec1.COPY(ClassCardRec);
        IF (ClassCardRec1.NEXT = 1) AND GUIALLOWED THEN
          IF PAGE.RUNMODAL(71011,ClassCardRec,ClassCardRec.Class) <> ACTION::LookupOK THEN
            EXIT;
        getClass := ClassCardRec.Class;
        getCurriculum := ClassCardRec.Curriculum;
        getAcademic := ClassCardRec."Academic Year";
      END;
      // Stop 05.VIGNESH
    END;

    PROCEDURE ValidateCurriculum@1102155003(VAR getClass@1102155001 : Code[10];VAR getCurriculum@1102155000 : Code[20];VAR getAcademic@1102159000 : Code[20]);
    VAR
      ClassCardRec@1102155003 : Record 71006;
      ClassCardRec1@1102155002 : Record 71006;
    BEGIN
      // Start 06.VIGNESH
      IF NOT GUIALLOWED THEN
        EXIT;
      IF getCurriculum <> '' THEN BEGIN
        IF STRPOS(getCurriculum,'*') = STRLEN(getCurriculum) THEN
          ClassCardRec.SETFILTER(Curriculum,getCurriculum)
        ELSE
          ClassCardRec.SETRANGE(Curriculum,getCurriculum);

        IF ClassCardRec.ISEMPTY THEN
          EXIT;

        ClassCardRec1.COPY(ClassCardRec);
        IF (ClassCardRec1.NEXT = 1) AND GUIALLOWED THEN
          IF PAGE.RUNMODAL(71011,ClassCardRec,ClassCardRec.Class) <> ACTION::LookupOK THEN
            EXIT;
        getClass := ClassCardRec.Class;
        getCurriculum := ClassCardRec.Curriculum;
        getAcademic := ClassCardRec."Academic Year";

      END;
      // Stop 06.VIGNESH
    END;

    BEGIN
    {
       No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA OnInsert             Code to assign User ID.
        02  17/10/09  VIGNESH                       new filed Cut Off Age and Consolidated Consolidated Grades added
        03  23/11/09  VIGNESH  LookUpClass()        Function Created to get the Class & Curiculum value
        04  23/11/09  VIGNESH  LookUpCurriculum()   Function Created to get the Class & Curiculum value
        05  23/11/09  VIGNESH  ValidateClass()      Function Created to get the Class & Curiculum value
        06  23/11/09  VIGNESH  ValidateCurriculum() Function Created to get the Class & Curiculum value
    }
    END.
  }
}

OBJECT Table 71007 Evaluation Method
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Evaluation Method;
    LookupPageID=Page71015;
    DrillDownPageID=Page71015;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Prequalification Mark;Boolean      ;CaptionML=ENU=Prequalification Mark }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
       No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71008 Class Evaluation
{
  OBJECT-PROPERTIES
  {
    Date=21-03-14;
    Time=14:42:18;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    OnDelete=BEGIN

               "Evaluation Header".RESET;
               "Evaluation Header".SETRANGE("Evaluation Header".Class,Class);
               "Evaluation Header".SETRANGE("Evaluation Header".Curriculum,Curriculum);
               "Evaluation Header".SETRANGE("Evaluation Header"."Academic Year","Academic Year");
               "Evaluation Header".SETRANGE("Evaluation Header"."Evaluation Code","Evaluation Method Code");
               IF "Evaluation Header".FINDFIRST THEN
                 ERROR('Please Delete Evaluation Mark Frist');
             END;

    CaptionML=ENU=Class Evaluation;
    LookupPageID=Page71016;
    DrillDownPageID=Page71016;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Class }
    { 2   ;   ;Evaluation Method Code;Code20      ;TableRelation="Evaluation Method";
                                                   OnValidate=BEGIN
                                                                Evaluation.GET("Evaluation Method Code");
                                                                "Prequalification Mark" := Evaluation."Prequalification Mark";
                                                              END;

                                                   CaptionML=ENU=Evaluation Method Code }
    { 3   ;   ;Maximum Mark        ;Decimal       ;CaptionML=ENU=Maximum Mark }
    { 4   ;   ;Pass Mark           ;Decimal       ;CaptionML=ENU=Pass Mark }
    { 5   ;   ;Compulsory          ;Boolean       ;CaptionML=ENU=Compulsory }
    { 6   ;   ;Curriculum          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 7   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 8   ;   ;Weightage           ;Decimal       ;OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                WeigAge := 0;
                                                                ClassEvaluation.RESET;
                                                                ClassEvaluation.SETRANGE(Class,Class);
                                                                ClassEvaluation.SETRANGE(Curriculum,Curriculum);
                                                                ClassEvaluation.SETRANGE("Academic Year","Academic Year");
                                                                IF ClassEvaluation.FINDSET THEN
                                                                  REPEAT
                                                                    WeigAge += ClassEvaluation.Weightage ;
                                                                  UNTIL ClassEvaluation.NEXT = 0;

                                                                IF (WeigAge + Weightage - xRec.Weightage) > 100 THEN
                                                                  ERROR(Text000);
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Weightage }
    { 9   ;   ;Prequalification Mark;Boolean      ;CaptionML=ENU=Prequalification Mark }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class,Curriculum,Evaluation Method Code,Academic Year;
                                                   Clustered=Yes }
    {    ;Class,Compulsory                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EduVert@1102155000 : Codeunit 71880;
      WeigAge@1102155001 : Decimal;
      ClassEvaluation@1102155002 : Record 71008;
      Evaluation@1102155003 : Record 71007;
      Text000@1102155004 : TextConst 'ENU=Weightagea cannot be more than 100.';
      "Evaluation Header"@1102159000 : Record 71012;

    BEGIN
    {
       No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
       01  15/10/09  KATHIR    Weightage - OnValidate()    Code added to Check weightage should not exceed more than 100
       02  19/10/09  VANDHANA  OnInsert                    Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71009 Applicant Evaluation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Applicant Evaluation;
  }
  FIELDS
  {
    { 1   ;   ;Application No.     ;Code20        ;CaptionML=ENU=Application No. }
    { 2   ;   ;Evaluation Method Code;Code20      ;TableRelation="Evaluation Method";
                                                   CaptionML=ENU=Evaluation Method Code }
    { 3   ;   ;Desription          ;Text30        ;CaptionML=ENU=Desription }
    { 4   ;   ;Mark Obtained       ;Decimal       ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "Maximum Mark" <> 0 THEN BEGIN
                                                                  IF "Mark Obtained" > "Maximum Mark" THEN
                                                                    ERROR(Text000,"Maximum Mark")
                                                                  ELSE
                                                                    "Attendance Status" := "Attendance Status"::Present;
                                                                END ELSE
                                                                  ERROR(Text001);
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Mark Obtained }
    { 5   ;   ;Attendance Status   ;Option        ;CaptionML=ENU=Attendance Status;
                                                   OptionCaptionML=ENU=" ,Present,Absent";
                                                   OptionString=[ ,Present,Absent] }
    { 6   ;   ;Maximum Mark        ;Decimal       ;CaptionML=ENU=Maximum Mark }
    { 7   ;   ;Pass Mark           ;Decimal       ;CaptionML=ENU=Pass Mark }
    { 8   ;   ;Evaluation No.      ;Code10        ;CaptionML=ENU=Evaluation No. }
    { 9   ;   ;Weightage           ;Decimal       ;CaptionML=ENU=Weightage }
    { 10  ;   ;Applicant Name      ;Text80        ;CaptionML=ENU=Applicant Name }
    { 11  ;   ;Class               ;Code10         }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Application No.,Evaluation Method Code  ;Clustered=Yes }
    {    ;Evaluation No.                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1102155000 : TextConst 'ENU=Maximum mark that you can enter is %1.';
      Text001@1102155001 : TextConst 'ENU=Maximum mark is zero.';

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        02  24/11/09  VIGNESH   Mark Obtained - OnValidate()  Code added to validate mark Obtained
    }
    END.
  }
}

OBJECT Table 71010 Application Certificate
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU2.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Application Certificate;
    LookupPageID=Page71017;
  }
  FIELDS
  {
    { 1   ;   ;Application No.     ;Code20        ;CaptionML=ENU=Application No. }
    { 2   ;   ;Ceritificate        ;Code20        ;TableRelation=Certificate;
                                                   CaptionML=ENU=Ceritificate }
    { 3   ;   ;Certificate Status  ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Received,Submit Later";
                                                   OptionString=[ ,Received,Submit Later] }
    { 4   ;   ;Receipt Date / Submission date;Date;CaptionML=ENU=Receipt Date / Submission date }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Application No.,Ceritificate            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71011 Application Optional Subjects
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Application Optional Subjects;
    LookupPageID=Page71018;
  }
  FIELDS
  {
    { 1   ;   ;Application No      ;Code20        ;CaptionML=ENU=Application No }
    { 2   ;   ;Subject Group       ;Code20        ;TableRelation="Subject Group";
                                                   CaptionML=ENU=Subject Group }
    { 3   ;   ;Subject             ;Code20        ;TableRelation=Subject WHERE (Subject Group=FIELD(Subject Group));
                                                   OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                IF Subjectrec.GET(Subject) THEN
                                                                  Description := Subjectrec.Description;
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Application No,Subject Group,Subject    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Subjectrec@1102155000 : Record 71004;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01   29/09/09  KATHIR   Subject - OnValidate()        Code added to get the Subject description
        02   19/10/09  VANDHANA OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71012 Evaluation Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01 VANDHANA
               AdmSetup.GET;
               IF "No Series" = '' THEN BEGIN
                 AdmSetup.TESTFIELD("Evaluation No.");
                 NoSeriesMgt.InitSeries(AdmSetup."Evaluation No.", xRec."No Series",0D,"Evaluation No.","No Series");
               END;
               // Stop 01 VANDHANA

               // Start 04 VANDHANA
               "Academic Year" := Eduvertical.GetAdmissionYear;
               // Stop 04 VANDHANA

               // Start 06. VANDHANA
               "User ID" := USERID;
               // Stop 06. VANDHANA
             END;

    OnDelete=VAR
               AppEval@1102155000 : Record 71009;
             BEGIN
               AppEval.RESET;
               AppEval.SETRANGE(AppEval."Evaluation No.","Evaluation No.");
               IF AppEval.FINDSET THEN
                 AppEval.DELETEALL;
             END;

    CaptionML=ENU=Evaluation Header;
    LookupPageID=Page71021;
    DrillDownPageID=Page71021;
  }
  FIELDS
  {
    { 1   ;   ;Evaluation No.      ;Code10        ;OnValidate=BEGIN
                                                                // Start 02 VANDHANA
                                                                IF "Evaluation No." <> xRec."Evaluation No." THEN BEGIN
                                                                  AdmSetup.GET;
                                                                  NoSeriesMgt.TestManual(AdmSetup."Evaluation No.");
                                                                  "No Series" := '';
                                                                END;
                                                                // Stop 02 VANDHANA
                                                              END;

                                                   CaptionML=ENU=Evaluation No. }
    { 2   ;   ;Class               ;Code10        ;TableRelation="Class Card";
                                                   OnValidate=BEGIN
                                                                // Start 07.VIGNESH
                                                                ClassCardLook.ValidateClass(Class,Curriculum,"Academic Year");
                                                                // Stop 07.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 08.VIGNESH
                                                              ClassCardLook.LookUpClass(Class,Curriculum,"Academic Year");
                                                              // Stop 08.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Class }
    { 3   ;   ;Curriculum          ;Code10        ;TableRelation="Class Card".Curriculum;
                                                   OnValidate=BEGIN
                                                                // Start 09.VIGNESH
                                                                ClassCardLook.ValidateCurriculum(Class,Curriculum,"Academic Year");
                                                                // Stop 09.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 10.VIGNESH
                                                              ClassCardLook.LookUpCurriculum(Class,Curriculum,"Academic Year");
                                                              // Stop 10.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Curriculum }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 5   ;   ;Evaluation Code     ;Code10        ;TableRelation="Class Evaluation"."Evaluation Method Code" WHERE (Class=FIELD(Class),
                                                                                                                    Curriculum=FIELD(Curriculum),
                                                                                                                    Academic Year=FIELD(Academic Year));
                                                   OnValidate=BEGIN
                                                                // Start 05.KATHIR
                                                                EvaluationHeader.RESET;
                                                                EvaluationHeader.SETCURRENTKEY(Class,Curriculum,"Academic Year","Evaluation Code");
                                                                EvaluationHeader.SETRANGE(Class,Class);
                                                                EvaluationHeader.SETRANGE(Curriculum,Curriculum);
                                                                EvaluationHeader.SETRANGE("Academic Year","Academic Year");
                                                                EvaluationHeader.SETRANGE("Evaluation Code","Evaluation Code");
                                                                IF EvaluationHeader.FINDFIRST THEN
                                                                  ERROR(Text000);
                                                                // Stop 05.KATHIR
                                                              END;

                                                   CaptionML=ENU=Evaluation Code }
    { 6   ;   ;No Series           ;Code20        ;CaptionML=ENU=No Series }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Evaluation No.                          ;Clustered=Yes }
    {    ;Class,Curriculum,Academic Year,Evaluation Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AdmSetup@1102155000 : Record 71000;
      NoSeriesMgt@1102155001 : Codeunit 396;
      EvaluationHeader1@1102155002 : Record 71012;
      Eduvertical@1102155003 : Codeunit 71880;
      EvaluationHeader@1102155004 : Record 71012;
      ClassCardLook@1102155005 : Record 71006;
      Text000@1102155006 : TextConst 'ENU=Evaluation is already  done for this class.';

    PROCEDURE Assistedit@1102155000(OldEvaluation@1102155000 : Record 71012) : Boolean;
    BEGIN
      // Start 03 VANDHANA
      WITH EvaluationHeader1 DO BEGIN
        OldEvaluation := Rec;
        AdmSetup.GET;
        AdmSetup.TESTFIELD("Evaluation No.");
        IF NoSeriesMgt.SelectSeries(AdmSetup."Evaluation No.",OldEvaluation."No Series","No Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Evaluation No.");
          Rec := EvaluationHeader1;
          EXIT(TRUE);
        END;
      END;
      // Stop 03 VANDHANA
    END;

    BEGIN
    {
         No     Date    Sign     Trigger                 Description
      -----------------------------------------------------------------------------------------------
        01     07/10/09 VANDHANA OnInsert()                      Code added for No.series
        02     07/10/09 VANDHANA OnValidate()                    Code added for No.series
        03     07/10/09 VANDHANA Assistedit()                    Code added for No.series
        04     08/10/09 VANDHANA OnInsert()                      Code to get Admission year
        05     14/10/09 KATHIR   Evaluation Code - OnValidate()  Code added to check duplicate Entries
        06     19/10/09 VANDHANA OnInsert                        Code to assign User ID.
        07     23/11/09 VIGNESH  Class - OnValidate()            Code added to get the Class & Curriculum value
        08     23/11/09 VIGNESH  Class - OnLookup()              Code added to get the Class & Curriculum value
        09     23/11/09 VIGNESH  Curriculum - OnValidate()       Code added to get the Class & Curriculum value
        10     23/11/09 VIGNESH  Curriculum - OnLookup()         Code added to get the Class & Curriculum value
    }
    END.
  }
}

OBJECT Table 71013 Selection process
{
  OBJECT-PROPERTIES
  {
    Date=27-04-18;
    Time=13:44:00;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01 VANDHANA
               ADMSetup.GET;
               IF "No Series" = '' THEN BEGIN
                 ADMSetup.TESTFIELD("Selection No.");
                 NoseriesMgt.InitSeries(ADMSetup."Selection No.", xRec."No Series",0D,"Selection No.","No Series");
               END;
               //Stop 01 VANDHANA

               // Start 04 VANDHANA
               "Academic Year" := EduVertical.GetAdmissionYear;
               // Stop 04 VANDHANA

               // Start 05. VANDHANA
               "User ID" := USERID;
               // Stop 05. VANDHANA
             END;

    CaptionML=ENU=Selection process;
    LookupPageID=Page71024;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code10        ;TableRelation="Class Card".Class;
                                                   OnValidate=BEGIN
                                                                // Start 07.VIGNESH
                                                                ClassCardLook.ValidateClass(Class,Curriculum,"Academic Year");
                                                                getSeatVacant;
                                                                // Stop 07.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 08.VIGNESH
                                                              ClassCardLook.LookUpClass(Class,Curriculum,"Academic Year");
                                                              getSeatVacant;
                                                              // Stop 08.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Class }
    { 2   ;   ;Curriculum          ;Code10        ;TableRelation="Class Card".Curriculum;
                                                   OnValidate=BEGIN
                                                                // Start 09.VIGNESH
                                                                ClassCardLook.ValidateCurriculum(Class,Curriculum,"Academic Year");
                                                                getSeatVacant;
                                                                // Stop 09.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 10.VIGNESH
                                                              ClassCardLook.LookUpCurriculum(Class,Curriculum,"Academic Year");
                                                              getSeatVacant;
                                                              // Stop 10.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Curriculum }
    { 3   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 4   ;   ;Seats Vacant        ;Integer       ;CaptionML=ENU=Seats Vacant;
                                                   Editable=No }
    { 5   ;   ;Selection No.       ;Code10        ;OnValidate=BEGIN
                                                                // Start 02 VANDHANA
                                                                IF "Selection No." <> xRec."Selection No." THEN BEGIN
                                                                  ADMSetup.GET;
                                                                  NoseriesMgt.TestManual(ADMSetup."Selection No.");
                                                                  "No Series" := '';
                                                                END;
                                                                // Stop 02 VANDHANA
                                                              END;

                                                   CaptionML=ENU=Selection No. }
    { 6   ;   ;No Series           ;Code20        ;CaptionML=ENU=No Series }
    { 7   ;   ;Interview Date      ;Date          ;CaptionML=ENU=Interview Date }
    { 8   ;   ;Total Selected      ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Application WHERE (Application Status=CONST(Selected),
                                                                                        Class=FIELD(Class),
                                                                                        Curriculum Intrested=FIELD(Curriculum),
                                                                                        Academic Year=FIELD(Academic Year)));
                                                   CaptionML=ENU=Total Selected;
                                                   Editable=No }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Selection No.                            }
    {    ;Class                                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ADMSetup@1102155000 : Record 71000;
      NoseriesMgt@1102155001 : Codeunit 396;
      SelectionProcess@1102155002 : Record 71013;
      EduVertical@1102155003 : Codeunit 71880;
      ClassCard@1102155004 : Record 71006;
      ClassCardLook@1102155005 : Record 71006;

    PROCEDURE Assistedit@1102155000(Oldsel@1102155000 : Record 71013) : Boolean;
    BEGIN
      // Start 03 VANDHANA
      WITH Oldsel DO BEGIN
        Oldsel := Rec;
        ADMSetup.GET;
        ADMSetup.TESTFIELD("Selection No.");
        IF NoseriesMgt.SelectSeries (ADMSetup."Selection No.", Oldsel."No Series","No Series") THEN BEGIN
          NoseriesMgt.SetSeries("Selection No.");
          Rec := Oldsel;
          EXIT(TRUE);
        END;
      END;
      // Stop 03 VANDHANA
    END;

    PROCEDURE getSeatVacant@1102155005();
    VAR
      ClassCard1@1102155000 : Record 71006;
      Student@1102155001 : Record 71046;
    BEGIN
      // Start 11.VIGNESH
      ClassCard1.GET(Class,Curriculum);
      ClassCard1.CALCFIELDS(Capacity);
      ClassCard1.CALCFIELDS("Present Strength");
      "Seats Vacant" := ClassCard1.Capacity-ClassCard1."Present Strength";
      // Stop 11.VIGNESH
    END;

    BEGIN
    {
         No     Date    Sign     Trigger                 Description
      -----------------------------------------------------------------------------------------------
        01     07/10/09 VANDHANA OnInsert()            Code added for No.series
        02     07/10/09 VANDHANA OnValidate()          Code added for No.series
        03     07/10/09 VANDHANA Assistedit()          Code added for No.series
        04     07/10/09 VANDHANA OnInsert()            Code to insert the Academic Year.
        05     19/10/09 VANDHANA OnInser()             Code to insert the User ID.
        06     16/11/09 GUNA                           New field added interview DATE
        07     23/11/09 VIGNESH  Class - OnValidate()            Code added to get the Class & Curriculum value
        08     23/11/09 VIGNESH  Class - OnLookup()              Code added to get the Class & Curriculum value
        09     23/11/09 VIGNESH  Curriculum - OnValidate()       Code added to get the Class & Curriculum value
        10     23/11/09 VIGNESH  Curriculum - OnLookup()         Code added to get the Class & Curriculum value
        11     24/11/09 VIGNESH  getSeatVacant                    Code added to get the seat vacant
    }
    END.
  }
}

OBJECT Table 71014 Selection Process Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Selection Process Line;
  }
  FIELDS
  {
    { 1   ;   ;Selection No.       ;Code10        ;CaptionML=ENU=Selection No. }
    { 2   ;   ;Application No      ;Code20        ;TableRelation=Application;
                                                   OnValidate=BEGIN
                                                                // Start 01. VANDHANA
                                                                IF Application.GET("Application No") THEN BEGIN
                                                                  Name := Application."Name of the pupil";
                                                                  Gender := Application."Applicant Gender";
                                                                END;
                                                                // Stop 01. VANDHANA
                                                              END;

                                                   CaptionML=ENU=Application No }
    { 3   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 4   ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 5   ;   ;Evaluation Total    ;Decimal       ;CaptionML=ENU=Evaluation Total }
    { 6   ;   ;Rank                ;Integer       ;CaptionML=ENU=Rank }
    { 7   ;   ;Select              ;Boolean       ;CaptionML=ENU=Select }
  }
  KEYS
  {
    {    ;Selection No.,Application No            ;Clustered=Yes }
    {    ;Rank                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Application@1102155000 : Record 71002;

    BEGIN
    {
         No     Date    Sign       Trigger                 Description
      -----------------------------------------------------------------------------------------------
        01     07/10/09 VANDHANA   OnValidate()          Code to update name & Gender
    }
    END.
  }
}

OBJECT Table 71015 Class Section
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               {
               "Education Setup".GET;
               "Education Setup".TESTFIELD("Academic Year");
               "Academic Year" := "Education Setup"."Academic Year";
               }
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Class Section;
    LookupPageID=Page71027;
    DrillDownPageID=Page71027;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code20        ;TableRelation=Class;
                                                   CaptionML=ENU=Class;
                                                   SQL Data Type=Integer }
    { 2   ;   ;Section             ;Code10        ;TableRelation=Section;
                                                   CaptionML=ENU=Section }
    { 3   ;   ;Curriculum          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 5   ;   ;Class Code          ;Code20        ;CaptionML=ENU=Class Code }
    { 22  ;   ;Capacity            ;Decimal       ;CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:0 }
    { 23  ;   ;Present Strength    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Student WHERE (Class Code=FIELD(Class Code),
                                                                                    Student Status=FILTER(Student)));
                                                   CaptionML=ENU=Present Strength;
                                                   Editable=No }
    { 24  ;   ;Marks System        ;Option        ;CaptionML=ENU=Marks System;
                                                   OptionCaptionML=ENU=Marks,Grade;
                                                   OptionString=Marks,Grade }
    { 25  ;   ;Promotion Percentage;Decimal       ;CaptionML=ENU=Promotion Percentage }
    { 26  ;   ;Promoted            ;Boolean       ;CaptionML=ENU=Promoted }
    { 29  ;   ;Consolidated Grades ;Option        ;CaptionML=ENU=Consolidated Grades;
                                                   OptionCaptionML=ENU=" ,Points,Marks";
                                                   OptionString=[ ,Points,Marks] }
    { 30  ;   ;Class Teacher       ;Code20        ;OnLookup=BEGIN

                                                              IF PAGE.RUNMODAL(50058,Emp) = ACTION::LookupOK THEN BEGIN
                                                                "Class Teacher" := Emp."No.";
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Class Teacher }
    { 31  ;   ;Home Work Duration  ;Decimal       ;CaptionML=ENU=Home Work Duration }
    { 40  ;   ;Max Group 2 Count   ;Integer       ;BlankZero=Yes;
                                                   Description=For class 9 and 10 }
    { 41  ;   ;Max Group 3 Count   ;Integer       ;BlankZero=Yes;
                                                   Description=For class 9 and 10 }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class Code,Class                        ;Clustered=Yes }
    {    ;Class,Curriculum,Academic Year          ;SumIndexFields=Capacity }
    {    ;Class                                    }
    {    ;Class,Section,Curriculum,Academic Year   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155000 : Record 71884;
      Emp@1102159000 : Record 5200;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  21.11.09  VIGNESH   OnInsert()              Code added to get the Userid
      02  22.11.09  VIGNESH   LookupSection()         Function Added to lookup the section as well as to select the Class & Curriculum
      03  22.11.09  VIGNESH   Lookupclass()           Function Added to lookup the Class as well as to select the Section & Curriculum
      04  22.11.09  VIGNESH   LookupCuriculum()       Function Added to lookup the Curriculum as well as to select the Class & Section
      05  22.11.09  VIGNESH   ValidateClass()         Function Added to validate the Class as well as to select the Section & Curriculum
      06  22.11.09  VIGNESH   ValidateCurriculum()    Function Added to validate the Curriculum as well as to select the Class & Section
      07  22.11.09  VIGNESH   ValidateSection()       Function Added to validate the section as well as to select the Class & Curriculum
      08  16.04.10  GUNA                              New Field added "Home Work Duration"
    }
    END.
  }
}

OBJECT Table 71016 Class Section Subjects
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Class Section Subjects;
    LookupPageID=Page71031;
    DrillDownPageID=Page71031;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code10        ;TableRelation=Class.Code;
                                                   CaptionML=ENU=Class }
    { 2   ;   ;Section             ;Code20        ;CaptionML=ENU=Section }
    { 3   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 5   ;   ;Subject             ;Code10        ;TableRelation=Subject;
                                                   OnValidate=BEGIN
                                                                // Start 01.VIGNESH
                                                                IF RecSubject.GET(Subject) THEN BEGIN
                                                                  Description := RecSubject.Description;
                                                                  Type := RecSubject.Type;
                                                                  "Subject Group" := RecSubject."Subject Group";
                                                                  "II Lang Type"  := RecSubject."II Lang Type";

                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Subject Group" := '';
                                                                  "II Lang Type"  := 0;
                                                                END;
                                                                // Stop 01.VIGNESH

                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Scholastic,Non-Scholastic;
                                                   OptionString=Scholastic,Non-Scholastic }
    { 8   ;   ;Subject Group       ;Code20        ;TableRelation="Subject Group";
                                                   CaptionML=ENU=Subject Group }
    { 9   ;   ;Maximum Mark        ;Decimal       ;CaptionML=ENU=Maximum Mark;
                                                   BlankZero=Yes }
    { 10  ;   ;Pass Mark           ;Decimal       ;CaptionML=ENU=Pass Mark;
                                                   BlankZero=Yes }
    { 11  ;   ;Group Code old      ;Code10        ;CaptionML=ENU=Group Code }
    { 12  ;   ;Subject Teacher     ;Code10        ;TableRelation=Employee;
                                                   CaptionML=ENU=Subject Teacher }
    { 13  ;   ;Class Code          ;Code20        ;CaptionML=ENU=Class Code }
    { 20  ;   ;Group Code          ;Code20        ;TableRelation="Class Group" }
    { 50  ;   ;II Lang Type        ;Option        ;OptionCaptionML=ENU=" ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai";
                                                   OptionString=[ ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai] }
    { 51  ;   ;Class IX and  X Group;Option       ;OptionCaptionML=ENU=" ,Group1,Group2,Group3,Group4,Group5,Group6";
                                                   OptionString=[ ,Group1,Group2,Group3,Group4,Group5,Group6] }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class Code,Group Code,Subject           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecSubject@1102155000 : Record 71004;
      ClassSection@1102155001 : Record 71015;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  26.11.09  VIGNESH   Subject - OnValidate()   Code added to get the Subject description type and Group
    }
    END.
  }
}

OBJECT Table 71017 Admission Grade
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := Eduvertical.GetAdmissionYear;

               "User ID" := USERID;
             END;

    LookupPageID=Page71114;
    DrillDownPageID=Page71114;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10         }
    { 2   ;   ;Description         ;Text30         }
    { 3   ;   ;Obtained Mark       ;Decimal        }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year" }
    { 5   ;   ;Maximum Mark        ;Decimal        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code,Academic Year                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Eduvertical@1102159000 : Codeunit 71880;

    BEGIN
    END.
  }
}

OBJECT Table 71020 Subject Detail Exam Schedule
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=HPS;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Exam Schedule No.   ;Code20         }
    { 2   ;   ;Subject Code        ;Code20         }
    { 3   ;   ;Date                ;Date           }
    { 4   ;   ;Class Code          ;Code20         }
    { 5   ;   ;Exam Slot           ;Code20        ;TableRelation=Table33009196 }
    { 6   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Scholastic,Non-Scholastic;
                                                   OptionString=Scholastic,Non-Scholastic }
  }
  KEYS
  {
    {    ;Exam Schedule No.,Subject Code          ;Clustered=Yes }
    {    ;Type                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71040 Academics Setup
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Academics Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Marks No.           ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Marks No. }
    { 4   ;   ;Attendance          ;Option        ;CaptionML=ENU=Attendance;
                                                   OptionCaptionML=ENU=Daily,Hourly;
                                                   OptionString=Daily,Hourly }
    { 5   ;   ;Fore Noon Attendance Hour;Integer  ;CaptionML=ENU=Fore Noon Attendance Hour;
                                                   BlankZero=Yes }
    { 6   ;   ;After Noon Attendance Hour;Integer ;CaptionML=ENU=After Noon Attendance Hour;
                                                   BlankZero=Yes }
    { 7   ;   ;Attendance No.      ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Attendance No. }
    { 8   ;   ;Withdrawl No.       ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Withdrawl No. }
    { 9   ;   ;TC No.              ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=TC No. }
    { 10  ;   ;Class Syllabus No.  ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Class Syllabus No. }
    { 11  ;   ;Faculty Class Plan No.;Code20      ;TableRelation="No. Series";
                                                   CaptionML=ENU=Faculty Class Plan No. }
    { 12  ;   ;Exam Schedule No.   ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Exam Schedule No. }
    { 13  ;   ;Student Leave Application No.;Code20;
                                                   TableRelation="No. Series";
                                                   CaptionML=ENU=Student Leave Application No. }
    { 14  ;   ;Mark Super User     ;Code20        ;TableRelation="Portal Users" }
    { 20  ;   ;Prescription Nos.   ;Code20        ;TableRelation="No. Series" }
    { 21  ;   ;Edu. Calender No.   ;Code20        ;TableRelation="No. Series" }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA  OnInsert          Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71041 Class
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Class;
    LookupPageID=Page71041;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Sequence            ;Integer       ;CaptionML=ENU=Sequence }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Sequence                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA   OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71042 Curriculum
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Curriculum;
    LookupPageID=Page71042;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA  OnInsert          Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71043 Divsion
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               "Created Academic Year" := EduVert.GetAdmissionYear;
               // Stop 01.KATHIR

               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Divsion;
    LookupPageID=Page71043;
  }
  FIELDS
  {
    { 1   ;   ;Division Code       ;Code20        ;CaptionML=ENU=Division Code }
    { 2   ;   ;Division Description;Text50        ;CaptionML=ENU=Division Description }
    { 3   ;   ;Created Academic Year;Code20       ;CaptionML=ENU=Created Academic Year }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Division Code,Created Academic Year     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EduVert@1102155000 : Codeunit 71880;

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   21/09/09   KATHIR    OnInsert()       Coding added to get current academic year
        02   19/10/09   VANDHANA  OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71044 KeyStages
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=KeyStages;
    LookupPageID=Page71044;
    DrillDownPageID=Page71044;
  }
  FIELDS
  {
    { 1   ;   ;Divison Code        ;Code20        ;TableRelation=Divsion."Division Code";
                                                   CaptionML=ENU=Divison Code }
    { 2   ;   ;Code                ;Code10        ;TableRelation=Class;
                                                   OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF Class.GET(Code) THEN
                                                                  Description := Class.Description
                                                                ELSE
                                                                  Description := '';

                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Code }
    { 3   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Divison Code,Code                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Class@1102155000 : Record 71041;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71045 Class Group
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Class Group;
    LookupPageID=Page71045;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71046 Student
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:37:12;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               // Start 01.KATHIR
               AdmissionSetup.GET;
               IF "No. Series" = '' THEN BEGIN
                 AdmissionSetup.TESTFIELD("Student No.");
                 NoSeriesMgt.InitSeries(AdmissionSetup."Student No.", xRec."No. Series",0D,"No.","No. Series");
               END;
               // Stop 01.KATHIR
               // Start 10. VANDHANA
               "User ID" := USERID;
               // Stop 10. VANDHANA
             END;

    CaptionML=ENU=Student;
    LookupPageID=Page71047;
    DrillDownPageID=Page71047;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 09.KATHIR
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AdmissionSetup.GET;
                                                                  NoSeriesMgt.TestManual(AdmissionSetup."Student No.");
                                                                  "No. Series" := '';
                                                                END;
                                                                // Start 09.KATHIR
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text30        ;OnValidate=VAR
                                                                ContBusRel@1001 : Record 5054;
                                                                Cust@1000 : Record 18;
                                                                Vend@1002 : Record 23;
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Name;
                                                   Editable=Yes }
    { 3   ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 9   ;   ;Date Of Birth       ;Date          ;OnValidate=BEGIN
                                                                // Start 02.KATHIR
                                                                IF "Date Of Birth" <> 0D THEN BEGIN
                                                                  Age := TODAY - "Date Of Birth";
                                                                  TempAge := ROUND(Age / 365,1,'=');
                                                                  Age2 := Age MOD 365;
                                                                  Months := ROUND(Age2 / 30,1,'=');
                                                                  Age := TempAge - 1;
                                                                END ELSE BEGIN
                                                                  CLEAR(Age);
                                                                  CLEAR(Months);
                                                                END;
                                                                // Stop 02.KATHIR
                                                              END;

                                                   CaptionML=ENU=Date Of Birth }
    { 10  ;   ;Father's Name       ;Text100       ;CaptionML=ENU=Father's Name }
    { 11  ;   ;Mother's Name       ;Text100       ;CaptionML=ENU=Mother's Name }
    { 12  ;   ;Citizenship         ;Code20        ;TableRelation=Citizenship;
                                                   CaptionML=ENU=Citizenship }
    { 13  ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=Yes }
    { 15  ;   ;Class               ;Code10        ;CaptionML=ENU=Class;
                                                   Editable=Yes }
    { 16  ;   ;Hostel Acommodation ;Boolean       ;CaptionML=ENU=Hostel Acommodation }
    { 17  ;   ;Previous School     ;Text150       ;CaptionML=ENU=Previous School }
    { 18  ;   ;Medium of Instruction;Code10       ;TableRelation="Medium of Instruction";
                                                   CaptionML=ENU=Medium of Instruction }
    { 19  ;   ;Presently Residing with;Code10     ;TableRelation=Relative;
                                                   CaptionML=ENU=Presently Residing with }
    { 20  ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum;
                                                   Editable=Yes }
    { 21  ;   ;Previous Class      ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Previous Class }
    { 22  ;   ;Previous Curriculum ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Previous Curriculum }
    { 23  ;   ;Address To          ;Code20        ;TableRelation=Relative;
                                                   CaptionML=ENU=Address To }
    { 24  ;   ;Addressee           ;Text100       ;CaptionML=ENU=Addressee }
    { 25  ;   ;Address1            ;Text100       ;CaptionML=ENU=Address1 }
    { 26  ;   ;Address2            ;Text100       ;CaptionML=ENU=Address2 }
    { 27  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                // Start 03.KATHIR
                                                                //Postcode.ValidateCity(City,"Post Code");
                                                                // Stop 03.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 04.KATHIR
                                                              //Postcode.LookUpCity(City,"Post Code",TRUE);
                                                              // Stop 04.KATHIR
                                                            END;

                                                   CaptionML=ENU=City }
    { 28  ;   ;Post Code           ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                // Start 05.KATHIR
                                                                //Postcode.ValidatePostCode(City,"Post Code");
                                                                // Stop 05.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 06 .KATHIR
                                                              //Postcode.LookUpPostCode(City,"Post Code",TRUE);
                                                              // Stop 06.KATHIR
                                                            END;

                                                   CaptionML=ENU=Post Code }
    { 29  ;   ;Country             ;Code20        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 30  ;   ;E-Mail Address      ;Text100       ;CaptionML=ENU=E-Mail Address }
    { 31  ;   ;Mobile Number       ;Text30        ;CaptionML=ENU=Mobile Number }
    { 32  ;   ;Phone Number        ;Text30        ;CaptionML=ENU=Phone Number }
    { 33  ;   ;State               ;Code20        ;CaptionML=ENU=State }
    { 37  ;   ;Visa Exp Date       ;Date          ;CaptionML=ENU=Visa Exp Date }
    { 38  ;   ;Passport No.        ;Text20        ;CaptionML=ENU=Passport No. }
    { 39  ;   ;Passport Exp Date   ;Date          ;CaptionML=ENU=Passport Exp Date }
    { 40  ;   ;Visa No.            ;Text20        ;CaptionML=ENU=Visa No. }
    { 49  ;   ;Food Habits         ;Option        ;CaptionML=ENU=Food Habits;
                                                   OptionCaptionML=ENU=" ,Veg,Non Veg";
                                                   OptionString=[ ,Veg,Non Veg] }
    { 50  ;   ;Applicant Image     ;BLOB          ;CaptionML=ENU=Applicant Image }
    { 51  ;   ;Father Image        ;BLOB          ;CaptionML=ENU=Father Image }
    { 52  ;   ;Mother Image        ;BLOB          ;CaptionML=ENU=Mother Image }
    { 53  ;   ;Guardian Image      ;BLOB          ;CaptionML=ENU=Guardian Image }
    { 54  ;   ;Mother's Qualification;Text30      ;CaptionML=ENU=Mother's Qualification }
    { 55  ;   ;Mother's Occupation ;Text30        ;CaptionML=ENU=Mother's Occupation }
    { 56  ;   ;Guardian Name       ;Text100       ;CaptionML=ENU=Guardian Name }
    { 60  ;   ;Promotion Granted   ;Boolean       ;CaptionML=ENU=Promotion Granted }
    { 70  ;   ;Father's Occupation ;Text30        ;CaptionML=ENU=Father's Occupation }
    { 71  ;   ;Mother's Annual Income;Decimal     ;CaptionML=ENU=Mother's Annual Income }
    { 72  ;   ;Guardian Qualification;Text30      ;CaptionML=ENU=Guardian Qualification }
    { 73  ;   ;Guardian Occupation ;Text30        ;CaptionML=ENU=Guardian Occupation }
    { 74  ;   ;Guardian Annual Income;Decimal     ;CaptionML=ENU=Guardian Annual Income }
    { 76  ;   ;Enquiry No.         ;Code10        ;TableRelation=Enquiry;
                                                   OnValidate=BEGIN
                                                                // Start 07.KATHIR
                                                                IF Enquiry.GET("Enquiry No.") THEN BEGIN
                                                                  TRANSFERFIELDS(Enquiry);
                                                                  VALIDATE("Date Of Birth");
                                                                  VALIDATE(Class);
                                                                  "No." := xRec."No.";
                                                                END;
                                                                // Stop 07.KATHIR
                                                              END;

                                                   CaptionML=ENU=Enquiry No. }
    { 77  ;   ;Religion            ;Code20        ;TableRelation=Religion.Code;
                                                   CaptionML=ENU=Religion }
    { 78  ;   ;Father's Qualification;Text30      ;CaptionML=ENU=Father's Qualification }
    { 79  ;   ;Caste               ;Code20        ;CaptionML=ENU=Caste }
    { 81  ;   ;Age                 ;Integer       ;CaptionML=ENU=Age;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 82  ;   ;Months              ;Integer       ;CaptionML=ENU=Months;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 96  ;   ;Father's Annual Income;Decimal     ;CaptionML=ENU=Father's Annual Income }
    { 97  ;   ;Exam Code           ;Code10        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Code }
    { 98  ;   ;Community           ;Code10        ;TableRelation=Community;
                                                   CaptionML=ENU=Community }
    { 99  ;   ;Mother Tongue       ;Code10        ;TableRelation="Mother Tongue";
                                                   CaptionML=ENU=Mother Tongue }
    { 100 ;   ;New Student         ;Boolean       ;CaptionML=ENU=New Student;
                                                   Editable=Yes }
    { 1000;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=Yes }
    { 1001;   ;Student Status      ;Option        ;OnValidate=BEGIN
                                                                //mani - Start
                                                                IF "Student Status"= "Student Status":: Inactive THEN BEGIN
                                                                  Customer.GET("No.");
                                                                  Customer.Blocked := Customer.Blocked::All;
                                                                  Customer.MODIFY;
                                                                END;

                                                                IF "Student Status"= "Student Status":: Student THEN BEGIN
                                                                  Customer.GET("No.");
                                                                  Customer.Blocked := Customer.Blocked::" ";
                                                                  Customer.MODIFY;
                                                                END;
                                                                //Mani - Stop

                                                                //Muthu
                                                                IF "Student Status" <> "Student Status":: Student THEN BEGIN
                                                                  IF RecPortalUsers.GET("No.") THEN
                                                                    RecPortalUsers.DELETE;

                                                                  IF RecPortalUsers.GET("No."+'P') THEN
                                                                    RecPortalUsers.DELETE;

                                                                END;
                                                                //Muthu
                                                              END;

                                                   CaptionML=ENU=Student Status;
                                                   OptionCaptionML=ENU=" ,Student,Inactive,Alumni";
                                                   OptionString=[ ,Student,Inactive,Alumni] }
    { 1002;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   CaptionML=ENU=Class Code }
    { 2000;   ;Address 3           ;Text100       ;CaptionML=ENU=Address 3 }
    { 2001;   ;House               ;Code20        ;TableRelation=House;
                                                   CaptionML=ENU=House }
    { 2002;   ;Points              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Participant Entry Line".Points WHERE (Student No.=FIELD(No.),
                                                                                                          Academic Year=FIELD(Academic Year),
                                                                                                          Update Results=FILTER(Yes)));
                                                   CaptionML=ENU=Points;
                                                   Editable=No }
    { 10001;  ;Fee Classification  ;Code10        ;TableRelation="Fee Classification";
                                                   CaptionML=ENU=Fee Classification }
    { 10002;  ;Quota               ;Code10        ;TableRelation=Quota;
                                                   CaptionML=ENU=Quota }
    { 10003;  ;Physically Challanged;Boolean      ;CaptionML=ENU=Physically Challanged }
    { 10004;  ;Staff Child         ;Boolean       ;CaptionML=ENU=Staff Child }
    { 10005;  ;Staff Code          ;Code20        ;OnLookup=BEGIN
                                                              Emp.RESET;
                                                              IF Emp.FINDFIRST THEN
                                                               IF PAGE.RUNMODAL(50058,Emp) = ACTION::LookupOK THEN BEGIN
                                                                "Staff Code" := Emp."No.";
                                                               END;
                                                            END;

                                                   CaptionML=ENU=Staff Code }
    { 20000;  ;Application No.     ;Code20        ;CaptionML=ENU=Application No. }
    { 20001;  ;Date Joined         ;Date          ;CaptionML=ENU=Date Joined }
    { 20002;  ;Room No.            ;Code20        ;CaptionML=ENU=Room No.;
                                                   Editable=No }
    { 20003;  ;Hostel Code         ;Code20        ;CaptionML=ENU=Hostel Code;
                                                   Editable=Yes }
    { 20004;  ;Hostel Alloted      ;Boolean       ;CaptionML=ENU=Hostel Alloted }
    { 20005;  ;Hostel Vacated      ;Boolean       ;CaptionML=ENU=Hostel Vacated }
    { 20006;  ;Room Type           ;Code20        ;CaptionML=ENU=Room Type;
                                                   Editable=No }
    { 20007;  ;Mess                ;Code20        ;CaptionML=ENU=Mess;
                                                   Editable=No }
    { 20009;  ;CGPA                ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Average("Marks Line".Points WHERE (Academic Year=FIELD(Academic Year),
                                                                                                  Class=FIELD(Class),
                                                                                                  Section=FIELD(Section),
                                                                                                  Curriculum=FIELD(Curriculum),
                                                                                                  Student No.=FIELD(No.)));
                                                   CaptionML=ENU=CGPA;
                                                   Editable=No }
    { 20010;  ;CGPA Grade          ;Code10        ;CaptionML=ENU=CGPA Grade }
    { 20011;  ;Latest Rank         ;Integer       ;CaptionML=ENU=Latest Rank }
    { 20012;  ;Latest GPA          ;Decimal       ;CaptionML=ENU=Latest GPA }
    { 20013;  ;Latest Grade        ;Code20        ;CaptionML=ENU=Latest Grade }
    { 20014;  ;Student Image       ;Text100       ;CaptionML=ENU=Student Image }
    { 20015;  ;Name 2              ;Text50         }
    { 20016;  ;Blood Group         ;Code20         }
    { 20017;  ;Medical History     ;Text100        }
    { 30000;  ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 60000;  ;Height              ;Decimal       ;CaptionML=ENU=Height;
                                                   BlankZero=Yes }
    { 60001;  ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   BlankZero=Yes }
    { 60002;  ;Division            ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(KeyStages."Divison Code" WHERE (Code=FIELD(Class)));
                                                   CaptionML=ENU=Division;
                                                   Editable=No }
    { 60003;  ;Date of Leaving     ;Date          ;CaptionML=ENU=Date of Leaving }
    { 60004;  ;Acad. Year          ;Code10        ;OnValidate=BEGIN
                                                                "Academic Year" := "Acad. Year";
                                                              END;
                                                               }
    { 70000;  ;Second Language     ;Option        ;OptionCaptionML=ENU=" ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai";
                                                   OptionString=[ ,Tamil,Hindi,Telugu,Malayalam,Kannada,French,Thai] }
    { 70001;  ;Thai Student        ;Boolean        }
    { 70008;  ;Group               ;Option        ;OptionCaptionML=ENU=" ,Group A,Group B,Group C,Group D,Group E,Group F";
                                                   OptionString=[ ,Group A,Group B,Group C,Group D,Group E,Group F] }
    { 70009;  ;Tour Code           ;Code20        ;TableRelation="Dimension Value".Code WHERE (Dimension Code=FILTER(TOUR)) }
    { 70010;  ;Computer Opt. Course;Code20        ;TableRelation="Dimension Value".Code WHERE (Dimension Code=FILTER(OPCOURSE)) }
    { 70015;  ;Subject Group       ;Code20        ;TableRelation="Class Group" }
    { 70016;  ;Certificate1        ;Text100        }
    { 70017;  ;Certificate2        ;Text100        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70785;  ;Family Code         ;Code20        ;TableRelation="Family Code";
                                                   CaptionML=ENU=Family Code }
    { 70786;  ;Campus_1            ;Option        ;OnValidate=BEGIN
                                                                IF Campus_1 = Campus_1::MontFord THEN
                                                                  Campus := 'MF';
                                                                IF Campus_1 = Campus_1::"West Brooke" THEN
                                                                  Campus := 'WB';
                                                                IF Campus_1 = 0 THEN
                                                                  Campus := ' ';
                                                              END;

                                                   CaptionML=ENU=Campus;
                                                   OptionCaptionML=ENU=" ,MontFord,West Brooke";
                                                   OptionString=[ ,MontFord,West Brooke] }
    { 70787;  ;Portfolio           ;Code50        ;TableRelation="Piece Rate Header" }
    { 70788;  ;Campus              ;Code10         }
    { 80000;  ;Orig Academic Year  ;Code10         }
    { 80001;  ;Orig Class Code     ;Code20         }
    { 80002;  ;Extra Tuition       ;Boolean        }
    { 80003;  ;Father's DOB        ;Date           }
    { 80004;  ;Mother's DOB        ;Date           }
    { 80005;  ;Student email       ;Text30         }
    { 80010;  ;Academic Points     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Academic Points".Points WHERE (Student No.=FIELD(No.),
                                                                                                   Academic Year=FIELD(Academic Year)));
                                                   Editable=No }
    { 80011;  ;Appraisal Point     ;Decimal       ;Editable=No }
    { 80012;  ;Old Class Code      ;Code20         }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class,Curriculum,Academic Year           }
    {    ;Class,Section,Curriculum,Academic Year   }
    {    ;Academic Year,Student Status             }
    {    ;House                                    }
    {    ;Class Code                               }
    {    ;Gender,Name                              }
    {    ;Gender,Class,Section                     }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Postcode@1102155000 : Record 225;
      EduVertical@1102155004 : Codeunit 71880;
      AdmissionSetup@1102155003 : Record 71000;
      NoSeriesMgt@1102155002 : Codeunit 396;
      Enquiry@1102155001 : Record 71001;
      RecApp@1102155005 : Record 71002;
      Age2@1102155007 : Decimal;
      TempAge@1102155006 : Decimal;
      AdmSetup@1102155008 : Record 71000;
      Classrec@1102155009 : Record 71041;
      Student@1102155010 : Record 71046;
      ClassSectionLook@1102155011 : Record 71015;
      ClassCardLook@1102155012 : Record 71006;
      Emp@1102159000 : Record 5200;
      Customer@1102159001 : Record 18;
      RecPortalUsers@1000000000 : Record 71895;

    PROCEDURE Assistedit@1102155001(OldStudent@1102155000 : Record 71046) : Boolean;
    BEGIN
      // Start 08.KATHIR
      WITH OldStudent DO BEGIN
        OldStudent := Rec;
        AdmissionSetup.GET;
        AdmissionSetup.TESTFIELD("Student No.");
        IF NoSeriesMgt.SelectSeries(AdmissionSetup."Student No.",OldStudent."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := OldStudent;
          EXIT(TRUE);
        END;
      END;
      // Stop 08.KATHIR
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
      01  26/09/09   KATHIR   OnInsert()                          Code added to generate number series
      02  26/09/09   KATHIR   DateOfBirth-OnValidate()            Code added to Calculate the Age
      03  26/09/09   KATHIR   City - OnValidate()                 Code added to Validate CIty
      04  26/06/09   KATHIR   City - OnLookup()                   Code added to Lookup City
      05  26/09/09   KATHIR   Post Code - OnValidate()            Code added to Validate PostCode
      06  26/09/09   KATHIR   Post Code - Onlookup()              Code added to Lookup Post Code
      07  26/09/09   KATHIR   Enquiry No. - OnValidate()          Code added to Transfer all fields from enquiry to application
      08  26/09/09   KATHIR   Assistedit()                        Code added to generate number series
      09  26/09/09   KATHIR   No. - OnValidate()                  Code added to generate number series
      10  19/10/09   VANDHANA OnInsert                            Code to assign User ID.
      11  16/11/09   VIGNESH                                      New fields Dimensions & Date of Leaving is added
      12  23/11/09   VIGNESH  Class - OnValidate()                Code added to get the Class Section & Curriculum
      13  23/11/09   VIGNESH  Class - OnLookup()                  Code added to get the Class Section & Curriculum
      14  23/11/09   VIGNESH  Curriculum - OnValidate()           Code added to get the Class Section & Curriculum
      15  23/11/09   VIGNESH  Curriculum - OnLookup()             Code added to get the Class Section & Curriculum
      16  23/11/09   VIGNESH  Section - OnValidate()              Code added to get the Class Section & Curriculum
      17  23/11/09   VIGNESH  Section - OnLookup()                Code added to get the Class Section & Curriculum
      18  14/12/19   VIGNESH                                      New Fields "Room Type" and "Mess" is added for Hostel & Mess Mng
      19  13/1/10    KAVITHA                                      Added new fields CGPA and CGPA Grade .
      20  20/1/10    Ankesh                                       Added new fields Latest GPA and Latest Grade And Latest Rank.
    }
    END.
  }
}

OBJECT Table 71047 Subject Type
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Subject Type;
    LookupPageID=Page71048;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71048 Class Subjects
{
  OBJECT-PROPERTIES
  {
    Date=27-01-18;
    Time=14:13:50;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Class Subjects;
    LookupPageID=Page71062;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Class Code }
    { 3   ;   ;Curriculum          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 5   ;   ;Subject             ;Code10        ;TableRelation=Subject;
                                                   OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                IF RecSubject.GET(Subject) THEN BEGIN
                                                                  Description := RecSubject.Description;
                                                                  Type := RecSubject.Type;
                                                                  "Subject Group" := RecSubject."Subject Group";
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Subject Group" := '';
                                                                END;
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Scholastic,Non-Scholastic;
                                                   OptionString=Scholastic,Non-Scholastic }
    { 8   ;   ;Subject Group       ;Code20        ;TableRelation="Subject Group";
                                                   CaptionML=ENU=Subject Group }
    { 9   ;   ;Maximum Mark        ;Decimal       ;CaptionML=ENU=Maximum Mark;
                                                   BlankZero=Yes }
    { 10  ;   ;Pass Mark           ;Decimal       ;CaptionML=ENU=Pass Mark;
                                                   BlankZero=Yes }
    { 11  ;   ;Group Code          ;Code10        ;CaptionML=ENU=Group Code }
    { 12  ;   ;Subject Order       ;Decimal        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class,Curriculum,Academic Year,Subject  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecSubject@1102155000 : Record 71004;

    BEGIN
    {
       No   Date      Sign     Trigger                         Description
      -----------------------------------------------------------------------------------------------
       01  28/09/09  KATHIR    Subject Code - OnValidate()     Code added to Get the subject description and Subject Type
       02  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71049 Student Subjects
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA

               Edusetup.GET;
               "Academic Year" := Edusetup."Academic Year";
             END;

    CaptionML=ENU=Student Subjects;
    LookupPageID=Page71059;
  }
  FIELDS
  {
    { 1   ;   ;Student No.         ;Code20        ;TableRelation=Student;
                                                   CaptionML=ENU=Student No.;
                                                   Editable=No }
    { 2   ;   ;Academic Year       ;Code20        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 3   ;   ;Subject             ;Code20        ;TableRelation=Subject;
                                                   OnValidate=BEGIN
                                                                IF RecSubject.GET(Subject) THEN BEGIN
                                                                  Description := RecSubject.Description;
                                                                 "Subject Type" :=  RecSubject.Type;
                                                                  "Subject Group" := RecSubject."Subject Group";
                                                                  Stud.GET("Student No.");
                                                                  "Class Code" := Stud."Class Code";
                                                                 IF ClassSection1.GET(Stud."Class Code") THEN BEGIN
                                                                    Class := ClassSection1.Class;
                                                                    Section := ClassSection1.Section;
                                                                    Curriculum := ClassSection1.Curriculum;
                                                                  END;
                                                                //END ELSE BEGIN
                                                                 // Description := '';
                                                                 // "Subject Group" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 4   ;   ;Subject Type        ;Option        ;CaptionML=ENU=Subject Type;
                                                   OptionCaptionML=ENU=Scholastic,Non-Scholastic;
                                                   OptionString=Scholastic,Non-Scholastic }
    { 5   ;   ;Subject Group       ;Code20        ;TableRelation="Subject Group";
                                                   CaptionML=ENU=Subject Group }
    { 6   ;   ;Class               ;Code10        ;TableRelation=Class;
                                                   CaptionML=ENU=Class }
    { 7   ;   ;Section             ;Code10        ;TableRelation=Section;
                                                   CaptionML=ENU=Section }
    { 8   ;   ;Curriculum          ;Code20        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 9   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                {
                                                                IF RecSubject.GET(Subject) THEN
                                                                BEGIN
                                                                    Description := RecSubject.Description;
                                                                END;
                                                                }
                                                                {
                                                                IF RecSubject.GET(Subject) THEN BEGIN
                                                                  Class := ClassSection1.Class;
                                                                  Section := ClassSection1.Section;
                                                                   Curriculum := ClassSection1.Curriculum;
                                                                  "Academic Year" := ClassSection1."Academic Year";
                                                                   Description := RecSubject.Description;
                                                                END;
                                                                 }
                                                              END;

                                                   CaptionML=ENU=Description }
    { 10  ;   ;Student Status      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Student."Student Status" WHERE (No.=FIELD(Student No.)));
                                                   CaptionML=ENU=Student Status;
                                                   OptionCaptionML=ENU=" ,Student,Inactive,Alumni";
                                                   OptionString=[ ,Student,Inactive,Alumni];
                                                   Editable=No }
    { 11  ;   ;Mark                ;Decimal       ;CaptionML=ENU=Mark }
    { 12  ;   ;Grade               ;Code10        ;CaptionML=ENU=Grade }
    { 13  ;   ;Attendance Percentage;Decimal      ;CaptionML=ENU=Attendance Percentage }
    { 14  ;   ;Student Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Student.Name WHERE (No.=FIELD(Student No.)));
                                                   CaptionML=ENU=Student Name;
                                                   Editable=No }
    { 15  ;   ;Attendance % as on Date;Date       ;CaptionML=ENU=Attendance % as on Date }
    { 16  ;   ;Class Code          ;Code20        ;CaptionML=ENU=Class Code }
    { 20  ;   ;Student Gender      ;Option        ;OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Student No.,Academic Year,Subject       ;Clustered=Yes }
    {    ;Class,Section,Curriculum,Academic Year   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecSubject@1102159000 : Record 71004;
      Edusetup@1102159001 : Record 71884;
      ClassSection1@1102159002 : Record 71015;
      Stud@1102159003 : Record 71046;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71050 Subject Group
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Subject Group;
    LookupPageID=Page71051;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71051 Student Optional Subjects
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Student Optional Subjects;
    LookupPageID=Page71052;
  }
  FIELDS
  {
    { 1   ;   ;Student No          ;Code20        ;TableRelation=Student;
                                                   CaptionML=ENU=Student No }
    { 2   ;   ;Subject Group       ;Code20        ;TableRelation="Subject Group";
                                                   CaptionML=ENU=Subject Group }
    { 3   ;   ;Subject             ;Code20        ;TableRelation="Class Section Subjects".Subject WHERE (Subject Group=FIELD(Subject Group),
                                                                                                         Class Code=FIELD(Class Code));
                                                   OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                Subjectrec.RESET;
                                                                IF Subjectrec.GET(Subject) THEN
                                                                  Description := Subjectrec.Description
                                                                ELSE
                                                                  Description := '';

                                                                ClassSecSub.RESET;
                                                                ClassSecSub.SETRANGE(ClassSecSub."Class Code","Class Code");
                                                                ClassSecSub.SETRANGE(ClassSecSub.Subject,Subject);
                                                                IF ClassSecSub.FINDFIRST THEN
                                                                  "Class 9 10 Group Code" := ClassSecSub."Class IX and  X Group";
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Class Code          ;Code20        ;TableRelation="Class Section" }
    { 6   ;   ;Group               ;Integer       ;BlankZero=Yes }
    { 10  ;   ;Class 9 10 Group Code;Option       ;OptionCaptionML=ENU=" ,Group 2,Group 3";
                                                   OptionString=[ ,Group 2,Group 3] }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Student No,Subject Group,Class Code,Subject;
                                                   Clustered=Yes }
    {    ;Group                                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Subjectrec@1102155000 : Record 71004;
      ClassSecSub@1102159000 : Record 71016;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  29/09/09   KATHIR   Subject - OnValidate()       Code added to get the Subject description
        02  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71052 Marks Header
{
  OBJECT-PROPERTIES
  {
    Date=22-11-17;
    Time=15:45:25;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               AcademicsSetup.GET;
               IF "No. Series" = '' THEN BEGIN
                 AcademicsSetup.TESTFIELD("Marks No.");
                 NoSeriesMgt.InitSeries(AcademicsSetup."Marks No.",xRec."No. Series",0D,"No.","No. Series");
               END;
               // Stop 01.KATHIR

               // Start 02.KATHIR
               "Academic Year" := Educationvertical.GetAcademicYear;
               // Stop 02.KATHIR

               // Start 08.KATHIR
               "User ID" := USERID;
               // Stop 08.KATHIR
             END;

    CaptionML=ENU=Marks Header;
    LookupPageID=Page71055;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 03.KATHIR
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AcademicsSetup.GET;
                                                                  NoSeriesMgt.TestManual(AcademicsSetup."Marks No.");
                                                                  "No. Series" := '';
                                                                END;
                                                                 // Stop 03.KATHIR
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Class               ;Code20        ;CaptionML=ENU=Class;
                                                   Editable=Yes }
    { 3   ;   ;Section             ;Code20        ;CaptionML=ENU=Section;
                                                   Editable=Yes }
    { 4   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year;
                                                   Editable=Yes }
    { 5   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum;
                                                   Editable=Yes }
    { 7   ;   ;Max Mark            ;Integer       ;CaptionML=ENU=Max Mark;
                                                   BlankZero=Yes;
                                                   Editable=Yes }
    { 8   ;   ;Pass Mark           ;Integer       ;OnValidate=BEGIN
                                                                // Start 05.KATHIR
                                                                IF "Pass Mark" >= "Max Mark" THEN
                                                                  ERROR(Text001);
                                                                // Stop 05.KATHIR
                                                              END;

                                                   CaptionML=ENU=Pass Mark;
                                                   BlankZero=Yes;
                                                   Editable=Yes }
    { 10  ;   ;Subject             ;Code20        ;OnValidate=BEGIN
                                                                // Start 06.KATHIR
                                                                TESTFIELD(Class);
                                                                TESTFIELD(Section);
                                                                TESTFIELD("Academic Year");
                                                                TESTFIELD(Curriculum);
                                                                TESTFIELD("Exam Type");

                                                                IF RecSubject.GET(Subject) THEN
                                                                  "Subject Description" := RecSubject.Description
                                                                ELSE
                                                                  "Subject Description" := '';
                                                                // Stop 06.KATHIR

                                                                // Start 09.KATHIR
                                                                ClassSubjects.RESET;
                                                                // Start 18.VIGNESH
                                                                //ClassSubjects.SETCURRENTKEY("Class Code",Section,Curriculum,"Academic Year",Subject);
                                                                ClassSubjects.SETCURRENTKEY(Class,Curriculum,"Academic Year",Subject);
                                                                // Stop 18.VIGNESH
                                                                ClassSubjects.SETRANGE(Class,Class);
                                                                ClassSubjects.SETRANGE(Curriculum,Curriculum);
                                                                ClassSubjects.SETRANGE("Academic Year","Academic Year");
                                                                ClassSubjects.SETRANGE(Subject,Subject);
                                                                IF ClassSubjects.FINDFIRST THEN BEGIN
                                                                  "Max Mark" := ClassSubjects."Maximum Mark";
                                                                  "Pass Mark" := ClassSubjects."Pass Mark";
                                                                END ELSE BEGIN
                                                                  "Max Mark" := 0;
                                                                  "Pass Mark" := 0;
                                                                END;
                                                                // Stop 09.KATHIR
                                                                //Start 04.KATHIR
                                                                MarksHeader.RESET;
                                                                MarksHeader.SETCURRENTKEY(Class,Section,Curriculum,"Academic Year","Exam Type",Subject);
                                                                MarksHeader.SETRANGE(Class,Class);
                                                                MarksHeader.SETRANGE(Section,Section);
                                                                MarksHeader.SETRANGE(Curriculum,Curriculum);
                                                                MarksHeader.SETRANGE("Academic Year","Academic Year");
                                                                MarksHeader.SETRANGE("Exam Type","Exam Type");
                                                                MarksHeader.SETRANGE(Subject,Subject);
                                                                IF MarksHeader.FINDFIRST THEN
                                                                  ERROR(TEXT002);
                                                                //Stop 04.KATHIR
                                                              END;

                                                   OnLookup=BEGIN
                                                              FacultySubject.RESET;
                                                              //Faculty Code,Class,Curriculum,Section Code,Subject Code,Academic Year
                                                              FacultySubject.SETCURRENTKEY("Faculty Code",Class,"Academic Year");
                                                              FacultySubject.SETRANGE(FacultySubject."Faculty Code",  Teacher);
                                                              FacultySubject.SETRANGE(FacultySubject.Class, Class);
                                                              FacultySubject.SETRANGE(FacultySubject."Academic Year" , "Academic Year");
                                                              IF PAGE.RUNMODAL(0,FacultySubject) = ACTION::LookupOK THEN BEGIN
                                                                 Subject :=  FacultySubject."Subject Code";
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Subject }
    { 11  ;   ;Subject Description ;Text50        ;CaptionML=ENU=Subject Description;
                                                   Editable=No }
    { 12  ;   ;Teacher Name        ;Text50        ;CaptionML=ENU=Teacher Name }
    { 13  ;   ;Exam Type           ;Code10        ;TableRelation="Exam Code";
                                                   OnValidate=BEGIN
                                                                // Start 10.KATHIR
                                                                IF ExamCode.GET("Exam Type") THEN
                                                                  "Exam Description" := ExamCode.Description;
                                                                // Stop 10.KATHIR
                                                              END;

                                                   CaptionML=ENU=Exam Type }
    { 14  ;   ;Exam Description    ;Text50        ;CaptionML=ENU=Exam Description }
    { 15  ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 16  ;   ;Teacher             ;Code20        ;TableRelation="Employee Alll";
                                                   OnValidate=BEGIN
                                                                // Start 11.KATHIR
                                                                IF Employee.GET(Teacher) THEN
                                                                  "Teacher Name" := Employee."First Name";
                                                                // Stop 11.KATHIR
                                                              END;

                                                   CaptionML=ENU=Teacher }
    { 17  ;   ;Entry Completed     ;Boolean       ;CaptionML=ENU=Entry Completed }
    { 18  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID;
                                                   Editable=No }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Created Date        ;DateTime       }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class,Curriculum,Academic Year,Subject   }
    {    ;Class,Section,Curriculum,Academic Year,Subject }
    {    ;Class,Section,Curriculum,Academic Year,Exam Type,Subject }
    {    ;Section                                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1102155001 : TextConst 'ENU=Pass Mark Cannot be greater than Max Mark';
      RecSubject@1102155000 : Record 71004;
      Educationvertical@1102155002 : Codeunit 71880;
      AcademicsSetup@1102155003 : Record 71040;
      NoSeriesMgt@1102155004 : Codeunit 396;
      MarksHeader@1102155005 : Record 71052;
      TEXT002@1102155006 : TextConst 'ENU=Marks Header already Generated for this Class and for this subject';
      ClassSubjects@1102155007 : Record 71048;
      ExamCode@1102155008 : Record 71903;
      Employee@1102155009 : Record 5200;
      ClassSectionLook@1102155010 : Record 71015;
      ClassSection@1102155011 : Record 71015;
      FacultySubject@1102159000 : Record 71150;

    PROCEDURE Assistedit@1102155006(OldMarks@1102155000 : Record 71052) : Boolean;
    BEGIN
      // Start 07.KATHIR
      WITH OldMarks DO BEGIN
        OldMarks := Rec;
        AcademicsSetup.GET;
        AcademicsSetup.TESTFIELD("Marks No.");
        IF NoSeriesMgt.SelectSeries(AcademicsSetup."Marks No.",OldMarks."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := OldMarks;
          EXIT(TRUE);
        END;
      END;
      // Stop 07.KATHIR
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  30/09/09   KATHIR   OnInsert()                  Code added to generate Number Series
        02  30/09/09   KATHIR   OnInsert()                  Code added to get Current Acadmemic Year
        03  30/09/09   KATHIR   No. - OnValidate()          Code added to generate Number Series
        04  30/09/09   KATHIR   Subject - OnValidate()      Code added to check Current Combination of class & Section already entered
        05  30/09/09   KATHIR   Pass Mark - OnValidate()    Code added to restrict pass mark with Max mark
        06  30/09/09   KATHIR   Subject - OnValidate()      Code added to get Subject Description
        07  30/09/09   KATHIR   AssistEdit()                Code added to generate Number Series
        08  01/10/09   KATHIR   OnInsert()                  Code added to Insert Current UserID
        09  01/10/09   KATHIR   Subject - OnValidate()      Code added to get Max mark and pass mark from class subjects
        10  01/10/09   KATHIR   Exam Type - OnValidate()    Code added to get exam type's description
        11  11/10/09   KATHIR   Teacher - OnValidate()      Code added to get teacher Name
        12  23/11/09   VIGNESH  Class - OnValidate()        Code added to get the Class Section & Curriculum
        13  23/11/09   VIGNESH  Class - OnLookup()          Code added to get the Class Section & Curriculum
        14  23/11/09   VIGNESH  Curriculum - OnValidate()   Code added to get the Class Section & Curriculum
        15  23/11/09   VIGNESH  Curriculum - OnLookup()     Code added to get the Class Section & Curriculum
        16  23/11/09   VIGNESH  Section - OnValidate()      Code added to get the Class Section & Curriculum
        17  23/11/09   VIGNESH  Section - OnLookup()        Code added to get the Class Section & Curriculum
        18  25/11/09   VIGNESH  Subject - OnValidate()      SetCurrent key Modified based on section
    }
    END.
  }
}

OBJECT Table 71053 Marks Line
{
  OBJECT-PROPERTIES
  {
    Date=01-07-20;
    Time=11:24:57;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Marks Line;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 3   ;   ;Student No.         ;Code20        ;TableRelation=Student WHERE (Class=FIELD(Class),
                                                                                Section=FIELD(Section),
                                                                                Curriculum=FIELD(Curriculum),
                                                                                Academic Year=FIELD(Academic Year),
                                                                                Student Status=FILTER(Student));
                                                   OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                IF RecStudent.GET("Student No.") THEN
                                                                  "Student Name" := RecStudent.Name
                                                                ELSE
                                                                  "Student Name" := '';
                                                                // Start 04.KATHIR
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Student No.;
                                                   Editable=Yes }
    { 4   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name;
                                                   Editable=No }
    { 5   ;   ;Max Mark            ;Decimal       ;CaptionML=ENU=Max Mark;
                                                   BlankZero=Yes }
    { 6   ;   ;Marks Obtained      ;Decimal       ;OnValidate=BEGIN
                                                                // Start 02.KATHIR
                                                                IF ("Marks Obtained" > "Max Mark") OR ("Marks Obtained" < 0) THEN
                                                                  ERROR(Text000);

                                                                IF "Marks Obtained" < "Pass Mark" THEN
                                                                  Result := Result::Fail
                                                                ELSE
                                                                  Result := Result::Pass;

                                                                IF ("Marks Obtained" <> 0) AND ("Max Mark" <> 0) THEN
                                                                  Percentage := ("Marks Obtained" / "Max Mark") * 100
                                                                ELSE
                                                                  IF ("Marks Obtained" = 0) AND ("Max Mark" <> 0) THEN // Start 03.VIGNESH
                                                                    Percentage := 0;                                       // Stop 03.VIGNESH

                                                                // Start 10.VIGNESH
                                                                //IF "Class Card".GET(Class,Section,Curriculum,"Academic Year") THEN;
                                                                IF ClassSection.GET("Class Code") THEN;
                                                                // Stop 10.VIGNESH

                                                                //IF "Class Card"."Marks System" = "Class Card"."Marks System"::Grade THEN
                                                                //BEGIN
                                                                ClassGrade.RESET;
                                                                ClassGrade.SETCURRENTKEY(Class,Curriculum,"Academic Year","Grade Code");
                                                                ClassGrade.SETRANGE(Class,Class);
                                                                ClassGrade.SETRANGE(Curriculum,Curriculum);
                                                                ClassGrade.SETRANGE("Academic Year","Academic Year");
                                                                ClassGrade.SETFILTER("Max Percentage",'>=%1',"Marks Obtained");
                                                                ClassGrade.SETFILTER("Min Percentage",'<=%1',"Marks Obtained");
                                                                IF ClassGrade.FINDSET THEN BEGIN
                                                                  Grade := ClassGrade."Grade Code" ;
                                                                  // Start01.KAVITHA
                                                                  Points := ClassGrade.Points;
                                                                  // Stop01.KAVITHA
                                                                END ELSE BEGIN
                                                                  Grade := '';
                                                                 // Start01.KAVITHA
                                                                  Points := 0;
                                                                   // Stop01.KAVITHA
                                                                END
                                                                //ELSE
                                                                //  Grade := '';
                                                                // Start 02.KATHIR
                                                              END;

                                                   CaptionML=ENU=Marks Obtained }
    { 7   ;   ;Result              ;Option        ;CaptionML=ENU=Result;
                                                   OptionCaptionML=ENU=" ,Pass,Fail,Absent";
                                                   OptionString=[ ,Pass,Fail,Absent] }
    { 8   ;   ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
    { 9   ;   ;Percentage          ;Decimal       ;CaptionML=ENU=Percentage;
                                                   BlankZero=Yes }
    { 10  ;   ;Grade               ;Code20        ;TableRelation=Grade;
                                                   CaptionML=ENU=Grade }
    { 11  ;   ;ExamCount           ;Integer       ;CaptionML=ENU=ExamCount }
    { 12  ;   ;Class               ;Code20        ;CaptionML=ENU=Class }
    { 13  ;   ;Section             ;Code20        ;CaptionML=ENU=Section }
    { 14  ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 15  ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum }
    { 16  ;   ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 17  ;   ;Subject             ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject;
                                                   Editable=Yes }
    { 18  ;   ;Exam Type           ;Code10        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Type;
                                                   Editable=Yes }
    { 19  ;   ;Pass Mark           ;Integer       ;CaptionML=ENU=Pass Mark }
    { 20  ;   ;Points              ;Decimal       ;CaptionML=ENU=Points }
    { 21  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection1.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection1.Class;
                                                                  Section := ClassSection1.Section;
                                                                  Curriculum := ClassSection1.Curriculum;
                                                                  "Academic Year" := ClassSection1."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 22  ;   ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 30  ;   ;Published           ;Boolean        }
  }
  KEYS
  {
    {    ;Document No.,Student No.                ;Clustered=Yes }
    {    ;Student No.,Exam Type                    }
    {    ;Class,Section,Academic Year,Curriculum,Exam Type }
    {    ;Class,Section,Academic Year,Curriculum,Exam Type,Student No.;
                                                   SumIndexFields=Max Mark,Marks Obtained }
    {    ;Academic Year,Class,Section,Curriculum,Student No.;
                                                   SumIndexFields=Points }
    {    ;Student No.,Exam Type,Subject            }
    {    ;Class,Section,Academic Year,Curriculum,Subject }
    {    ;Student No.,Class,Section,Curriculum,Academic Year,Subject,ExamCount,Exam Type }
    {    ;Class Code                               }
    {    ;Marks Obtained                           }
    {    ;Gender,Student Name                      }
    {    ;Student Name                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecStudent@1102155000 : Record 71046;
      ClassGrade@1102155001 : Record 71054;
      ClassCard@1102155002 : Record 71006;
      ClassSection@1102155004 : Record 71015;
      Text000@1102155005 : TextConst 'ENU=Enter valid mark.';
      ClassSection1@1102155006 : Record 71015;
      ClassSectionLook@1102155003 : Record 71015;

    BEGIN
    {
        No   Date      Sign     Trigger                          Description
      -----------------------------------------------------------------------------------------------
        01  30/09/09   KATHIR  Student No. - OnValidate()        Code added to Get student Name
        02  30/09/09   KATHIR  Marks Obtained - OnValidate()     Code added to Calculate Grade and average
        03  17/11/09   VIGNESH Marks Obtained - OnValidate()     Code added modifiy to validate if mark is zero
        04  23/11/09   VIGNESH  Class - OnValidate()             Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Class - OnLookup()               Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnValidate()           Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnLookup()             Code added to get the Class Section & Curriculum
        08  23/11/09   VIGNESH  Curriculum - OnValidate()        Code added to get the Class Section & Curriculum
        09  23/11/09   VIGNESH  Curriculum - OnLookup()          Code added to get the Class Section & Curriculum
        10  25/11/09   VIGNESH  Marks Obtained - OnValidate()    Code modified based on Class Section
        11  13/1/10    KAVITHA  Field                            Added a new field Points
        12  13/1/10    KAVITHA  Marks Obtained - OnValidate()    Code is written to get the Points .
    }
    END.
  }
}

OBJECT Table 71054 Class Grade
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Class Grade;
  }
  FIELDS
  {
    { 1   ;   ;Class               ;Code10        ;CaptionML=ENU=Class }
    { 2   ;   ;Grade Code          ;Code20        ;TableRelation=Grade;
                                                   OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                IF Grade.GET("Grade Code") THEN BEGIN
                                                                  Description := Grade.Description;
                                                                  "Max Percentage" := Grade."Max Percentage";
                                                                  "Min Percentage" := Grade."Min Percentage";
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Max Percentage" := 0;
                                                                  "Min Percentage" := 0;
                                                                END;
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Grade Code }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Section             ;Code10        ;CaptionML=ENU=Section }
    { 5   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum }
    { 6   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year }
    { 7   ;   ;Max Percentage      ;Decimal       ;CaptionML=ENU=Max Percentage }
    { 8   ;   ;Min Percentage      ;Decimal       ;CaptionML=ENU=Min Percentage }
    { 9   ;   ;Points              ;Decimal       ;CaptionML=ENU=Points }
    { 10  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class,Curriculum,Academic Year,Grade Code;
                                                   Clustered=Yes }
    {    ;Points                                   }
    {    ;Class,Points                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Grade@1102155000 : Record 71889;
      ClassSectionLook@1102155001 : Record 71015;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01   30/09/09  KATHIR   Grade Code - OnValidate()     code added to get grade description
        02  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        03  23/11/09   VIGNESH  Class - OnValidate()                Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Class - OnLookup()                  Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Section - OnValidate()              Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnLookup()                Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Curriculum - OnValidate()           Code added to get the Class Section & Curriculum
        08  23/11/09   VIGNESH  Curriculum - OnLookup()             Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71055 Student Mark Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Student Mark Header;
    LookupPageID=Page71067;
  }
  FIELDS
  {
    { 1   ;   ;Student No.         ;Code20        ;TableRelation=Student;
                                                   CaptionML=ENU=Student No.;
                                                   Editable=No }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 3   ;   ;Class               ;Code20        ;CaptionML=ENU=Class;
                                                   Editable=No }
    { 4   ;   ;Section             ;Code20        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 5   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 6   ;   ;Exam Type           ;Code20        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Type;
                                                   Editable=No }
    { 7   ;   ;Curriculum          ;Code20        ;CaptionML=ENU=Curriculum;
                                                   Editable=Yes }
    { 8   ;   ;Total Marks         ;Decimal       ;CaptionML=ENU=Total Marks;
                                                   BlankZero=Yes;
                                                   Editable=Yes }
    { 9   ;   ;Average             ;Decimal       ;CaptionML=ENU=Average;
                                                   BlankZero=Yes;
                                                   Editable=Yes }
    { 10  ;   ;Rank                ;Integer       ;CaptionML=ENU=Rank;
                                                   BlankZero=Yes;
                                                   Editable=Yes }
    { 11  ;   ;Grade               ;Code10        ;CaptionML=ENU=Grade;
                                                   Editable=No }
    { 12  ;   ;Total No of Subject Failed;Integer ;CaptionML=ENU=Total No of Subject Failed;
                                                   Editable=No }
    { 13  ;   ;Failed              ;Boolean       ;CaptionML=ENU=Failed;
                                                   Editable=No }
    { 14  ;   ;Remarks             ;Text200       ;CaptionML=ENU=Remarks }
    { 15  ;   ;Height              ;Decimal       ;CaptionML=ENU=Height;
                                                   BlankZero=Yes }
    { 16  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   BlankZero=Yes }
    { 17  ;   ;GPA Grade           ;Code10        ;CaptionML=ENU=GPA Grade }
    { 18  ;   ;GPA Points          ;Decimal       ;CaptionML=ENU=GPA Points }
    { 19  ;   ;Percentage Scored   ;Decimal       ;CaptionML=ENU=Percentage Scored;
                                                   Editable=No }
    { 20  ;   ;Total Marks Conducted;Decimal      ;CaptionML=ENU=Total Marks Conducted }
    { 21  ;   ;Average Attendance Percent;Decimal ;CaptionML=ENU=Average Attendance Percent;
                                                   BlankZero=Yes }
    { 22  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 23  ;   ;Total No of Subject Absent;Integer  }
    { 50000;  ;Principal Comment2  ;Text250        }
    { 50001;  ;Class Teacher Comment2;Text250      }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Regularity          ;Option        ;OptionCaptionML=ENU=" ,Very Good,Good,Average,Poor";
                                                   OptionString=[ ,Very Good,Good,Average,Poor] }
    { 70123;  ;Effort              ;Option        ;OptionCaptionML=ENU=" ,Very Good,Good,Average,Poor";
                                                   OptionString=[ ,Very Good,Good,Average,Poor] }
    { 70124;  ;Discipline          ;Option        ;OptionCaptionML=ENU=" ,Very Good,Good,Average,Poor";
                                                   OptionString=[ ,Very Good,Good,Average,Poor] }
    { 70125;  ;Etiquette Manners   ;Option        ;OptionCaptionML=ENU=" ,Very Good,Good,Average,Poor";
                                                   OptionString=[ ,Very Good,Good,Average,Poor] }
    { 70126;  ;Principal Comment   ;Text200        }
    { 70127;  ;Extra Curr Excellence;Option       ;OptionCaptionML=ENU=" ,School Level,District Level,State Level";
                                                   OptionString=[ ,School Level,District Level,State Level] }
    { 70128;  ;Personal Traits     ;Option        ;OptionCaptionML=ENU=" ,Pleasant,Systematic,Smart,A Bit Moody,Temperamental,Sensitive";
                                                   OptionString=[ ,Pleasant,Systematic,Smart,A Bit Moody,Temperamental,Sensitive] }
    { 70129;  ;Social Movement     ;Option        ;OptionCaptionML=ENU=" ,A,B,C,D";
                                                   OptionString=[ ,A,B,C,D] }
    { 70130;  ;Hospitability       ;Option        ;OptionCaptionML=ENU=" ,A,B,C,D";
                                                   OptionString=[ ,A,B,C,D] }
    { 70131;  ;Leadership          ;Option        ;OptionCaptionML=ENU=" ,A,B,C,D";
                                                   OptionString=[ ,A,B,C,D] }
    { 70132;  ;Class Teacher Comment;Text200       }
    { 70133;  ;Description         ;Text200        }
    { 70134;  ;Published           ;Boolean       ;Description=Coding added by kathir on 2nd aug 11 for web portal }
    { 70135;  ;Maximum Working Days;Decimal       ;BlankZero=Yes }
  }
  KEYS
  {
    {    ;Student No.,Academic Year,Exam Type     ;SumIndexFields=GPA Points;
                                                   Clustered=Yes }
    {    ;Class,Section,Academic Year,Curriculum,Exam Type,Student No. }
    {    ;Class Code,Exam Type,Average             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassSectionLook@1102155000 : Record 71015;
      ClassSection@1102155001 : Record 71015;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        02  23/11/09   VIGNESH  Class - OnValidate()                Code added to get the Class Section & Curriculum
        03  23/11/09   VIGNESH  Class - OnLookup()                  Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Curriculum - OnValidate()           Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Curriculum - OnLookup()             Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnValidate()              Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnLookup()                Code added to get the Class Section & Curriculum
        08  13/1/10    KAVITHA                                      Added 2 new fields GPA Points and GPA Grade.
    }
    END.
  }
}

OBJECT Table 71056 Student Attendance Header
{
  OBJECT-PROPERTIES
  {
    Date=21-01-18;
    Time=12:00:00;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               AcademicsSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 AcademicsSetup.TESTFIELD("Attendance No.");
                 NoSeriesMgt.InitSeries(AcademicsSetup."Attendance No.",xRec."No.Series",0D,"No.","No.Series");
               END;
               "Academic Year" := EduVertical.GetAcademicYear;
               // Stop 01.KATHIR
               // Start 07. VANDHANA
               "User ID" := USERID;
               // Stop 07. VANDHANA
             END;

    CaptionML=ENU=Student Attendance Header;
    LookupPageID=Page71066;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.KATHIR
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AcademicsSetup.GET;
                                                                  NoSeriesMgt.TestManual(AcademicsSetup."Attendance No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 02.KATHIR
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Class               ;Code20        ;CaptionML=ENU=Class }
    { 3   ;   ;Section             ;Code20        ;CaptionML=ENU=Section }
    { 4   ;   ;Date                ;Date          ;CaptionML=ENU=Date }
    { 5   ;   ;Hour                ;Integer       ;OnValidate=BEGIN

                                                                // Start 06.KATHIR
                                                                StudentAttendanceHeader.RESET;
                                                                StudentAttendanceHeader.SETCURRENTKEY(Class,Section,Curriculum,"Academic Year","Subject Code",Date,Hour);
                                                                StudentAttendanceHeader.SETRANGE(Class,Class);
                                                                StudentAttendanceHeader.SETRANGE(Section,Section);
                                                                StudentAttendanceHeader.SETRANGE(Curriculum,Curriculum);
                                                                StudentAttendanceHeader.SETRANGE("Academic Year","Academic Year");
                                                                StudentAttendanceHeader.SETRANGE(Date,Date);
                                                                StudentAttendanceHeader.SETRANGE(Hour,Hour);
                                                                IF StudentAttendanceHeader.FINDFIRST THEN
                                                                  ERROR(Text002);
                                                                // Start 06.KATHIR
                                                              END;

                                                   CaptionML=ENU=Hour;
                                                   BlankZero=Yes }
    { 6   ;   ;Staff Code          ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                // Start 05.KATHIR
                                                                IF Employee.GET("Staff Code") THEN
                                                                  "Staff Name" := Employee."First Name"
                                                                ELSE
                                                                  "Staff Name" := '';
                                                                // Stop 05.KATHIR
                                                              END;

                                                   CaptionML=ENU=Staff Code }
    { 7   ;   ;Present All         ;Boolean       ;CaptionML=ENU=Present All }
    { 8   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 9   ;   ;Curriculum          ;Code20        ;CaptionML=ENU=Curriculum }
    { 10  ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 11  ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   OnLookup=BEGIN
                                                              // Start 03.KATHIR
                                                              ClassSubjects.RESET;
                                                              ClassSubjects.SETRANGE(Class,Class);
                                                              ClassSubjects.SETRANGE(Curriculum,Curriculum);
                                                              ClassSubjects.SETRANGE("Academic Year","Academic Year");
                                                              IF PAGE.RUNMODAL(0,ClassSubjects) = ACTION::LookupOK THEN
                                                                "Subject Code" := ClassSubjects.Subject
                                                              // Stop 03.KATHIR
                                                            END;

                                                   CaptionML=ENU=Subject Code }
    { 13  ;   ;Staff Name          ;Text50        ;CaptionML=ENU=Staff Name;
                                                   Editable=No }
    { 14  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 20  ;   ;FN/AN               ;Option        ;OnValidate=BEGIN
                                                                {
                                                                IF "FN/AN" = 0 THEN
                                                                  ERROR(Text001);

                                                                // Start 10.KATHIR
                                                                StudentAttendanceHeader.RESET;
                                                                StudentAttendanceHeader.SETCURRENTKEY(Class,Section,Curriculum,"Academic Year",Date,"FN/AN");
                                                                StudentAttendanceHeader.SETRANGE(Class,Class);
                                                                StudentAttendanceHeader.SETRANGE(Section,Section);
                                                                StudentAttendanceHeader.SETRANGE(Curriculum,Curriculum);
                                                                StudentAttendanceHeader.SETRANGE("Academic Year","Academic Year");
                                                                StudentAttendanceHeader.SETRANGE(Date,Date);
                                                                StudentAttendanceHeader.SETRANGE("FN/AN","FN/AN");
                                                                IF StudentAttendanceHeader.FINDFIRST THEN
                                                                  ERROR(Text002);
                                                                // Start 10.KATHIR
                                                                  }
                                                              END;

                                                   OptionCaptionML=ENU=" ,FN,AN";
                                                   OptionString=[ ,FN,AN] }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class,Section,Curriculum,Academic Year,Subject Code,Date,Hour }
    {    ;Class Code,Subject Code,Date,Hour        }
    {    ;Class,Section,Curriculum,Academic Year,Date,FN/AN }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AcademicsSetup@1102155000 : Record 71040;
      NoSeriesMgt@1102155001 : Codeunit 396;
      EduVertical@1102155002 : Codeunit 71880;
      StudentAttendanceHeader@1102155003 : Record 71056;
      ClassSubjects@1102155004 : Record 71048;
      Employee@1102155005 : Record 5200;
      ClassSection@1102155007 : Record 71015;
      Text000@1102155008 : TextConst 'ENU=Attendence is created for this subject and hour.';
      Text001@1102159000 : TextConst 'ENU=FN/AN is Mandatory';
      Text002@1102159001 : TextConst 'ENU=Attendence is already created for this Class';

    PROCEDURE Assistedit@1102155000(OldAttendance@1102155000 : Record 71056) : Boolean;
    BEGIN
      // Start 04.KATHIR
      WITH OldAttendance DO BEGIN
        OldAttendance := Rec;
        AcademicsSetup.GET;
        AcademicsSetup.TESTFIELD("Attendance No.");
        IF NoSeriesMgt.SelectSeries(AcademicsSetup."Attendance No.",OldAttendance."No.Series","No.Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := OldAttendance;
          EXIT(TRUE);
        END;
      END;
      // Stop 04.KATHIR
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  05/10/09   KATHIR   OnInsert()                  Code added to generate Number Series and Insert Current Academic year
        02  05/10/09   KATHIR   No. - OnValidate()          Code added to generate Number Series
        03  05/10/09   KATHIR   Subject Code - OnValidate() Code added to look up the subjects for that particular,class,section and Year
        04  05/10/09   KATHIR   Assistedit()                Code added to generate Number Series
        05  11/10/09   KATHIR   Staff Code - OnValidate()   Code added to get Staff Name
        06  15/10/09   KATHIR   Hour - OnValidate()         Code added to check duplication entries
        07  19/10/09   VANDHANA OnInsert                    Code to assign User ID.
        08  23/11/09   VIGNESH  Class - OnValidate()        Code added to get the Class Section & Curriculum
        09  23/11/09   VIGNESH  Class - OnLookup()          Code added to get the Class Section & Curriculum
        10  23/11/09   VIGNESH  Curriculum - OnValidate()   Code added to get the Class Section & Curriculum
        11  23/11/09   VIGNESH  Curriculum - OnLookup()     Code added to get the Class Section & Curriculum
        12  23/11/09   VIGNESH  Section - OnValidate()      Code added to get the Class Section & Curriculum
        13  23/11/09   VIGNESH  Section - OnLookup()        Code added to get the Class Section & Curriculum
        14  25/11/09   VIGNESH  Subject Code - OnLookup()   Code commente for the section filter

      SJ6.01 21/01/18 GB
        Enabled Edit property for class, section and curriculum
    }
    END.
  }
}

OBJECT Table 71057 Student Attendance Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               IF StudentAttendanceHeader.GET("Document No.") THEN
                // Start 10.VIGNESH
                 IF NOT StudentAttendanceHeader."Present All" THEN BEGIN
                // Stop 10.VIGNESH
                   Class := StudentAttendanceHeader.Class;
                   Section := StudentAttendanceHeader.Section;
                   "Subject Code" := StudentAttendanceHeader."Subject Code";
                   Date := StudentAttendanceHeader.Date;
                   Hour := StudentAttendanceHeader.Hour;
                   "Academic Year" := StudentAttendanceHeader."Academic Year";
                   Curriculum := StudentAttendanceHeader.Curriculum;
                 // Start 10.VIGNESH
                 END ELSE
                   ERROR(Text000);
                 // Stop 10.VIGNESH
               // Stop 01.KATHIR
             END;

    CaptionML=ENU=Student Attendance Line;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Class               ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Student Attendance Header".Class WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Class;
                                                   Editable=No }
    { 4   ;   ;Section             ;Code10        ;TableRelation=Section;
                                                   CaptionML=ENU=Section }
    { 5   ;   ;Curriculum          ;Code20        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 6   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject Code }
    { 7   ;   ;Date                ;Date          ;CaptionML=ENU=Date }
    { 8   ;   ;Hour                ;Integer       ;CaptionML=ENU=Hour }
    { 9   ;   ;Student No.         ;Code20        ;TableRelation=Student WHERE (Student Status=FILTER(Student));
                                                   OnValidate=BEGIN
                                                                {
                                                                Student.CLEARMARKS;
                                                                Student.RESET;
                                                                // Start 02.KATHIR
                                                                IF StudentAttendanceHeader.GET("Document No.") THEN BEGIN
                                                                 // Start 11.VIGNESH
                                                                  IF NOT StudentAttendanceHeader."Present All" THEN BEGIN
                                                                 // Stop 11.VIGNESH
                                                                    StudentSubjects.RESET;
                                                                    StudentSubjects.SETCURRENTKEY(Class,Section,Curriculum,"Academic Year");
                                                                    StudentSubjects.SETRANGE("Class Code",StudentAttendanceHeader."Class Code");
                                                                    StudentSubjects.SETRANGE(Subject,StudentAttendanceHeader."Subject Code");
                                                                    StudentSubjects.SETRANGE("Student No.","Student No.");
                                                                    IF StudentSubjects.FINDFIRST THEN BEGIN
                                                                      IF Student.GET(StudentSubjects."Student No.") AND (Student."Student Status" = Student."Student Status"::Student)
                                                                      THEN BEGIN
                                                                        StudentAttendanceLine.RESET;
                                                                        StudentAttendanceLine.SETRANGE("Document No.","Document No.");
                                                                        StudentAttendanceLine.SETRANGE("Student No.",Student."No.");
                                                                        IF StudentAttendanceLine.COUNT = 0 THEN
                                                                          "Student Name" := Student.Name
                                                                        ELSE BEGIN
                                                                          "Student No." := '';
                                                                          "Student Name" := '';
                                                                          ERROR(Text001);
                                                                        END;
                                                                      END ELSE BEGIN
                                                                        "Student No." := '';
                                                                        "Student Name" := '';
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      "Student No." := '';
                                                                      "Student Name" := '';
                                                                      ERROR(Text002,"Student No.",StudentAttendanceHeader.Class);
                                                                    END;
                                                                  END ELSE
                                                                    ERROR(Text000);
                                                                END;
                                                                // Stop 02.KATHIR
                                                                }
                                                              END;

                                                   OnLookup=BEGIN
                                                              Student.CLEARMARKS;
                                                              Student.RESET;
                                                              // Start 02.KATHIR
                                                              IF StudentAttendanceHeader.GET("Document No.") THEN BEGIN
                                                               // Start 11.VIGNESH
                                                                IF NOT StudentAttendanceHeader."Present All" THEN BEGIN
                                                               // Stop 11.VIGNESH
                                                                  StudentSubjects.RESET;
                                                                  StudentSubjects.SETCURRENTKEY(Class,Section,Curriculum,"Academic Year");
                                                                  StudentSubjects.SETRANGE("Class Code",StudentAttendanceHeader."Class Code");
                                                                  StudentSubjects.SETRANGE(Subject,StudentAttendanceHeader."Subject Code");
                                                                  IF StudentSubjects.FINDSET THEN
                                                                    REPEAT
                                                                      IF Student.GET(StudentSubjects."Student No.") THEN
                                                                        IF Student."Student Status" = Student."Student Status"::Student THEN
                                                                          Student.MARK(TRUE);
                                                                    UNTIL StudentSubjects.NEXT = 0;
                                                                  Student.MARKEDONLY(TRUE);
                                                                  IF PAGE.RUNMODAL(0,Student) = ACTION::LookupOK THEN BEGIN
                                                                    // Start 09.VIGNESH
                                                                    StudentAttendanceLine.RESET;
                                                                    StudentAttendanceLine.SETRANGE("Document No.","Document No.");
                                                                    StudentAttendanceLine.SETRANGE("Student No.",Student."No.");
                                                                    IF StudentAttendanceLine.ISEMPTY THEN BEGIN
                                                                    // Stop 09.VIGNESH
                                                                      "Student No." := Student."No.";
                                                                      "Student Name" := Student.Name;
                                                                    // Start 11.VIGNESH
                                                                    END ELSE BEGIN
                                                                      "Student No." := '';
                                                                      "Student Name" := '';
                                                                      ERROR(Text001);
                                                                    END;
                                                                    // Stop 11.VIGNESH
                                                                    //END;
                                                                  END;
                                                                END ELSE
                                                                  ERROR(Text000);
                                                              END;
                                                              // Stop 02.KATHIR
                                                            END;

                                                   CaptionML=ENU=Student No. }
    { 10  ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name }
    { 11  ;   ;Attendance Type     ;Option        ;CaptionML=ENU=Attendance Type;
                                                   OptionCaptionML=ENU=" ,Present,Absent,On Duty,Leave";
                                                   OptionString=[ ,Present,Absent,On Duty,Leave] }
    { 12  ;   ;Academic Year       ;Code20        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 13  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 14  ;   ;Class Code          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Student Attendance Header"."Class Code" WHERE (No.=FIELD(Document No.)));
                                                   TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StudentAttendanceHeader@1102155000 : Record 71056;
      Student@1102155001 : Record 71046;
      StudentSubjects@1102155002 : Record 71049;
      ClassSection@1102155003 : Record 71015;
      StudentAttendanceLine@1102155004 : Record 71057;
      Text000@1102155005 : TextConst 'ENU=All  is marked present.';
      Text001@1102155006 : TextConst 'ENU=The student is already selected.';
      Text002@1102155007 : TextConst 'ENU=Student %1 does not belong to class %2.';

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  05/10/09  KATHIR    OnInsert()                  code added to Insert details from Student attendance header
        02  05/10/09  KATHIR    Student No. - OnLookup()   Code added to get Student Nos for Particular class,acad yr,curriculum,section
        03  23/11/09   VIGNESH  Class - OnValidate()        Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Class - OnLookup()          Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Curriculum - OnValidate()   Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Curriculum - OnLookup()     Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnValidate()      Code added to get the Class Section & Curriculum
        08  23/11/09   VIGNESH  Section - OnLookup()        Code added to get the Class Section & Curriculum
        09  27/11/09   VIGNESH  Student No. - OnLookup()    Code added to validate the student if already there
        10  27/11/09   VIGNESH  OnInsert()                  Code added to Validate if Present all is marked
        11  27/11/09   VIGNESH  Student No. - OnLookup()    Code added to Validate if Present all is marked
    }
    END.
  }
}

OBJECT Table 71058 Promotion Weightage
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Promotion Weightage;
  }
  FIELDS
  {
    { 1   ;   ;Class Code          ;Code10        ;TableRelation="Class Card".Class;
                                                   CaptionML=ENU=Class Code }
    { 2   ;   ;Curriculum Code     ;Code10        ;TableRelation="Class Card".Curriculum;
                                                   CaptionML=ENU=Curriculum Code }
    { 3   ;   ;Academic Year Code  ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year Code }
    { 4   ;   ;Exam Type Code      ;Code10        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Type Code }
    { 5   ;   ;Weightage           ;Decimal       ;OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                WeigAge := 0;
                                                                PromotionWeight.RESET;
                                                                PromotionWeight.SETCURRENTKEY("Class Code","Curriculum Code","Academic Year Code","Exam Type Code");
                                                                PromotionWeight.SETRANGE("Class Code","Class Code");
                                                                PromotionWeight.SETRANGE("Curriculum Code","Curriculum Code");
                                                                PromotionWeight.SETRANGE("Academic Year Code","Academic Year Code");
                                                                IF PromotionWeight.FINDSET THEN
                                                                  REPEAT
                                                                    WeigAge += PromotionWeight.Weightage ;
                                                                  UNTIL PromotionWeight.NEXT = 0;

                                                                IF (WeigAge + Weightage - xRec.Weightage) > 100 THEN
                                                                  ERROR(Text000);
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Weightage }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Class Code,Curriculum Code,Academic Year Code,Exam Type Code;
                                                   SumIndexFields=Weightage;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PromotionWeight@1102155000 : Record 71058;
      WeigAge@1102155001 : Decimal;
      Text000@1102155003 : TextConst 'ENU=Weightage cannot be more than 100.';

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  06/10/09  KATHIR   Weightage - OnValidate()      Code added to Check the Overall weightage not to exceed 100.
        02  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        03  23/11/09 VIGNESH  Class Code - OnValidate()      Code added to get the Look up value for Class & Curriculum
        04  23/11/09 VIGNESH  Class Code - OnLookup()        Code added to get the Look up value for Class & Curriculum
        05  23/11/09 VIGNESH  Curriculum Code - OnValidate() Code added to get the Look up value for Class&Curriculum last attend
        06  23/11/09 VIGNESH  Curriculum Code - OnLookup()   Code added to get the Look up value for Class&Curriculum last attend
    }
    END.
  }
}

OBJECT Table 71059 Promotion Suggestion
{
  OBJECT-PROPERTIES
  {
    Date=12-04-22;
    Time=15:50:55;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Promotion Suggestion;
  }
  FIELDS
  {
    { 1   ;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No.;
                                                   Editable=No }
    { 2   ;   ;Class               ;Code10        ;CaptionML=ENU=Class;
                                                   Editable=No }
    { 3   ;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 4   ;   ;Curriculum          ;Code20        ;CaptionML=ENU=Curriculum;
                                                   Editable=No }
    { 5   ;   ;Pass %              ;Decimal       ;CaptionML=ENU=Pass %;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 6   ;   ;Marks Obtained      ;Decimal       ;CaptionML=ENU=Marks Obtained;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 7   ;   ;Result              ;Option        ;CaptionML=ENU=Result;
                                                   OptionCaptionML=ENU=Promoted,Detained,Withheld;
                                                   OptionString=Promoted,Detained,Withheld }
    { 8   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name;
                                                   Editable=No }
    { 9   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 12  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Student No.,Class Code                  ;Clustered=Yes }
    {    ;Class,Section,Curriculum,Academic Year   }
    {    ;Class Code                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassSection@1102155000 : Record 71015;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                      Code to assign User ID.
        02  23/11/09   VIGNESH  Class - OnValidate()          Code added to get the Class Section & Curriculum
        03  23/11/09   VIGNESH  Class - OnLookup()            Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Curriculum - OnValidate()     Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Curriculum - OnLookup()       Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnValidate()        Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnLookup()          Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71060 Promotion History
{
  OBJECT-PROPERTIES
  {
    Date=12-04-22;
    Time=15:51:20;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Promotion History;
  }
  FIELDS
  {
    { 1   ;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No. }
    { 2   ;   ;Class               ;Code10        ;CaptionML=ENU=Class;
                                                   Editable=No }
    { 3   ;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 4   ;   ;Curriculum          ;Code20        ;CaptionML=ENU=Curriculum;
                                                   Editable=No }
    { 5   ;   ;Pass %              ;Decimal       ;CaptionML=ENU=Pass %;
                                                   BlankZero=Yes }
    { 6   ;   ;Marks Obtained      ;Decimal       ;CaptionML=ENU=Marks Obtained;
                                                   BlankZero=Yes }
    { 7   ;   ;Result              ;Option        ;CaptionML=ENU=Result;
                                                   OptionCaptionML=ENU=Promoted,Detained,Withheld;
                                                   OptionString=Promoted,Detained,Withheld }
    { 8   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name }
    { 9   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 10  ;   ;Promoted Academic Year;Code10      ;CaptionML=ENU=Promoted Academic Year }
    { 11  ;   ;Promoted Class      ;Code10        ;CaptionML=ENU=Promoted Class }
    { 12  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 50000;  ;Orig.Promoted Academic Year;Code10  }
    { 50001;  ;Orig. Class Code    ;Code20         }
    { 50002;  ;Acad. Class Code    ;Code20         }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Student No.,Class,Academic Year         ;Clustered=Yes }
    {    ;Class,Section,Curriculum,Academic Year   }
    {    ;Class Code                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassSection@1102155000 : Record 71015;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        02  23/11/09   VIGNESH  Class - OnValidate()                Code added to get the Class Section & Curriculum
        03  23/11/09   VIGNESH  Class - OnLookup()                  Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Curriculum - OnValidate()           Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Curriculum - OnLookup()             Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnValidate()              Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnLookup()                Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71061 Withdrawal
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               Academics.GET;
               IF "No. Series" = '' THEN BEGIN
                 Academics.TESTFIELD("Withdrawl No.");
                 NoSeriesMgt.InitSeries(Academics."Withdrawl No.",xRec."No. Series",0D,"No.","No. Series");
               END;
               // Stop 01.KATHIR
               // Start 02.KATHIR
               "Academic Year" := EduVert.GetAdmissionYear;
               "Withdrawal date" := WORKDATE;
               // Stop 02.KATHIR
               // Start 06. VANDHANA
               "User ID" := USERID;
               // Stop 06. VANDHANA
             END;

    CaptionML=ENU=Withdrawal;
    LookupPageID=Page71069;
    DrillDownPageID=Page71069;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 2   ;   ;Student No.         ;Code20        ;TableRelation=Student WHERE (Student Status=FILTER(Student));
                                                   OnValidate=BEGIN
                                                                // Start 03.KATHIR
                                                                IF Student.GET("Student No.") THEN BEGIN
                                                                  Class := Student.Class;
                                                                  Section := Student.Section;
                                                                  Curriculum := Student.Curriculum;
                                                                END;
                                                                // Stop 03.KATHIR

                                                                // Start 04.KATHIR
                                                                Withdrawl.SETRANGE("Student No.","Student No.");
                                                                IF Withdrawl.FINDFIRST THEN
                                                                  ERROR(Text000);
                                                                // Stop 04.KATHIR
                                                              END;

                                                   CaptionML=ENU=Student No. }
    { 3   ;   ;Class               ;Code10        ;CaptionML=ENU=Class;
                                                   Editable=No }
    { 4   ;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 5   ;   ;Curriculum          ;Code20        ;CaptionML=ENU=Curriculum;
                                                   Editable=No }
    { 6   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 7   ;   ;Withdrawal date     ;Date          ;CaptionML=ENU=Withdrawal date }
    { 8   ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 9   ;   ;TC Issued           ;Boolean       ;CaptionML=ENU=TC Issued }
    { 10  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 26  ;   ;Reason for Leaving  ;Code20        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason for Leaving }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Academics@1102155000 : Record 71040;
      NoSeriesMgt@1102155001 : Codeunit 396;
      EduVert@1102155002 : Codeunit 71880;
      Student@1102155003 : Record 71046;
      Withdrawl@1102155004 : Record 71061;
      ClassSection@1102155005 : Record 71015;
      Text000@1102155006 : TextConst 'ENU=Record already exists.';

    PROCEDURE Assistedit@1102155000(OldWithdrawl@1102155000 : Record 71061) : Boolean;
    BEGIN
      // Start 05.KATHIR
      WITH OldWithdrawl DO BEGIN
        OldWithdrawl := Rec;
        Academics.GET;
        Academics.TESTFIELD("Withdrawl No.");
        IF NoSeriesMgt.SelectSeries(Academics."Withdrawl No.",OldWithdrawl."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := OldWithdrawl;
          EXIT(TRUE);
        END;
      END;
      // stop 05.KATHIR
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
       01   12/10/09   KATHIR   OnInsert()                  Code added to generate Number series
       02   12/10/09   KATHIR   OnInsert()                  Code added to get current academic year and withdrawl date
       03   12/10/09   KATHIR   Student No. - OnValidate()  Code added to get student class,section and Curriculum
       04   12/10/09   KATHIR   Student No. - OnValidate()  Code added to check duplicate students
       05   12/10/09   KATHIR   Assistedit()                Code added to generate number series
       06   19/10/09   VANDHANA OnInsert                    Code to assign User ID.
       07  23/11/09   VIGNESH  Class - OnValidate()         Code added to get the Class Section & Curriculum
       08  23/11/09   VIGNESH  Class - OnLookup()           Code added to get the Class Section & Curriculum
       09  23/11/09   VIGNESH  Curriculum - OnValidate()    Code added to get the Class Section & Curriculum
       10  23/11/09   VIGNESH  Curriculum - OnLookup()      Code added to get the Class Section & Curriculum
       11  23/11/09   VIGNESH  Section - OnValidate()       Code added to get the Class Section & Curriculum
       12  23/11/09   VIGNESH  Section - OnLookup()         Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71062 Transfer Certificate
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               Academics.GET;
               IF "No. Series" = '' THEN BEGIN
                 Academics.TESTFIELD("TC No.");
                 NoSeriesMgt.InitSeries(Academics."TC No.",xRec."No. Series",0D,"TC No.","No. Series");
               END;
               // Stop 01.KATHIR
               // Start 05. VANDHANA
               "User ID" := USERID;
               // Stop 05. VANDHANA
             END;

    CaptionML=ENU=Transfer Certificate;
    LookupPageID=Page71071;
  }
  FIELDS
  {
    { 1   ;   ;TC No.              ;Code20        ;CaptionML=ENU=TC No. }
    { 2   ;   ;Student No.         ;Code20        ;TableRelation=Student;
                                                   CaptionML=ENU=Student No. }
    { 3   ;   ;Class               ;Code10        ;CaptionML=ENU=Class;
                                                   Editable=No }
    { 4   ;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 5   ;   ;Curriculum          ;Code20        ;CaptionML=ENU=Curriculum;
                                                   Editable=No }
    { 6   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 7   ;   ;Withdrawl date      ;Date          ;CaptionML=ENU=Withdrawl date }
    { 9   ;   ;TC Issued           ;Boolean       ;CaptionML=ENU=TC Issued }
    { 20  ;   ;Date of Birth       ;Date          ;OnValidate=BEGIN
                                                                // Start 04.KATHIR
                                                                IF "Date of Birth" <> 0D THEN BEGIN
                                                                  Age := TODAY - "Date of Birth";
                                                                  TempAge := ROUND(Age / 365,1,'=');
                                                                  Age2 := Age MOD 365;
                                                                  Months := ROUND(Age2 / 30,1,'=');
                                                                  Age := TempAge - 1;
                                                                END ELSE BEGIN
                                                                  CLEAR(Age);
                                                                  CLEAR(Months);
                                                                END;
                                                                // Stop 04.KATHIR
                                                              END;

                                                   CaptionML=ENU=Date of Birth }
    { 21  ;   ;Age                 ;Integer       ;CaptionML=ENU=Age;
                                                   BlankZero=Yes }
    { 22  ;   ;Date of Issue       ;Date          ;CaptionML=ENU=Date of Issue }
    { 23  ;   ;Conduct             ;Text100       ;CaptionML=ENU=Conduct }
    { 24  ;   ;Withdrawl No.       ;Code20        ;TableRelation=Withdrawal WHERE (TC Issued=FILTER(No));
                                                   OnValidate=BEGIN
                                                                // Start 02.KATHIR
                                                                IF Withdrawl.GET("Withdrawl No.") THEN BEGIN
                                                                  TRANSFERFIELDS(Withdrawl);
                                                                  // Start 06.VIGNESH
                                                                  IF Student.GET(Withdrawl."Student No.") THEN BEGIN
                                                                    "Date of Birth" := Student."Date Of Birth";
                                                                    VALIDATE("Date of Birth");
                                                                  END;
                                                                  // Stop 06.VIGNESH
                                                                  "TC No." := xRec."TC No.";
                                                                END;

                                                                TransferCertificate.RESET;
                                                                TransferCertificate.SETRANGE("Withdrawl No.","Withdrawl No.");
                                                                IF TransferCertificate.FINDFIRST THEN
                                                                  ERROR(Text000);
                                                                // Stop 02.KATHIR
                                                              END;

                                                   CaptionML=ENU=Withdrawl No. }
    { 25  ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 26  ;   ;Reason for Leaving  ;Code20        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason for Leaving }
    { 27  ;   ;Months              ;Integer       ;CaptionML=ENU=Months;
                                                   BlankZero=Yes }
    { 28  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;TC No.                                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Academics@1102155000 : Record 71040;
      NoSeriesMgt@1102155001 : Codeunit 396;
      Withdrawl@1102155002 : Record 71061;
      TransferCertificate@1102155003 : Record 71062;
      Age2@1102155005 : Decimal;
      TempAge@1102155004 : Decimal;
      Student@1102155006 : Record 71046;
      ClassSection@1102155007 : Record 71015;
      Text000@1102155008 : TextConst 'ENU=Record already exists.';

    PROCEDURE Assistedit@1102155000(OldTC@1102155000 : Record 71062) : Boolean;
    BEGIN
      // Start 03.KATHIR
      WITH OldTC DO BEGIN
        OldTC := Rec;
        Academics.GET;
        Academics.TESTFIELD("TC No.");
        IF NoSeriesMgt.SelectSeries(Academics."TC No.",OldTC."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("TC No.");
          Rec := OldTC;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.KATHIR
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  12/10/09   KATHIR   OnInsert()                   Code added for number series
        02  12/10/09   KATHIR   Withdrawl No. - OnValidate() Code added to Transfer fields from Withdrawl to TC
                                                             Code added to Check whether same Withdrawl no exits in TC
        03  12/10/09   KATHIR   Assistedit()                 Code added for number series
        04  12/10/09   KATHIR   Date of Birth - OnValidate() Code added to Get Age
        05  19/10/09   VANDHANA  OnInsert                     Code to assign User ID.
        06  17/11/09   VIGNESH  Withdrawl No. - OnValidate() Code added to get the data of birth from the Student table and VALIDATE
        07  23/11/09   VIGNESH  Class - OnValidate()         Code added to get the Class Section & Curriculum
        08  23/11/09   VIGNESH  Class - OnLookup()           Code added to get the Class Section & Curriculum
        09  23/11/09   VIGNESH  Curriculum - OnValidate()    Code added to get the Class Section & Curriculum
        10  23/11/09   VIGNESH  Curriculum - OnLookup()      Code added to get the Class Section & Curriculum
        11  23/11/09   VIGNESH  Section - OnValidate()       Code added to get the Class Section & Curriculum
        12  23/11/09   VIGNESH  Section - OnLookup()         Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71065 Exam Schedule Head - SCH
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:40:20;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               AcademicsSetup.GET;
               IF "No." = '' THEN BEGIN
                 AcademicsSetup.TESTFIELD("Exam Schedule No.");
                 NoSeriesManagement.InitSeries(AcademicsSetup."Exam Schedule No.",xRec."No. Series",0D,"No.","No. Series");
               END;

               "Academic Year" := EducationVertical.GetAcademicYear;
               "User ID" := USERID;
             END;

    CaptionML=ENU=Exam Schedule Head - SCH;
    LookupPageID=Page71108;
    DrillDownPageID=Page71108;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AcademicsSetup.GET;
                                                                  NoSeriesManagement.TestManual(AcademicsSetup."Exam Schedule No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Date                ;Date          ;CaptionML=ENU=Date }
    { 4   ;   ;Exam Code           ;Code20        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Code }
    { 5   ;   ;Exam Slot           ;Code20        ;CaptionML=ENU=Exam Slot }
    { 6   ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 7   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 8   ;   ;Start Time          ;Time          ;CaptionML=ENU=Start Time }
    { 9   ;   ;End Time            ;Time          ;CaptionML=ENU=End Time }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CompanyInPageation@1102155004 : Record 79;
      NoSeriesManagement@1102155003 : Codeunit 396;
      AcademicsSetup@1102155002 : Record 71040;
      ExamScheduleHead@1102155001 : Record 71065;
      EducationVertical@1102155000 : Codeunit 71880;

    PROCEDURE AssistEdit@2(OldExamScheduleHead@1000 : Record 71065) : Boolean;
    BEGIN
      WITH ExamScheduleHead DO BEGIN
        ExamScheduleHead := Rec;
        AcademicsSetup.GET;
        AcademicsSetup.TESTFIELD("Exam Schedule No.");
        IF NoSeriesManagement.SelectSeries(AcademicsSetup."Exam Schedule No.",
           OldExamScheduleHead."No. Series","No. Series")
        THEN BEGIN
          NoSeriesManagement.SetSeries("No.");
          Rec := ExamScheduleHead;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 71066 Exam Schedule Line - SCH
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:41:55;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := EducationVertical.GetAcademicYear;
               "User ID" := USERID;
               // Start 01.GUNA
               IF ExamScheduleHead.GET("Document No.") THEN BEGIN
                 "Exam Slot" := ExamScheduleHead."Exam Slot";
                 "Start Time" := ExamScheduleHead."Start Time";
                 "End Time" := ExamScheduleHead."End Time";
                 "Exam Date" := ExamScheduleHead.Date;
                 "Exam Code" := ExamScheduleHead."Exam Code";
               END;

               // Stop 01.GUNA
             END;

    CaptionML=ENU=Exam Schedule Line - SCH;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 2   ;   ;Class               ;Code20        ;CaptionML=ENU=Class;
                                                   Editable=Yes }
    { 3   ;   ;Section             ;Code20        ;CaptionML=ENU=Section;
                                                   Editable=Yes }
    { 4   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject Code }
    { 5   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculam Code;
                                                   Editable=Yes }
    { 6   ;   ;Hall Code           ;Code20        ;CaptionML=ENU=Hall Code }
    { 7   ;   ;No of Students      ;Integer       ;CaptionML=ENU=No of Students }
    { 8   ;   ;Examiner Type       ;Option        ;CaptionML=ENU=Examiner Type;
                                                   OptionCaptionML=ENU=" ,Internal,External";
                                                   OptionString=[ ,Internal,External] }
    { 9   ;   ;Examiner Code       ;Code20        ;CaptionML=ENU=Examiner Code }
    { 10  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 11  ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year;
                                                   Editable=Yes }
    { 12  ;   ;Start Time          ;Time          ;CaptionML=ENU=Start Time }
    { 13  ;   ;End Time            ;Time          ;CaptionML=ENU=End Time }
    { 14  ;   ;Exam Slot           ;Code20        ;CaptionML=ENU=Exam Slot }
    { 15  ;   ;Exam Date           ;Date          ;CaptionML=ENU=Exam Date }
    { 16  ;   ;Exam Code           ;Code20        ;TableRelation="Exam Code";
                                                   CaptionML=ENU=Exam Code }
    { 17  ;   ;Mark Header Code    ;Code20        ;CaptionML=ENU=Mark Header Code }
    { 18  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Class                                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;
      ExamScheduleHead@1102155001 : Record 71065;
      ClassSection@1102155002 : Record 71015;

    BEGIN
    {

        No   Date      Sign     Trigger            Description
      -----------------------------------------------------------------------------------------------
        01  08.02.10   GUNA    OnInsert()       Inserted slot and time from the header
    }
    END.
  }
}

OBJECT Table 71067 Formative Assesment
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := EducationVertical.GetAcademicYear;
               "User ID" := USERID;
             END;

    CaptionML=ENU=Formative Assesment;
    LookupPageID=Page33009227;
    DrillDownPageID=Page33009227;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    END.
  }
}

OBJECT Table 71068 Subject Formative Assesment
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := EducationVertical.GetAcademicYear;
               "User ID" := USERID;
             END;

    CaptionML=ENU=Subject Formative Assesment;
    LookupPageID=Page33009228;
    DrillDownPageID=Page33009228;
  }
  FIELDS
  {
    { 1   ;   ;Subject Code        ;Code20        ;CaptionML=ENU=Subject Code }
    { 2   ;   ;Formative Assesment Code;Code20    ;TableRelation="Formative Assesment";
                                                   CaptionML=ENU=Formative Assesment Code }
    { 3   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Subject Code,Formative Assesment Code   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    END.
  }
}

OBJECT Table 71069 Faculty Class Formative
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := EducationVertical.GetAcademicYear;
               "User ID" := USERID;
             END;

    CaptionML=ENU=Faculty Class Formative;
  }
  FIELDS
  {
    { 1   ;   ;Subject Code        ;Code20        ;CaptionML=ENU=Subject Code }
    { 2   ;   ;Formative Code      ;Code20        ;TableRelation="Subject Formative Assesment"."Formative Assesment Code" WHERE (Subject Code=FIELD(Subject Code));
                                                   CaptionML=ENU=Formative Code }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 4   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Document No.,Subject Code,Formative Code;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    END.
  }
}

OBJECT Table 71070 Class Fee Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02.KATHIR
               FeeSetup.GET;
               IF "No. Series" = '' THEN BEGIN
                 FeeSetup.TESTFIELD("Class Fee No.");
                 NoSeriesMgt.InitSeries(FeeSetup."Class Fee No.", xRec."No. Series" ,0D,"No.","No. Series");
               END;
               // Stop 02.KATHIR
               // Start 01.KATHIR
               "Academic Year" := EduVert.GetAcademicYear;
               // Stop 01.KATHIR
               // Start 05. VANDHANA
               "User ID" := USERID;
               // Stop 05. VANDHANA
             END;

    CaptionML=ENU=Class Fee Header;
    LookupPageID=Page71078;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 2   ;   ;Class               ;Code20        ;TableRelation="Class Card".Class;
                                                   OnValidate=BEGIN
                                                                // Start 06.VIGNESH
                                                                ClassCardLook.ValidateClass(Class,Curriculum,"Academic Year");
                                                                // Stop 06.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 07.VIGNESH
                                                              ClassCardLook.LookUpClass(Class,Curriculum,"Academic Year");
                                                              // Stop 07.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Class }
    { 4   ;   ;Fee Classification Code;Code20     ;TableRelation="Fee Classification";
                                                   OnValidate=BEGIN
                                                                // Start 04.KATHIR
                                                                ClassFeeHead.RESET;
                                                                ClassFeeHead.SETCURRENTKEY(Class,Curriculum,"Academic Year","Fee Classification Code");
                                                                ClassFeeHead.SETRANGE(Class,Class);
                                                                ClassFeeHead.SETRANGE(Curriculum,Curriculum);
                                                                ClassFeeHead.SETRANGE("Academic Year","Academic Year");
                                                                ClassFeeHead.SETRANGE("Fee Classification Code","Fee Classification Code");
                                                                IF ClassFeeHead.FINDFIRST THEN
                                                                  ERROR(Text000);

                                                                // Start 04.KATHIR
                                                              END;

                                                   CaptionML=ENU=Fee Classification Code }
    { 5   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 6   ;   ;Curriculum          ;Code10        ;TableRelation="Class Card".Curriculum;
                                                   OnValidate=BEGIN
                                                                // Start 08.VIGNESH
                                                                ClassCardLook.ValidateCurriculum(Class,Curriculum,"Academic Year");
                                                                // Stop 08.VIGNESH
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 09.VIGNESH
                                                              ClassCardLook.LookUpCurriculum(Class,Curriculum,"Academic Year");
                                                              // Stop 09.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Curriculum }
    { 7   ;   ;Class Group         ;Code10        ;TableRelation="Class Group";
                                                   CaptionML=ENU=Class Group }
    { 8   ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class,Curriculum,Academic Year,Fee Classification Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EduVert@1102155000 : Codeunit 71880;
      NoSeriesMgt@1102155001 : Codeunit 396;
      FeeHead@1102155002 : Record 71070;
      FeeSetup@1102155003 : Record 71072;
      ClassFeeHead@1102155004 : Record 71070;
      Text000@1102155005 : TextConst 'ENU="Fees Already Generated for Current Class "';
      ClassCardLook@1102155006 : Record 71006;

    PROCEDURE AssistEdit@1102155000(OldFee@1102155001 : Record 71070) : Boolean;
    BEGIN
      // Start 03.KATHIR
      WITH FeeHead DO BEGIN
        FeeHead := Rec;
        FeeSetup.GET;
        FeeSetup.TESTFIELD("Class Fee No.");
        IF NoSeriesMgt.SelectSeries(FeeSetup."Class Fee No.",OldFee."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := FeeHead;
          EXIT(TRUE);
        END;
      END;

      // Stop 03.KATHIR
    END;

    BEGIN
    {
         No  Date    Sign      Trigger                                 Description
      -----------------------------------------------------------------------------------------------
        01  22/09/09 KATHIR    OnInsert()                              Code added to get Current academic year
        02  22/09/09 KATHIR    OnInsert()                              Code Added to generate number series
        03  22/02/09 KATHIR    AssistEdit()                            Code Added to generate number series
        04  23/09/09 KATHIR    Fee Classification Code - OnValidate()  Code Added to Check Fees Generated for Particular Class,Section
                                                                       Curriculum,Academic Year
        05  19/10/09 VANDHANA  OnInsert                                Code to assign User ID.
        06  23/11/09 VIGNESH  Class - OnLookup()                       Code added to get the Look up value for Class & Curriculum
        07  23/11/09 VIGNESH  Curriculum Intrested - OnLookup()        Code added to get the Look up value for Class & Curriculum
        08  23/11/09 VIGNESH  Class - OnLookup()                      Code added to get the Look up value for Class&Curriculum last attend
        09  23/11/09 VIGNESH  Curriculum Followed - OnLookup()        Code added to get the Look up value for Class&Curriculum last attend
        10  24/11/09 VIGNESH  Fee Classification Code - OnValidate()  Code commented Filter based on section
    }
    END.
  }
}

OBJECT Table 71071 Class Fee Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Class Fee Line;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Fee Code            ;Code20        ;TableRelation="Fee Components";
                                                   OnValidate=BEGIN
                                                                // Start 01.KATHIR
                                                                IF RecFeeComp.GET("Fee Code") THEN
                                                                  Description := RecFeeComp.Description
                                                                ELSE
                                                                  CLEAR(Description);
                                                                // Stop 01.KATHIR
                                                              END;

                                                   CaptionML=ENU=Fee Code }
    { 4   ;   ;Group Code          ;Code20        ;CaptionML=ENU=Group Code }
    { 5   ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 6   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 7   ;   ;Fee Type Code       ;Code20        ;TableRelation="Fee Type";
                                                   CaptionML=ENU=Fee Type Code }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecFeeComp@1102155000 : Record 71905;

    BEGIN
    {
         No  Date     Sign    Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  22/09/09  KATHIR Fee Code - OnValidate()    Coding added to get description from fee component
    }
    END.
  }
}

OBJECT Table 71072 Fee Setup
{
  OBJECT-PROPERTIES
  {
    Date=02-02-18;
    Time=18:15:01;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Fee Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Class Fee No.       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Class Fee No. }
    { 3   ;   ;Journal Template Name;Code20       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 4   ;   ;Journal Batch Name  ;Code20        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=ENU=Journal Batch Name }
    { 5   ;   ;Fee Number          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Fee Number }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Caution Deposit Template;Code20    ;TableRelation="Gen. Journal Template" }
    { 70123;  ;Caution Deposit Batch;Code20       ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Caution Deposit Template)) }
    { 70124;  ;Caution Deposit Number;Code20      ;TableRelation="No. Series" }
    { 70125;  ;Fee Receipt Template;Code20        ;TableRelation="Gen. Journal Template" }
    { 70126;  ;Fee Receipt Batch   ;Code20        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Fee Receipt Template)) }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71073 House
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=House;
    LookupPageID=Page71082;
    DrillDownPageID=Page71082;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;House Name          ;Text50        ;CaptionML=ENU=House Name }
    { 3   ;   ;Color               ;Option        ;CaptionML=ENU=Color;
                                                   OptionCaptionML=ENU=" ,Green,Yellow,Blue,Red";
                                                   OptionString=[ ,Green,Yellow,Blue,Red] }
    { 4   ;   ;Points              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Participant Entry Line".Points WHERE (House=FIELD(Code),
                                                                                                          Academic Year=FIELD(FILTER(Academic Year)),
                                                                                                          Event Code=FILTER(ATHLETICS)));
                                                   CaptionML=ENU=Points;
                                                   Editable=No }
    { 5   ;   ;No. of Students Allotted;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count(Student WHERE (House=FIELD(Code),
                                                                                    Academic Year=FIELD(FILTER(Academic Year)),
                                                                                    Student Status=FILTER(Student)));
                                                   CaptionML=ENU=No. of Students Allotted;
                                                   Editable=No }
    { 6   ;   ;Academic Year       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Education Setup"."Academic Year");
                                                   CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 7   ;   ;No Incharge         ;Integer       ;CaptionML=ENU=No Incharge }
    { 50000;  ;Orig. Point         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Participant Entry Line".Points WHERE (House=FIELD(Code),
                                                                                                          Academic Year=FIELD(Academic Year),
                                                                                                          Update Results=CONST(Yes))) }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to update the User id
    }
    END.
  }
}

OBJECT Table 71074 Participant Type
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Participant Type;
    LookupPageID=Page71083;
    DrillDownPageID=Page71083;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id
    }
    END.
  }
}

OBJECT Table 71075 Competition Type
{
  OBJECT-PROPERTIES
  {
    Date=12-02-18;
    Time=11:52:50;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "User ID" := USERID;
             END;

    CaptionML=ENU=Competition Type;
    LookupPageID=Page71084;
    DrillDownPageID=Page71084;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Entire Class        ;Boolean        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;IsExternalType      ;Boolean        }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71076 Student Division
{
  OBJECT-PROPERTIES
  {
    Date=15-02-18;
    Time=07:42:24;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Student Division;
    LookupPageID=Page71086;
    DrillDownPageID=Page71086;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;IsAcademicDivision  ;Boolean        }
    { 70123;  ;Class               ;Integer        }
    { 70124;  ;Section             ;Text5          }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id
    }
    END.
  }
}

OBJECT Table 71077 Co-Curricular Points Setup
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Co-Curricular Points Setup;
    LookupPageID=Page71087;
    DrillDownPageID=Page71087;
  }
  FIELDS
  {
    { 1   ;   ;Competition type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition type }
    { 2   ;   ;1st Place           ;Decimal       ;CaptionML=ENU=1st Place }
    { 3   ;   ;2nd Place           ;Decimal       ;CaptionML=ENU=2nd Place }
    { 4   ;   ;3rd Place           ;Decimal       ;CaptionML=ENU=3rd Place }
    { 5   ;   ;4th Place           ;Decimal       ;CaptionML=ENU=4th Place }
    { 6   ;   ;Participation       ;Decimal       ;CaptionML=ENU=Participation }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;5th Place           ;Decimal        }
    { 70123;  ;6th Place           ;Decimal        }
  }
  KEYS
  {
    {    ;Competition type                        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id
    }
    END.
  }
}

OBJECT Table 71078 Co-Curricular Academic Points
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Co-Curricular Academic Points;
    LookupPageID=Page71088;
    DrillDownPageID=Page71088;
  }
  FIELDS
  {
    { 1   ;   ;Grade               ;Code20        ;TableRelation=Grade;
                                                   CaptionML=ENU=Grade }
    { 2   ;   ;Points              ;Decimal       ;CaptionML=ENU=Points }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Grade                                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id
    }
    END.
  }
}

OBJECT Table 71079 House Incharge Line
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=House Incharge Line;
    LookupPageID=Page71089;
    DrillDownPageID=Page71089;
  }
  FIELDS
  {
    { 1   ;   ;House Code          ;Code20        ;CaptionML=ENU=House Code }
    { 2   ;   ;Staff Code          ;Code20        ;TableRelation="Employee Alll";
                                                   OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                HouseInchargeLine.RESET;
                                                                HouseInchargeLine.SETRANGE("Staff Code","Staff Code");
                                                                //IF HouseInchargeLine.ISEMPTY THEN BEGIN
                                                                 //"Employee all".GET("Employee all"."Employee No.");
                                                                   "Staff Name" := "Employee all".Name;
                                                                //END ELSE
                                                                  //IF HouseInchargeLine.FINDFIRST THEN
                                                                   // ERROR(Text000,HouseInchargeLine."House Code")
                                                                  //ELSE
                                                                    //"Staff Name" := '';

                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Staff Code }
    { 3   ;   ;Staff Name          ;Text50        ;CaptionML=ENU=Staff Name;
                                                   Editable=Yes }
    { 4   ;   ;Is Incharge         ;Boolean       ;OnValidate=BEGIN
                                                                // Start 03.VIGNESH
                                                                House.GET("House Code");
                                                                House.TESTFIELD("No Incharge");
                                                                HouseInchargeLine.RESET;
                                                                HouseInchargeLine.SETRANGE("House Code","House Code");
                                                                HouseInchargeLine.SETRANGE("Is Incharge",TRUE);
                                                                IF HouseInchargeLine.COUNT >= House."No Incharge" THEN
                                                                  ERROR(Text001,House."No Incharge");
                                                                // Stop 03.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Is Incharge }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;House Code,Staff Code                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HouseInchargeLine@1102155000 : Record 71079;
      "Employee all"@1102155001 : Record 71091;
      House@1102155002 : Record 71073;
      Text000@1102155003 : TextConst 'ENU=Staffs already allotted for house %1.';
      Text001@1102155004 : TextConst 'ENU=Only %1 staff can be allottted for Incharge.';

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id
      02   15.12.09  VIGNESH  Staff Code - OnValidate()  Code added to validate the Staff
      03   15.12.09  VIGNESH  Is Incharge - OnValidate() Code added to validate the Staff Incharge
    }
    END.
  }
}

OBJECT Table 71080 Co-Curricular Setup
{
  OBJECT-PROPERTIES
  {
    Date=21-01-18;
    Time=12:00:00;
    Modified=Yes;
    Version List=EDU1.0,SJ6.01;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Co-Curricular Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Competition Entry No.;Code20       ;TableRelation="No. Series";
                                                   CaptionML=ENU=Competition Entry No. }
    { 3   ;   ;Participant Entry No.;Code20       ;TableRelation="No. Series";
                                                   CaptionML=ENU=Participant Entry No. }
    { 4   ;   ;Result Individual Entry No.;Code20 ;TableRelation="No. Series";
                                                   CaptionML=ENU=Result Individual Entry No. }
    { 5   ;   ;Result Team Entry No.;Code20       ;TableRelation="No. Series";
                                                   CaptionML=ENU=Result Team Entry No. }
    { 50000;  ;Last Used Team No   ;Code20         }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id
      SJ6.01 21/01/18 GB
        Autogenerate team no
    }
    END.
  }
}

OBJECT Table 71081 Competition Entry Header
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:43:43;
    Modified=Yes;
    Version List=EDU4.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               CoCurricularSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 CoCurricularSetup.TESTFIELD("Competition Entry No.");
                 NoSeriesMgt.InitSeries(CoCurricularSetup."Competition Entry No.",xRec."No.Series",0D,"No.","No.Series");
               END;

               "User ID" := USERID;
               EducationSetup.GET;
               EducationSetup.TESTFIELD("Academic Year");
               "Academic Year" := EducationSetup."Academic Year";
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Competition Entry Header;
    LookupPageID=Page71093;
    DrillDownPageID=Page71093;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  CoCurricularSetup.GET;
                                                                  CoCurricularSetup.TESTFIELD("Competition Entry No.");
                                                                  NoSeriesMgt.TestManual(CoCurricularSetup."Competition Entry No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name }
    { 3   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type }
    { 4   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 5   ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 6   ;   ;Event Type          ;Option        ;CaptionML=ENU=Event Type;
                                                   OptionCaptionML=ENU=" ,Individual,Team,Relay";
                                                   OptionString=[ ,Individual,Team,Relay] }
    { 7   ;   ;Competition Date    ;Date          ;CaptionML=ENU=Competition Date }
    { 8   ;   ;Competition Status  ;Option        ;OnValidate=BEGIN
                                                                //IF xRec."Competition Status" = xRec."Competition Status"::Completed THEN

                                                                // ERROR(Text000);
                                                                //CompetitionEntryLine.RESET;
                                                                //CompetitionEntryLine.SETRANGE("Document No.","No.");
                                                                //IF CompetitionEntryLine.FINDSET THEN
                                                                //REPEAT
                                                                //ParticipantEntryHeader.RESET;
                                                                //ParticipantEntryHeader.SETCURRENTKEY("Competition Entry No.","Student Division");
                                                                //ParticipantEntryHeader.SETRANGE("Competition Entry No.","No.");
                                                                //ParticipantEntryHeader.SETRANGE("Student Division",CompetitionEntryLine."Student Division");
                                                                //ParticipantEntryHeader.MODIFYALL("Competition Status","Competition Status");
                                                                //UNTIL CompetitionEntryLine.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Competition Status;
                                                   OptionCaptionML=ENU=" ,Up Coming,On Going,Completed";
                                                   OptionString=[ ,Up Coming,On Going,Completed] }
    { 9   ;   ;Event Code          ;Code20        ;TableRelation="Event Master" }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Male,Female,Both";
                                                   OptionString=[ ,Male,Female,Both] }
    { 70123;  ;Participant Entry From;Date         }
    { 70124;  ;Participant Entry Till;Date         }
    { 70125;  ;ChampionShip        ;Code30         }
    { 70126;  ;ParticipantEntryUsers;Text100       }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155000 : Record 71884;
      CoCurricularSetup@1102155001 : Record 71080;
      NoSeriesMgt@1102155002 : Codeunit 396;
      RecEntry@1102155003 : Record 71081;
      CompetitionEntryHeader@1102155004 : Record 71081;
      CompetitionEntryLine@1102155005 : Record 71082;
      ParticipantEntryHeader@1102155006 : Record 71083;
      Text000@1102155007 : TextConst 'ENU=Once Completed it cannot be change';

    PROCEDURE Assistedit@1102155003(OldEntry@1102155000 : Record 71081) : Boolean;
    BEGIN
      // Start 03.VIGNESH
      WITH RecEntry DO BEGIN
        RecEntry := Rec;
        CoCurricularSetup.GET;
        CoCurricularSetup.TESTFIELD("Competition Entry No.");
        IF NoSeriesMgt.SelectSeries(CoCurricularSetup."Competition Entry No.",OldEntry."No.Series","No.Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := RecEntry;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.VIGNESH
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                 Code added to enter the User id,academic Year & No. Series
      02   15.12.09  VIGNESH  No. - OnValidate()         Code added tfor generatring No. Series
      03   15.12.09  VIGNESH  Assistedit()               Function called for generating No. Series
    }
    END.
  }
}

OBJECT Table 71082 Competition Entry Line
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=18:42:21;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "User ID" := USERID;
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Competition Entry Line;
    LookupPageID=Page71094;
    DrillDownPageID=Page71094;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 3   ;   ;Student Division    ;Code20        ;TableRelation="Student Division";
                                                   CaptionML=ENU=Student Division }
    { 4   ;   ;Min Age             ;Integer       ;CaptionML=ENU=Min Age }
    { 5   ;   ;Cut Off Date        ;Date          ;CaptionML=ENU=Cut Off Date }
    { 6   ;   ;Max Age             ;Integer       ;CaptionML=ENU=Max Age }
    { 7   ;   ;Team Size           ;Integer       ;OnValidate=BEGIN
                                                                // >> SJ6.01
                                                                // Start 01.VIGNESH
                                                                //CompetitionEntryHeader.GET("Document No.");
                                                                //IF (CompetitionEntryHeader."Event Type" <> CompetitionEntryHeader."Event Type"::Team) AND ("Team Size" <> 0) THEN BEGIN
                                                                //  "Team Size" := 0;
                                                                //  Substitute := 0;
                                                                //  ERROR(Text000);
                                                                //END;
                                                                // Stop 01.VIGNESH
                                                                // << SJ6.01
                                                              END;

                                                   CaptionML=ENU=Team Size }
    { 8   ;   ;Substitute          ;Integer       ;OnValidate=BEGIN
                                                                // >> SJ6.01
                                                                // Start 02.VIGNESH
                                                                //CompetitionEntryHeader.GET("Document No.");
                                                                //IF (CompetitionEntryHeader."Event Type" <> CompetitionEntryHeader."Event Type"::Team) AND (Substitute <> 0) THEN BEGIN
                                                                //  "Team Size" := 0;
                                                                //  Substitute := 0;
                                                                //  ERROR(Text000);
                                                                //END;
                                                                // Stop 02.VIGNESH
                                                                // << SJ6.01
                                                              END;

                                                   CaptionML=ENU=Substitute }
    { 50000;  ;Temp Cut off Date   ;Date           }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Male,Female,Both";
                                                   OptionString=[ ,Male,Female,Both] }
  }
  KEYS
  {
    {    ;Document No.,Student Division           ;Clustered=Yes }
    {    ;Max Age                                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CompetitionEntryHeader@1102155000 : Record 71081;
      Text000@1102155001 : TextConst 'ENU=You cannot enter the substitute if event type is not Team.';

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12CompetitionEntryHeader.Gender.09  VIGNESH  OnInsert()              Code added to enter the User id

      SJ6.01 21/01/18 GB
        Remove team size validation
    }
    END.
  }
}

OBJECT Table 71083 Participant Entry Header
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:43:52;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               CoCurricularSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 CoCurricularSetup.TESTFIELD("Participant Entry No.");
                 NoSeriesMgt.InitSeries(CoCurricularSetup."Participant Entry No.",xRec."No.Series",0D,"No.","No.Series");
               END;
               "User ID" := USERID;
               EducationSetup.GET;
               EducationSetup.TESTFIELD("Academic Year");
               "Academic Year" := EducationSetup."Academic Year";
               // Stop 01.VIGNESH

               IF "Event Type" = "Event Type"::Individual THEN BEGIN
               //  "Team Size":= 1;    SJ6.01
                 Substitute := 1;
               END;
             END;

    CaptionML=ENU=Participant Entry Header;
    LookupPageID=Page71097;
    DrillDownPageID=Page71097;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  CoCurricularSetup.GET;
                                                                  CoCurricularSetup.TESTFIELD("Participant Entry No.");
                                                                  NoSeriesMgt.TestManual(CoCurricularSetup."Participant Entry No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Competition Entry No.;Code20       ;TableRelation="Competition Entry Header" WHERE (Academic Year=FIELD(Academic Year),
                                                                                                   Competition Status=FILTER(<>Completed));
                                                   OnValidate=BEGIN
                                                                // Start 04.VIGNESH
                                                                IF "Update Entry" THEN
                                                                  ERROR(Text000);

                                                                IF CompetitionEntryHeader.GET("Competition Entry No.") THEN BEGIN
                                                                  IF (CompetitionEntryHeader."Participant Entry From" <= TODAY) AND
                                                                     (CompetitionEntryHeader."Participant Entry Till" >= TODAY) THEN
                                                                     BEGIN
                                                                      "Competition Name" := CompetitionEntryHeader."Competition Name";
                                                                      "Competition Type" := CompetitionEntryHeader."Competition Type";
                                                                      "Event Type" := CompetitionEntryHeader."Event Type";
                                                                      Gender :=  CompetitionEntryHeader.Gender;
                                                                      "Team No." := '';
                                                                      "Student Division" := '';
                                                                      "Competition Date" := CompetitionEntryHeader."Competition Date";
                                                                      "Competition Status" := CompetitionEntryHeader."Competition Status";
                                                                      "Event Code" := CompetitionEntryHeader."Event Code";
                                                                     END
                                                                     ELSE
                                                                       ERROR(Text004);
                                                                END ELSE BEGIN
                                                                  "Competition Name" := '';
                                                                  "Competition Type" := '';
                                                                  "Event Type" := 0;
                                                                  "Team No." := '';
                                                                  "Student Division" := '';
                                                                END;
                                                                // Stop 04.VIGNESH

                                                                // >> SJ6.01
                                                                VALIDATE("Event Type");
                                                                // << SJ6.01
                                                              END;

                                                   CaptionML=ENU=Competition Entry No. }
    { 3   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name;
                                                   Editable=No }
    { 4   ;   ;Student Division    ;Code20        ;TableRelation="Competition Entry Line"."Student Division" WHERE (Document No.=FIELD(Competition Entry No.));
                                                   OnValidate=BEGIN
                                                                // Start 05.VIGNESH
                                                                IF "Update Entry" THEN
                                                                  ERROR(Text000);

                                                                TESTFIELD("Competition Entry No.");
                                                                IF CompetitionEntryLine.GET("Competition Entry No.","Student Division") THEN BEGIN
                                                                  "Team Size" := CompetitionEntryLine."Team Size";
                                                                  Substitute := CompetitionEntryLine.Substitute;
                                                                END ELSE BEGIN
                                                                  "Team Size" := 0;
                                                                  Substitute := 0;
                                                                END;

                                                                // Stop 05.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Student Division }
    { 5   ;   ;House               ;Code20        ;TableRelation=House;
                                                   OnValidate=BEGIN
                                                                // Start 06.VIGNESH
                                                                IF "Update Entry" THEN
                                                                  ERROR(Text000);

                                                                ParticipantEntryHeader.RESET;
                                                                ParticipantEntryHeader.SETRANGE("Competition Entry No.","Competition Entry No.");
                                                                ParticipantEntryHeader.SETRANGE("Student Division","Student Division");
                                                                ParticipantEntryHeader.SETRANGE(House,House);
                                                                IF ParticipantEntryHeader.FINDFIRST THEN
                                                                  ERROR(Text001);

                                                                // Stop 06.VIGNESH
                                                              END;

                                                   CaptionML=ENU=House }
    { 6   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 7   ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 8   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type;
                                                   Editable=Yes }
    { 9   ;   ;Update Entry        ;Boolean       ;CaptionML=ENU=Update Entry }
    { 10  ;   ;Update Results      ;Boolean       ;CaptionML=ENU=Update Results }
    { 11  ;   ;Event Type          ;Option        ;OnValidate=BEGIN
                                                                // >> SJ6.01
                                                                IF ("Event Type" = "Event Type"::Team) AND ("Team No." = '') THEN BEGIN
                                                                  CoCurricularSetup.GET;
                                                                  CoCurricularSetup.TESTFIELD("Last Used Team No");
                                                                  "Team No." := INCSTR(CoCurricularSetup."Last Used Team No");
                                                                  CoCurricularSetup."Last Used Team No" := "Team No.";
                                                                  CoCurricularSetup.MODIFY;
                                                                END;
                                                                // << SJ6.01
                                                              END;

                                                   CaptionML=ENU=Event Type;
                                                   OptionCaptionML=ENU=" ,Individual,Team";
                                                   OptionString=[ ,Individual,Team];
                                                   Editable=No }
    { 12  ;   ;Team No.            ;Code20        ;OnValidate=BEGIN
                                                                // Start 04.VIGNESH
                                                                IF "Event Type" <> "Event Type"::Team THEN
                                                                  ERROR(Text002);
                                                                ParticipantEntryHeader.RESET;
                                                                ParticipantEntryHeader.SETRANGE(ParticipantEntryHeader."Competition Name","Competition Name");
                                                                ParticipantEntryHeader.SETRANGE("Team No.","Team No.");
                                                                IF ParticipantEntryHeader.FINDFIRST THEN
                                                                  ERROR(Text003);
                                                                // Stop 04.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Team No. }
    { 13  ;   ;Team Size           ;Integer       ;CaptionML=ENU=Team Size }
    { 14  ;   ;Substitute          ;Integer       ;CaptionML=ENU=Substitute }
    { 15  ;   ;Competition Date    ;Date          ;CaptionML=ENU=Competition Date }
    { 16  ;   ;Competition Status  ;Option        ;CaptionML=ENU=Competition Status;
                                                   OptionCaptionML=ENU=" ,Up Coming,On Going,Completed";
                                                   OptionString=[ ,Up Coming,On Going,Completed] }
    { 17  ;   ;Class               ;Code10        ;TableRelation=Class }
    { 18  ;   ;Event Code          ;Code20        ;TableRelation="Event Master";
                                                   Editable=No }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Male,Female,Both";
                                                   OptionString=[ ,Male,Female,Both] }
    { 70123;  ;Section             ;Code10        ;TableRelation=Section }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Competition Entry No.,Student Division   }
    {    ;Competition Entry No.,Student Division,House }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155000 : Record 71884;
      CoCurricularSetup@1102155001 : Record 71080;
      NoSeriesMgt@1102155002 : Codeunit 396;
      RecParticipant@1102155003 : Record 71083;
      CompetitionEntryHeader@1102155004 : Record 71081;
      CompetitionEntryLine@1102155005 : Record 71082;
      ParticipantEntryHeader@1102155006 : Record 71083;
      Text000@1102155007 : TextConst 'ENU=You cannot modify the entry, entry is updated.';
      Text001@1102155008 : TextConst 'ENU=House has already been selected before.';
      Text002@1102155009 : TextConst 'ENU=Only for the team event type, team no. is required.';
      Text003@1102155010 : TextConst 'ENU=Team no. should be unique.';
      Text004@1102159000 : TextConst 'ENU=Entry time expired';

    PROCEDURE Assistedit@1102155003(OldParticipant@1102155000 : Record 71083) : Boolean;
    BEGIN
      // Start 03.VIGNESH
      WITH RecParticipant DO BEGIN
        RecParticipant := Rec;
        CoCurricularSetup.GET;
        CoCurricularSetup.TESTFIELD(CoCurricularSetup."Participant Entry No.");
        IF NoSeriesMgt.SelectSeries(CoCurricularSetup."Participant Entry No.",OldParticipant."No.Series","No.Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := RecParticipant;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.VIGNESH
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                            Code added to enter the User id,academic Year & No. Series
      02   15.12.09  VIGNESH  No. - OnValidate()                    Code added tfor generatring No. Series
      03   15.12.09  VIGNESH  Assistedit()                          Function called for generating No. Series
      04   15.12.09  VIGNESH  Competition Entry No. - OnValidate()  Code added to get the Competition Name & Type
      05   15.12.09  VIGNESH  Student Division - OnValidate()       Code added for validatidating the Student Division
      06   15.12.09  VIGNESH  House - OnValidate()                  Code added for validating House
      SJ6.01 21/01/18 GB
        Autogenerate team no
    }
    END.
  }
}

OBJECT Table 71084 Participant Entry Line
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               {
               // Start 01.VIGNESH
               IF "Student No." = '' THEN
                 DELETE;
               "User ID" := USERID;
               EducationSetup.GET;
               EducationSetup.TESTFIELD("Academic Year");
               "Academic Year" := EducationSetup."Academic Year";
               IF ParticipantEntryHeader.GET("Document No.") THEN BEGIN
                 ParticipantEntryHeader.TESTFIELD("No.");
                 ParticipantEntryHeader.TESTFIELD("Competition Entry No.");
                 ParticipantEntryHeader.TESTFIELD("Student Division");
                 IF ParticipantEntryHeader."Event Type" <> ParticipantEntryHeader."Event Type"::Team THEN BEGIN
                   ParticipantEntryHeader.TESTFIELD(House);
                   ParticipantEntryLine.RESET;
                   ParticipantEntryLine.SETRANGE("Document No.","Document No.");
                   IF ParticipantEntryLine.FINDFIRST THEN
                     ERROR(Text000);
                 END;
                 "Competition Type" := ParticipantEntryHeader."Competition Type";
                 "Competition Name" := ParticipantEntryHeader."Competition Name";
                 "Student Division" := ParticipantEntryHeader."Student Division";
                 "Competition Entry No." := ParticipantEntryHeader."Competition Entry No.";
                 "Event Type" := ParticipantEntryHeader."Event Type";
                 "Team No." := ParticipantEntryHeader."Team No.";
               END;
               // Stop 01.VIGNESH
                }
             END;

    CaptionML=ENU=Participant Entry Line;
    LookupPageID=Page71102;
    DrillDownPageID=Page71102;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 3   ;   ;Student No.         ;Code20        ;OnValidate=BEGIN
                                                                IF ParticipantEntryHeader.GET("Document No.") THEN BEGIN
                                                                  IF ParticipantEntryHeader."Update Entry" THEN
                                                                    ERROR(Text001);
                                                                  ParticipantEntryHeader.TESTFIELD("Competition Entry No.");
                                                                  ParticipantEntryHeader.TESTFIELD("Student Division");
                                                                 // IF ParticipantEntryHeader."Event Type" <> ParticipantEntryHeader."Event Type"::Team THEN BEGIN
                                                                    //ParticipantEntryHeader.TESTFIELD(ParticipantEntryHeader.House);
                                                                   // ParticipantEntryLine.RESET;
                                                                    //ParticipantEntryLine.SETRANGE("Document No.","Document No.");
                                                                    //IF ParticipantEntryLine.FINDFIRST THEN
                                                                      //ERROR(Text000);
                                                                  //END;

                                                                  CompetitionEntryLine.RESET;
                                                                  CompetitionEntryLine.SETRANGE("Document No.",ParticipantEntryHeader."Competition Entry No.");
                                                                  CompetitionEntryLine.SETRANGE("Student Division",ParticipantEntryHeader."Student Division");

                                                                  IF CompetitionEntryLine.FINDFIRST THEN BEGIN
                                                                    CompetitionEntryLine.TESTFIELD("Min Age");
                                                                    CompetitionEntryLine.TESTFIELD("Max Age");
                                                                    CompetitionEntryLine.TESTFIELD("Cut Off Date");
                                                                    Student.RESET;
                                                                    IF Student.GET("Student No.") THEN BEGIN
                                                                      IF Student."Date Of Birth" <> 0D THEN BEGIN
                                                                        LocalAge1 := CompetitionEntryLine."Cut Off Date" - Student."Date Of Birth";
                                                                        TempAge1 := ROUND(LocalAge1 / 365,1,'<');
                                                                        Age3 := LocalAge1 MOD 365;
                                                                        Months2 := ROUND(Age3 / 30,1,'=');
                                                                        Age := TempAge1;
                                                                        Months := Months2;
                                                                        Student.TESTFIELD(House);
                                                                       // House :=Student.House;
                                                                      END ELSE BEGIN
                                                                        Age := 0;
                                                                        Months := 0;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              // Start 02.VIGNESH
                                                              //TESTFIELD(House);
                                                              //TESTFIELD("Academic Year");
                                                              EducationSetup.GET;
                                                              EducationSetup.TESTFIELD("Academic Year");
                                                              Student.CLEARMARKS;
                                                              IF ParticipantEntryHeader.GET("Document No.") THEN;

                                                              IF CompType.GET(ParticipantEntryHeader."Competition Type") THEN BEGIN
                                                                IF CompType."Entire Class" = FALSE THEN
                                                                 BEGIN
                                                                    CompetitionEntryLine.RESET;
                                                                    CompetitionEntryLine.SETRANGE("Document No.",ParticipantEntryHeader."Competition Entry No.");
                                                                    CompetitionEntryLine.SETRANGE("Student Division",ParticipantEntryHeader."Student Division");
                                                                    IF CompetitionEntryLine.FINDFIRST THEN
                                                                    BEGIN
                                                                      CompetitionEntryLine.TESTFIELD("Min Age");
                                                                      CompetitionEntryLine.TESTFIELD("Max Age");
                                                                      CompetitionEntryLine.TESTFIELD("Cut Off Date");
                                                                      Student.CLEARMARKS;
                                                                      Student.RESET;
                                                                      Student.SETRANGE("Student Status",Student."Student Status"::Student);

                                                                      //added by prakash
                                                                      IF  ParticipantEntryHeader.Gender <> 3 THEN
                                                                        Student.SETRANGE(Gender,ParticipantEntryHeader.Gender);

                                                                      IF ParticipantEntryHeader.House <> '' THEN
                                                                        Student.SETRANGE(House,ParticipantEntryHeader.House);
                                                                      Student.SETRANGE("Academic Year",EducationSetup."Academic Year");
                                                                      IF Student.FINDSET THEN
                                                                        REPEAT
                                                                            LocalAge := 0;
                                                                            TempAge := 0;
                                                                            Months1 := 0;
                                                                              IF Student."Date Of Birth" <> 0D THEN
                                                                              BEGIN
                                                                                LocalAge := CompetitionEntryLine."Cut Off Date" - Student."Date Of Birth";
                                                                                TempAge := ROUND(LocalAge / 365,1,'<');
                                                                                Age2 := LocalAge MOD 365;
                                                                                Months1 := ROUND(Age2 / 30,1,'=');
                                                                                LocalAge := TempAge;
                                                                              END;
                                                                            IF (LocalAge >= CompetitionEntryLine."Min Age") AND (LocalAge <= CompetitionEntryLine."Max Age") THEN
                                                                            BEGIN
                                                                              IF (LocalAge = CompetitionEntryLine."Max Age") AND (Months1 < 0) THEN
                                                                                Student.MARK(TRUE)
                                                                              ELSE
                                                                                IF LocalAge < CompetitionEntryLine."Max Age" THEN
                                                                                  Student.MARK(TRUE);
                                                                            END;
                                                                          UNTIL Student.NEXT = 0;
                                                                        Student.MARKEDONLY(TRUE);
                                                                        IF PAGE.RUNMODAL(0,Student) = ACTION::LookupOK THEN
                                                                        BEGIN
                                                                          "Student No." := Student."No.";
                                                                          "Student Name" := Student.Name;
                                                                          Student.TESTFIELD(House);
                                                                          House := Student.House;
                                                                          Gender := Student.Gender;
                                                                          "Competition Entry No." := ParticipantEntryHeader."Competition Entry No.";
                                                                          "Team No." := ParticipantEntryHeader."Team No.";
                                                                          "Student Division" := ParticipantEntryHeader."Student Division";
                                                                          "Event Type" := ParticipantEntryHeader."Event Type";
                                                                          "Event Code" := ParticipantEntryHeader."Event Code";
                                                                          VALIDATE("Student No.");
                                                                        END;
                                                                      END;
                                                                        END ELSE
                                                                        BEGIN
                                                                              Student.RESET;
                                                                              Student.SETRANGE(Student.Class,ParticipantEntryHeader.Class);
                                                                              Student.SETRANGE(Student.Section,ParticipantEntryHeader.Section);
                                                                              IF PAGE.RUNMODAL(0,Student) = ACTION::LookupOK THEN
                                                                              BEGIN
                                                                                "Student No." := Student."No.";
                                                                                "Student Name" := Student.Name;
                                                                                Student.TESTFIELD(House);
                                                                                House := Student.House;
                                                                                Gender := Student.Gender;
                                                                              END;
                                                                        END;

                                                              END;
                                                            END;

                                                   CaptionML=ENU=Student No. }
    { 4   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name }
    { 5   ;   ;Age                 ;Decimal       ;CaptionML=ENU=Age;
                                                   DecimalPlaces=0:0 }
    { 6   ;   ;House               ;Code20        ;TableRelation=House;
                                                   CaptionML=ENU=House }
    { 7   ;   ;Participant Type    ;Option        ;OnValidate=BEGIN
                                                                // Start 03.VIGNESH
                                                                ParticipantEntryHeader.GET("Document No.");
                                                                IF ParticipantEntryHeader."Update Entry" THEN
                                                                  ERROR(Text001);

                                                                //IF ParticipantEntryHeader."Event Type" <> ParticipantEntryHeader."Event Type"::Team THEN
                                                                //  ERROR(Text002);
                                                                IF ParticipantEntryHeader."Event Type" = ParticipantEntryHeader."Event Type"::Team THEN BEGIN
                                                                  IF CompetitionEntryLine.GET(ParticipantEntryHeader."Competition Entry No.",ParticipantEntryHeader."Student Division") THEN BEGIN
                                                                    CompetitionEntryLine.TESTFIELD("Team Size");
                                                                    ParticipantEntryLine.RESET;
                                                                    ParticipantEntryLine.SETRANGE("Document No.","Document No.");
                                                                    IF "Participant Type" = "Participant Type"::Main THEN BEGIN
                                                                      ParticipantEntryLine.SETRANGE("Participant Type",ParticipantEntryLine."Participant Type"::Main);
                                                                      IF CompetitionEntryLine."Team Size" <= ParticipantEntryLine.COUNT THEN
                                                                        ERROR(Text003,CompetitionEntryLine."Team Size");
                                                                    END ELSE
                                                                      IF "Participant Type" = "Participant Type"::Substitute THEN BEGIN
                                                                        ParticipantEntryLine.SETRANGE("Participant Type",ParticipantEntryLine."Participant Type"::Substitute);
                                                                        IF CompetitionEntryLine.Substitute <= ParticipantEntryLine.COUNT THEN
                                                                          ERROR(Text004,CompetitionEntryLine.Substitute);
                                                                      END;
                                                                  END;
                                                                END;
                                                                // Stop 03.VIGNESH
                                                                IF "Participant Type" <> 0 THEN BEGIN
                                                                  IF ParticipantEntryHeader.GET("Document No.")THEN;
                                                                    "Team No." := ParticipantEntryHeader."Team No.";
                                                                END
                                                                  ELSE "Team No." := '';
                                                              END;

                                                   CaptionML=ENU=Participant Type;
                                                   OptionCaptionML=ENU=" ,Main,Substitute";
                                                   OptionString=[ ,Main,Substitute] }
    { 8   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type;
                                                   Editable=Yes }
    { 9   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name;
                                                   Editable=Yes }
    { 10  ;   ;Student Division    ;Code20        ;TableRelation="Student Division";
                                                   CaptionML=ENU=Student Division;
                                                   Editable=Yes }
    { 11  ;   ;Position            ;Option        ;CaptionML=ENU=Position;
                                                   OptionCaptionML=ENU=,1st Place,2nd Place,3rd Place,4th place,5th place,6th place,Participation;
                                                   OptionString=,1st Place,2nd Place,3rd Place,4th place,5th place,6th place,Participation }
    { 12  ;   ;Points              ;Decimal       ;CaptionML=ENU=Points;
                                                   Editable=Yes }
    { 13  ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 14  ;   ;Competition Entry No.;Code20       ;CaptionML=ENU=Competition Entry No. }
    { 15  ;   ;Months              ;Decimal       ;CaptionML=ENU=Months;
                                                   DecimalPlaces=0:0 }
    { 17  ;   ;Event Type          ;Option        ;CaptionML=ENU=Event Type;
                                                   OptionCaptionML=ENU=" ,Individual,Team";
                                                   OptionString=[ ,Individual,Team];
                                                   Editable=Yes }
    { 18  ;   ;Team No.            ;Code20        ;CaptionML=ENU=Team No. }
    { 19  ;   ;Update Results      ;Boolean       ;CaptionML=ENU=Update Results }
    { 20  ;   ;Class               ;Code10        ;TableRelation=Class }
    { 21  ;   ;Event Code          ;Code20        ;TableRelation="Event Master" }
    { 50000;  ;Details NUM         ;Decimal        }
    { 50001;  ;Details TXT         ;Text140        }
    { 50002;  ;Update Entry        ;Boolean       ;CaptionML=ENU=Update Entry }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Male,Female,Both";
                                                   OptionString=[ ,Male,Female,Both] }
    { 70123;  ;Section             ;Code10        ;TableRelation=Section }
  }
  KEYS
  {
    {    ;Document No.,Student No.                ;Clustered=Yes }
    {    ;House,Academic Year,Update Results      ;SumIndexFields=Points }
    {    ;Competition Entry No.,Student Division,Student No. }
    {    ;Competition Entry No.,Student Division,Team No. }
    {    ;Student No.,Points                       }
    {    ;Team No.                                ;SumIndexFields=Points }
    {    ;Document No.,Event Code,Student Division,Student No. }
    {    ;Event Code,Student Division,Student No.  }
    {    ;House,Academic Year,Event Code          ;SumIndexFields=Points }
    {    ;Participant Type,Team No.,Competition Entry No.;
                                                   SumIndexFields=Points }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155000 : Record 71884;
      ParticipantEntryHeader@1102155001 : Record 71083;
      Student@1102155002 : Record 71046;
      ParticipantEntryLine@1102155003 : Record 71084;
      CompetitionEntryLine@1102155004 : Record 71082;
      LocalAge@1102155005 : Decimal;
      TempAge@1102155006 : Decimal;
      LocalAge1@1102155008 : Decimal;
      TempAge1@1102155007 : Decimal;
      Age2@1102155009 : Decimal;
      Months1@1102155010 : Decimal;
      Age3@1102155012 : Decimal;
      Months2@1102155011 : Decimal;
      CoCurricularPointsSetup@1102155013 : Record 71077;
      Text000@1102155014 : TextConst 'ENU=You can enter only one student for an individual.';
      Text001@1102155015 : TextConst 'ENU=You cannot modify the enttry, entry is updated.';
      Text002@1102155016 : TextConst 'ENU=Only for the Team Event, participant type is  required.';
      Text003@1102155017 : TextConst 'ENU=Only %1 students can be added in main list';
      Text004@1102155018 : TextConst 'ENU=Only %1 students can be added in substitute list.';
      CompType@1102159000 : Record 71075;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                      Code added to enter the User id,Competition name,type & division
      02   15.12.09  VIGNESH  Student No. - OnLookup()        Code added to validate & look up the students based on age
      03   15.12.09  VIGNESH  Participant Type - OnValidate() Code added for validating Particioant type
      04   15.12.09  VIGNESH  Position - OnValidate()         Code added to get the points based on position
      05   15.12.09  VIGNESH  Update Results - OnValidate()   Code added for validating Update Results
    }
    END.
  }
}

OBJECT Table 71085 Competition Result Individual
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:44:07;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               CoCurricularSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 CoCurricularSetup.TESTFIELD("Result Individual Entry No.");
                 NoSeriesMgt.InitSeries(CoCurricularSetup."Result Individual Entry No.",xRec."No.Series",0D,"No.","No.Series");
               END;

               "User ID" := USERID;
               EducationSetup.GET;
               EducationSetup.TESTFIELD("Academic Year");
               "Academic Year" := EducationSetup."Academic Year";
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Competition Result Individual;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  CoCurricularSetup.GET;
                                                                  CoCurricularSetup.TESTFIELD("Result Individual Entry No.");
                                                                  NoSeriesMgt.TestManual(CoCurricularSetup."Result Individual Entry No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Competition Entry No.;Code20       ;TableRelation="Competition Entry Header" WHERE (Academic Year=FIELD(Academic Year),
                                                                                                   Event Type=FILTER(Individual));
                                                   OnValidate=BEGIN
                                                                // Start 04.VIGNESH
                                                                IF CompetitionEntryHeader.GET("Competition Entry No.") THEN BEGIN
                                                                  "Competition Name" := CompetitionEntryHeader."Competition Name";
                                                                  "Competition Type" := CompetitionEntryHeader."Competition Type";
                                                                  "Event Type" := CompetitionEntryHeader."Event Type";
                                                                  "Student Division" := '';
                                                                  "Competition Date" := CompetitionEntryHeader."Competition Date";
                                                                  "Competition Status" := CompetitionEntryHeader."Competition Status";
                                                                END ELSE BEGIN
                                                                  "Competition Name" := '';
                                                                  "Competition Type" := '';
                                                                  "Event Type" := 0;
                                                                  "Student Division" := '';
                                                                END;
                                                                // Stop 04.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Competition Entry No. }
    { 3   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name;
                                                   Editable=No }
    { 4   ;   ;Student Division    ;Code20        ;TableRelation="Competition Entry Line"."Student Division" WHERE (Document No.=FIELD(Competition Entry No.));
                                                   CaptionML=ENU=Student Division }
    { 6   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 7   ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 8   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type;
                                                   Editable=No }
    { 9   ;   ;Competition Date    ;Date          ;CaptionML=ENU=Competition Date }
    { 10  ;   ;Competition Status  ;Option        ;CaptionML=ENU=Competition Status;
                                                   OptionCaptionML=ENU=" ,Up Coming,On Going,Completed";
                                                   OptionString=[ ,Up Coming,On Going,Completed] }
    { 11  ;   ;Event Type          ;Option        ;CaptionML=ENU=Event Type;
                                                   OptionCaptionML=ENU=" ,Individual,Team";
                                                   OptionString=[ ,Individual,Team];
                                                   Editable=No }
    { 12  ;   ;Update Results      ;Boolean       ;CaptionML=ENU=Update Results }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155004 : Record 71884;
      CoCurricularSetup@1102155003 : Record 71080;
      NoSeriesMgt@1102155002 : Codeunit 396;
      RecResult@1102155000 : Record 71085;
      CompetitionEntryHeader@1102155001 : Record 71081;

    PROCEDURE Assistedit@1102155003(OldResult@1102155000 : Record 71085) : Boolean;
    BEGIN
      // Start 03.VIGNESH
      WITH RecResult DO BEGIN
        RecResult := Rec;
        CoCurricularSetup.GET;
        CoCurricularSetup.TESTFIELD("Result Individual Entry No.");
        IF NoSeriesMgt.SelectSeries(CoCurricularSetup."Result Individual Entry No.",OldResult."No.Series","No.Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := RecResult;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.VIGNESH
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                            Code added to enter the User id,academic Year & No. Series
      02   15.12.09  VIGNESH  No. - OnValidate()                    Code added tfor generatring No. Series
      03   15.12.09  VIGNESH  Assistedit()                          Function called for generating No. Series
    }
    END.
  }
}

OBJECT Table 71086 Competition Res Indvu Line
{
  OBJECT-PROPERTIES
  {
    Date=25-05-18;
    Time=11:39:25;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Competition Res Indvu Line;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 3   ;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No.;
                                                   Editable=Yes }
    { 4   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name;
                                                   Editable=Yes }
    { 5   ;   ;Age                 ;Decimal       ;CaptionML=ENU=Age;
                                                   DecimalPlaces=0:0;
                                                   Editable=Yes }
    { 6   ;   ;House               ;Code20        ;TableRelation=House;
                                                   CaptionML=ENU=House;
                                                   Editable=Yes }
    { 7   ;   ;Participant Type    ;Option        ;CaptionML=ENU=Participant Type;
                                                   OptionCaptionML=ENU=" ,Main,Substitute";
                                                   OptionString=[ ,Main,Substitute] }
    { 8   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type;
                                                   Editable=Yes }
    { 9   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name;
                                                   Editable=Yes }
    { 10  ;   ;Student Division    ;Code20        ;TableRelation="Student Division";
                                                   CaptionML=ENU=Student Division;
                                                   Editable=Yes }
    { 11  ;   ;Position            ;Option        ;OnValidate=BEGIN
                                                                // Start 04.VIGNESH

                                                                IF CompetitionResultIndividual.GET("Document No.") AND CompetitionResultIndividual."Update Results" THEN
                                                                  ERROR(Text000);



                                                                IF CoCurricularPointsSetup.GET("Competition Type") THEN BEGIN
                                                                  CASE Position OF
                                                                    Position::"1st Place":
                                                                    BEGIN
                                                                      IF xRec.Position = Position::"1st Place" THEN BEGIN
                                                                        Points := (CoCurricularPointsSetup."1st Place" + CoCurricularPointsSetup."2nd Place")/2;
                                                                        xRec.Points := Points
                                                                      END ELSE
                                                                        Points := CoCurricularPointsSetup."1st Place";
                                                                    END;
                                                                    Position::"2nd Place":
                                                                      Points := CoCurricularPointsSetup."2nd Place";
                                                                    Position::"3rd Place":
                                                                      Points := CoCurricularPointsSetup."3rd Place";
                                                                    Position::"4th place":
                                                                      Points := CoCurricularPointsSetup."4th Place";
                                                                    Position::"5th place":
                                                                      Points := CoCurricularPointsSetup."5th Place";
                                                                    Position::"6th place":
                                                                      Points := CoCurricularPointsSetup."6th Place";
                                                                    Position::Participation:
                                                                      Points := CoCurricularPointsSetup.Participation;
                                                                  END;
                                                                  IF Points = 0 THEN
                                                                    ERROR(Text001,"Competition Type");
                                                                END;

                                                                // Stop 04.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Position;
                                                   OptionCaptionML=ENU=,1st Place,2nd Place,3rd Place,4th place,5th place,6th place,Participation;
                                                   OptionString=,1st Place,2nd Place,3rd Place,4th place,5th place,6th place,Participation }
    { 12  ;   ;Points              ;Decimal       ;CaptionML=ENU=Points;
                                                   Editable=Yes }
    { 13  ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 14  ;   ;Competition Entry No.;Code20       ;CaptionML=ENU=Competition Entry No. }
    { 15  ;   ;Months              ;Decimal       ;CaptionML=ENU=Months;
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 17  ;   ;Event Type          ;Option        ;CaptionML=ENU=Event Type;
                                                   OptionCaptionML=ENU=" ,Individual,Team";
                                                   OptionString=[ ,Individual,Team];
                                                   Editable=Yes }
    { 20  ;   ;Class               ;Code10         }
    { 50000;  ;Details NUM         ;Decimal        }
    { 50001;  ;Details TXT         ;Text140        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70123;  ;Section             ;Code10         }
  }
  KEYS
  {
    {    ;Document No.,Student No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CoCurricularPointsSetup@1102155000 : Record 71077;
      CompetitionResultIndividual@1102155001 : Record 71085;
      Text000@1102155002 : TextConst 'ENU=Result has been updated, you cannot modify it.';
      Text001@1102155003 : TextConst 'ENU=Please enter the Point for Competition type %1.';

    BEGIN
    END.
  }
}

OBJECT Table 71087 Competition Result Team
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:44:16;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               CoCurricularSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 CoCurricularSetup.TESTFIELD("Result Team Entry No.");
                 NoSeriesMgt.InitSeries(CoCurricularSetup."Result Team Entry No.",xRec."No.Series",0D,"No.","No.Series");
               END;

               "User ID" := USERID;
               EducationSetup.GET;
               EducationSetup.TESTFIELD("Academic Year");
               "Academic Year" := EducationSetup."Academic Year";
               // Stop 01.VIGNESH
             END;

    CaptionML=ENU=Competition Result Team;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  CoCurricularSetup.GET;
                                                                  CoCurricularSetup.TESTFIELD("Result Team Entry No.");
                                                                  NoSeriesMgt.TestManual(CoCurricularSetup."Result Team Entry No.");
                                                                  "No.Series" := '';
                                                                END;

                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Competition Entry No.;Code20       ;TableRelation="Competition Entry Header" WHERE (Academic Year=FIELD(Academic Year),
                                                                                                   Event Type=FILTER(Team|Relay));
                                                   OnValidate=BEGIN
                                                                // Start 04.VIGNESH
                                                                IF CompetitionEntryHeader.GET("Competition Entry No.") THEN BEGIN
                                                                  "Competition Name" := CompetitionEntryHeader."Competition Name";
                                                                  "Competition Type" := CompetitionEntryHeader."Competition Type";
                                                                  "Event Type" := CompetitionEntryHeader."Event Type";
                                                                  "Student Division" := '';
                                                                  "Team Size" := 0;
                                                                  Substitute := 0;
                                                                END ELSE BEGIN
                                                                  "Competition Name" := '';
                                                                  "Competition Type" := '';
                                                                  "Event Type" := 0;
                                                                  "Student Division" := '';
                                                                  "Team Size" := 0;
                                                                  Substitute := 0;
                                                                END;
                                                                // Stop 04.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Competition Entry No. }
    { 3   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name;
                                                   Editable=No }
    { 4   ;   ;Student Division    ;Code20        ;TableRelation="Competition Entry Line"."Student Division" WHERE (Document No.=FIELD(Competition Entry No.));
                                                   OnValidate=BEGIN
                                                                // Start 04.VIGNESH
                                                                TESTFIELD("Competition Entry No.");
                                                                IF CompetitionEntryLine.GET("Competition Entry No.","Student Division") THEN BEGIN
                                                                  "Team Size" := CompetitionEntryLine."Team Size";
                                                                  Substitute := CompetitionEntryLine.Substitute ;
                                                                END ELSE BEGIN
                                                                  "Team Size" := 0;
                                                                  Substitute := 0;
                                                                END;
                                                                // Stop 04.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Student Division }
    { 6   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 7   ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 8   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type;
                                                   Editable=No }
    { 9   ;   ;Competition Date    ;Date          ;CaptionML=ENU=Competition Date }
    { 10  ;   ;Competition Status  ;Option        ;CaptionML=ENU=Competition Status;
                                                   OptionCaptionML=ENU=" ,Up Coming,On Going,Completed";
                                                   OptionString=[ ,Up Coming,On Going,Completed] }
    { 11  ;   ;Event Type          ;Option        ;CaptionML=ENU=Event Type;
                                                   OptionCaptionML=ENU=" ,Individual,Team,Relay";
                                                   OptionString=[ ,Individual,Team,Relay];
                                                   Editable=No }
    { 12  ;   ;Update Results      ;Boolean       ;CaptionML=ENU=Update Results }
    { 21  ;   ;Team Size           ;Integer       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 22  ;   ;Substitute          ;Integer       ;CaptionML=ENU=Substitute;
                                                   Editable=No }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155004 : Record 71884;
      CoCurricularSetup@1102155003 : Record 71080;
      NoSeriesMgt@1102155002 : Codeunit 396;
      RecResult@1102155000 : Record 71087;
      CompetitionEntryHeader@1102155001 : Record 71081;
      CompetitionEntryLine@1102155005 : Record 71082;

    PROCEDURE Assistedit@1102155003(OldResult@1102155000 : Record 71087) : Boolean;
    BEGIN
      // Start 03.VIGNESH
      WITH RecResult DO BEGIN
        RecResult := Rec;
        CoCurricularSetup.GET;
        CoCurricularSetup.TESTFIELD("Result Team Entry No.");
        IF NoSeriesMgt.SelectSeries(CoCurricularSetup."Result Team Entry No.",OldResult."No.Series","No.Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := RecResult;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.VIGNESH
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  OnInsert()                            Code added to enter the User id,academic Year & No. Series
      02   15.12.09  VIGNESH  No. - OnValidate()                    Code added tfor generatring No. Series
      03   15.12.09  VIGNESH  Assistedit()                          Function called for generating No. Series
    }
    END.
  }
}

OBJECT Table 71088 Competition Res Team Line
{
  OBJECT-PROPERTIES
  {
    Date=22-02-18;
    Time=11:45:03;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Competition Res Team Line;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 6   ;   ;House               ;Code20        ;TableRelation=House;
                                                   CaptionML=ENU=House;
                                                   Editable=No }
    { 8   ;   ;Competition Type    ;Code20        ;TableRelation="Competition Type";
                                                   CaptionML=ENU=Competition Type;
                                                   Editable=No }
    { 9   ;   ;Competition Name    ;Text50        ;CaptionML=ENU=Competition Name;
                                                   Editable=No }
    { 10  ;   ;Student Division    ;Code20        ;TableRelation="Student Division";
                                                   CaptionML=ENU=Student Division;
                                                   Editable=No }
    { 11  ;   ;Position            ;Option        ;OnValidate=BEGIN
                                                                //DS01 Added on 260712 -Begin
                                                                IF CompetitionResultTeam1.GET("Document No.") THEN;

                                                                IF CompetitionResultTeam.GET("Document No.") AND CompetitionResultTeam."Update Results" THEN
                                                                  ERROR(Text000);
                                                                IF CompetitionResultTeam1."Event Type" = CompetitionResultTeam1."Event Type"::Relay THEN
                                                                BEGIN
                                                                IF CoCurricularPointsSetup.GET("Competition Type") THEN BEGIN
                                                                  CASE Position OF
                                                                    Position::"1st Place":
                                                                      //Points := CoCurricularPointsSetup."1st Place";
                                                                      Points := (CoCurricularPointsSetup."1st Place"*2.0)/CompetitionResultTeam1."Team Size";
                                                                    Position::"2nd Place":
                                                                      //Points := CoCurricularPointsSetup."2nd Place";
                                                                      Points := (CoCurricularPointsSetup."2nd Place"*2.0)/CompetitionResultTeam1."Team Size";
                                                                    Position::"3rd Place":
                                                                      //Points := CoCurricularPointsSetup."3rd Place";
                                                                      Points := (CoCurricularPointsSetup."3rd Place"*2.0)/CompetitionResultTeam1."Team Size";
                                                                    Position::"4th place":
                                                                      //Points := CoCurricularPointsSetup."4th Place";
                                                                      Points := (CoCurricularPointsSetup."4th Place"*2.0)/CompetitionResultTeam1."Team Size";
                                                                    Position::"5th place":
                                                                      //5th place and 6th place added by Sameer
                                                                      //Points := CoCurricularPointsSetup."4th Place";
                                                                      Points := (CoCurricularPointsSetup."5th Place"*2.0)/CompetitionResultTeam1."Team Size";
                                                                    Position::"6th place":
                                                                      //Points := CoCurricularPointsSetup."4th Place";
                                                                      Points := (CoCurricularPointsSetup."6th Place"*2.0)/CompetitionResultTeam1."Team Size";

                                                                    Position::Participation:
                                                                      //Points := CoCurricularPointsSetup.Participation;
                                                                      Points := (CoCurricularPointsSetup.Participation*2.0)/CompetitionResultTeam1."Team Size";
                                                                  END;
                                                                  END;
                                                                  END;
                                                                  IF CompetitionResultTeam1."Event Type" = CompetitionResultTeam1."Event Type"::Team THEN
                                                                  BEGIN
                                                                  IF CoCurricularPointsSetup.GET("Competition Type") THEN BEGIN
                                                                  CASE Position OF
                                                                    Position::"1st Place":
                                                                      //Points := CoCurricularPointsSetup."1st Place";
                                                                      Points := (CoCurricularPointsSetup."1st Place");
                                                                    Position::"2nd Place":
                                                                      //Points := CoCurricularPointsSetup."2nd Place";
                                                                      Points := (CoCurricularPointsSetup."2nd Place");
                                                                    Position::"3rd Place":
                                                                      //Points := CoCurricularPointsSetup."3rd Place";
                                                                      Points := (CoCurricularPointsSetup."3rd Place");
                                                                    Position::"4th place":
                                                                      //Points := CoCurricularPointsSetup."4th Place";
                                                                      Points := (CoCurricularPointsSetup."4th Place");
                                                                    Position::"5th place":
                                                                    //5th place and 6th place added by Sameer
                                                                      //Points := CoCurricularPointsSetup."4th Place";
                                                                      Points := (CoCurricularPointsSetup."5th Place");
                                                                    Position::"6th place":
                                                                      //Points := CoCurricularPointsSetup."4th Place";
                                                                      Points := (CoCurricularPointsSetup."6th Place");
                                                                    Position::Participation:
                                                                      //Points := CoCurricularPointsSetup.Participation;
                                                                      Points := (CoCurricularPointsSetup.Participation);
                                                                  END;
                                                                  END;
                                                                  END;

                                                                  IF Points = 0 THEN
                                                                    ERROR(Text001,"Competition Type");


                                                                //DS01 Added on 260712 -End
                                                              END;

                                                   CaptionML=ENU=Position;
                                                   OptionCaptionML=ENU=,1st Place,2nd Place,3rd Place,4th place,5th place,6th place,Participation;
                                                   OptionString=,1st Place,2nd Place,3rd Place,4th place,5th place,6th place,Participation }
    { 12  ;   ;Points              ;Decimal       ;CaptionML=ENU=Points;
                                                   Editable=Yes }
    { 13  ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 14  ;   ;Competition Entry No.;Code20       ;CaptionML=ENU=Competition Entry No. }
    { 18  ;   ;Team No.            ;Code20        ;TableRelation="Participant Entry Line" WHERE (Team No.=FIELD(Team No.));
                                                   CaptionML=ENU=Team No.;
                                                   Editable=Yes }
    { 19  ;   ;Team Total Points   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Participant Entry Line".Points WHERE (Team No.=FIELD(Team No.),
                                                                                                          Participant Type=FILTER(Main),
                                                                                                          Competition Entry No.=FIELD(Competition Entry No.)));
                                                   CaptionML=ENU=Team Total Points;
                                                   Editable=No }
    { 50000;  ;Details NUM         ;Decimal        }
    { 50001;  ;Details TXT         ;Text30         }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Document No.,Team No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CoCurricularPointsSetup@1102155000 : Record 71077;
      CompetitionResultTeam@1102155001 : Record 71087;
      Text000@1102155002 : TextConst 'ENU=Result has been updated, you cannot modify it.';
      Text001@1102155003 : TextConst 'ENU=Please enter the point for competition  type, %1.';
      CompetitionResultTeam1@1102155004 : Record 71087;

    BEGIN
    {
      DS01, Cetas1.0 Added in 260712 Begin for Point not needed for substitude
        1.Code Added
          -Position - OnValidate()
      DS01, Cetas1.0 Added in 260712 End for Point not needed for substitude.
    }
    END.
  }
}

OBJECT Table 71089 Student Leave Application
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. Ankesh
               IF "No." = '' THEN BEGIN
                 LeaveSetup.GET;
                 LeaveSetup.TESTFIELD("Student Leave Application No.");
                 NoSeriesMgt.InitSeries(LeaveSetup."Student Leave Application No.",xRec."No. Series",0D,"No.","No. Series");
               END;
               "User ID" := USERID;
               // Stop 01. Ankesh
             END;

    CaptionML=ENU=Student Leave Application;
    LookupPageID=Page71104;
    DrillDownPageID=Page71104;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02. Ankesh
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  LeaveSetup.GET;
                                                                  NoSeriesMgt.TestManual(LeaveSetup."Student Leave Application No.");
                                                                  "No. Series" := '';
                                                                END;
                                                                // Stop 02. Ankesh
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Student No.         ;Code20        ;TableRelation=Student;
                                                   OnLookup=BEGIN
                                                              // Start 03.Ankesh
                                                              IF EduSetup.GET THEN;
                                                              StudentRec.SETRANGE("Academic Year",EduSetup."Academic Year");
                                                              IF StudentRec.FINDSET THEN
                                                                IF PAGE.RUNMODAL(0,StudentRec) = ACTION::LookupOK THEN BEGIN
                                                                  "Student No." := StudentRec."No.";
                                                                  "Student Name" := StudentRec.Name;
                                                                  Class := StudentRec.Class;
                                                                  Curriculum := StudentRec.Curriculum;
                                                                  Section := StudentRec.Section;
                                                                END;
                                                              // Stop 03. Ankesh
                                                            END;

                                                   CaptionML=ENU=Student No. }
    { 3   ;   ;Student Name        ;Text50        ;CaptionML=ENU=Student Name }
    { 4   ;   ;Class               ;Code20        ;TableRelation=Class;
                                                   CaptionML=ENU=Class }
    { 5   ;   ;Curriculum          ;Code20        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 6   ;   ;Section             ;Code20        ;CaptionML=ENU=Section }
    { 7   ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                // Start 04.Ankesh
                                                                IF "To Date" <> 0D THEN
                                                                  "No. Of Days" := "To Date" - "From Date" + 1;
                                                                // Stop 04. Ankesh
                                                              END;

                                                   CaptionML=ENU=From Date }
    { 8   ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                // Start 05.Ankesh
                                                                IF "From Date" <> 0D THEN
                                                                  "No. Of Days" := "To Date" - "From Date" + 1;
                                                                // Stop 05. Ankesh
                                                              END;

                                                   CaptionML=ENU=To Date }
    { 9   ;   ;Reason              ;Text250       ;CaptionML=ENU=Reason }
    { 10  ;   ;No. Of Days         ;Decimal       ;CaptionML=ENU=No. Of Days;
                                                   Editable=No }
    { 11  ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 13  ;   ;Leave Status        ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Requested,Sanctioned,Cancelled";
                                                   OptionString=[ ,Requested,Sanctioned,Cancelled];
                                                   Editable=Yes }
    { 14  ;   ;Applicant Type      ;Option        ;CaptionML=ENU=Applicant Type;
                                                   OptionCaptionML=ENU=" ,Student,Parent,Guardian";
                                                   OptionString=[ ,Student,Parent,Guardian] }
    { 15  ;   ;Leave Taken         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Student Leave Application"."No. Of Days" WHERE (Student No.=FIELD(Student No.),
                                                                                                                    Leave Status=FILTER(Sanctioned),
                                                                                                                    Academic Year=FIELD(Academic Year)));
                                                   CaptionML=ENU=Leave Taken;
                                                   Editable=No }
    { 16  ;   ;Applicant E-Mail ID ;Text100       ;CaptionML=ENU=Applicant E-Mail ID }
    { 17  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Class Code          ;Code30         }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Academic Year,Leave Status,Student No.  ;SumIndexFields=No. Of Days }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StudentRec@1102155000 : Record 71046;
      EduSetup@1102155001 : Record 71884;
      LeaveSetup@1102155003 : Record 71040;
      NoSeriesMgt@1102155004 : Codeunit 396;

    PROCEDURE Assistedit@1102155001(OldRec@1102155000 : Record 71089) : Boolean;
    BEGIN
      // Start 07.Ankesh
      WITH OldRec DO BEGIN
        OldRec := Rec;
        LeaveSetup.GET;
        LeaveSetup.TESTFIELD("Student Leave Application No.");
        IF NoSeriesMgt.SelectSeries(LeaveSetup."Student Leave Application No.",OldRec."No. Series",OldRec."No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := OldRec;
          EXIT(TRUE);
        END;
      END;
      // stop 07.Ankesh
    END;

    BEGIN
    {

         No    Date        Sign          Trigger                      Description
      -----------------------------------------------------------------------------------------------
        01     28.06.10    ANKESH        OnInsert()             To Use No Series.
        02     28.06.10    ANKESH    No. - OnValidate()         To Use No Series.
        03     28.06.10    ANKESH  Student No. - OnLookup()     To Look Up the Student list
        04     28.06.10    ANKESH   From Date - OnValidate()    To Update From Date
        05     28.06.10    ANKESH   To Date - OnValidate()      To Update To Date
        06     28.06.10    ANKESH ApplicationSanctionOrCancel() To Change the status when the user click
        07     28.06.10    ANKESH        AssistEdit             To Use No Series.
    }
    END.
  }
}

OBJECT Table 71090 Event Master
{
  OBJECT-PROPERTIES
  {
    Date=12-02-18;
    Time=11:54:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    LookupPageID=Page71113;
    DrillDownPageID=Page71113;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20         }
    { 2   ;   ;Description         ;Text50         }
    { 3   ;   ;IsSportsAndGames    ;Boolean        }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71091 Employee Alll
{
  OBJECT-PROPERTIES
  {
    Date=12-02-18;
    Time=13:40:55;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    LookupPageID=Page71936;
    DrillDownPageID=Page71936;
  }
  FIELDS
  {
    { 1   ;   ;Employee No.        ;Code10         }
    { 2   ;   ;Company Name        ;Text30        ;TableRelation=Company }
    { 3   ;   ;Name                ;Text100        }
    { 50000;  ;Employee Category   ;Option        ;OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary] }
    { 51000;  ;Class From          ;Code10        ;TableRelation=Class;
                                                   Description=Coding added by kathir for Employee category HM }
    { 51001;  ;Class To            ;Code10        ;TableRelation=Class;
                                                   Description=Coding added by kathir for Employee category HM }
    { 51002;  ;Employee Type       ;Option        ;CaptionML=ENU=Employee Type;
                                                   OptionCaptionML=ENU=" ,Teaching,Non-Teaching,HOD,Principal,Sub Staff,HM";
                                                   OptionString=[ ,Teaching,Non-Teaching,HOD,Principal,Sub Staff,HM] }
    { 51003;  ;Gender              ;Option        ;OptionString=[ ,Female,Male] }
    { 51004;  ;Employee Image File ;Text250        }
    { 51005;  ;Employment Date     ;Date           }
    { 51006;  ;Date of Birth       ;Date           }
  }
  KEYS
  {
    {    ;Employee No.,Company Name               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71150 Faculty Subject
{
  OBJECT-PROPERTIES
  {
    Date=07-05-18;
    Time=11:32:23;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Faculty Subject;
    LookupPageID=Page71150;
    DrillDownPageID=Page71150;
  }
  FIELDS
  {
    { 1   ;   ;Faculty Code        ;Code20        ;TableRelation="Employee Alll";
                                                   OnValidate=BEGIN
                                                                IF "Faculty Code" <> '' THEN
                                                                  IF RecEmployee.GET("Faculty Code") THEN
                                                                    "Faculty Name" := RecEmployee."First Name" + ' ' + RecEmployee."Last Name" + ' ' + RecEmployee."Middle Name";
                                                              END;

                                                   CaptionML=ENU=Faculty Code }
    { 2   ;   ;Class               ;Code20        ;TableRelation=Class;
                                                   CaptionML=ENU="Class " }
    { 3   ;   ;Curriculum          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculum }
    { 4   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   OnValidate=BEGIN
                                                                IF RecSubject.GET("Subject Code") THEN BEGIN
                                                                 "Subject Description" := RecSubject.Description;
                                                                END ELSE BEGIN
                                                                 // Description := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Subject Code }
    { 5   ;   ;Class Master        ;Boolean       ;CaptionML=ENU=Class Master }
    { 6   ;   ;Alloted Hours       ;Integer       ;CaptionML=ENU=Alloted Hours }
    { 7   ;   ;Weekly Hours        ;Integer       ;CaptionML=ENU=Weekly Hours }
    { 8   ;   ;Section Code        ;Code10        ;CaptionML=ENU=Section Code }
    { 9   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year }
    { 10  ;   ;Available           ;Boolean       ;CaptionML=ENU=Available }
    { 11  ;   ;Subject Type        ;Code20        ;TableRelation="Subject Type";
                                                   CaptionML=ENU=Subject Type }
    { 12  ;   ;Faculty Name        ;Text50        ;CaptionML=ENU=Faculty Name }
    { 13  ;   ;Subject Description ;Text30        ;CaptionML=ENU=Subject Description }
    { 14  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                "Section Code":= ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;
                                                               }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Faculty Code,Class,Curriculum,Section Code,Subject Code,Academic Year;
                                                   Clustered=Yes }
    {    ;Class,Curriculum,Subject Code,Available  }
    {    ;Class,Curriculum,Section Code,Subject Code,Academic Year }
    {    ;Faculty Code,Class,Academic Year         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecEmployee@1000000000 : Record 5200;
      ClassSection@1102155000 : Record 71015;
      RecSubject@1102159000 : Record 71004;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71151 Period Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA

               EduSetup.GET;
               "Academic Year" :=  EduSetup."Academic Year";
             END;

    CaptionML=ENU=Period Header;
    LookupPageID=Page71151;
    DrillDownPageID=Page71151;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Starting time       ;Time          ;CaptionML=ENU=Starting time }
    { 3   ;   ;No.Of Periods/Day   ;Integer       ;CaptionML=ENU=No.Of Periods/Day }
    { 4   ;   ;Minutes/Period      ;Integer       ;CaptionML=ENU=Minutes/Period }
    { 5   ;   ;Interval Start Time ;Time          ;CaptionML=ENU=Interval Start Time }
    { 6   ;   ;Interval End Time   ;Time          ;CaptionML=ENU=Interval End Time }
    { 7   ;   ;Lunch Start Time    ;Time          ;CaptionML=ENU=Lunch Start Time }
    { 8   ;   ;Lunch End Time      ;Time          ;CaptionML=ENU=Lunch End Time }
    { 9   ;   ;Working Days Per Week;Integer      ;CaptionML=ENU=Working Days Per Week }
    { 10  ;   ;No.Of Periods/Half Day;Integer     ;CaptionML=ENU=No.Of Periods/Half Day }
    { 11  ;   ;Max Lab Hours/Day   ;Integer       ;CaptionML=ENU=Max Lab Hours/Day }
    { 12  ;   ;End time            ;Time          ;CaptionML=ENU=End time }
    { 13  ;   ;Academic Year       ;Code20         }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EduSetup@1102159000 : Record 71884;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71152 Period Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Period Line;
    LookupPageID=Page71424;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
    { 2   ;   ;Period Time         ;Time          ;CaptionML=ENU=Period Time }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Period              ;Text30        ;CaptionML=ENU=Period }
    { 5   ;   ;Interval Check      ;Boolean       ;CaptionML=ENU=Interval Check }
    { 6   ;   ;Lab Start Hour      ;Boolean       ;CaptionML=ENU=Lab Start Hour }
  }
  KEYS
  {
    {    ;Code,Line No.                           ;Clustered=Yes }
    {    ;Period Time                              }
    {    ;Code,Lab Start Hour                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71153 Time Table Setup
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:44:34;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Time Table Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 3   ;   ;Time Table Theory Code;Code20      ;CaptionML=ENU=Time Table Theory Code }
    { 4   ;   ;Time Table Lab Code ;Code20        ;CaptionML=ENU=Time Table Lab Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      ------------------------------------------------------------------------------------------
        01  17/09/09    VIGNESH                     Table Created by Vignesh
        02  19/10/09    VANDHANA    OnInsert        Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71154 Time Table Generation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU2.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
               EduSetup.GET;
               "Academic Year" := EduSetup."Academic Year";
             END;

    CaptionML=ENU=Time Table Generation;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=ENU=Entry No. }
    { 2   ;   ;Class               ;Code10        ;CaptionML=ENU=Class }
    { 3   ;   ;Section             ;Code10        ;CaptionML=ENU=Section }
    { 4   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum }
    { 5   ;   ;Day No              ;Integer       ;CaptionML=ENU=Day No }
    { 6   ;   ;Hour No             ;Integer       ;CaptionML=ENU=Hour No }
    { 7   ;   ;Subject             ;Code20        ;CaptionML=ENU=Subject }
    { 8   ;   ;Employee Code       ;Code20        ;CaptionML=ENU=Employee Code }
    { 9   ;   ;Generate Date       ;Date          ;Description=Asc Time Table }
    { 10  ;   ;Academic Year       ;Code20         }
    { 11  ;   ;Joint               ;Boolean        }
    { 12  ;   ;Period Length       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Subject."Period Length" WHERE (Code=FIELD(Subject))) }
    { 13  ;   ;Archived            ;Boolean        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Class,Section                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassSectionLook@1102155000 : Record 71015;
      EduSetup@1102159000 : Record 71884;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        02  23/11/09   VIGNESH  Class - OnValidate()                Code added to get the Class Section & Curriculum
        03  23/11/09   VIGNESH  Class - OnLookup()                  Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Curriculum - OnValidate()           Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Curriculum - OnLookup()             Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnValidate()              Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnLookup()                Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71155 Time Table Ledger
{
  OBJECT-PROPERTIES
  {
    Date=02-02-18;
    Time=09:14:01;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Time Table Ledger;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=ENU=Entry No. }
    { 2   ;   ;Class               ;Code10        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Class;
                                                   Editable=No }
    { 3   ;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 4   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculum;
                                                   Editable=No }
    { 5   ;   ;Day No              ;Integer       ;CaptionML=ENU=Day No }
    { 6   ;   ;Hour No             ;Text30        ;CaptionML=ENU=Hour No }
    { 7   ;   ;Subject             ;Code20        ;TableRelation=Subject;
                                                   OnValidate=BEGIN

                                                                IF RecSubject.GET(Subject) THEN
                                                                  "Subject Description" := RecSubject.Description
                                                                ELSE
                                                                  "Subject Description" := '';
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 8   ;   ;Employee Code       ;Code20        ;TableRelation="Employee Alll";
                                                   OnValidate=VAR
                                                                PeriodTime@1102155001 : Record 71152;
                                                                PeriodHead@1102155000 : Record 71151;
                                                              BEGIN
                                                                // Start 05.VIGNESH
                                                                IF Employee.GET ("Employee Code") THEN
                                                                  "Faculty Name" := Employee."First Name"
                                                                ELSE
                                                                  "Faculty Name" := '';
                                                                // Stop 05.VIGNESH
                                                                // Start 03.GUNA
                                                                PeriodTime.RESET;
                                                                PeriodTime.SETRANGE(Period,"Hour No");
                                                                IF PeriodTime.FINDFIRST THEN BEGIN
                                                                  "Start Time" := CREATEDATETIME("Time Table Date",PeriodTime."Period Time");
                                                                  PeriodHead.GET(PeriodTime.Code);
                                                                  "End Time" := CREATEDATETIME("Time Table Date",(PeriodTime."Period Time" + (60 * 1000 * PeriodHead."Minutes/Period")));
                                                                END;
                                                                // Stop 03.GUNA
                                                              END;

                                                   CaptionML=ENU=Employee Code }
    { 9   ;   ;Time Table Date     ;Date          ;CaptionML=ENU=Time Table Date }
    { 10  ;   ;Alternate Employee  ;Code10        ;CaptionML=ENU=Alternate Employee }
    { 11  ;   ;Alternate Subject   ;Code10        ;CaptionML=ENU=Alternate Subject }
    { 12  ;   ;Attendance Code     ;Code10        ;OnValidate=BEGIN
                                                                TimeTableLedger.RESET;
                                                                TimeTableLedger.SETRANGE(TimeTableLedger."Time Table Date","Time Table Date");
                                                                TimeTableLedger.SETRANGE(TimeTableLedger."Class Code","Class Code");
                                                                IF "Hour No"='1' THEN BEGIN
                                                                  TimeTableLedger.SETFILTER(TimeTableLedger."Entry No.",'<>%1',"Entry No.");
                                                                  TimeTableLedger.SETFILTER(TimeTableLedger."Hour No",'%1|%2|%3|%4|%5','2','3','4','5','6');
                                                                  IF TimeTableLedger.FINDSET THEN
                                                                    TimeTableLedger.MODIFYALL(TimeTableLedger."Attendance Code","Attendance Code");
                                                                END ELSE BEGIN
                                                                  TimeTableLedger.SETFILTER(TimeTableLedger."Entry No.",'<>%1',"Entry No.");
                                                                  TimeTableLedger.SETFILTER(TimeTableLedger."Hour No",'%1|%2','7','8');
                                                                  IF TimeTableLedger.FINDSET THEN
                                                                    TimeTableLedger.MODIFYALL(TimeTableLedger."Attendance Code","Attendance Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Attendance Code }
    { 13  ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 14  ;   ;Subject Description ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Subject.Description WHERE (Code=FIELD(Subject)));
                                                   CaptionML=ENU=Subject Description;
                                                   Editable=No }
    { 15  ;   ;Start Time          ;DateTime      ;CaptionML=ENU=Start Time }
    { 16  ;   ;End Time            ;DateTime      ;CaptionML=ENU=End Time }
    { 17  ;   ;Faculty Name        ;Text30        ;CaptionML=ENU=Faculty Name }
    { 18  ;   ;Reason              ;Text50        ;CaptionML=ENU=Reason }
    { 19  ;   ;Exam Status         ;Option        ;CaptionML=ENU=Exam Status;
                                                   OptionCaptionML=ENU=" ,Deffered,Closed";
                                                   OptionString=[ ,Deffered,Closed] }
    { 20  ;   ;Exam Code           ;Code20        ;OnValidate=BEGIN
                                                                // Start 06.VIGNESH
                                                                IF "Exam Code" <> '' THEN
                                                                  "Period Type" := "Period Type"::Exam;
                                                              END;

                                                   CaptionML=ENU=Exam Code }
    { 21  ;   ;Exam Description    ;Text50        ;CaptionML=ENU=Exam Description }
    { 25  ;   ;Period Type         ;Option        ;CaptionML=ENU=Period Type;
                                                   OptionCaptionML=ENU=Normal,Exam;
                                                   OptionString=Normal,Exam }
    { 26  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassSection@1102155000 : Record 71015;
      Employee@1102155001 : Record 5200;
      Text000@1102155002 : TextConst 'ENU=Internal exam %1 is not allottted for this subject.';
      TimeTableLedger@1102155003 : Record 71155;
      RecSubject@1000000000 : Record 71004;

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        02  23/11/09   VIGNESH  Class - OnValidate()                Code added to get the Class Section & Curriculum
        03  23/11/09   VIGNESH  Class - OnLookup()                  Code added to get the Class Section & Curriculum
        04  23/11/09   VIGNESH  Curriculum - OnValidate()           Code added to get the Class Section & Curriculum
        05  23/11/09   VIGNESH  Curriculum - OnLookup()             Code added to get the Class Section & Curriculum
        06  23/11/09   VIGNESH  Section - OnValidate()              Code added to get the Class Section & Curriculum
        07  23/11/09   VIGNESH  Section - OnLookup()                Code added to get the Class Section & Curriculum
    }
    END.
  }
}

OBJECT Table 71170 Class Syllabus Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               AcademicsSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 AcademicsSetup.TESTFIELD("Class Syllabus No.");
                 NoSeriesMgt.InitSeries(AcademicsSetup."Class Syllabus No.",xRec."No.Series",0D,"No.","No.Series");
               END;

               "Academic Year" := EduVertical.GetAcademicYear;
               // Stop 01.VIGNESH

               // Start 06. VANDHANA
               "User ID" := USERID;
               // Stop 06. VANDHANA
             END;

    CaptionML=ENU=Class Syllabus Header;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AcademicsSetup.GET;
                                                                  NoSeriesMgt.TestManual(AcademicsSetup."Class Syllabus No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Class Code          ;Code20        ;TableRelation=Class;
                                                   CaptionML=ENU=Class Code }
    { 3   ;   ;Curriculam          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculam }
    { 4   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject Code }
    { 5   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 6   ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70784;  ;Department          ;Code20        ;TableRelation=Department;
                                                   CaptionML=ENU=Department }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AcademicsSetup@1102155002 : Record 71040;
      NoSeriesMgt@1102155001 : Codeunit 396;
      EduVertical@1102155000 : Codeunit 71880;
      ClassSyllabusHeader@1102155003 : Record 71170;

    PROCEDURE Assistedit@1102155006(OldClassSyllabusHeader@1102155000 : Record 71170) : Boolean;
    BEGIN
      // Start 03.VIGNESH
      WITH ClassSyllabusHeader DO BEGIN
        ClassSyllabusHeader := Rec;
        AcademicsSetup.GET;
        AcademicsSetup.TESTFIELD("Class Syllabus No.");
        IF NoSeriesMgt.SelectSeries(AcademicsSetup."Class Syllabus No.",OldClassSyllabusHeader."No.Series",
           "No.Series")
        THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ClassSyllabusHeader;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.VIGNESH
    END;

    BEGIN
    END.
  }
}

OBJECT Table 71171 Class Syllabus Line
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF ClassSyllabusHeader.GET("Document No.") THEN BEGIN
                 "Class Code" := ClassSyllabusHeader."Class Code";
                 Curriculam := ClassSyllabusHeader.Curriculam;
                 "Subject Code" := ClassSyllabusHeader."Subject Code";
                 "Academic Year" := EducationVertical.GetAcademicYear;
                 "User ID" := USERID;
               END;
             END;

    CaptionML=ENU=Class Syllabus Line;
    LookupPageID=Page71176;
    DrillDownPageID=Page71176;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Class Code          ;Code20        ;TableRelation=Class;
                                                   CaptionML=ENU=Class Code }
    { 4   ;   ;Curriculam          ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculam }
    { 5   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject Code }
    { 6   ;   ;Unit Code           ;Code20        ;TableRelation="Unit Master";
                                                   CaptionML=ENU=Unit Code }
    { 7   ;   ;Chapter Code        ;Code20        ;TableRelation="Chapter Master";
                                                   CaptionML=ENU=Chapter Code }
    { 8   ;   ;Chapter Name        ;Text100       ;CaptionML=ENU=Chapter Name }
    { 9   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 10  ;   ;No of Hours         ;Integer       ;CaptionML=ENU=No of Hours }
    { 11  ;   ;Unit Name           ;Text100       ;CaptionML=ENU=Unit Name }
    { 20  ;   ;Teaching Aids       ;Text250        }
    { 21  ;   ;Aim                 ;Text250        }
    { 22  ;   ;Explaination        ;Text250        }
    { 23  ;   ;Assignment          ;Text250        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClassSyllabusHeader@1102155000 : Record 71170;
      EducationVertical@1102155001 : Codeunit 71880;

    BEGIN
    {

      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   22.09.09 VIGNESH  Fee Code - OnValidate()    Code added to get the Description from Fees component table;
    }
    END.
  }
}

OBJECT Table 71172 Faculty Class Plan Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               AcademicsSetup.GET;
               IF "No.Series" = '' THEN BEGIN
                 AcademicsSetup.TESTFIELD("Faculty Class Plan No.");
                 NoSeriesMgt.InitSeries(AcademicsSetup."Faculty Class Plan No.",xRec."No.Series",0D,"No.","No.Series");
               END;

               "Academic Year" := EduVertical.GetAcademicYear;
               // Stop 01.VIGNESH

               // Start 06. VANDHANA
               "User ID" := USERID;
               // Stop 06. VANDHANA
             END;

    CaptionML=ENU=Faculty Class Plan Header;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                // Start 02.VIGNESH
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  AcademicsSetup.GET;
                                                                  NoSeriesMgt.TestManual(AcademicsSetup."Faculty Class Plan No.");
                                                                  "No.Series" := '';
                                                                END;
                                                                // Stop 02.VIGNESH
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Class               ;Code20        ;CaptionML=ENU=Class;
                                                   Editable=No }
    { 3   ;   ;Curriculum          ;Code10        ;CaptionML=ENU=Curriculam Code;
                                                   Editable=No }
    { 4   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject Code }
    { 5   ;   ;Academic Year       ;Code10        ;CaptionML=ENU=Academic Year;
                                                   Editable=No }
    { 6   ;   ;No.Series           ;Code20        ;CaptionML=ENU=No.Series }
    { 7   ;   ;Faculty Code        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Faculty Code }
    { 8   ;   ;Plan Status         ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Applied,Approved,Rejected";
                                                   OptionString=[ ,Applied,Approved,Rejected] }
    { 9   ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 10  ;   ;Total Week Hours    ;Integer       ;CaptionML=ENU=Total Week Hours }
    { 11  ;   ;Section             ;Code10        ;CaptionML=ENU=Section;
                                                   Editable=No }
    { 12  ;   ;Perc Completed      ;Decimal       ;CaptionML=ENU=Perc Completed }
    { 13  ;   ;Class Code          ;Code20        ;TableRelation="Class Section";
                                                   OnValidate=BEGIN
                                                                IF ClassSection.GET("Class Code") THEN BEGIN
                                                                  Class := ClassSection.Class;
                                                                  Section := ClassSection.Section;
                                                                  Curriculum := ClassSection.Curriculum;
                                                                  "Academic Year" := ClassSection."Academic Year";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Class Code }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70784;  ;Department          ;Code20        ;TableRelation=Department;
                                                   CaptionML=ENU=Department }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Class,Curriculum,Subject Code,Faculty Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AcademicsSetup@1102155002 : Record 71040;
      NoSeriesMgt@1102155001 : Codeunit 396;
      EduVertical@1102155000 : Codeunit 71880;
      FacultyClassPlanHeader@1102155003 : Record 71172;
      ClassSection@1102155004 : Record 71015;

    PROCEDURE Assistedit@1102155006(OldFacultyClassPlanHeader@1102155000 : Record 71172) : Boolean;
    BEGIN
      // Start 03.VIGNESH
      WITH FacultyClassPlanHeader DO BEGIN
        FacultyClassPlanHeader := Rec;
        AcademicsSetup.GET;
        AcademicsSetup.TESTFIELD("Faculty Class Plan No.");
        IF NoSeriesMgt.SelectSeries(AcademicsSetup."Faculty Class Plan No.",OldFacultyClassPlanHeader."No.Series",
           "No.Series")
        THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := FacultyClassPlanHeader;
          EXIT(TRUE);
        END;
      END;
      // Stop 03.VIGNESH
    END;

    BEGIN
    END.
  }
}

OBJECT Table 71173 Faculty Class Plan Line
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF FacultyClassPlanHeader.GET("Document No.") THEN BEGIN
                 "Class Code" := FacultyClassPlanHeader.Class;
                 "Curriculam Code" := FacultyClassPlanHeader.Curriculum;
                 "Subject Code" := FacultyClassPlanHeader."Subject Code";
                 "Academic Year" := EducationVertical.GetAcademicYear;
                 "User ID" := USERID;
               END;
             END;

    CaptionML=ENU=Faculty Class Plan Line;
    LookupPageID=Page71533;
    DrillDownPageID=Page71533;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Class Code          ;Code20        ;TableRelation=Class;
                                                   CaptionML=ENU=Class Code }
    { 4   ;   ;Curriculam Code     ;Code10        ;TableRelation=Curriculum;
                                                   CaptionML=ENU=Curriculam Code }
    { 5   ;   ;Subject Code        ;Code20        ;TableRelation=Subject;
                                                   CaptionML=ENU=Subject Code }
    { 6   ;   ;Unit Code           ;Code20        ;TableRelation="Unit Master";
                                                   OnLookup=BEGIN
                                                              // Start 05.VIGNESH
                                                              IF FacultyClassPlanHeader.GET("Document No.") THEN BEGIN
                                                                ClassSyllabusLine.RESET;
                                                                ClassSyllabusLine.SETRANGE("Class Code",FacultyClassPlanHeader.Class);
                                                                ClassSyllabusLine.SETRANGE(Curriculam,FacultyClassPlanHeader.Curriculum);
                                                                IF PAGE.RUNMODAL(0,ClassSyllabusLine) = ACTION::LookupOK THEN BEGIN
                                                                  "Unit Code" := ClassSyllabusLine."Unit Code";
                                                                  "Unit Name" := ClassSyllabusLine."Unit Name";
                                                                  "Chapter Code" := ClassSyllabusLine."Chapter Code";
                                                                  "Chapter Name" := ClassSyllabusLine."Chapter Name";
                                                                END;
                                                              END;
                                                              // Stop 05.VIGNESH
                                                            END;

                                                   CaptionML=ENU=Unit Code }
    { 7   ;   ;Chapter Code        ;Code20        ;TableRelation="Chapter Master";
                                                   CaptionML=ENU=Chapter Code }
    { 8   ;   ;Chapter Name        ;Text100       ;CaptionML=ENU=Chapter Name }
    { 9   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 10  ;   ;Week                ;Integer       ;CaptionML=ENU=Week }
    { 11  ;   ;Faculty Code        ;Code20        ;CaptionML=ENU=Faculty Code }
    { 12  ;   ;Unit Name           ;Text100       ;CaptionML=ENU=Unit Name }
    { 13  ;   ;Period              ;Integer       ;CaptionML=ENU=Period }
    { 14  ;   ;No of Minuites      ;Integer       ;CaptionML=ENU=No of Minuites }
    { 15  ;   ;Learning OutCome    ;Text30        ;CaptionML=ENU=Learning OutCome }
    { 16  ;   ;Assesment           ;Text30        ;CaptionML=ENU=Assesment }
    { 17  ;   ;Work Status         ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Completed,Not Completed";
                                                   OptionString=[ ,Completed,Not Completed] }
    { 18  ;   ;Scheduled Date      ;Date          ;CaptionML=ENU=Scheduled Date }
    { 19  ;   ;Actual Date         ;Date          ;CaptionML=ENU=Actual Date }
    { 20  ;   ;Section Code        ;Code20        ;TableRelation=Section;
                                                   CaptionML=ENU=Section Code }
    { 21  ;   ;Faculty Department  ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee.No. WHERE (No.=FIELD(Faculty Code)));
                                                   CaptionML=ENU=Faculty Department;
                                                   Editable=No }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FacultyClassPlanHeader@1102155000 : Record 71172;
      EducationVertical@1102155001 : Codeunit 71880;
      ClassSyllabusLine@1102155002 : Record 71171;

    BEGIN
    {

      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 71180 Alumni Registration
{
  OBJECT-PROPERTIES
  {
    Date=22-09-18;
    Time=11:40:02;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 06. VANDHANA
               "User ID" := USERID;
               // Stop 06. VANDHANA
             END;

    CaptionML=ENU=Alumni Registration;
    LookupPageID=Page71181;
    DrillDownPageID=Page71181;
  }
  FIELDS
  {
    { 1   ;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No. }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 4   ;   ;Date of Birth       ;Date           }
    { 5   ;   ;Year Of Joining     ;Integer       ;CaptionML=ENU=Year Of Joining }
    { 6   ;   ;Year Of Graduation  ;Integer       ;CaptionML=ENU=Year Of Graduation }
    { 7   ;   ;Class Of Graduation ;Option        ;CaptionML=ENU=Class Of Graduation;
                                                   OptionCaptionML=ENU=" ,10,12";
                                                   OptionString=[ ,10,12] }
    { 8   ;   ;Present Occupation  ;Option        ;OptionCaptionML=ENU=" ,Student,Employed,Self-Employed";
                                                   OptionString=[ ,Student,Employed,Self-Employed] }
    { 9   ;   ;Bachelor Degree     ;Text80        ;TableRelation="Course and Stream".Course WHERE (Course Stream=CONST(Bachelor Degree)) }
    { 11  ;   ;Master Degree       ;Text80        ;TableRelation="Course and Stream".Course WHERE (Course Stream=CONST(Master Degree)) }
    { 12  ;   ;PhD                 ;Text80        ;TableRelation="Course and Stream".Course WHERE (Course Stream=CONST(Doctoral degrees)) }
    { 13  ;   ;Medical Courses     ;Option        ;OptionCaptionML=ENU=" ,MBBS,BDS,MDS";
                                                   OptionString=[ ,MBBS,BDS,MDS] }
    { 14  ;   ;Doctor of Medicine  ;Text80        ;TableRelation="Course and Stream".Course WHERE (Course Stream=CONST(MD)) }
    { 15  ;   ;Name of the Institution;Text30      }
    { 16  ;   ;Qualification       ;Text30         }
    { 17  ;   ;Name of the Company ;Text30        ;CaptionML=ENU=Name Of the  Company }
    { 18  ;   ;Designation         ;Text30        ;CaptionML=ENU=Designation }
    { 19  ;   ;Type of Business    ;Text30         }
    { 20  ;   ;Mobile Number       ;Code15        ;CaptionML=ENU=Mobile Number }
    { 21  ;   ;Telephone           ;Code15         }
    { 22  ;   ;E-mail              ;Text80        ;CaptionML=ENU=E-mail }
    { 23  ;   ;Present-Address     ;Text250       ;CaptionML=ENU=Present-Address1 }
    { 25  ;   ;Persent-City        ;Code20        ;ValidateTableRelation=Yes }
    { 26  ;   ;Present-PostCode    ;Code20        ;CaptionML=ENU=Present-PostCode }
    { 27  ;   ;Present-State       ;Code20        ;CaptionML=ENU=Present-State }
    { 28  ;   ;Present-Country     ;Code20        ;CaptionML=ENU=Present-Country }
    { 29  ;   ;Permanent-Address   ;Text250        }
    { 31  ;   ;Permanent-City      ;Code20         }
    { 32  ;   ;Permanent-PostCode  ;Code20         }
    { 33  ;   ;Permanent-State     ;Code20         }
    { 34  ;   ;Permanent-Country   ;Code20         }
    { 35  ;   ;Achievements        ;Text250        }
    { 36  ;   ;Hobbies             ;Text100        }
    { 37  ;   ;Comments            ;Text250        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Mobile2             ;Code15         }
    { 70123;  ;QualificationName   ;Text100        }
    { 70124;  ;BachelorInstitute   ;Text50         }
    { 70125;  ;MasterInstitute     ;Text50         }
    { 70126;  ;PhDInstitute        ;Text50         }
    { 70127;  ;MedicalInstitute    ;Text50         }
    { 70128;  ;MDInstitute         ;Text50         }
    { 70129;  ;MS                  ;Text50         }
    { 70130;  ;MSInstitute         ;Text50         }
    { 70131;  ;AgreeToUseComment   ;Boolean        }
    { 70132;  ;IsRegistered        ;Boolean        }
    { 70133;  ;Event1              ;Boolean        }
    { 70134;  ;Event1Desc          ;Text150        }
    { 70135;  ;Event2              ;Boolean        }
    { 70136;  ;Event2Desc          ;Text150        }
  }
  KEYS
  {
    {    ;Student No.                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Student@1102155000 : Record 71046;
      PostCode1@1102155001 : Record 225;

    BEGIN
    {
        No   Date      Sign     Trigger                      Description
      -----------------------------------------------------------------------------------------------
        01  29.09.09  VANDHANA  Student No. - OnValidate()   Code to get the Student details
        02  16.10.09  VANDHANA  City-OnValidate              Code added for Validate PostCode
        03  16.10.09  VANDHANA  City-Onlookup                Code added for Validate PostCode
        04  16.10.09  VANDHANA  PostCode-OnValidate          Code added for Validate PostCode
        05  16.10.09  VANDHANA  PostCode-Onlookup            Code added for Validate PostCode
        06  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71880 Medium of Instruction
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Medium of Instruction;
    LookupPageID=Page71880;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

        No   Date        Sign      Trigger           Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA  OnInsert          Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71881 Citizenship
{
  OBJECT-PROPERTIES
  {
    Date=31-07-24;
    Time=15:39:22;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Citizenship;
    LookupPageID=Page71881;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA   OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71882 Enquiry Type
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Enquiry Type;
    LookupPageID=Page71882;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA   OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71883 Enquiry Source
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Enquiry Source;
    LookupPageID=Page71883;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA   OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71884 Education Setup
{
  OBJECT-PROPERTIES
  {
    Date=21-03-14;
    Time=19:17:10;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Education Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 3   ;   ;Rank Generation No. ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Rank Generation No. }
    { 4   ;   ;Company             ;Option        ;CaptionML=ENU=Company;
                                                   OptionCaptionML=ENU=" ,School,College";
                                                   OptionString=[ ,School,College] }
    { 5   ;   ;Start Date          ;Date          ;CaptionML=ENU=Start Date }
    { 6   ;   ;End Date            ;Date          ;CaptionML=ENU=End Date }
    { 7   ;   ;Task No.            ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Task No. }
    { 8   ;   ;Announcement No.    ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Announcement No. }
    { 9   ;   ;Image File Path     ;Text250       ;CaptionML=ENU=Image File Path }
    { 10  ;   ;XML File Path       ;Text250       ;CaptionML=ENU=XML File Path }
    { 11  ;   ;Assignment No.      ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Assignment No. }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
    { 70122;  ;Admission Posting Date;Date         }
    { 70123;  ;Promotion Academic Year;Code10     ;TableRelation="Academic Year" }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date     Sign          Trigger          Description
       ------------------------------------------------------------------------------------------
        01  17/09/09  VIGNESH                        Table Created by Vignesh
        02  19/10/09  VANDHANA      OnInsert         Code to assign User ID.
        03  06.01.10  GUNA                           New fields Task No and Announcement No is created
    }
    END.
  }
}

OBJECT Table 71885 Quota
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Quota;
    LookupPageID=Page71885;
    DrillDownPageID=Page71885;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Academic Year       ;Code20        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 4   ;   ;Reserve             ;Boolean       ;CaptionML=ENU=Reserve }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecComp@1000000000 : Record 79;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                      Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71886 Religion
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Religion;
    LookupPageID=Page71886;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   18/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA   OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71887 Caste
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Caste;
    LookupPageID=Page71887;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   18/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA   OnInsert         Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71888 Category
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Category;
    LookupPageID=Page71888;
    DrillDownPageID=Page71888;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71889 Grade
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               "Academic Year" := EducationVertical.GetAcademicYear;
               // Stop 01.VIGNESH

               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Grade;
    LookupPageID=Page71889;
    DrillDownPageID=Page71889;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Max Percentage      ;Decimal       ;CaptionML=ENU=Max Percentage }
    { 4   ;   ;Min Percentage      ;Decimal       ;CaptionML=ENU=Min Percentage }
    { 5   ;   ;Academic Year       ;Code20        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 6   ;   ;Points              ;Decimal       ;CaptionML=ENU=Points }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  29.09.09  VIGNESH   OnInsert()        Code added to insert the Academic year
      02  19/10/09  VANDHANA  OnInsert          Code to assign User ID.
      03  17/10/09  VIGNESH                     Added new filed points
    }
    END.
  }
}

OBJECT Table 71890 Community
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.KATHIR
               "Academic Year" := EduVert.GetAcademicYear;
               // Stop 01.KATHIR
               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Community;
    LookupPageID=Page71890;
    DrillDownPageID=Page71890;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Academic Year       ;Code20        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecComp@1000000000 : Record 79;
      EduVert@1102155000 : Codeunit 71880;

    BEGIN
    {
      No   Date      Sign     Trigger       Description
      -----------------------------------------------------------------------------------------------
      01   19/09/09  KATHIR   OnInsert      Code added for Academic year from Setup
      02   19/10/09  VANDHANA OnInsert      Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71891 Mother Tongue
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Mother Tongue;
    LookupPageID=Page71891;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71892 Co-Curricular Activities
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Co-Curricular Activities;
    LookupPageID=Page71892;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71893 Certificate
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Certificate;
    LookupPageID=Page71894;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71894 Rank Generation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.VIGNESH
               EducationSetup.GET;
               EducationSetup.TESTFIELD(EducationSetup."Rank Generation No.");

               "Entry No." := "No.seriesManagement".GetNextNo(EducationSetup."Rank Generation No.",0D,TRUE);
               // Stop 01.VIGNESH

               // Start 02. VANDHANA
               "User ID" := USERID;
               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Rank Generation;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 2   ;   ;Average             ;Decimal       ;CaptionML=ENU=Average }
    { 3   ;   ;Rank                ;Integer       ;CaptionML=ENU=Rank }
    { 4   ;   ;Entry No.           ;Code20        ;CaptionML=ENU=Entry No. }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Average                                  }
    {    ;Entry No.                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationSetup@1102155000 : Record 71884;
      "No.seriesManagement"@1102155001 : Codeunit 396;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  13.10.09  VIGNESH   OnInsert()        Code added to generate the Entry No.
      02  19/10/09  VANDHANA  OnInsert          Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71895 Portal Users
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:56:47;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=Portal Users;
    LookupPageID=Page71897;
  }
  FIELDS
  {
    { 1   ;   ;Login ID            ;Code20        ;CaptionML=ENU=Login ID }
    { 2   ;   ;Password            ;Code20        ;CaptionML=ENU=Password }
    { 3   ;   ;User Groups         ;Code20        ;TableRelation="User Groups";
                                                   OnValidate=BEGIN
                                                                IF "User Groups" = 'FACULTY' THEN
                                                                BEGIN
                                                                 IF Emp.GET("Login ID") THEN;
                                                                 Name := Emp."First Name";
                                                                 MODIFY;
                                                                END;

                                                                IF "User Groups" = 'STUDENT' THEN
                                                                BEGIN
                                                                  IF Stud.GET("Login ID") THEN;
                                                                  Name := Stud.Name;
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=User Groups;
                                                   Editable=Yes }
    { 10  ;   ;Name                ;Text80         }
    { 11  ;   ;PwdReset            ;Boolean        }
  }
  KEYS
  {
    {    ;Login ID                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Emp@1102155000 : Record 5200;
      Stud@1102155001 : Record 18;

    BEGIN
    END.
  }
}

OBJECT Table 71896 User Group Company
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=User Group Company;
    LookupPageID=Page71899;
  }
  FIELDS
  {
    { 1   ;   ;User Group          ;Code20        ;TableRelation="User Groups";
                                                   CaptionML=ENU=User Group }
    { 2   ;   ;Company Access      ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company Access }
  }
  KEYS
  {
    {    ;User Group,Company Access               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71897 User Groups
{
  OBJECT-PROPERTIES
  {
    Date=05-08-24;
    Time=16:58:35;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=User Group;
    LookupPageID=Page71902;
  }
  FIELDS
  {
    { 1   ;   ;User Group          ;Code20        ;CaptionML=ENU=User Group }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;SID                 ;Text120       ;CaptionML=ENU=SID }
    { 4   ;   ;Windows Login       ;Text150       ;CaptionML=ENU=Windows Login }
    { 5   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit 418;
                                                              BEGIN
                                                                UserMgt.ValidateUserID("User ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID];
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;User Group                              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

      No   Date      Sign     Trigger                  Description
      -----------------------------------------------------------------------------------------------
      01  19.10.09   GUNA    SID-ONVALIDATE         TO COPY LOGIN NAME
    }
    END.
  }
}

OBJECT Table 71898 Co-Curricular Classification
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Co-Curricular Classification;
    LookupPageID=Page71903;
    DrillDownPageID=Page71903;
  }
  FIELDS
  {
    { 1   ;   ;Co-Curricular Code  ;Code20        ;TableRelation="Co-Curricular Activities";
                                                   CaptionML=ENU=Co-Curricular Code }
    { 2   ;   ;Classification Code ;Code20        ;CaptionML=ENU=Classification Code }
    { 3   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
  }
  KEYS
  {
    {    ;Co-Curricular Code,Classification Code  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  16/10/09  VIGNESH                       Created new table for co curicular classification
    }
    END.
  }
}

OBJECT Table 71899 Report Selections1
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Report Selections;
  }
  FIELDS
  {
    { 1   ;   ;Usage               ;Option        ;CaptionML=ENU=Usage;
                                                   OptionCaptionML=ENU=Application fee Receipt,Application,Receipt of Application,Call Letter,Transfer Certificatte,BankChallan,Admission Form;
                                                   OptionString=Application fee Receipt,Application,Receipt of Application,Call Letter,Transfer Certificatte,BankChallan,Admission Form }
    { 2   ;   ;Sequence            ;Code20        ;CaptionML=ENU=Sequence }
    { 3   ;   ;Report ID           ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Report));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Report Name");
                                                              END;

                                                   CaptionML=ENU=Report ID }
    { 4   ;   ;Report Name         ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Report),
                                                                                                                Object ID=FIELD(Report ID)));
                                                   CaptionML=ENU=Report Name;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Usage                                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReportSelection2@1000 : Record 77;

    PROCEDURE NewRecord@1();
    BEGIN
      ReportSelection2.SETRANGE(Usage,Usage);
      IF ReportSelection2.FINDLAST AND (ReportSelection2.Sequence <> '') THEN
        Sequence := INCSTR(ReportSelection2.Sequence)
      ELSE
        Sequence := '1';
    END;

    BEGIN
    END.
  }
}

OBJECT Table 71900 Unit Master
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := EducationVertical.GetAcademicYear;
             END;

    CaptionML=ENU=Unit Master;
    LookupPageID=Page71904;
    DrillDownPageID=Page71904;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    END.
  }
}

OBJECT Table 71901 Chapter Master
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Academic Year" := EducationVertical.GetAcademicYear;
             END;

    CaptionML=ENU=Chapter Master;
    LookupPageID=Page71905;
    DrillDownPageID=Page71905;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    END.
  }
}

OBJECT Table 71902 Section
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Section;
    LookupPageID=Page71906;
    DrillDownPageID=Page71906;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71903 Exam Code
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Exam Code;
    LookupPageID=Page71907;
    DrillDownPageID=Page71907;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Exam Order          ;Integer       ;CaptionML=ENU=Exam Order;
                                                   BlankZero=Yes }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Exam Order                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71904 Academic Year
{
  OBJECT-PROPERTIES
  {
    Date=27-02-24;
    Time=12:31:51;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    OnModify=BEGIN

               IF Closed THEN
                 ERROR(Text000);
             END;

    CaptionML=ENU=Academic Year;
    LookupPageID=Page71908;
    DrillDownPageID=Page71908;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Sequence            ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=ENU=Sequence }
    { 4   ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed }
    { 5   ;   ;Start Date          ;Date          ;CaptionML=ENU=Start Date }
    { 6   ;   ;End Date            ;Date          ;CaptionML=ENU=End Date }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Sequence                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1102155000 : TextConst 'ENU=Cannot be modified';

    BEGIN
    {
        No   Date        Sign       Trigger          Description
      -----------------------------------------------------------------------------------------------
        01   17/09/09    Kathir                      Table Created by Kathir
        02   19/10/09    VANDHANA  OnInsert          Code to assign User ID.
        03   07/11/09    GUNA                        New field Sequence has been added
        04   07/11/09    GUNA                        New field CLOSED has been added to close the older entries
    }
    END.
  }
}

OBJECT Table 71905 Fee Components
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Fee Components;
    LookupPageID=Page71909;
    DrillDownPageID=Page71909;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;G/L Account         ;Code20        ;CaptionML=ENU=G/L Account }
    { 4   ;   ;Fee Group           ;Option        ;CaptionML=ENU=Fee Group;
                                                   OptionCaptionML=ENU=" ,Admission,Exam ";
                                                   OptionString=[ ,Admission,Exam ] }
    { 5   ;   ;Check Duplication   ;Boolean       ;CaptionML=ENU=Check Duplication }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71906 Fee Type
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Fee Type;
    LookupPageID=Page71910;
    DrillDownPageID=Page71910;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71907 Fee Classification
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA

               "User ID" := USERID;

               // Stop 01. VANDHANA
             END;

    CaptionML=ENU=Fee Classification;
    LookupPageID=Page71911;
    DrillDownPageID=Page71911;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71908 Initial Fee Setup
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Initial Fee Setup;
    LookupPageID=Page71912;
    DrillDownPageID=Page71912;
  }
  FIELDS
  {
    { 1   ;   ;Fee Type Code       ;Code20        ;TableRelation="Fee Type";
                                                   OnValidate=BEGIN
                                                                // Start 01.VIGNESH
                                                                IF FeeType.GET("Fee Type Code") THEN
                                                                  Description := FeeType.Description
                                                                ELSE
                                                                  Description := '';
                                                                // Stop 01.VIGNESH
                                                              END;

                                                   CaptionML=ENU=Fee Type Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Fee Type Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FeeType@1102155000 : Record 71906;

    BEGIN
    {

      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  23.09.09  VIGNESH   Fee Type Code - OnLookup()  Code added to get the description from Fee type
      02  19/10/09  VANDHANA  OnInsert                    Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71909 Media Vehicle
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 02. VANDHANA

               "User ID" := USERID;

               // Stop 02. VANDHANA
             END;

    CaptionML=ENU=Media Vehicle;
    LookupPageID=Page71913;
    DrillDownPageID=Page71913;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {

      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  23.09.09  VIGNESH   Fee Type Code - OnLookup()  Code added to get the description from Fee type
      02  19/10/09  VANDHANA  OnInsert                    Code to assign User ID.
    }
    END.
  }
}

OBJECT Table 71910 Task
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU2.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN


               "User ID":= USERID;
               Date:= TODAY;


               // Start 01. Ankesh
               IF "Task No."='' THEN BEGIN
                 TaskSetup.GET;
                 TaskSetup.TESTFIELD(TaskSetup."Task No.");
                 NoSeriesMgt.InitSeries(TaskSetup."Task No.",xRec."No. Series",0D,"Task No.","No. Series");
               END
               // Stop 01. Ankesh
             END;

    CaptionML=ENU=Task;
    LookupPageID=Page71916;
  }
  FIELDS
  {
    { 1   ;   ;Task No.            ;Code20        ;OnValidate=BEGIN
                                                                // Start 02. Ankesh
                                                                IF "Task No." <> xRec."Task No."  THEN BEGIN
                                                                  TaskSetup.GET;
                                                                  NoSeriesMgt.TestManual(TaskSetup."Task No.");
                                                                  "No. Series":='';
                                                                END;
                                                                // Stop 02. Ankesh
                                                              END;

                                                   CaptionML=ENU=Task No. }
    { 2   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Staff,Student";
                                                   OptionString=[ ,Staff,Student] }
    { 3   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Staff)) Employee
                                                                 ELSE IF (Type=CONST(Student)) Table33009767;
                                                   CaptionML=ENU=No. }
    { 9   ;   ;Date                ;Date          ;CaptionML=ENU=Starting Date;
                                                   NotBlank=Yes }
    { 10  ;   ;Task Status         ;Option        ;OnValidate=BEGIN
                                                                IF "Task Status" = "Task Status"::Completed THEN
                                                                  VALIDATE(Closed,TRUE)
                                                                ELSE
                                                                  VALIDATE(Closed,FALSE);
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                   OptionString=Not Started,In Progress,Completed,Waiting,Postponed }
    { 11  ;   ;Priority            ;Option        ;InitValue=Normal;
                                                   CaptionML=ENU=Priority;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 12  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 13  ;   ;Closed              ;Boolean       ;OnValidate=BEGIN
                                                                IF Closed THEN BEGIN
                                                                  "Date Closed" := TODAY;
                                                                  "Task Status" := "Task Status"::Completed;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Closed }
    { 14  ;   ;Date Closed         ;Date          ;CaptionML=ENU=Date Closed;
                                                   Editable=No }
    { 15  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 17  ;   ;Canceled            ;Boolean       ;OnValidate=BEGIN
                                                                IF Canceled AND NOT Closed THEN
                                                                  VALIDATE(Closed,TRUE);
                                                                IF (NOT Canceled) AND Closed THEN
                                                                  VALIDATE(Closed,FALSE);
                                                              END;

                                                   CaptionML=ENU=Canceled }
    { 19  ;   ;Assinged To         ;Code20        ;CaptionML=ENU=Assinged To }
    { 20  ;   ;Start Date          ;Date          ;CaptionML=ENU=Start Date }
    { 21  ;   ;End Date            ;Date          ;CaptionML=ENU=End Date }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Task No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text006@1102155000 : TextConst 'ENU=The valid range of dates is from %1 to %2. Please enter a date within this range.';
      Task@1102155003 : Record 71910;
      TaskSetup@1102155002 : Record 71884;
      NoSeriesMgt@1102155001 : Codeunit 396;

    PROCEDURE AssistEdit@1102155000(OldTaskno@1102155000 : Record 71910) : Boolean;
    BEGIN
      // Start 03. Ankesh
      WITH  Task DO BEGIN
        Task := Rec;
        TaskSetup.GET;
        TaskSetup.TESTFIELD(TaskSetup."Task No.");
        IF NoSeriesMgt.SelectSeries(TaskSetup."Task No.",OldTaskno."No. Series","No. Series") THEN BEGIN
          TaskSetup.GET;
          TaskSetup.TESTFIELD(TaskSetup."Task No.");
          NoSeriesMgt.SetSeries("Task No.");
          Rec := Task;
          EXIT(TRUE);
        END;
      END;
      // Stop 03. Ankesh
    END;

    BEGIN
    {
         No    Date        Sign         Trigger              Description
      -----------------------------------------------------------------------------------------------
        01     07.01.10    ANKESH      OnInsert()            To Initialize The Series.
        02     07.01.10    ANKESH    Task No.-OnValidate()   To Run TestManual Function Of NoSeriesManagment Codeunit.
        03     07.01.10    ANKESH      AssistEdit()          The Code will Run when the AssistEdit Button Is activated on Form.
    }
    END.
  }
}

OBJECT Table 71911 Announcement
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. Ankesh
               IF "Announcement No." = '' THEN BEGIN
                 AnnouncementSetup.GET;
                 AnnouncementSetup.TESTFIELD("Announcement No.");
                 NoSeriesMgt.InitSeries(AnnouncementSetup."Announcement No.",xRec."No. Series",0D,"Announcement No.","No. Series");
               END
               // Stop 01. Ankesh
             END;

    CaptionML=ENU=Announcement;
    LookupPageID=Page71917;
  }
  FIELDS
  {
    { 1   ;   ;Announcement No.    ;Code20        ;OnValidate=BEGIN
                                                                // Start 02. Ankesh
                                                                IF "Announcement No." <> xRec."Announcement No." THEN BEGIN
                                                                  AnnouncementSetup.GET;
                                                                  NoSeriesMgt.TestManual(AnnouncementSetup."Announcement No.");
                                                                  "No. Series" := '';
                                                                END;
                                                                // Stop 02. Ankesh
                                                              END;

                                                   CaptionML=ENU=Announcement No. }
    { 2   ;   ;Announcement Type   ;Option        ;CaptionML=ENU=Announcement Type;
                                                   OptionCaptionML=ENU=" ,Staff,Student,Everyone";
                                                   OptionString=[ ,Staff,Student,Everyone] }
    { 3   ;   ;No.                 ;Code20        ;TableRelation=IF (Announcement Type=CONST(Staff)) Employee
                                                                 ELSE IF (Announcement Type=CONST(Student)) "Student Subjects";
                                                   CaptionML=ENU=No. }
    { 9   ;   ;Date Created        ;Date          ;CaptionML=ENU=Starting Date;
                                                   NotBlank=Yes }
    { 11  ;   ;Priority            ;Option        ;InitValue=Normal;
                                                   CaptionML=ENU=Priority;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 12  ;   ;Description-1       ;Text250       ;CaptionML=ENU=Description }
    { 13  ;   ;Closed              ;Boolean       ;OnValidate=BEGIN
                                                                IF Closed THEN
                                                                  "Date Closed" := TODAY;
                                                              END;

                                                   CaptionML=ENU=Closed }
    { 14  ;   ;Date Closed         ;Date          ;CaptionML=ENU=Date Closed }
    { 15  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 17  ;   ;Canceled            ;Boolean       ;OnValidate=BEGIN
                                                                IF Canceled AND NOT Closed THEN
                                                                  VALIDATE(Closed,TRUE);

                                                                IF (NOT Canceled) AND Closed THEN
                                                                  VALIDATE(Closed,FALSE);
                                                              END;

                                                   CaptionML=ENU=Canceled }
    { 18  ;   ;Start Date          ;Date          ;CaptionML=ENU=Start Date }
    { 19  ;   ;End Date            ;Date          ;CaptionML=ENU=End Date }
    { 20  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Event,Announcement,Circular";
                                                   OptionString=[ ,Event,Announcement,Circular] }
    { 21  ;   ;Subject             ;Text250       ;CaptionML=ENU=Subject }
    { 22  ;   ;Description-2       ;Text250        }
    { 23  ;   ;Description-3       ;Text250        }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Announcement No.                        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Announcement@1102155002 : Record 71911;
      AnnouncementSetup@1102155001 : Record 71884;
      NoSeriesMgt@1102155000 : Codeunit 396;

    PROCEDURE AssistEdit@1000000000(OldAnnouncement@1000000000 : Record 71911) : Boolean;
    BEGIN
      // Start 03. Ankesh
      WITH Announcement DO BEGIN
        Announcement := Rec;
        AnnouncementSetup.GET;
        AnnouncementSetup.TESTFIELD("Announcement No.");
        IF NoSeriesMgt.SelectSeries(AnnouncementSetup."Announcement No.",OldAnnouncement."No. Series","No. Series") THEN BEGIN
          AnnouncementSetup.GET;
          AnnouncementSetup.TESTFIELD("Announcement No.");
          NoSeriesMgt.SetSeries("Announcement No.");
          Rec := Announcement;
          EXIT(TRUE);
        END;
      END;
      // Stop 03. Ankesh
    END;

    BEGIN
    {
         No    Date        Sign         Trigger              Description
      -----------------------------------------------------------------------------------------------
        01     07.01.10    ANKESH      OnInsert()            To Initialize The Series.
        02     07.01.10    ANKESH    Task No.-OnValidate()   To Run TestManual Function Of NoSeriesManagment Codeunit.
        03     07.01.10    ANKESH      AssistEdit()          The Code will Run when the AssistEdit Button Is activated on Form.
    }
    END.
  }
}

OBJECT Table 71915 Severity
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.Ankesh
               "User ID" := USERID;
               // Stop 01.Ankesh
             END;

    CaptionML=ENU=Severity;
    LookupPageID=Page71920;
    DrillDownPageID=Page71920;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  02.03.10  Ankesh   OnInsert()                Code added for user id.
    }
    END.
  }
}

OBJECT Table 71917 Action Taken
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01.Ankesh
               "User ID" := USERID;
               // Stop 01.Ankesh
             END;

    CaptionML=ENU=Action Taken;
    LookupPageID=Page71919;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 3   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Staff,Student";
                                                   OptionString=[ ,Staff,Student] }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  02.03.10  Ankesh   OnInsert()                Code added for user id.
    }
    END.
  }
}

OBJECT Table 71919 Department
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // Start 01. VANDHANA
               "User ID" := USERID;
               // Stop 01. VANDHANA

               // Start 02.ABK
               "Academic Year" := EducationVertical.GetAcademicYear;
               // Stop 02.ABK
             END;

    CaptionML=ENU=Department;
    LookupPageID=Page71925;
    DrillDownPageID=Page71925;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Academic Year       ;Code10        ;TableRelation="Academic Year";
                                                   CaptionML=ENU=Academic Year }
    { 4   ;   ;Head of the Department;Code20      ;TableRelation=Employee;
                                                   CaptionML=ENU=Head of the Department }
    { 70120;  ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 70121;  ;Portal ID           ;Code20        ;CaptionML=ENU=Portal ID }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EducationVertical@1102155000 : Codeunit 71880;

    BEGIN
    {
        No   Date      Sign     Trigger                      Description
      -----------------------------------------------------------------------------------------------
        01  19/10/09  VANDHANA  OnInsert                     Code to assign User ID.
        02  24/11/09  ABK       OnInsert                     Code to assign academic year
    }
    END.
  }
}

OBJECT Table 71920 Family Code
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Family Code;
    LookupPageID=Page71926;
    DrillDownPageID=Page71926;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71934 Portfolio
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU1.0;
  }
  PROPERTIES
  {
    LookupPageID=Page33010301;
    DrillDownPageID=Page33010301;
  }
  FIELDS
  {
    { 1   ;   ;Portfolio           ;Text60         }
  }
  KEYS
  {
    {    ;Portfolio                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 71945 Academic Points
{
  OBJECT-PROPERTIES
  {
    Date=02-03-18;
    Time=19:39:10;
    Modified=Yes;
    Version List=SJ6.01;
  }
  PROPERTIES
  {
    DrillDownPageID=Page91914;
  }
  FIELDS
  {
    { 1   ;   ;Student No.         ;Code20        ;CaptionML=ENU=Student No.;
                                                   Editable=Yes }
    { 2   ;   ;Academic Year       ;Code20        ;CaptionML=ENU=Academic Year }
    { 3   ;   ;Exam Code           ;Code20         }
    { 4   ;   ;Class Code          ;Code20         }
    { 5   ;   ;Points              ;Decimal        }
  }
  KEYS
  {
    {    ;Student No.,Academic Year,Exam Code     ;SumIndexFields=Points;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 72000 HR Setup
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Primary Key;
    CaptionML=ENU=HR Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Indenting SNo       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Indenting SNo }
    { 3   ;   ;ResumeDB SNo        ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=ResumeDB SNo }
    { 4   ;   ;Appraisal SNo       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Appraisal SNo }
    { 5   ;   ;File Directory      ;Code150       ;CaptionML=ENU=File Directory }
    { 6   ;   ;Appraisal           ;DateFormula   ;CaptionML=ENU=Appraisal }
    { 7   ;   ;Send to HR Mail     ;Text30        ;CaptionML=ENU=Send to HR Mail }
    { 8   ;   ;Send to HR Mail CC  ;Text30        ;CaptionML=ENU=Send to HR Mail CC }
    { 9   ;   ;Training SNo        ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Training SNo }
    { 10  ;   ;Interview SNo       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Interview SNo }
    { 11  ;   ;Selection SNo       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Selection SNo }
    { 12  ;   ;MsWordPath          ;Text150       ;CaptionML=ENU=MsWordPath }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72001 Departments
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    LookupPageID=Page72001;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;NotBlank=Yes }
    { 3   ;   ;Active Employees    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Department Code=FIELD(Code),
                                                                                     Status=FILTER(Active)));
                                                   Editable=No }
    { 4   ;   ;Inactive Employees  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Department Code=FIELD(Code),
                                                                                     Status=FILTER(Inactive)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72002 Designation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    LookupPageID=Page72002;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;NotBlank=Yes }
    { 3   ;   ;Active Employees    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Designation Code=FIELD(Code),
                                                                                     Status=FILTER(Active)));
                                                   Editable=No }
    { 4   ;   ;Inactive Employees  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Designation Code=FIELD(Code),
                                                                                     Status=FILTER(Inactive)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72003 Skill
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Skill;
    LookupPageID=Page72003;
    DrillDownPageID=Page72003;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description;
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72004 Certification
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Certification;
    LookupPageID=Page72004;
    DrillDownPageID=Page72004;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72005 Interview Round
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Interview Round;
    LookupPageID=Page72005;
    DrillDownPageID=Page72005;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description;
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72006 Performance Appraisal
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Performance Appraisal;
    LookupPageID=Page72006;
    DrillDownPageID=Page72006;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description;
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72007 Rating Value
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Rating Value;
    LookupPageID=Page72007;
    DrillDownPageID=Page72007;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Value % Upto        ;Decimal       ;CaptionML=ENU=Value % Upto;
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72008 Training
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Training;
    LookupPageID=Page72008;
    DrillDownPageID=Page72008;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description;
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72009 Indenting
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:47:35;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=No,Indenting Date,Description;
    OnInsert=BEGIN
               IF No = '' THEN BEGIN
                 HRSetup.GET;
                 HRSetup.TESTFIELD("Indenting SNo");
                 NoSeriesMgt.InitSeries(HRSetup."Indenting SNo",xRec."No. Series",0D,No,"No. Series");
               END;

               "Vacancy Status" := "Vacancy Status"::Open;
               "Indenting Date" := TODAY;
             END;

    OnDelete=BEGIN
               IF Approve THEN
                 ERROR('Should not delete the record');
             END;

    CaptionML=ENU=Indenting;
    LookupPageID=Page72010;
    DrillDownPageID=Page72010;
  }
  FIELDS
  {
    { 1   ;   ;No                  ;Code20        ;OnValidate=BEGIN
                                                                IF No <> xRec.No THEN BEGIN
                                                                  HRSetup.GET;
                                                                  NoSeriesMgt.TestManual(HRSetup."Indenting SNo");
                                                                  "No. Series" := '';
                                                                END;

                                                                TESTFIELD(No);
                                                              END;

                                                   CaptionML=ENU=No }
    { 2   ;   ;Indenting Date      ;Date          ;CaptionML=ENU=Indenting Date;
                                                   Editable=No }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN BEGIN
                                                                  "Employee Name" := Employee."First Name";
                                                                  "Department Code" := Employee."Global Dimension 1 Code";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 5   ;   ;Employee Name       ;Text30        ;CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 6   ;   ;Department Code     ;Code10        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Code;
                                                   Editable=No }
    { 7   ;No ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
    { 8   ;   ;Vacancy Status      ;Option        ;CaptionML=ENU=Vacancy Status;
                                                   OptionCaptionML=ENU=Open,In Process,Hold,Close;
                                                   OptionString=Open,In Process,Hold,Close }
    { 9   ;   ;Recruitment Status  ;Option        ;CaptionML=ENU=Recruitment Status;
                                                   OptionCaptionML=ENU=Open,Close;
                                                   OptionString=Open,Close }
    { 10  ;   ;Advertisement Type  ;Option        ;CaptionML=ENU=Advertisement Type;
                                                   OptionCaptionML=ENU=" ,News Paper,Agency";
                                                   OptionString=[ ,News Paper,Agency] }
    { 11  ;   ;Agency Mail         ;Boolean       ;CaptionML=ENU=Agency Mail;
                                                   Editable=No }
    { 12  ;   ;Designation Code    ;Code10        ;TableRelation=Designation;
                                                   CaptionML=ENU=Designation Code }
    { 13  ;   ;No Of Vacancy       ;Integer       ;CaptionML=ENU=No Of Vacancy }
    { 14  ;   ;Age From            ;Integer       ;OnValidate=BEGIN
                                                                IF "Age From" <= 19 THEN
                                                                  ERROR('Should not allow, the bellow Age of 19');
                                                              END;

                                                   CaptionML=ENU=Age From }
    { 15  ;   ;Age To              ;Integer       ;OnValidate=BEGIN
                                                                IF "Age To" < "Age From" THEN
                                                                  ERROR('Should be enter Greater than or equal to %1',"Age From");
                                                              END;

                                                   CaptionML=ENU=Age To }
    { 16  ;   ;Qualification Code  ;Code50        ;TableRelation=Qualification;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Qualification Code }
    { 17  ;   ;Experience(in Yrs)  ;Decimal       ;CaptionML=ENU=Experience(in Yrs) }
    { 18  ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 19  ;   ;Preference          ;Text100       ;CaptionML=ENU=Preference }
    { 20  ;   ;Willing to Work     ;Option        ;CaptionML=ENU=Willing to Work;
                                                   OptionCaptionML=ENU=General,I Shift,II Shift,III Shift;
                                                   OptionString=General,I Shift,II Shift,III Shift }
    { 21  ;   ;On Board            ;Date          ;CaptionML=ENU=On Board }
    { 22  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 23  ;   ;Approve             ;Boolean       ;CaptionML=ENU=Approve;
                                                   Editable=No }
    { 24  ;   ;Newspaper Mail      ;Boolean       ;CaptionML=ENU=Newspaper Mail;
                                                   Editable=No }
    { 25  ;   ;Post Code           ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                //Postcode.ValidatePostCode(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //Postcode.LookUpPostCode(City,"Post Code",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 26  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                //Postcode.ValidateCity(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //Postcode.LookUpCity(City,"Post Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=City }
    { 27  ;   ;Comment             ;Boolean       ;CaptionML=ENU=Comment }
    { 28  ;   ;Skills              ;Code250       ;TableRelation=Skill;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Skills }
    { 29  ;   ;Certifications      ;Code250       ;TableRelation=Certification;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Certifications }
  }
  KEYS
  {
    {    ;No                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRSetup@1000000000 : Record 72000;
      Employee@1000000001 : Record 5200;
      Indenting@1000000002 : Record 72009;
      NoSeriesMgt@1000000003 : Codeunit 396;
      Postcode@1000000004 : Record 225;

    PROCEDURE AssistEdit@1000000003(Indenting@1000000000 : Record 72009) : Boolean;
    BEGIN
      WITH Indenting DO BEGIN
        Indenting := Rec;
        HRSetup.GET;
        HRSetup.TESTFIELD("Indenting SNo");
        IF NoSeriesMgt.SelectSeries(HRSetup."Indenting SNo","No. Series","No. Series") THEN BEGIN
          HRSetup.GET;
          HRSetup.TESTFIELD("Indenting SNo");
          NoSeriesMgt.SetSeries(No);
          Rec := Indenting;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72010 News Paper
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:48:13;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Indenting No.;
    CaptionML=ENU=News Paper;
    LookupPageID=Page72014;
    DrillDownPageID=Page72014;
  }
  FIELDS
  {
    { 1   ;   ;Indenting No.       ;Code20        ;CaptionML=ENU=Indenting No. }
    { 2   ;   ;News Paper Code     ;Code10        ;CaptionML=ENU=News Paper Code }
    { 3   ;   ;News Paper Name     ;Text30        ;CaptionML=ENU=News Paper Name }
    { 4   ;   ;Contact Person      ;Text30        ;CaptionML=ENU=Contact Person }
    { 5   ;   ;Address 1           ;Text30        ;CaptionML=ENU=Address1 }
    { 6   ;   ;Address 2           ;Text30        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;Address 3           ;Text30        ;CaptionML=ENU=Address 3 }
    { 8   ;   ;Postal Code         ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                //PostCode.ValidatePostCode(City,"Postal Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpPostCode(City,"Postal Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=Postal Code }
    { 9   ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                //PostCode.ValidateCity(City,"Postal Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpCity(City,"Postal Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=City }
    { 10  ;   ;Country             ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 11  ;   ;Phone               ;Text30        ;CaptionML=ENU=Phone }
    { 12  ;   ;Mobile              ;Text30        ;CaptionML=ENU=Mobile }
    { 13  ;   ;Fax                 ;Text30        ;CaptionML=ENU=Fax }
    { 14  ;   ;E-mail              ;Text50        ;CaptionML=ENU=E-mail }
    { 15  ;   ;Attachment          ;Text100       ;CaptionML=ENU=Attachment }
    { 16  ;   ;Date                ;Date          ;CaptionML=ENU=Date }
    { 17  ;   ;Page No.            ;Integer       ;CaptionML=ENU=Page No. }
    { 18  ;   ;Size                ;Text30        ;CaptionML=ENU=Size }
    { 19  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 20  ;   ;Payment Method      ;Option        ;CaptionML=ENU=Payment Method;
                                                   OptionCaptionML=ENU=Cash,Cheque,Bank Transfer;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 21  ;   ;Bank Code           ;Code10        ;CaptionML=ENU=Bank Code }
    { 22  ;   ;Bank Name           ;Code30        ;CaptionML=ENU=Bank Name }
    { 23  ;   ;Bank Branch         ;Code30        ;CaptionML=ENU=Bank Branch }
    { 24  ;   ;Account Type        ;Text30        ;CaptionML=ENU=Account Type }
    { 25  ;   ;Account No          ;Code20        ;CaptionML=ENU=Account No }
  }
  KEYS
  {
    {    ;Indenting No.,News Paper Code           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000000000 : Record 225;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72011 Agency
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:48:32;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Indenting No;
    CaptionML=ENU=Agency;
    LookupPageID=Page72016;
    DrillDownPageID=Page72016;
  }
  FIELDS
  {
    { 1   ;   ;Indenting No        ;Code20        ;CaptionML=ENU=Indenting No }
    { 2   ;   ;Agency Code         ;Code10        ;CaptionML=ENU=Agency Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Agency Name         ;Text30        ;CaptionML=ENU=Agency Name }
    { 4   ;   ;Contact Person      ;Text30        ;CaptionML=ENU=Contact Person }
    { 5   ;   ;Address 1           ;Text30        ;CaptionML=ENU=Address 1 }
    { 6   ;   ;Address 2           ;Text30        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;Address 3           ;Text30        ;CaptionML=ENU=Address 3 }
    { 8   ;   ;Postal Code         ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                //PostCode.ValidatePostCode(City,"Postal Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpPostCode(City,"Postal Code",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Postal Code }
    { 9   ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                //PostCode.ValidateCity(City,"Postal Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpCity(City,"Postal Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=City }
    { 10  ;   ;Country             ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 11  ;   ;Phone               ;Text30        ;CaptionML=ENU=Phone }
    { 12  ;   ;Mobile              ;Text30        ;CaptionML=ENU=Mobile }
    { 13  ;   ;Fax                 ;Text30        ;CaptionML=ENU=Fax }
    { 14  ;   ;E-mail              ;Text50        ;CaptionML=ENU=E-mail }
    { 15  ;   ;Attachment          ;Text100       ;CaptionML=ENU=Attachment }
    { 16  ;   ;Date                ;Date          ;CaptionML=ENU=Date }
  }
  KEYS
  {
    {    ;Indenting No,Agency Code                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000000000 : Record 225;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72012 Advertisement
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=No.;
    CaptionML=ENU=Advertisement;
    LookupPageID=Page72017;
    DrillDownPageID=Page72017;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 2   ;   ;Company Name        ;Text30        ;CaptionML=ENU=Company Name }
    { 3   ;   ;Address 1           ;Text30        ;CaptionML=ENU=Address 1 }
    { 4   ;   ;Address 2           ;Text30        ;CaptionML=ENU=Address 2 }
    { 5   ;   ;Address 3           ;Text30        ;CaptionML=ENU=Address 3 }
    { 6   ;   ;City                ;Text30        ;CaptionML=ENU=City }
    { 7   ;   ;Postal Code         ;Code10        ;TableRelation="Post Code";
                                                   CaptionML=ENU=Postal Code }
    { 8   ;   ;Country             ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 9   ;   ;Contact Person      ;Text30        ;CaptionML=ENU=Contact Person }
    { 10  ;   ;Phone               ;Text30        ;CaptionML=ENU=Phone }
    { 11  ;   ;Mobile              ;Text30        ;CaptionML=ENU=Mobile }
    { 12  ;   ;E-Mail              ;Text30        ;CaptionML=ENU=E-Mail }
    { 13  ;   ;No. Of Vacancy      ;Integer       ;CaptionML=ENU=No. Of Vacancy }
    { 14  ;   ;Required Vacancy    ;Code10        ;CaptionML=ENU=Required Vacancy }
    { 15  ;   ;Vacancy Description ;Text100       ;CaptionML=ENU=Vacancy Description }
    { 16  ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female] }
    { 17  ;   ;Qualification Code  ;Code10        ;CaptionML=ENU=Qualification Code }
    { 18  ;   ;Qualification Description;Text100  ;CaptionML=ENU=Qualification Description }
    { 19  ;   ;Prefrence           ;Text250       ;CaptionML=ENU=Prefrence }
    { 20  ;   ;Skill               ;Text250       ;CaptionML=ENU=Skill }
    { 21  ;   ;Certification       ;Text250       ;CaptionML=ENU=Certification }
    { 22  ;   ;Experience(In Yrs)  ;Decimal       ;CaptionML=ENU=Experience(In Yrs) }
    { 23  ;   ;Age From            ;Integer       ;CaptionML=ENU=Age From }
    { 24  ;   ;Age To              ;Integer       ;CaptionML=ENU=Age To }
    { 25  ;   ;Required Date       ;Date          ;CaptionML=ENU=Required Date }
    { 26  ;   ;Advertisement Type  ;Option        ;CaptionML=ENU=Advertisement Type;
                                                   OptionCaptionML=ENU=" ,News Papper,Agency";
                                                   OptionString=[ ,News Papper,Agency] }
    { 27  ;   ;Age Ability         ;Text30        ;CaptionML=ENU=Age Ability }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72013 Resume
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:58:21;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=No,Name;
    OnInsert=BEGIN
               IF No = '' THEN BEGIN
                 HRSetup.GET;
                 HRSetup.TESTFIELD("ResumeDB SNo");
                 NoSeriesMgt.InitSeries(HRSetup."ResumeDB SNo",xRec."No. Series",0D,No,"No. Series");
               END;

               "Submitted Date" := TODAY;
             END;

    CaptionML=ENU=Resume;
    LookupPageID=Page72019;
    DrillDownPageID=Page72019;
  }
  FIELDS
  {
    { 1   ;   ;No                  ;Code20        ;OnValidate=BEGIN
                                                                IF No <> xRec.No THEN BEGIN
                                                                  HRSetup.GET;
                                                                  NoSeriesMgt.TestManual(HRSetup."ResumeDB SNo");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No }
    { 2   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 7   ;   ;Post Code           ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                //PostCode.ValidatePostCode(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpPostCode(City,"Post Code",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 8   ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                //PostCode.ValidateCity(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpCity(City,"Post Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=City }
    { 9   ;   ;State               ;Code10        ;CaptionML=ENU=State }
    { 10  ;   ;Country             ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 14  ;   ;Date of Birth       ;Date          ;OnValidate=BEGIN
                                                                IF "Date of Birth" <> 0D THEN BEGIN
                                                                  Age := TODAY - "Date of Birth";
                                                                  TempAge := ROUND(Age / 365,1,'=');
                                                                  AgeCalculation := Age MOD 365;
                                                                  Months := ROUND(AgeCalculation / 30,1,'=');
                                                                  Age := TempAge;
                                                                END;

                                                                IF Age <= 19 THEN
                                                                  ERROR('Enter the Valid Date of Birth\Because should not accept the below age of 19');
                                                              END;

                                                   CaptionML=ENU=Date of Birth }
    { 15  ;   ;Age                 ;Integer       ;CaptionML=ENU=Age;
                                                   Editable=No }
    { 16  ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 18  ;   ;Phone No            ;Text30        ;CaptionML=ENU=Phone No }
    { 19  ;   ;Mobile No           ;Text30        ;CaptionML=ENU=Mobile No }
    { 20  ;   ;E-Mail              ;Text50        ;CaptionML=ENU=E-Mail }
    { 21  ;   ;Current CTC         ;Decimal       ;CaptionML=ENU=Current CTC }
    { 22  ;   ;Expected CTC        ;Decimal       ;CaptionML=ENU=Expected CTC }
    { 24  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 25  ;   ;Attachment 1        ;Text100       ;CaptionML=ENU=Attachment 1 }
    { 26  ;   ;Attachment 2        ;Text100       ;CaptionML=ENU=Attachment 2 }
    { 27  ;   ;Submitted Date      ;Date          ;CaptionML=ENU=Submitted Date;
                                                   Editable=No }
    { 28  ;   ;Tot Experience(In Yrs);Decimal     ;CaptionML=ENU=Tot Experience(In Yrs) }
    { 29  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked;
                                                   Editable=No }
    { 30  ;   ;Current Employer    ;Text50        ;CaptionML=ENU=Current Employer }
    { 31  ;   ;Current Experience(In Yrs);Decimal ;CaptionML=ENU=Current Experience(In Yrs) }
    { 32  ;   ;Skills              ;Code250       ;TableRelation=Skill;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Skills }
    { 33  ;   ;Certifications      ;Code250       ;TableRelation=Certification;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Certifications }
    { 34  ;   ;Qualifications      ;Code100       ;TableRelation=Qualification;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Qualifications }
    { 35  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(12),
                                                                                                          No.=FIELD(No)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 36  ;   ;Notice Period       ;Code10        ;CaptionML=ENU=Notice Period }
  }
  KEYS
  {
    {    ;No                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRSetup@1000000000 : Record 72000;
      NoSeriesMgt@1000000001 : Codeunit 396;
      PostCode@1000000002 : Record 225;
      TempAge@1000000003 : Decimal;
      AgeCalculation@1000000004 : Decimal;
      Months@1000000006 : Integer;
      Resume@1000000005 : Record 72013;

    PROCEDURE AssistEdit@1000000001(Resume@1000000000 : Record 72013) : Boolean;
    BEGIN
      WITH Resume DO BEGIN
        Resume := Rec;
        HRSetup.GET;
        HRSetup.TESTFIELD("ResumeDB SNo");
        IF NoSeriesMgt.SelectSeries(HRSetup."ResumeDB SNo","No. Series","No. Series") THEN BEGIN
          HRSetup.GET;
          HRSetup.TESTFIELD("ResumeDB SNo");
          NoSeriesMgt.SetSeries(No);
          Rec := Resume;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72014 Selection Header
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:58:58;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=No.;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 HRSetup.GET;
                 HRSetup.TESTFIELD("Selection SNo");
                 NoSeriesMgt.InitSeries(HRSetup."Selection SNo",xRec."No. Series",0D,"No.","No. Series");
               END;
             END;

    CaptionML=ENU=Selection Header;
    LookupPageID=Page72022;
    DrillDownPageID=Page72022;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HRSetup.GET;
                                                                  NoSeriesMgt.TestManual(HRSetup."Selection SNo");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Indenting No        ;Code20        ;TableRelation=Indenting;
                                                   OnLookup=BEGIN
                                                              Indenting.RESET;
                                                              Indenting.SETFILTER(Approve,'%1',TRUE);
                                                              Indenting.SETFILTER("Vacancy Status",'<>%1',Indenting."Vacancy Status"::Close);
                                                              IF Indenting.FINDFIRST THEN;
                                                              IF PAGE.RUNMODAL(72012,Indenting) = ACTION::LookupOK THEN BEGIN
                                                                "Indenting No" := Indenting.No;
                                                                "Employee No." := Indenting."Employee No.";
                                                                "Employee Name" := Indenting."Employee Name";
                                                                "Department Code" := Indenting."Department Code";
                                                                "Advertisement Type" := Indenting."Advertisement Type";
                                                                "Required Position" := Indenting."Designation Code";
                                                                "No Of Vacancy" := Indenting."No Of Vacancy";
                                                                "Age From" := Indenting."Age From";
                                                                "Age To" := Indenting."Age To";
                                                                "Qualification Code" := Indenting."Qualification Code";
                                                                "Experience(in Yrs)" := Indenting."Experience(in Yrs)";
                                                                Gender := Indenting.Gender;
                                                                "Post Code" := Indenting."Post Code";
                                                                City := Indenting.City;
                                                                Skills := Indenting.Skills;
                                                                Certifications := Indenting.Certifications;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Indenting No }
    { 3   ;   ;Indenting Date      ;Date          ;CaptionML=ENU=Indenting Date;
                                                   Editable=No }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;Yes;Employee No.        ;Code30        ;CaptionML=ENU=Employee No.;
                                                   Editable=No }
    { 6   ;Yes;Employee Name       ;Text30        ;CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 7   ;Yes;Department Code     ;Code20        ;CaptionML=ENU=Department Code;
                                                   Editable=No }
    { 8   ;No ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
    { 9   ;   ;Vacancy Status      ;Option        ;CaptionML=ENU=Vacancy Status;
                                                   OptionCaptionML=ENU=Open,In Process,Hold,Close;
                                                   OptionString=Open,In Process,Hold,Close }
    { 10  ;   ;Recruitment Status  ;Option        ;CaptionML=ENU=Recruitment Status;
                                                   OptionCaptionML=ENU=Open,Close;
                                                   OptionString=Open,Close }
    { 11  ;   ;Advertisement Type  ;Option        ;CaptionML=ENU=Advertisement Type;
                                                   OptionCaptionML=ENU=" ,News Paper,Agency";
                                                   OptionString=[ ,News Paper,Agency] }
    { 12  ;   ;Agency Mail         ;Boolean       ;CaptionML=ENU=Agency Mail;
                                                   Editable=No }
    { 13  ;Yes;Required Position   ;Code30        ;CaptionML=ENU=Required Position;
                                                   Editable=No }
    { 14  ;   ;No Of Vacancy       ;Integer       ;CaptionML=ENU=No Of Vacancy;
                                                   Editable=No }
    { 15  ;   ;Age From            ;Integer       ;CaptionML=ENU=Age From;
                                                   Editable=No }
    { 16  ;   ;Age To              ;Integer       ;CaptionML=ENU=Age To;
                                                   Editable=No }
    { 17  ;   ;Qualification Code  ;Code20        ;CaptionML=ENU=Qualification Code;
                                                   Editable=No }
    { 18  ;   ;Experience(in Yrs)  ;Decimal       ;CaptionML=ENU=Experience(in Yrs);
                                                   Editable=No }
    { 19  ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Male,Female";
                                                   OptionString=[ ,Male,Female];
                                                   Editable=No }
    { 20  ;   ;Preference          ;Text40        ;CaptionML=ENU=Preference;
                                                   Editable=No }
    { 21  ;   ;Willing to Work     ;Option        ;CaptionML=ENU=Willing to Work;
                                                   OptionCaptionML=ENU=" ,General,Day,Night";
                                                   OptionString=[ ,General,Day,Night];
                                                   Editable=No }
    { 22  ;   ;Date of Required    ;Date          ;CaptionML=ENU=Date of Required }
    { 23  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 24  ;   ;Approve             ;Boolean       ;CaptionML=ENU=Approve;
                                                   Editable=No }
    { 25  ;   ;Skills              ;Text250       ;CaptionML=ENU=Skills;
                                                   Editable=No }
    { 26  ;   ;Certifications      ;Text250       ;CaptionML=ENU=Certifications;
                                                   Editable=No }
    { 27  ;   ;Location            ;Boolean       ;CaptionML=ENU=Location }
    { 28  ;   ;Qualification       ;Boolean       ;CaptionML=ENU=Qualification }
    { 29  ;   ;Skill               ;Boolean       ;CaptionML=ENU=Skill }
    { 30  ;   ;Certification       ;Boolean       ;CaptionML=ENU=Certification }
    { 31  ;   ;Age                 ;Boolean       ;CaptionML=ENU=Age }
    { 32  ;   ;Experience          ;Boolean       ;CaptionML=ENU=Experience }
    { 33  ;   ;Post Code           ;Code10        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                //PostCode.ValidatePostCode(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpPostCode(City,"Post Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=Post Code;
                                                   Editable=No }
    { 34  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                //PostCode.ValidateCity(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpCity(City,"Post Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=City;
                                                   Editable=No }
    { 35  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(11),
                                                                                                          No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRSetup@1000000000 : Record 72000;
      NoSeriesMgt@1000000001 : Codeunit 396;
      Indenting@1000000002 : Record 72009;
      PostCode@1000000004 : Record 225;

    PROCEDURE AssistEdit@1000000005(SelectionHeader@1000000000 : Record 72014) : Boolean;
    BEGIN
      WITH SelectionHeader DO BEGIN
        SelectionHeader := Rec;
        HRSetup.GET;
        HRSetup.TESTFIELD("Selection SNo");
        IF NoSeriesMgt.SelectSeries(HRSetup."Selection SNo","No. Series","No. Series") THEN BEGIN
          HRSetup.GET;
          HRSetup.TESTFIELD("Selection SNo");
          NoSeriesMgt.SetSeries("No.");
          Rec := SelectionHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72015 Selection Line
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=16:59:53;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Selection Line;
  }
  FIELDS
  {
    { 1   ;   ;No                  ;Code20        ;CaptionML=ENU=No }
    { 2   ;   ;Indenting No.       ;Code20        ;CaptionML=ENU=Indenting No. }
    { 3   ;   ;Indenting Dept Code ;Code10        ;CaptionML=ENU=Indenting DeptCode }
    { 4   ;   ;Indenting Desig Code;Code10        ;CaptionML=ENU=Indenting Desig Code }
    { 5   ;   ;Resume No           ;Code20        ;CaptionML=ENU=Resume No }
    { 6   ;   ;Line No             ;Integer       ;CaptionML=ENU=Line No }
    { 7   ;   ;First Name          ;Text30        ;CaptionML=ENU=First Name }
    { 8   ;   ;Middle Name         ;Text30        ;CaptionML=ENU=Middle Name }
    { 9   ;   ;Last Name           ;Text30        ;CaptionML=ENU=Last Name }
    { 10  ;   ;Address 1           ;Text30        ;CaptionML=ENU=Address 1 }
    { 11  ;   ;Address 2           ;Text30        ;CaptionML=ENU=Address 2 }
    { 12  ;   ;Post Code           ;Code10        ;TableRelation="Post Code";
                                                   CaptionML=ENU=Post Code }
    { 13  ;   ;City                ;Text30        ;CaptionML=ENU=City }
    { 14  ;   ;State               ;Code10        ;CaptionML=ENU=State }
    { 15  ;   ;Country             ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country }
    { 16  ;   ;Nationality         ;Text30        ;CaptionML=ENU=Nationality }
    { 17  ;   ;Religion            ;Text30        ;CaptionML=ENU=Religion }
    { 18  ;   ;Father Name         ;Text30        ;CaptionML=ENU=Father Name }
    { 19  ;   ;Date of Birth       ;Date          ;CaptionML=ENU=Date of Birth }
    { 20  ;   ;Age                 ;Integer       ;CaptionML=ENU=Age }
    { 21  ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 22  ;   ;Marital Status      ;Option        ;CaptionML=ENU=Marital Status;
                                                   OptionCaptionML=ENU=" ,Married,UnMarried";
                                                   OptionString=[ ,Married,UnMarried] }
    { 23  ;   ;Phone No            ;Text30        ;CaptionML=ENU=Phone No }
    { 24  ;   ;Mobile No           ;Text30        ;CaptionML=ENU=Mobile No }
    { 25  ;   ;E-Mail              ;Text50        ;CaptionML=ENU=E-Mail }
    { 26  ;   ;Previous Working Company;Text250   ;CaptionML=ENU=Previous Working Company }
    { 27  ;   ;Designation         ;Text250       ;TableRelation=Designation;
                                                   CaptionML=ENU=Designation }
    { 28  ;   ;Experience(In Yrs)  ;Text50        ;CaptionML=ENU=Experience(In Yrs) }
    { 29  ;   ;From Date           ;Date          ;CaptionML=ENU=From Date }
    { 30  ;   ;To Date             ;Date          ;CaptionML=ENU=To Date }
    { 31  ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 32  ;   ;Current CTC         ;Decimal       ;CaptionML=ENU=Current CTC }
    { 33  ;   ;Expected CTC        ;Decimal       ;CaptionML=ENU=Expected CTC }
    { 34  ;   ;Qualification       ;Text200       ;TableRelation=Qualification;
                                                   CaptionML=ENU=Qualification }
    { 35  ;   ;University          ;Text200       ;CaptionML=ENU=University }
    { 36  ;   ;From Year on Date   ;Text200       ;CaptionML=ENU=From Year on Date }
    { 37  ;   ;To Year on Date     ;Text200       ;CaptionML=ENU=To Year on Date }
    { 38  ;   ;Reference           ;Text100       ;CaptionML=ENU=Reference }
    { 39  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 40  ;   ;Attachment 1        ;Text100       ;CaptionML=ENU=Attachment 1 }
    { 41  ;   ;Attachment 2        ;Text100       ;CaptionML=ENU=Attachment 2 }
    { 42  ;   ;Date of Entry       ;Date          ;CaptionML=ENU=Date of Entry;
                                                   Editable=No }
    { 43  ;   ;Tot_Experience(In Yrs);Decimal     ;CaptionML=ENU=Tot_Experience(In Yrs) }
    { 44  ;   ;Skills              ;Text250       ;CaptionML=ENU=Skills }
    { 45  ;   ;Certifications      ;Text250       ;CaptionML=ENU=Certifications }
    { 46  ;   ;Qualification Description;Text250  ;CaptionML=ENU=Qualification Description }
    { 47  ;   ;Qualification Course;Text250       ;CaptionML=ENU=Qualification Course }
    { 48  ;   ;Selected Candidate  ;Boolean       ;CaptionML=ENU=Selected Candidate }
    { 49  ;   ;Notice Period       ;Code10        ;CaptionML=ENU=Notice Period }
  }
  KEYS
  {
    {    ;No,Indenting No.,Indenting Dept Code,Indenting Desig Code,Resume No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72016 Interview Process Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=No;
    OnInsert=BEGIN
               IF No = '' THEN BEGIN
                 HRSetup.GET;
                 HRSetup.TESTFIELD("Interview SNo");
                 NoSeriesMgt.InitSeries(HRSetup."Interview SNo",xRec."No. Series",0D,No,"No. Series");
               END;
             END;

    CaptionML=ENU=Interview Process Header;
    LookupPageID=Page72025;
    DrillDownPageID=Page72025;
  }
  FIELDS
  {
    { 1   ;   ;No                  ;Code20        ;OnValidate=BEGIN
                                                                IF No <> xRec.No THEN BEGIN
                                                                  HRSetup.GET;
                                                                  NoSeriesMgt.TestManual(HRSetup."Interview SNo");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No }
    { 2   ;   ;Resume No           ;Code20        ;CaptionML=ENU=Resume No }
    { 3   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 4   ;   ;Designation Code    ;Code10        ;CaptionML=ENU=Designation Code }
    { 5   ;   ;Designation Description;Text30     ;CaptionML=ENU=Designation Description }
    { 6   ;   ;Department Code     ;Code10        ;CaptionML=ENU=Department Code }
    { 7   ;   ;Department Description;Text30      ;CaptionML=ENU=Department Description }
    { 8   ;   ;Indenting No        ;Code20        ;CaptionML=ENU=Indenting No }
    { 9   ;   ;Schedule Date       ;Date          ;CaptionML=ENU=Schedule Date }
    { 10  ;   ;Schedule Time From  ;Time          ;CaptionML=ENU=Schedule Time From }
    { 11  ;   ;Schedule to Time    ;Time          ;OnValidate=BEGIN
                                                                IF "Schedule Time From" < "Schedule Time From" THEN
                                                                  ERROR('enter the Proper Time');
                                                              END;

                                                   CaptionML=ENU=Schedule to Time }
    { 12  ;   ;Actual Date         ;Date          ;OnValidate=BEGIN
                                                                IF "Actual Date" < "Schedule Date" THEN
                                                                  ERROR('Enter the Proper Date');
                                                              END;

                                                   CaptionML=ENU=Actual Date }
    { 13  ;   ;Actual Time From    ;Time          ;CaptionML=ENU=Actual Time From }
    { 14  ;   ;Actual To Time      ;Time          ;OnValidate=BEGIN
                                                                IF "Actual Time From" < "Actual To Time" THEN
                                                                  ERROR('enter the Proper Time');
                                                              END;

                                                   CaptionML=ENU=Actual To Time }
    { 15  ;   ;Current CTC         ;Decimal       ;CaptionML=ENU=Current CTC }
    { 16  ;   ;Expected CTC        ;Decimal       ;CaptionML=ENU=Expected CTC }
    { 17  ;   ;CTC Offer           ;Decimal       ;CaptionML=ENU=CTC Offer }
    { 18  ;   ;Current Status      ;Text30        ;CaptionML=ENU=Current Status;
                                                   Editable=No }
    { 19  ;   ;Final Status        ;Option        ;CaptionML=ENU=Final Status;
                                                   OptionCaptionML=ENU=Inprocess,Reject,On Hold,Offer,Joined;
                                                   OptionString=Inprocess,Reject,On Hold,Offer,Joined }
    { 20  ;   ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
    { 21  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 22  ;   ;Attachment 1        ;Text100       ;CaptionML=ENU=Attachment 1 }
    { 23  ;   ;Attachment 2        ;Text100       ;CaptionML=ENU=Attachment 2 }
    { 24  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(10),
                                                                                                          No.=FIELD(No)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 25  ;   ;Interview           ;Option        ;CaptionML=ENU=Interview;
                                                   OptionCaptionML=ENU=Phone,Letter;
                                                   OptionString=Phone,Letter }
  }
  KEYS
  {
    {    ;No                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRSetup@1000000000 : Record 72000;
      NoSeriesMgt@1000000001 : Codeunit 396;

    PROCEDURE AssistEdit@1000000004(InterviewProcessHeader@1000000000 : Record 72016) : Boolean;
    BEGIN
      WITH InterviewProcessHeader DO BEGIN
        InterviewProcessHeader := Rec;
        HRSetup.GET;
        HRSetup.TESTFIELD("Interview SNo");
        IF NoSeriesMgt.SelectSeries(HRSetup."Interview SNo","No. Series","No. Series") THEN BEGIN
          HRSetup.GET;
          HRSetup.TESTFIELD("Interview SNo");
          NoSeriesMgt.SetSeries(No);
          Rec := InterviewProcessHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72017 Interview Process Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Interview Process Line;
  }
  FIELDS
  {
    { 1   ;   ;No                  ;Code20        ;CaptionML=ENU=No }
    { 2   ;   ;Interview Round Code;Code10        ;TableRelation="Interview Round";
                                                   OnValidate=BEGIN
                                                                IF InterviewRound.GET("Interview Round Code") THEN
                                                                  Description := InterviewRound.Description;
                                                              END;

                                                   CaptionML=ENU=Interview Round Code }
    { 3   ;   ;Description         ;Text100       ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 4   ;   ;Test Taken          ;Boolean       ;CaptionML=ENU=Test Taken }
    { 5   ;   ;Test Result         ;Option        ;CaptionML=ENU=Test Result;
                                                   OptionCaptionML=ENU=" ,Pass,Fail";
                                                   OptionString=[ ,Pass,Fail] }
    { 6   ;   ;Remarks             ;Text100       ;CaptionML=ENU=Remarks }
    { 7   ;   ;Interview Date      ;Date          ;CaptionML=ENU=Interview Date }
    { 8   ;   ;Interview Time      ;Time          ;CaptionML=ENU=Interview Time }
    { 9   ;   ;Select              ;Boolean       ;CaptionML=ENU=Select }
  }
  KEYS
  {
    {    ;No,Interview Round Code                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InterviewRound@1000000000 : Record 72005;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72018 HR Pay Elements
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Interview No;
    CaptionML=ENU=HR Pay Elements;
    LookupPageID=Page72026;
    DrillDownPageID=Page72026;
  }
  FIELDS
  {
    { 1   ;   ;Interview No        ;Code20        ;CaptionML=ENU=Interview No }
    { 2   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements";
                                                   OnValidate=BEGIN
                                                                PayElements.RESET;
                                                                PayElements.SETRANGE("Pay Element Code","Pay Element Code");
                                                                IF PayElements.FINDFIRST THEN
                                                                  REPEAT
                                                                    Description := PayElements.Description;
                                                                  UNTIL PayElements.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 5   ;   ;Fixed / Percent     ;Option        ;CaptionML=ENU=Fixed / Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent }
    { 6   ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 7   ;   ;Amount / Percent (%);Decimal       ;CaptionML=ENU=Amount / Percent (%) }
    { 8   ;   ;Total Amount        ;Decimal       ;CaptionML=ENU=Total Amount }
  }
  KEYS
  {
    {    ;Interview No,Pay Element Code           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayElements@1000000000 : Record 72060;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72019 Interviewer
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Interviewer No;
    CaptionML=ENU=Interviewer;
    LookupPageID=Page72027;
    DrillDownPageID=Page72027;
  }
  FIELDS
  {
    { 1   ;   ;Interviewer No      ;Code20        ;CaptionML=ENU=Interviewer No }
    { 2   ;   ;Interview Round Code;Code10        ;CaptionML=ENU=Interview Round Code }
    { 3   ;   ;Employee No         ;Code20        ;CaptionML=ENU=Employee No }
    { 4   ;   ;Employee Name       ;Text30        ;CaptionML=ENU=Employee Name }
    { 5   ;   ;Designation Code    ;Code10        ;CaptionML=ENU=Designation Code }
    { 6   ;   ;Designation Description;Text30     ;CaptionML=ENU=Designation Description }
    { 7   ;   ;Department Code     ;Code10        ;CaptionML=ENU=Department Code }
    { 8   ;   ;Department Description;Text30      ;CaptionML=ENU=Department Description }
    { 9   ;   ;Feedback            ;Text30        ;CaptionML=ENU=Feedback }
    { 10  ;   ;Rating %            ;Decimal       ;CaptionML=ENU=Rating % }
  }
  KEYS
  {
    {    ;Interviewer No,Interview Round Code,Employee No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72020 Candidate Joining
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:00:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,First Name;
    CaptionML=ENU=Candidate Joining;
    LookupPageID=Page72030;
    DrillDownPageID=Page72030;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=ENU=No. }
    { 2   ;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                "Search Name" := "First Name";
                                                              END;

                                                   CaptionML=ENU=First Name }
    { 3   ;   ;Middle Name         ;Text30        ;CaptionML=ENU=Middle Name }
    { 4   ;   ;Last Name           ;Text30        ;CaptionML=ENU=Last Name }
    { 5   ;   ;Initials            ;Text30        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Initials)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Initials;
                                                              END;

                                                   CaptionML=ENU=Initials }
    { 6   ;   ;Job Title           ;Text30        ;OnValidate=BEGIN
                                                                Designation := "Job Title";
                                                              END;

                                                   CaptionML=ENU=Job Title }
    { 7   ;   ;Search Name         ;Code30        ;CaptionML=ENU=Search Name }
    { 8   ;   ;Address             ;Text30        ;CaptionML=ENU=Address }
    { 9   ;   ;Address 2           ;Text30        ;CaptionML=ENU=Address 2 }
    { 10  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                //PostCode.ValidateCity(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpCity(City,"Post Code",TRUE);
                                                            END;

                                                   CaptionML=ENU=City }
    { 11  ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                //PostCode.ValidatePostCode(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //PostCode.LookUpPostCode(City,"Post Code",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 12  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 13  ;   ;Phone No.           ;Text30        ;CaptionML=ENU=Phone No. }
    { 14  ;   ;Mobile Phone No.    ;Text30        ;CaptionML=ENU=Mobile Phone No. }
    { 15  ;   ;E-Mail              ;Text80        ;CaptionML=ENU=E-Mail }
    { 16  ;   ;Alt. Address Code   ;Code10        ;TableRelation="Alternative Address".Code WHERE (Employee No.=FIELD(No.));
                                                   CaptionML=ENU=Alt. Address Code }
    { 17  ;   ;Alt. Address Start Date;Date       ;CaptionML=ENU=Alt. Address Start Date }
    { 18  ;   ;Alt. Address End Date;Date         ;CaptionML=ENU=Alt. Address End Date }
    { 19  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 20  ;   ;Birth Date          ;Date          ;CaptionML=ENU=Birth Date }
    { 21  ;   ;Social Security No. ;Text30        ;CaptionML=ENU=Social Security No. }
    { 22  ;   ;Union Code          ;Code10        ;TableRelation=Union;
                                                   CaptionML=ENU=Union Code }
    { 23  ;   ;Union Membership No.;Text30        ;CaptionML=ENU=Union Membership No. }
    { 24  ;   ;Sex                 ;Option        ;CaptionML=ENU=Sex;
                                                   OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 25  ;   ;Country Code        ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country Code }
    { 26  ;   ;Manager No.         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Manager No. }
    { 27  ;   ;Emplymt. Contract Code;Code10      ;TableRelation="Employment Contract";
                                                   CaptionML=ENU=Emplymt. Contract Code }
    { 28  ;   ;Statistics Group Code;Code10       ;TableRelation="Employee Statistics Group";
                                                   CaptionML=ENU=Statistics Group Code }
    { 29  ;   ;Employment Date     ;Date          ;CaptionML=ENU=Employment Date }
    { 31  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                {EmployeeQualification.SETRANGE("Employee No.","No.");
                                                                EmployeeQualification.MODIFYALL("Employee Status",Status);
                                                                MODIFY;
                                                                }
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Active,Inactive;
                                                   OptionString=Active,Inactive }
    { 32  ;   ;Inactive Date       ;Date          ;CaptionML=ENU=Inactive Date }
    { 33  ;   ;Cause of Inactivity Code;Code10    ;TableRelation="Cause of Inactivity";
                                                   CaptionML=ENU=Cause of Inactivity Code }
    { 34  ;   ;Termination Date    ;Date          ;CaptionML=ENU=Termination Date }
    { 35  ;   ;Grounds for Term. Code;Code10      ;TableRelation="Grounds for Termination";
                                                   CaptionML=ENU=Grounds for Term. Code }
    { 36  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                {ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                MODIFY;
                                                                }
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 37  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                {ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                                MODIFY;
                                                                }
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 38  ;   ;Resource No.        ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                {IF ("Resource No." <> '') AND Res.WRITEPERMISSION THEN
                                                                EmployeeResUpdate.ResUpdate(Rec)
                                                                }
                                                              END;

                                                   CaptionML=ENU=Resource No. }
    { 39  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Employee),
                                                                                                          No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 40  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 41  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 42  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 43  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 44  ;   ;Cause of Absence Filter;Code10     ;FieldClass=FlowFilter;
                                                   TableRelation="Cause of Absence";
                                                   CaptionML=ENU=Cause of Absence Filter }
    { 45  ;   ;Total Absence       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Employee Absence".Quantity WHERE (Employee No.=FIELD(No.),
                                                                                                      Cause of Absence Code=FIELD(Cause of Absence Filter),
                                                                                                      From Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Total Absence;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 46  ;   ;Extension           ;Text30        ;CaptionML=ENU=Extension }
    { 47  ;   ;Employee No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. Filter }
    { 48  ;   ;Pager               ;Text30        ;CaptionML=ENU=Pager }
    { 49  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 50  ;   ;Company E-Mail      ;Text80        ;CaptionML=ENU=Company E-Mail }
    { 51  ;   ;Title               ;Text30        ;CaptionML=ENU=Title }
    { 52  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 53  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 71120;  ;Working Shift Code  ;Code20        ;TableRelation=Shift;
                                                   CaptionML=ENU=Working Shift Code }
    { 71121;  ;Driving Licence No  ;Code20        ;CaptionML=ENU=Driving Licence No }
    { 71122;  ;Driving Expiry Date ;Date          ;CaptionML=ENU=Driving Expiry Date }
    { 71123;  ;Passport No         ;Code20        ;CaptionML=ENU=Passport No }
    { 71124;  ;Passport Expiry Date;Date          ;CaptionML=ENU=Passport Expiry Date }
    { 71125;  ;Voter ID No         ;Code20        ;CaptionML=ENU=Voter ID No }
    { 71126;  ;PAN No              ;Code20        ;CaptionML=ENU=PAN No }
    { 71127;  ;PF No               ;Code20        ;CaptionML=ENU=PF No }
    { 71128;  ;ESI No              ;Code20        ;CaptionML=ENU=ESI No }
    { 71129;  ;ESI Dispensary Location;Text50     ;CaptionML=ENU=ESI Dispensary Location }
    { 71130;  ;Payment Method      ;Option        ;CaptionML=ENU=Payment Method;
                                                   OptionCaptionML=ENU=Cash,Cheque,Bank Transfer;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 71131;  ;Bank Code           ;Code10        ;CaptionML=ENU=Bank Code }
    { 71132;  ;Bank Name           ;Code50        ;CaptionML=ENU=Bank Name }
    { 71133;  ;Bank Branch         ;Code50        ;CaptionML=ENU=Bank Branch }
    { 71134;  ;Account Type        ;Text30        ;CaptionML=ENU=Account Type }
    { 71135;  ;Account No          ;Code20        ;CaptionML=ENU=Account No }
    { 71136;  ;Father's Name       ;Text50        ;CaptionML=ENU=Father's Name }
    { 71137;  ;Spouse Name         ;Text50        ;CaptionML=ENU=Spouse Name }
    { 71138;  ;Spouse Education    ;Text50        ;CaptionML=ENU=Spouse Education }
    { 71139;  ;Marital Status      ;Boolean       ;CaptionML=ENU=Marital Status }
    { 71140;  ;Marriage Date       ;Date          ;CaptionML=ENU=Marriage Date }
    { 71141;  ;No of Children      ;Integer       ;CaptionML=ENU=No of Children }
    { 71142;  ;Blood Donar         ;Boolean       ;CaptionML=ENU=Blood Donar }
    { 71143;  ;Blood Group         ;Option        ;CaptionML=ENU=Blood Group;
                                                   OptionCaptionML=ENU=" ,A+,A-,B+,B-,AB+,AB-,O+,O-,A1+,A1-";
                                                   OptionString=[ ,A+,A-,B+,B-,AB+,AB-,O+,O-,A1+,A1-] }
    { 71144;  ;Nationality         ;Text50        ;CaptionML=ENU=Nationality }
    { 71145;  ;Religion            ;Text50        ;CaptionML=ENU=Religion }
    { 71146;  ;Caste               ;Text50        ;CaptionML=ENU=Caste }
    { 71147;  ;Date of Joining     ;Date          ;CaptionML=ENU=Date of Joining }
    { 71148;  ;Date of Confirmation;Date          ;CaptionML=ENU=Date of Confirmation }
    { 71149;  ;Retirement Type     ;Option        ;CaptionML=ENU=Retirement Type;
                                                   OptionCaptionML=ENU=" ,VRS,Family Pension,Pension";
                                                   OptionString=[ ,VRS,Family Pension,Pension] }
    { 71150;  ;Accommodation       ;Boolean       ;CaptionML=ENU=Accommodation }
    { 71151;  ;Accommodation Type  ;Option        ;CaptionML=ENU=Accommodation Type;
                                                   OptionCaptionML=ENU=" ,Residential,Company Quaters";
                                                   OptionString=[ ,Residential,Company Quaters] }
    { 71152;  ;Quarter No          ;Code20        ;CaptionML=ENU=Quarter No }
    { 71153;  ;Grade Code          ;Code20        ;TableRelation=Grades;
                                                   CaptionML=ENU=Grade Code }
    { 71154;  ;PF Applicable       ;Boolean       ;CaptionML=ENU=PF Applicable }
    { 71155;  ;EPS Applicable      ;Boolean       ;CaptionML=ENU=EPS Applicable }
    { 71156;  ;VPF Applicable      ;Boolean       ;CaptionML=ENU=VPF Applicable }
    { 71157;  ;ESI Applicable      ;Boolean       ;CaptionML=ENU=ESI Applicable }
    { 71158;  ;PT Applicable       ;Boolean       ;CaptionML=ENU=PT Applicable }
    { 71159;  ;LWF Applicable      ;Boolean       ;CaptionML=ENU=LWF Applicable }
    { 71160;  ;OT Applicable       ;Boolean       ;CaptionML=ENU=OT Applicable }
    { 71161;  ;Leave Encashment Applicable;Boolean;CaptionML=ENU=Leave Encashment Applicable }
    { 71162;  ;Bonus Applicable    ;Boolean       ;CaptionML=ENU=Bonus Applicable }
    { 71163;  ;Gratuity Applicable ;Boolean       ;CaptionML=ENU=Gratuity Applicable }
    { 71164;  ;Probationary        ;Boolean       ;CaptionML=ENU=Probationary }
    { 71165;  ;Emp Posting Group   ;Code20        ;TableRelation="Payroll Employee Posting Group";
                                                   CaptionML=ENU=Emp Posting Group }
    { 71166;  ;Pay Bus. Posting Group;Code20      ;TableRelation="Payroll Business Posting Group";
                                                   CaptionML=ENU=Pay Bus. Posting Group }
    { 71167;  ;PT Branch Code      ;Code20        ;TableRelation="Professional Tax Header"."Branch Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=PT Branch Code }
    { 71168;  ;Stop Payment        ;Boolean       ;CaptionML=ENU=Stop Payment }
    { 71169;  ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 71170;  ;Mail Send To HR     ;Boolean       ;CaptionML=ENU=Mail Send To HR }
    { 71171;  ;Current Status      ;Option        ;CaptionML=ENU=Current Status;
                                                   OptionCaptionML=ENU=Current Employee,Retirement,Resigned,Terminated,Death;
                                                   OptionString=Current Employee,Retirement,Resigned,Terminated,Death }
    { 71172;  ;Date of Relieving   ;Date          ;CaptionML=ENU=Date of Relieving }
    { 71173;  ;Final Settlement Over;Boolean      ;CaptionML=ENU=Final Settlement Over;
                                                   Editable=No }
    { 71174;  ;Designation         ;Code20        ;TableRelation=Designation;
                                                   OnValidate=BEGIN
                                                                IF DesignationRec.GET(Designation) THEN
                                                                  "Job Title" := DesignationRec.Description;
                                                              END;

                                                   CaptionML=ENU=Designation }
    { 71175;  ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 71176;  ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 71177;  ;Over Time Multiplier;Integer       ;CaptionML=ENU=Over Time Multiplier }
    { 71178;  ;PF Enrollment Date  ;Date          ;CaptionML=ENU=PF Enrollment Date }
    { 71179;  ;Employee VPF ( Employee) %;Decimal ;CaptionML=ENU=Employee VPF ( Employee) % }
    { 71180;  ;Attendance Generated;Boolean       ;CaptionML=ENU=Attendance Generated }
    { 71181;  ;Leave Generated     ;Boolean       ;CaptionML=ENU=Leave Generated }
    { 71182;  ;Scale of Pay        ;Text50        ;CaptionML=ENU=Scale of Pay }
    { 71183;  ;Non Teaching / Teaching;Option     ;CaptionML=ENU=Non Teaching / Teaching;
                                                   OptionCaptionML=ENU=" ,Non Teaching,Teaching";
                                                   OptionString=[ ,Non Teaching,Teaching] }
    { 71184;  ;CVAttachment1       ;Text50        ;CaptionML=ENU=CVAttachment1 }
    { 71185;  ;CVAttachment2       ;Text50        ;CaptionML=ENU=CVAttachment2 }
    { 71186;  ;Employee Convert    ;Boolean       ;CaptionML=ENU=Employee Convert;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000000000 : Record 225;
      DesignationRec@1000000001 : Record 72002;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72021 Appraisal Header
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:04:31;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=App No.,Employee No,Employee Name;
    OnInsert=BEGIN
               IF "App No." = '' THEN BEGIN
                 HRSetup.GET;
                 HRSetup.TESTFIELD("Appraisal SNo");
                 NoSeriesMgt.InitSeries(HRSetup."Appraisal SNo",xRec."No. Series",0D,"App No.","No. Series");
               END;

               PayrollYear.RESET;
               PayrollYear.SETRANGE("Year Type", PayrollYear."Year Type"::"Leave Year");
               PayrollYear.SETRANGE(Closed, FALSE);
               IF PayrollYear.FINDFIRST THEN
                 REPEAT
                   Year := PayrollYear."Year Code";
                 UNTIL PayrollYear.NEXT = 0;
             END;

    CaptionML=ENU=Appraisal Header;
    LookupPageID=Page72033;
    DrillDownPageID=Page72033;
  }
  FIELDS
  {
    { 1   ;   ;App No.             ;Code20        ;OnValidate=BEGIN
                                                                IF "App No." <> xRec."App No." THEN BEGIN
                                                                  HRSetup.GET;
                                                                  NoSeriesMgt.TestManual(HRSetup."Appraisal SNo");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=App No. }
    { 2   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  "Employee Name" := Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name";
                                                                  "Designation Code" := Employee."Designation Code";
                                                                  "Designation Description" := Employee."Job Title";
                                                                  "Department Code" := Employee."Global Dimension 1 Code";

                                                                  IF Department.GET("Department Code") THEN
                                                                    "Department Description" := Department.Name;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 3   ;   ;Employee Name       ;Text30        ;CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 4   ;   ;Designation Code    ;Code10        ;CaptionML=ENU=Designation Code;
                                                   Editable=No }
    { 5   ;   ;Designation Description;Text30     ;CaptionML=ENU=Designation Description;
                                                   Editable=No }
    { 6   ;   ;Department Code     ;Code10        ;CaptionML=ENU=Department Code;
                                                   Editable=No }
    { 7   ;   ;Department Description;Text30      ;CaptionML=ENU=Department Description;
                                                   Editable=No }
    { 8   ;   ;Expected CTC        ;Decimal       ;CaptionML=ENU=Expected CTC;
                                                   DecimalPlaces=2:2 }
    { 9   ;   ;Expected CTC %      ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Expected CTC %" > 100) OR ("Expected CTC %" < 0) THEN
                                                                  ERROR('Expected CTC Percentage value range should be 0 to 100');
                                                              END;

                                                   CaptionML=ENU=Expected CTC %;
                                                   DecimalPlaces=2:2 }
    { 10  ;   ;Year                ;Text10        ;CaptionML=ENU=Year;
                                                   Editable=No }
    { 11  ;   ;Review Type         ;Option        ;CaptionML=ENU=Review Type;
                                                   OptionCaptionML=ENU=" ,Weekly,Monthly,Bimonthly,Quarterly,Half Yearly,Annualy";
                                                   OptionString=[ ,Weekly,Monthly,Bimonthly,Quarterly,Half Yearly,Annualy] }
    { 12  ;   ;Review Status       ;Option        ;CaptionML=ENU=Review Status;
                                                   OptionCaptionML=ENU=" ,Incomplete,Complete";
                                                   OptionString=[ ,Incomplete,Complete] }
    { 13  ;   ;Expected in         ;Option        ;OnValidate=BEGIN
                                                                IF "Expected in" = "Expected in"::Amount THEN
                                                                  "Expected CTC %" := 0
                                                                ELSE
                                                                  IF "Expected in" = "Expected in"::Percentage THEN
                                                                    "Expected CTC" := 0;
                                                              END;

                                                   CaptionML=ENU=Expected in;
                                                   OptionCaptionML=ENU=" ,Amount,Percentage";
                                                   OptionString=[ ,Amount,Percentage] }
    { 14  ;   ;Post                ;Boolean       ;CaptionML=ENU=Post }
    { 15  ;   ;Remarks             ;Text30        ;CaptionML=ENU=Remarks }
    { 16  ;   ;No. Series          ;Code10        ;CaptionML=ENU=No. Series }
    { 17  ;   ;Appraisal Level upto;Integer       ;CaptionML=ENU=Appraisal Level upto }
    { 18  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(9),
                                                                                                          No.=FIELD(App No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;App No.                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRSetup@1000000000 : Record 72000;
      NoSeriesMgt@1000000001 : Codeunit 396;
      Employee@1000000002 : Record 5200;
      Department@1000000003 : Record 349;
      PayrollYear@1000000004 : Record 72054;

    PROCEDURE AssistEdit@1000000002(AppraisalHeader@1000000000 : Record 72021) : Boolean;
    BEGIN
      WITH AppraisalHeader DO BEGIN
        AppraisalHeader := Rec;
        HRSetup.GET;
        HRSetup.TESTFIELD("Appraisal SNo");
        IF NoSeriesMgt.SelectSeries(HRSetup."Appraisal SNo","No. Series","No. Series") THEN BEGIN
          HRSetup.GET;
          HRSetup.TESTFIELD("Appraisal SNo");
          NoSeriesMgt.SetSeries("App No.");
          Rec := AppraisalHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72022 Appraisal Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Appraisal Line;
  }
  FIELDS
  {
    { 1   ;   ;App No.             ;Code20        ;CaptionML=ENU=App No.;
                                                   Editable=No }
    { 2   ;   ;Employee No         ;Code20        ;CaptionML=ENU=Employee No }
    { 3   ;   ;Objectives Code     ;Code10        ;TableRelation="Performance Appraisal";
                                                   OnValidate=BEGIN
                                                                IF PerformanceAppraisal.GET("Objectives Code") THEN
                                                                  "Objectives Description" := PerformanceAppraisal.Description;
                                                              END;

                                                   CaptionML=ENU=Objectives Code }
    { 4   ;   ;Objectives Description;Text30      ;CaptionML=ENU=Objectives Description;
                                                   Editable=No }
    { 5   ;   ;Self Rating %       ;Decimal       ;CaptionML=ENU=Self Rating % }
    { 6   ;   ;Performance         ;Option        ;CaptionML=ENU=Performance;
                                                   OptionCaptionML=ENU=" ,Bad,Average,Good,V.Good,Excellent";
                                                   OptionString=[ ,Bad,Average,Good,V.Good,Excellent] }
    { 7   ;   ;Positive Attitude   ;Text30        ;CaptionML=ENU=Positive Attitude }
    { 8   ;   ;Future Responsibility;Text30       ;CaptionML=ENU=Future Responsibility }
    { 9   ;   ;Training Code       ;Code10        ;TableRelation=Training;
                                                   OnValidate=BEGIN
                                                                IF Training.GET("Training Code") THEN
                                                                  "Training Description" := Training.Description;
                                                              END;

                                                   CaptionML=ENU=Training Code }
    { 10  ;   ;Training Description;Text30        ;CaptionML=ENU=Training Description;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;App No.,Employee No,Objectives Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Training@1000000000 : Record 72008;
      PerformanceAppraisal@1000000002 : Record 72006;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72023 Reviewer
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:05:02;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=App No.,App EmpNo.,Employee No;
    CaptionML=ENU=Reviewer;
    LookupPageID=Page72034;
    DrillDownPageID=Page72034;
  }
  FIELDS
  {
    { 1   ;   ;App No.             ;Code20        ;CaptionML=ENU=App No. }
    { 2   ;   ;App EmpNo.          ;Code20        ;CaptionML=ENU=App EmpNo. }
    { 3   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  "Employee Name" := Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name";
                                                                  "Designation Code" := Employee."Designation Code";
                                                                  "Designation Description" := Employee."Job Title";
                                                                  "Department Code" := Employee."Global Dimension 1 Code";

                                                                  IF Department.GET("Department Code") THEN
                                                                    "Department Description" := Department.Name;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 4   ;   ;Evaluation Code     ;Code10        ;OnValidate=BEGIN
                                                                IF PerformanceAppraisal.GET("Evaluation Code") THEN
                                                                  "Evaluation Description" := PerformanceAppraisal.Description;
                                                              END;

                                                   CaptionML=ENU=Evaluation Code;
                                                   Editable=No }
    { 5   ;   ;Evaluation Description;Text30      ;CaptionML=ENU=Evaluation Description }
    { 6   ;   ;Employee Name       ;Text30        ;CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 7   ;   ;Designation Code    ;Code10        ;CaptionML=ENU=Designation Code }
    { 8   ;   ;Designation Description;Text30     ;CaptionML=ENU=Designation Description;
                                                   Editable=No }
    { 9   ;   ;Department Code     ;Code10        ;CaptionML=ENU=Department Code }
    { 10  ;   ;Department Description;Text30      ;CaptionML=ENU=Department Description;
                                                   Editable=No }
    { 11  ;   ;Result of Performance;Option       ;CaptionML=ENU=Result of Performance;
                                                   OptionCaptionML=ENU=" ,Bad,Average,Good,V.Good,Excellent";
                                                   OptionString=[ ,Bad,Average,Good,V.Good,Excellent] }
    { 12  ;   ;Evaluation Date     ;Date          ;CaptionML=ENU=Evaluation Date }
    { 13  ;   ;Evaluation Time     ;Time          ;CaptionML=ENU=Evaluation Time }
    { 14  ;   ;Evaluation Type     ;Option        ;CaptionML=ENU=Evaluation Type;
                                                   OptionCaptionML=ENU=" ,I Round,II Round,III Round,IV Round";
                                                   OptionString=[ ,I Round,II Round,III Round,IV Round] }
    { 15  ;   ;Evaluator Rating %  ;Code10        ;TableRelation="Rating Value";
                                                   CaptionML=ENU=Evaluator Rating % }
    { 16  ;   ;Feedback            ;Text30        ;CaptionML=ENU=Feedback }
    { 17  ;   ;Objectives Code     ;Code10        ;CaptionML=ENU=Objectives Code }
  }
  KEYS
  {
    {    ;App No.,App EmpNo.,Employee No,Evaluation Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000000 : Record 5200;
      Department@1000000001 : Record 349;
      PerformanceAppraisal@1000000002 : Record 72006;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72024 Training Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Training No.,Department Code,Department Description;
    OnInsert=BEGIN
               IF "Training No." = '' THEN BEGIN
                 HRSetup.GET;
                 HRSetup.TESTFIELD("Training SNo");
                 NoSeriesMgt.InitSeries(HRSetup."Training SNo",xRec."No. Series",0D,"Training No.","No. Series");
               END;

               Date := TODAY;
             END;

    CaptionML=ENU=Training Header;
    LookupPageID=Page72037;
    DrillDownPageID=Page72037;
  }
  FIELDS
  {
    { 1   ;   ;Training No.        ;Code20        ;OnValidate=BEGIN
                                                                IF "Training No." <> xRec."Training No." THEN BEGIN
                                                                  HRSetup.GET;
                                                                  NoSeriesMgt.TestManual(HRSetup."Training SNo");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Training No. }
    { 2   ;   ;Department Code     ;Code10        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Code }
    { 3   ;   ;Department Description;Text30      ;CaptionML=ENU=Department Description }
    { 4   ;   ;Course Code         ;Code20        ;TableRelation=Training;
                                                   OnValidate=BEGIN
                                                                IF Training.GET("Course Code") THEN
                                                                  "Course Description" := Training.Description;
                                                              END;

                                                   CaptionML=ENU=Course Code }
    { 5   ;   ;Course Description  ;Text50        ;CaptionML=ENU=Course Description;
                                                   Editable=No }
    { 6   ;   ;Training Facility   ;Option        ;CaptionML=ENU=Training Facility;
                                                   OptionCaptionML=ENU=" ,Internal,External";
                                                   OptionString=[ ,Internal,External] }
    { 7   ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 8   ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                "No. of Days" := ABS(("Ending Date" - "Starting Date") + 1);
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 9   ;   ;Date                ;Date          ;CaptionML=ENU=Date;
                                                   Editable=No }
    { 10  ;   ;Training Hour / Day ;Duration      ;CaptionML=ENU=Training Hour / Day;
                                                   Editable=No }
    { 11  ;   ;Total Training Hour ;Duration      ;CaptionML=ENU=Total Training Hour;
                                                   Editable=No }
    { 12  ;   ;No. of Days         ;Integer       ;CaptionML=ENU=No. of Days;
                                                   Editable=No }
    { 13  ;   ;Starting Time       ;Time          ;CaptionML=ENU=Starting Time }
    { 14  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                IF ("Starting Time" <> 0T) AND ("Ending Time" <> 0T) THEN
                                                                  "Training Hour / Day" := ABS("Ending Time" - "Starting Time");

                                                                "Total Training Hour" := "Training Hour / Day" * "No. of Days";
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 15  ;   ;Notes               ;Text100       ;CaptionML=ENU=Notes }
    { 16  ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 17  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(8),
                                                                                                          No.=FIELD(Training No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Training No.                            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRSetup@1000000000 : Record 72000;
      NoSeriesMgt@1000000001 : Codeunit 396;
      Training@1000000002 : Record 72008;

    PROCEDURE AssistEdit@1000000004(TrainingHeader@1000000000 : Record 72024) : Boolean;
    BEGIN
      WITH TrainingHeader DO BEGIN
        TrainingHeader := Rec;
        HRSetup.GET;
        HRSetup.TESTFIELD("Training SNo");
        IF NoSeriesMgt.SelectSeries(HRSetup."Training SNo","No. Series","No. Series") THEN BEGIN
          HRSetup.GET;
          HRSetup.TESTFIELD("Training SNo");
          NoSeriesMgt.SetSeries("Training No.");
          Rec := TrainingHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72025 Training Line
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:05:20;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Training Line;
  }
  FIELDS
  {
    { 1   ;   ;Training No.        ;Code20        ;CaptionML=ENU=Training No. }
    { 2   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  "First Name" := Employee."First Name";
                                                                  "Middle Name" := Employee."Middle Name";
                                                                  "Last Name" := Employee."Last Name";
                                                                  Initial := Employee.Initials;
                                                                  "Department Code" := Employee."Designation Code";
                                                                  "Department Description" := Employee."Job Title";;
                                                                  "Designation Code" := Employee."Global Dimension 1 Code";

                                                                  IF Department.GET("Designation Code") THEN
                                                                    "Designation Description" := Department.Name;
                                                                  "E-Mail" := Employee."E-Mail";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee  No }
    { 3   ;   ;First Name          ;Text30        ;CaptionML=ENU=First Name;
                                                   Editable=No }
    { 4   ;   ;Middle Name         ;Text30        ;CaptionML=ENU=Middle Name;
                                                   Editable=No }
    { 5   ;   ;Last Name           ;Text30        ;CaptionML=ENU=Last Name;
                                                   Editable=No }
    { 6   ;   ;Initial             ;Text30        ;CaptionML=ENU=Initial;
                                                   Editable=No }
    { 7   ;   ;Department Code     ;Code10        ;CaptionML=ENU=Department Code;
                                                   Editable=No }
    { 8   ;   ;Department Description;Text30      ;CaptionML=ENU=Department Description;
                                                   Editable=No }
    { 9   ;   ;Designation Code    ;Code10        ;CaptionML=ENU=Designation Code;
                                                   Editable=No }
    { 10  ;   ;Designation Description;Text30     ;CaptionML=ENU=Designation Description;
                                                   Editable=No }
    { 11  ;   ;E-Mail              ;Text30        ;CaptionML=ENU=E-Mail;
                                                   Editable=No }
    { 12  ;   ;Send Mail           ;Boolean       ;CaptionML=ENU=Send Mail }
    { 13  ;   ;Notes               ;Text30        ;CaptionML=ENU=Notes }
  }
  KEYS
  {
    {    ;Training No.,Employee No                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000000 : Record 5200;
      Department@1000000001 : Record 349;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72026 Employee Skill - Certification
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Employee Skill - Certification;
    LookupPageID=Page72038;
    DrillDownPageID=Page72038;
  }
  FIELDS
  {
    { 1   ;   ;Employee No         ;Code20        ;CaptionML=ENU=Employee No;
                                                   Editable=No }
    { 2   ;   ;Skills Code         ;Code120       ;TableRelation=Skill;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Skills Code }
    { 3   ;   ;Certifications Code ;Code100       ;TableRelation=Certification;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Certifications Code }
    { 4   ;   ;Experience in Skills;Decimal       ;CaptionML=ENU=Experience in Skills }
  }
  KEYS
  {
    {    ;Employee No                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72027 Daily BioMetric Info
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Daily BioMetric Info;
  }
  FIELDS
  {
    { 1   ;   ;StaffId             ;Text20        ;CaptionML=ENU=StaffId }
    { 2   ;   ;Attendance Date     ;Date          ;CaptionML=ENU=Attendance Date }
    { 3   ;   ;Attendance Time     ;Time          ;CaptionML=ENU=Attendance Time }
  }
  KEYS
  {
    {    ;StaffId,Attendance Date,Attendance Time ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 72028 Daily Punch Details
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:05:26;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Daily Punch Details;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cyclic Code }
    { 4   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN BEGIN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                                  "Department Code" := Employee."Department Code";
                                                                  "Department Name" := Employee."Department Name";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 5   ;   ;Attendance Date     ;Date          ;CaptionML=ENU=Attendance Date }
    { 6   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 7   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 8   ;   ;In Punch DateTime   ;DateTime      ;OnValidate=BEGIN
                                                                VALIDATE("Out Punch DateTime");
                                                              END;

                                                   CaptionML=ENU=In Punch DateTime }
    { 9   ;   ;Out Punch DateTime  ;DateTime      ;OnValidate=BEGIN
                                                                IF "Out Punch DateTime" <> 0DT THEN BEGIN
                                                                  "Total Hours In Mins" := ("Out Punch DateTime" - "In Punch DateTime") / 60000;
                                                                  "Total Hours" := "Convert Mins To Hours"("Total Hours In Mins");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Out Punch DateTime }
    { 10  ;   ;Total Hours In Mins ;Decimal       ;CaptionML=ENU=Total Hours In Mins;
                                                   Editable=No }
    { 11  ;   ;Total Hours         ;Decimal       ;CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 12  ;   ;No of Pieces        ;Decimal       ;CaptionML=ENU=No of Pieces }
    { 13  ;   ;Department Code     ;Code10        ;TableRelation=Departments;
                                                   OnValidate=BEGIN
                                                                IF Departments.GET("Department Code") THEN
                                                                  "Department Name" := Departments.Description
                                                                ELSE
                                                                  "Department Name" := '';
                                                              END;

                                                   CaptionML=ENU=Department Code }
    { 14  ;   ;Department Name     ;Text50        ;CaptionML=ENU=Department Name;
                                                   Editable=No }
    { 15  ;   ;Attendance Verified ;Boolean       ;CaptionML=ENU=Attendance Verified }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cyclic Code,Employee No.,Attendance Date,Line No.;
                                                   SumIndexFields=Total Hours In Mins;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1102159000 : Record 5200;
      Departments@1102159002 : Record 72001;

    PROCEDURE "Convert Mins To Hours"@1000000023(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours);
      CLEAR(DecimalPart);
      CLEAR(IntegerPart);
      DecimalPart := TotalHrsMins MOD 60;
      IntegerPart := TotalHrsMins - DecimalPart;
      IntegerPart := IntegerPart / 60;
      ConvertHours := IntegerPart + (DecimalPart / 100);
      EXIT(ConvertHours);
    END;

    PROCEDURE "Convert Hours To Mins"@1000000022(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours);
      CLEAR(DecimalPart);
      CLEAR(IntegerPart);
      ConvertHours := TotalHrsMins * 100;
      DecimalPart := ConvertHours MOD 100;
      DecimalPart := DecimalPart / 100;
      IntegerPart := TotalHrsMins - DecimalPart;
      ConvertHours := (IntegerPart * 60) + (DecimalPart * 100);
      EXIT(ConvertHours);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 72029 Divisions
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:05:29;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    LookupPageID=Page72039;
    DrillDownPageID=Page72039;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;NotBlank=Yes }
    { 3   ;   ;Active Employees    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Division Code=FIELD(Code),
                                                                                     Status=FILTER(Active)));
                                                   Editable=No }
    { 4   ;   ;Inactive Employees  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Division Code=FIELD(Code),
                                                                                     Status=FILTER(Inactive)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72030 Sections
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:05:32;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    LookupPageID=Page72040;
    DrillDownPageID=Page72040;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;NotBlank=Yes }
    { 3   ;   ;Active Employees    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Section Code=FIELD(Code),
                                                                                     Status=FILTER(Active)));
                                                   Editable=No }
    { 4   ;   ;Inactive Employees  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Employee WHERE (Section Code=FIELD(Code),
                                                                                     Status=FILTER(Inactive)));
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   SENTHIL                       New Tables Added for HR Module.
    }
    END.
  }
}

OBJECT Table 72051 HR & Payroll Setup
{
  OBJECT-PROPERTIES
  {
    Date=29-08-19;
    Time=20:43:15;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=User ID,Location Code,Location Name;
    CaptionML=ENU=HR & Payroll Setup;
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Code20        ;CaptionML=ENU=User ID;
                                                   Editable=Yes }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   OnValidate=BEGIN
                                                                IF LocationHRPayrollSetup.GET("Location Code") THEN
                                                                  "Location Name" := LocationHRPayrollSetup."Location Name";
                                                                "Salary Plan Code" := '';
                                                                "Salary Cyclic Code" := '';
                                                                "Salary Start Date" := 0D;
                                                                "Salary End Date" := 0D;
                                                                "Salary Year Code" := '';
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Location Name       ;Text50        ;CaptionML=ENU=Location Name;
                                                   Editable=No }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   OnValidate=BEGIN
                                                                "Salary Cyclic Code" := '';
                                                                "Salary Start Date" := 0D;
                                                                "Salary End Date" := 0D;
                                                                "Salary Year Code" := '';
                                                              END;

                                                   CaptionML=ENU=Salary Plan Code;
                                                   NotBlank=Yes }
    { 5   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code";
                                                   CaptionML=ENU=Salary Cyclic Code;
                                                   NotBlank=Yes }
    { 6   ;   ;Salary Start Date   ;Date          ;CaptionML=ENU=Salary Start Date;
                                                   Editable=Yes }
    { 7   ;   ;Salary End Date     ;Date          ;CaptionML=ENU=Salary End Date;
                                                   Editable=Yes }
    { 8   ;   ;Salary Year Code    ;Code20        ;CaptionML=ENU=Salary Year Code;
                                                   NotBlank=Yes }
    { 9   ;   ;Payment Salary Plan Code;Code20    ;TableRelation="Salary Plan";
                                                   OnValidate=BEGIN
                                                                {
                                                                "Payment Salary Year Code" := '';
                                                                "Payment Salary Cyclic Code" := '';
                                                                "Payment Salary Start Date" := 0D;
                                                                "Payment Salary End Date" := 0D;
                                                                      }
                                                              END;

                                                   CaptionML=ENU=Payment Salary Plan Code }
    { 10  ;   ;Payment Salary Year Code;Code20    ;CaptionML=ENU=Payment Salary Year Code }
    { 11  ;   ;Payment Salary Cyclic Code;Code20  ;TableRelation="Payroll Month & Year";
                                                   CaptionML=ENU=Payment Salary Cyclic Code }
    { 12  ;   ;Payment Salary Start Date;Date     ;CaptionML=ENU=Payment Salary Start Date;
                                                   Editable=No }
    { 13  ;   ;Payment Salary End Date;Date       ;CaptionML=ENU=Payment Salary End Date;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;User ID                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      LocationHRPayrollSetup@1000000000 : Record 72052;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72052 Location HR & Payroll Setup
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Location Name;
    CaptionML=ENU=Location HR & Payroll Setup;
    LookupPageID=Page72063;
    DrillDownPageID=Page72063;
  }
  FIELDS
  {
    { 2   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 3   ;   ;Location Name       ;Text50        ;CaptionML=ENU=Location Name }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 5   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year";
                                                   CaptionML=ENU=Salary Cyclic Code }
    { 6   ;   ;Salary Date Interval;DateFormula   ;CaptionML=ENU=Salary Date Interval }
    { 7   ;   ;Salary Start Date   ;Date          ;CaptionML=ENU=Salary Start Date;
                                                   Editable=No }
    { 8   ;   ;Salary End Date     ;Date          ;CaptionML=ENU=Salary End Date;
                                                   Editable=No }
    { 9   ;   ;Processing Payroll Date;Date       ;CaptionML=ENU=Processing Payroll Date }
    { 10  ;   ;Current Salary Process Month;Integer;
                                                   CaptionML=ENU=Current Salary Process Month;
                                                   MinValue=0;
                                                   MaxValue=12 }
    { 11  ;   ;Current Salary Process Year;Integer;CaptionML=ENU=Current Salary Process Year;
                                                   MinValue=1900;
                                                   MaxValue=9999 }
    { 12  ;   ;Last Posted Month   ;Integer       ;CaptionML=ENU=Last Posted Month;
                                                   MinValue=0;
                                                   MaxValue=12 }
    { 13  ;   ;Last Posted Year    ;Integer       ;CaptionML=ENU=Last Posted Year;
                                                   MinValue=1900;
                                                   MaxValue=9999 }
    { 14  ;   ;Default Attendance Type;Option     ;CaptionML=ENU=Default Attendance Type;
                                                   OptionCaptionML=ENU=" ,Present,Absent";
                                                   OptionString=[ ,Present,Absent] }
    { 15  ;   ;No of Hours Per Day ;Decimal       ;CaptionML=ENU=No of Hours Per Day;
                                                   MinValue=0;
                                                   MaxValue=12 }
    { 16  ;   ;No of Hours in Half Day;Decimal    ;CaptionML=ENU=No of Hours in Half Day;
                                                   MinValue=0;
                                                   MaxValue=6 }
    { 17  ;   ;Over Time Applicable;Boolean       ;CaptionML=ENU=Over Time Applicable }
    { 18  ;   ;Over Time Approval Check;Boolean   ;CaptionML=ENU=Over Time Approval Check }
    { 19  ;   ;Over Time Min Minutes;Decimal      ;CaptionML=ENU=Over Time Min Minutes }
    { 20  ;   ;Over Time Max Minutes;Decimal      ;CaptionML=ENU=Over Time Max Minutes }
    { 21  ;   ;Over Time Multiplier;Decimal       ;CaptionML=ENU=Over Time Multiplier;
                                                   MinValue=0;
                                                   MaxValue=5 }
    { 22  ;   ;Bonus Applicable    ;Boolean       ;CaptionML=ENU=Bonus Applicable }
    { 23  ;   ;Bonus Declare Date  ;Date          ;CaptionML=ENU=Bonus Declare Date }
    { 24  ;   ;Bonus Min. No of Years;Integer     ;CaptionML=ENU=Bonus Min. No of Years }
    { 25  ;   ;Bonus Max No of Years;Integer      ;CaptionML=ENU=Bonus Max No of Years }
    { 26  ;   ;Bonusable Earning Min Limit;Decimal;CaptionML=ENU=Bonusable Earning Min Limit }
    { 27  ;   ;Bonusable Earning Max Limit;Decimal;CaptionML=ENU=Bonusable Earning Max Limit }
    { 28  ;   ;Bonus (%)           ;Decimal       ;CaptionML=ENU=Bonus (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 29  ;   ;Ex-Gratia (%)       ;Decimal       ;CaptionML=ENU=Ex-Gratia (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 30  ;   ;Gratuity Applicable ;Boolean       ;CaptionML=ENU=Gratuity Applicable }
    { 31  ;   ;Gratuity Min. No of Years;Integer  ;CaptionML=ENU=Gratuity Min. No of Years }
    { 32  ;   ;Gratuity Max. No of Years;Integer  ;CaptionML=ENU=Gratuity Max. No of Years }
    { 33  ;   ;Gratuity No. of Days Salary;Integer;CaptionML=ENU=Gratuity No. of Days Salary;
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 34  ;   ;Gratuity No. of Days in Month;Integer;
                                                   CaptionML=ENU=Gratuity No. of Days in Month;
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 35  ;   ;ESI to All          ;Boolean       ;CaptionML=ENU=ESI to All }
    { 36  ;   ;PF to All           ;Boolean       ;CaptionML=ENU=PF to All }
    { 37  ;   ;EPS to All          ;Boolean       ;CaptionML=ENU=EPS to All }
    { 38  ;   ;VPF to All          ;Boolean       ;CaptionML=ENU=VPF to All }
    { 39  ;   ;PT to All           ;Boolean       ;CaptionML=ENU=PT to All }
    { 40  ;   ;LWF to All          ;Boolean       ;CaptionML=ENU=LWF to All }
    { 41  ;   ;Leave Encashment to All;Boolean    ;CaptionML=ENU=Leave Encashment to All }
    { 42  ;   ;General Rounding Amount;Decimal    ;CaptionML=ENU=General Rounding Amount }
    { 43  ;   ;General Rounding Type;Option       ;CaptionML=ENU=General Rounding Type;
                                                   OptionCaptionML=ENU=Nearest,Up,Down;
                                                   OptionString=Nearest,Up,Down }
    { 44  ;   ;Net Salary Rounding Amount;Decimal ;CaptionML=ENU=Net Salary Rounding Amount }
    { 45  ;   ;Net Salary Rounding Type;Option    ;CaptionML=ENU=Net Salary Rounding Type;
                                                   OptionCaptionML=ENU=Nearest,Up,Down;
                                                   OptionString=Nearest,Up,Down }
    { 46  ;   ;VDA Rate            ;Decimal       ;CaptionML=ENU=VDA Rate }
    { 47  ;   ;FDA Amount          ;Decimal       ;CaptionML=ENU=FDA Amount }
    { 48  ;   ;Employee No.        ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Employee No. }
    { 49  ;   ;Loan No.            ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Loan No. }
    { 50  ;   ;Pay Revision No.    ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Pay Revision No. }
    { 51  ;   ;Pay Arrear No.      ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Pay Arrear No. }
    { 52  ;   ;Employer PF GL Code ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Employer PF GL Code }
    { 53  ;   ;Employer EPS GL Code;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Employer EPS GL Code }
    { 54  ;   ;PF Admin Charges GL Code;Code20    ;TableRelation="G/L Account";
                                                   CaptionML=ENU=PF Admin Charges GL Code }
    { 55  ;   ;EDLI Charges GLCode ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=EDLI Charges GLCode }
    { 56  ;   ;RIFA Charges GL Code;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=RIFA Charges GL Code }
    { 57  ;   ;Employer ESI GL Code;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Employer ESI GL Code }
    { 58  ;   ;LWF GL Code         ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=LWF GL Code }
    { 59  ;   ;Cash Account GL Code;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Cash Account GL Code }
    { 60  ;   ;Bank Account GL Code;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=ENU=Bank Account GL Code }
    { 61  ;   ;Year Code           ;Code20        ;CaptionML=ENU=Year Code }
    { 62  ;   ;Bonus No.           ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Bonus No. }
    { 63  ;   ;Leave No.           ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Leave No. }
    { 64  ;   ;Minimum Attendance Credit Days;Integer;
                                                   CaptionML=ENU=Minimum Attendance Credit Days;
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 65  ;   ;Eligible Days for Credit Days;Integer;
                                                   CaptionML=ENU=Eligible Days for Credit Days;
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 66  ;   ;Attendance Bonus (%);Integer       ;CaptionML=ENU=Attendance Bonus (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 67  ;   ;Atte. Bonus Permission Limit;Decimal;
                                                   CaptionML=ENU=Atte. Bonus Permission Limit }
    { 68  ;   ;Piece Rate No.      ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Piece Rate No. }
    { 69  ;   ;Employee Gate Pass No;Code20       ;TableRelation="No. Series";
                                                   CaptionML=ENU=Employee Gate Pass No }
    { 70  ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 71  ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 72  ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 73  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 74  ;   ;City                ;Text30        ;CaptionML=ENU=City }
    { 75  ;   ;Pin Code            ;Text30        ;CaptionML=ENU=Pin Code }
    { 76  ;   ;Phone No.           ;Text30        ;CaptionML=ENU=Phone No. }
    { 77  ;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 78  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 79  ;   ;Database Type       ;Option        ;OnValidate=BEGIN
                                                                Provider := '';
                                                                "Presist Security Info" := '';
                                                                "User ID" := '';
                                                                Password := '';
                                                                "Initial Catalog" := '';
                                                                "Data Source" := '';
                                                                "Extended Properties" := '';

                                                                IF "Database Type" = "Database Type"::"Sql Server 2005" THEN BEGIN
                                                                  Provider := 'SQLOLEDB.1';
                                                                  "Presist Security Info" := 'False';
                                                                  "User ID" := 'DB User Id';
                                                                  Password := 'DB Password';
                                                                  "Initial Catalog" := 'Database Name';
                                                                  "Data Source" := 'Database Server Name';
                                                                END;

                                                                IF "Database Type" = "Database Type"::"Access Database" THEN BEGIN
                                                                  Provider := 'Microsoft.Jet.OLEDB.4.0';
                                                                  "Presist Security Info" := 'False';
                                                                  "Data Source" := 'C:\PATHNAME\FILENAME.MDB';
                                                                END;

                                                                IF "Database Type" = "Database Type"::"Fox Pro" THEN BEGIN
                                                                  Provider := 'Microsoft.Jet.OLEDB.4.0';
                                                                  "Presist Security Info" := 'False';
                                                                  "Data Source" := 'C:\PATHNAME\FILENAME.DBF';
                                                                  "Extended Properties" := 'DBASE III';
                                                                END;
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Database;
                                                   OptionCaptionML=ENU=" ,Sql Server 2005,Access Database,Fox Pro";
                                                   OptionString=[ ,Sql Server 2005,Access Database,Fox Pro] }
    { 80  ;   ;Provider            ;Text50        ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Provider }
    { 81  ;   ;Presist Security Info;Text10       ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Presist Security Info }
    { 82  ;   ;User ID             ;Text20        ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=User ID }
    { 83  ;   ;Password            ;Text20        ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Password }
    { 84  ;   ;Initial Catalog     ;Text20        ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Initial Catalog }
    { 85  ;   ;Data Source         ;Text50        ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Data Source }
    { 86  ;   ;Extended Properties ;Text20        ;OnValidate=BEGIN
                                                                Connect;
                                                              END;

                                                   CaptionML=ENU=Extended Properties }
    { 87  ;   ;Connection String   ;Text250       ;CaptionML=ENU=Connection String }
    { 88  ;   ;Hourly Rate No.     ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Hourly Rate No. }
    { 89  ;   ;Table Name          ;Text30        ;CaptionML=ENU=Table Name }
    { 90  ;   ;Late Coming Permission Limit;Decimal;
                                                   CaptionML=ENU=Late Coming Permission Limit }
    { 91  ;   ;Early Going Permission Limit;Decimal;
                                                   CaptionML=ENU=Early Going Permission Limit }
    { 92  ;   ;Weekly Off Full Days Limit;Decimal ;CaptionML=ENU=Weekly Off Full Days Limit }
    { 94  ;   ;Absent Hours Limit  ;Decimal       ;CaptionML=ENU=Absent Hours Limit }
    { 95  ;   ;Weekly Off Half Days Limit;Decimal ;CaptionML=ENU=Weekly Off Half Days Limit }
    { 96  ;   ;Extra Wages Min Hours;Decimal      ;CaptionML=ENU=Extra Wages Min Hours }
    { 97  ;   ;Extra Wages Max Hours;Decimal      ;CaptionML=ENU=Extra Wages Max Hours }
    { 98  ;   ;Ex.Wages Days Min 3 To 6 Hours;Decimal;
                                                   CaptionML=ENU=Ex.Wages Days Min 3 To 6 Hours }
    { 99  ;   ;Ex.Wages Days 6 Hours Above;Decimal;CaptionML=ENU=Ex.Wages Days 6 Hours Above }
    { 100 ;   ;PF Establishment No ;Code50        ;CaptionML=ENU=PF Establishment No }
    { 101 ;   ;ESI Establishment No;Code50        ;CaptionML=ENU=ESI Establishment No }
    { 102 ;   ;Factory Establishment No;Code50    ;CaptionML=ENU=Factory Establishment No }
    { 103 ;   ;Over Time Hours Round Off;Boolean  ;CaptionML=ENU=Over Time Hours Round Off }
    { 104 ;   ;Location Pictures   ;BLOB          ;CaptionML=ENU=Location Pictures }
    { 105 ;   ;PF Pictures         ;BLOB          ;CaptionML=ENU=PF Pictures }
    { 106 ;   ;ESI Pictures        ;BLOB          ;CaptionML=ENU=ESI Pictures }
    { 107 ;   ;Total No Pieces Per Day;Decimal    ;CaptionML=ENU=Total No Pieces Per Day }
    { 108 ;   ;Worker Base Calc. Not Required;Boolean;
                                                   CaptionML=ENU=Worker Base Calc. Not Required }
  }
  KEYS
  {
    {    ;Location Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Quote@1000000000 : Char;
      Quote1@1000000001 : Text[1];

    PROCEDURE Connect@1000000000();
    BEGIN
      Quote := 39;
      Quote1 := FORMAT(Quote);
      IF "Database Type" = "Database Type"::"Sql Server 2005" THEN
        "Connection String" := Quote1 + 'Provider=' + Provider + ';' +
        'Presist Security Info=' + "Presist Security Info" + ';' +
        'User ID=' + "User ID" + ';' +
        'Password=' + Password + ';' +
        'Initial Catalog=' + "Initial Catalog" + ';' +
        'Data Source=' + "Data Source" + Quote1;

      IF "Database Type" = "Database Type"::"Access Database" THEN
        "Connection String" := 'Provider=' + Provider + ';' +
      //'Data Source=' + "Data Source" + ';' +
        'Presist Security Info=' + "Presist Security Info";

      IF "Database Type" = "Database Type"::"Fox Pro" THEN
        "Connection String" := Quote1 + 'Provider=' + Provider + ';' +
        'Presist Security Info=' + "Presist Security Info" + ';' +
        'Data Source=' + "Data Source" + ';' +
        'Extended Properties=' + "Extended Properties" + Quote1;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72053 Salary Plan
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnInsert=BEGIN
               TESTFIELD(Code);
             END;

    CaptionML=ENU=Salary Plan;
    LookupPageID=Page72064;
    DrillDownPageID=Page72064;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 3   ;   ;Date Interval       ;DateFormula   ;CaptionML=ENU=Date Interval }
    { 4   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Monthly,Daily,Weekly,FortNight,Quarterly,Half Yearly,Yearly;
                                                   OptionString=Monthly,Daily,Weekly,FortNight,Quarterly,Half Yearly,Yearly }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72054 Payroll Year
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Year Code,Year Type,Year Start Date,Year End Date;
    CaptionML=ENU=Payroll Year;
    LookupPageID=Page72067;
    DrillDownPageID=Page72067;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Year Code           ;Code20        ;CaptionML=ENU=Year Code }
    { 4   ;   ;Year Type           ;Option        ;CaptionML=ENU=Year Type;
                                                   OptionCaptionML=ENU=Salary Year,PF Year,ESI Year,Income Tax Year,Bonus Year,Leave Year;
                                                   OptionString=Salary Year,PF Year,ESI Year,Income Tax Year,Bonus Year,Leave Year }
    { 5   ;   ;Year Start Date     ;Date          ;CaptionML=ENU=Year Start Date }
    { 6   ;   ;Year End Date       ;Date          ;CaptionML=ENU=Year End Date }
    { 7   ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed }
    { 8   ;   ;Created             ;Boolean       ;CaptionML=ENU=Created }
    { 9   ;   ;Salary Cyclic Code Generated;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Salary Year Code=FIELD(Year Code)));
                                                   CaptionML=ENU=Salary Cyclic Code Generated;
                                                   Editable=No }
    { 10  ;   ;Acknowledgement No 1;Code20        ;CaptionML=ENU=Acknowledgement No 1 }
    { 11  ;   ;Acknowledgement No 2;Code20        ;CaptionML=ENU=Acknowledgement No 2 }
    { 12  ;   ;Acknowledgement No 3;Code20        ;CaptionML=ENU=Acknowledgement No 3 }
    { 13  ;   ;Acknowledgement No 4;Code20        ;CaptionML=ENU=Acknowledgement No 4 }
    { 14  ;   ;Acknowledgement Date 1;Date        ;CaptionML=ENU=Acknowledgement Date 1 }
    { 15  ;   ;Acknowledgement Date 2;Date        ;CaptionML=ENU=Acknowledgement Date 2 }
    { 16  ;   ;Acknowledgement Date 3;Date        ;CaptionML=ENU=Acknowledgement Date 3 }
    { 17  ;   ;Acknowledgement Date 4;Date        ;CaptionML=ENU=Acknowledgement Date 4 }
  }
  KEYS
  {
    {    ;Year Code,Location Code,Salary Plan Code,Year Type,Year Start Date;
                                                   Clustered=Yes }
    {    ;Location Code,Salary Plan Code,Year Type,Year Start Date,Year End Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72055 Payroll Month & Year
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Salary Year Code,Salary Cyclic Code,Salary Start Date,Salary End Date;
    CaptionML=ENU=Payroll Month & Year;
    LookupPageID=Page72069;
    DrillDownPageID=Page72069;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Year Code    ;Code20        ;TableRelation="Payroll Year";
                                                   CaptionML=ENU=Salary Year Code }
    { 4   ;   ;Salary Cyclic Code  ;Code20        ;CaptionML=ENU=Salary Cyclic Code }
    { 5   ;   ;Salary Start Date   ;Date          ;CaptionML=ENU=Salary Start Date }
    { 6   ;   ;Salary End Date     ;Date          ;CaptionML=ENU=Salary End Date }
    { 7   ;   ;Salary Month        ;Integer       ;CaptionML=ENU=Salary Month }
    { 8   ;   ;Salary Year         ;Integer       ;CaptionML=ENU=Salary Year }
    { 9   ;   ;Attendance Generated;Boolean       ;CaptionML=ENU=Attendance Generated }
    { 10  ;   ;Salary Processed    ;Boolean       ;CaptionML=ENU=Salary Processed }
    { 11  ;   ;No of Employee Processed;Integer   ;CaptionML=ENU=No of Employee Processed }
    { 12  ;   ;Salary Posted       ;Boolean       ;CaptionML=ENU=Salary Posted }
    { 13  ;   ;No of Employee Posted;Integer      ;CaptionML=ENU=No of Employee Posted }
    { 14  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed }
    { 15  ;   ;Income Tax Salary Posted;Boolean   ;CaptionML=ENU=Income Tax Salary Posted }
    { 16  ;   ;VDA Starting Points ;Integer       ;OnValidate=BEGIN
                                                                VALIDATE("VDA Ending Points");
                                                              END;

                                                   CaptionML=ENU=VDA Starting Points }
    { 17  ;   ;VDA Ending Points   ;Integer       ;OnValidate=BEGIN
                                                                "Total Points" := "VDA Ending Points" - "VDA Starting Points";

                                                                IF "Total Points" < 0 THEN
                                                                  "Total Points" := 0;

                                                                VALIDATE("Points Rate");
                                                              END;

                                                   CaptionML=ENU=VDA Ending Points }
    { 18  ;   ;Total Points        ;Integer       ;CaptionML=ENU=Total Points;
                                                   Editable=No }
    { 19  ;   ;Points Rate         ;Decimal       ;OnValidate=BEGIN
                                                                "Total VDA Amount" := "Total Points" * "Points Rate";
                                                              END;

                                                   CaptionML=ENU=Points Rate }
    { 20  ;   ;Total VDA Amount    ;Decimal       ;CaptionML=ENU=Total VDA Amount;
                                                   Editable=No }
    { 21  ;   ;Staff VDA Amount    ;Decimal       ;CaptionML=ENU=Staff VDA Amount }
    { 22  ;   ;Workmen VDA Amount  ;Decimal       ;CaptionML=ENU=Workmen VDA Amount }
    { 23  ;   ;VDA Minimum Daily Wages Range;Decimal;
                                                   CaptionML=ENU=VDA Minimum Daily Wages Range }
    { 24  ;   ;VDA Differance Amount;Decimal      ;CaptionML=ENU=VDA Differance Amount }
    { 25  ;   ;PF Challan Date     ;Date          ;CaptionML=ENU=PF Challan Date }
    { 26  ;   ;ESI Challan Date    ;Date          ;CaptionML=ENU=ESI Challan Date }
    { 27  ;   ;Challan Bank Name   ;Text50        ;CaptionML=ENU=Challan Bank Name }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cyclic Code,Salary Start Date,Salary End Date;
                                                   Clustered=Yes }
    {    ;Location Code,Salary Plan Code,Salary Start Date,Salary End Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72056 Weekly Off
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Calendar Year,Day No.;
    CaptionML=ENU=Weekly Off;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Calendar Year       ;Code20        ;TableRelation="Payroll Year";
                                                   CaptionML=ENU=Calendar Year }
    { 4   ;   ;Day No.             ;Integer       ;CaptionML=ENU=Day No. }
    { 5   ;   ;Day                 ;Option        ;OnValidate=BEGIN
                                                                IF Day = 0 THEN
                                                                  "Day No." := 0;
                                                                IF Day = 1 THEN
                                                                  "Day No." := 7;
                                                                IF Day = 2 THEN
                                                                  "Day No." := 1;
                                                                IF Day = 3 THEN
                                                                  "Day No." := 2;
                                                                IF Day = 4 THEN
                                                                  "Day No." := 3;
                                                                IF Day = 5 THEN
                                                                  "Day No." := 4;
                                                                IF Day = 6 THEN
                                                                  "Day No." := 5;
                                                                IF Day = 7 THEN
                                                                  "Day No." := 6;
                                                              END;

                                                   CaptionML=ENU=Day;
                                                   OptionCaptionML=ENU=" ,Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday";
                                                   OptionString=[ ,Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday] }
    { 6   ;   ;Week Wise (Weekly Off);Option      ;CaptionML=ENU=Week Wise (Weekly Off);
                                                   OptionCaptionML=ENU=All Week,1st-Week,2nd-Week,3rd-Week,4th-Week,5th-Week;
                                                   OptionString=All Week,1st-Week,2nd-Week,3rd-Week,4th-Week,5th-Week }
    { 7   ;   ;First Half (Weekly Off);Boolean    ;OnValidate=BEGIN
                                                                IF "First Half (Weekly Off)" THEN
                                                                  "Non Working Days" := TRUE;

                                                                IF NOT "First Half (Weekly Off)" AND NOT "Second Half (Weekly Off)" THEN
                                                                  "Non Working Days" := FALSE;
                                                              END;

                                                   CaptionML=ENU=First Half (Weekly Off) }
    { 8   ;   ;Second Half (Weekly Off);Boolean   ;OnValidate=BEGIN
                                                                IF "Second Half (Weekly Off)" THEN
                                                                  "Non Working Days" := TRUE;

                                                                IF NOT "First Half (Weekly Off)" AND NOT "Second Half (Weekly Off)" THEN
                                                                  "Non Working Days" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Second Half (Weekly Off) }
    { 9   ;   ;Non Working Days    ;Boolean       ;CaptionML=ENU=Non Working Days }
    { 10  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Calendar Year,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 72057 Holidays
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Calendar Year,Holiday Date,Holiday Name;
    CaptionML=ENU=Holidays;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Calendar Year       ;Code20        ;TableRelation="Payroll Year";
                                                   CaptionML=ENU=Calendar Year }
    { 4   ;   ;Holiday Date        ;Date          ;CaptionML=ENU=Holiday Date }
    { 5   ;   ;Holiday Name        ;Text50        ;CaptionML=ENU=Holiday Name }
    { 6   ;   ;First Half (Holiday);Boolean       ;OnValidate=BEGIN
                                                                IF "First Half (Holiday)" THEN
                                                                  "Non Working Days" := TRUE;

                                                                IF NOT "First Half (Holiday)" AND NOT "Second Half (Holiday)" THEN
                                                                  "Non Working Days" := FALSE;
                                                              END;

                                                   CaptionML=ENU=First Half (Holiday) }
    { 7   ;   ;Second Half (Holiday);Boolean      ;OnValidate=BEGIN
                                                                IF "Second Half (Holiday)" THEN
                                                                  "Non Working Days" := TRUE;

                                                                IF (NOT "First Half (Holiday)") AND (NOT "Second Half (Holiday)") THEN
                                                                  "Non Working Days" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Second Half (Holiday) }
    { 8   ;   ;Non Working Days    ;Boolean       ;CaptionML=ENU=Non Working Days }
    { 9   ;   ;OT Applicable for the Day;Boolean  ;CaptionML=ENU=OT Applicable for the Day }
  }
  KEYS
  {
    {    ;Holiday Date,Location Code,Salary Plan Code,Calendar Year;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72058 Calendar
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Calendar Year,Date,Description;
    CaptionML=ENU=Calendar;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Calendar Year       ;Code20        ;TableRelation="Payroll Year";
                                                   CaptionML=ENU=Calendar Year }
    { 4   ;   ;Date                ;Date          ;CaptionML=ENU=Date }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 6   ;   ;Non-Working Days    ;Boolean       ;CaptionML=ENU=Non-Working Days }
    { 7   ;   ;Holiday             ;Boolean       ;CaptionML=ENU=Holiday }
    { 8   ;   ;First Half (Holiday);Boolean       ;CaptionML=ENU=First Half (Holiday) }
    { 9   ;   ;Second Half (Holiday);Boolean      ;CaptionML=ENU=Second Half (Holiday) }
    { 10  ;   ;WeeklyOff           ;Boolean       ;CaptionML=ENU=WeeklyOff }
    { 11  ;   ;First Half (Weekly Off);Boolean    ;CaptionML=ENU=First Half (Weekly Off) }
    { 12  ;   ;Second Half (Weekly Off);Boolean   ;CaptionML=ENU=Second Half (Weekly Off) }
    { 13  ;   ;Day No.             ;Integer       ;CaptionML=ENU=Day No. }
    { 14  ;   ;OT Applicable for the Day;Boolean  ;CaptionML=ENU=OT Applicable for the Day }
    { 15  ;   ;Week No.            ;Integer       ;CaptionML=ENU=Week No. }
  }
  KEYS
  {
    {    ;Date,Calendar Year,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 72059 Shift
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Code,Description;
    CaptionML=ENU=Shift;
    LookupPageID=Page72074;
    DrillDownPageID=Page72074;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;First Half Starting Time;Time      ;OnValidate=BEGIN
                                                                IF ("First Half Starting Time" = 0T) THEN BEGIN
                                                                    "First Half Ending Time" := 0T;
                                                                    "First Half Total Hours" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=First Half Starting Time }
    { 6   ;   ;First Half Ending Time;Time        ;OnValidate=BEGIN
                                                                "First Half Total Hours" := TotalHours("First Half Starting Time","First Half Ending Time");
                                                                "Total Hours" := "First Half Total Hours" + "Second Half Total Hours";
                                                              END;

                                                   CaptionML=ENU=First Half Ending Time }
    { 7   ;   ;First Half Total Hours;Decimal     ;CaptionML=ENU=First Half Total Hours;
                                                   Editable=No }
    { 8   ;   ;Second Half Starting Time;Time     ;OnValidate=BEGIN
                                                                IF "Second Half Starting Time" = 0T THEN BEGIN
                                                                  "Second Half Starting Time" := 0T;
                                                                  "Second Half Total Hours" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Second Half Starting Time }
    { 9   ;   ;Second Half Ending Time;Time       ;OnValidate=BEGIN
                                                                "Second Half Total Hours" := TotalHours("Second Half Starting Time","Second Half Ending Time");
                                                                "Total Hours" := "First Half Total Hours" + "Second Half Total Hours";
                                                              END;

                                                   CaptionML=ENU=Second Half Ending Time }
    { 10  ;   ;Second Half Total Hours;Decimal    ;CaptionML=ENU=Second Half Total Hours;
                                                   Editable=No }
    { 11  ;   ;Break Start Time    ;Time          ;OnValidate=BEGIN
                                                                IF "Break Start Time" = 0T THEN BEGIN
                                                                  "Break End Time" := 0T;
                                                                  "Break Total Hours" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Break Start Time }
    { 12  ;   ;Break End Time      ;Time          ;OnValidate=BEGIN
                                                                "Break Total Hours" := TotalHours("Break Start Time","Break End Time");
                                                                "Total Hours" := "First Half Total Hours" + "Second Half Total Hours";
                                                              END;

                                                   CaptionML=ENU=Break End Time }
    { 13  ;   ;Break Total Hours   ;Decimal       ;CaptionML=ENU=Break Total Hours;
                                                   Editable=No }
    { 14  ;   ;Total Hours         ;Decimal       ;CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 15  ;   ;Punch Time Applicable;Boolean      ;CaptionML=ENU=Punch Time Applicable }
    { 16  ;   ;Starting Punching Time;Time        ;CaptionML=ENU=Starting Punching Time }
    { 17  ;   ;Ending Punching Time;Time          ;CaptionML=ENU=Ending Punching Time }
    { 18  ;   ;Morning OT Applicable;Boolean      ;CaptionML=ENU=Morning OT Applicable }
    { 19  ;   ;Morning OT Starts From;Time        ;CaptionML=ENU=Morning OT Starts From }
    { 20  ;   ;Evening OT Applicable;Boolean      ;CaptionML=ENU=Evening OT Applicable }
    { 21  ;   ;Evening OT Starts From;Time        ;CaptionML=ENU=Evening OT Starts From }
    { 22  ;   ;Late Coming Applicable;Boolean     ;CaptionML=ENU=Late Coming Applicable }
    { 23  ;   ;Late Coming Time Starts From;Time  ;CaptionML=ENU=Late Coming Time Starts From }
    { 24  ;   ;Early Going Applicable;Boolean     ;CaptionML=ENU=Early Going Applicable }
    { 25  ;   ;Early Going Time Starts From;Time  ;CaptionML=ENU=Early Going Time Starts From }
    { 26  ;   ;Friday Over Time    ;Boolean       ;CaptionML=ENU=Friday Over Time }
    { 27  ;   ;Punching Days       ;Option        ;CaptionML=ENU=Punching Days;
                                                   OptionCaptionML=ENU=" ,Mon,Tue,Wed,Thu,Fri,Sat,Sun";
                                                   OptionString=[ ,Mon,Tue,Wed,Thu,Fri,Sat,Sun] }
    { 28  ;   ;Friday Ending Punching Time;Time   ;CaptionML=ENU=Friday Ending Punching Time }
    { 29  ;   ;Friday Time Limit Evening OT;Time  ;CaptionML=ENU=Friday Time Limit Evening OT }
  }
  KEYS
  {
    {    ;Code,Location Code,Salary Plan Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE TotalHours@1000000001(InTime@1000000000 : Time;OutTime@1000000001 : Time) TotalHoursMins : Decimal;
    VAR
      StartDateTime@1000000005 : DateTime;
      EndDateTime@1000000004 : DateTime;
      Day@1000000003 : Date;
      CheckTime@1000000002 : Time;
      TotalDuration@1000000006 : Integer;
      TotalHours@1000000007 : Integer;
      TotalMins@1000000008 : Integer;
    BEGIN
      CLEAR(CheckTime); CLEAR(Day); CLEAR(StartDateTime); CLEAR(EndDateTime);
      CLEAR(TotalDuration); CLEAR(TotalHours); CLEAR(TotalMins); CLEAR(TotalHoursMins);

      IF (InTime <> 0T) AND (OutTime <> 0T) THEN BEGIN
        CheckTime := 130000T;
        Day       := TODAY;

        IF (InTime > CheckTime) AND (OutTime < CheckTime) THEN BEGIN
             StartDateTime := CREATEDATETIME(Day,     InTime);
             EndDateTime   := CREATEDATETIME((Day+1), OutTime);
             TotalDuration := (EndDateTime - StartDateTime);
             TotalHours    := ROUND((TotalDuration / 3600000),1,'<');
             TotalMins     := ((TotalDuration - ( TotalHours * 3600000)) / 60000);
             TotalHoursMins := TotalHours + (TotalMins / 100);
           END
        ELSE
           BEGIN
             TotalDuration  := (OutTime - InTime);
             TotalHours     := ROUND((TotalDuration / 3600000),1,'<');
             TotalMins      := ((TotalDuration - ( TotalHours * 3600000)) / 60000);
             TotalHoursMins := TotalHours + (TotalMins / 100);
           END;
      END;

      IF (InTime = 0T) AND (OutTime = 0T) THEN
          TotalHoursMins := 0;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72060 Pay Elements
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Pay Element Code,Description;
    CaptionML=ENU=Pay Elements;
    LookupPageID=Page72076;
    DrillDownPageID=Page72076;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Pay Element Code    ;Code20        ;CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Pay Slip Printing Caption;Code20   ;CaptionML=ENU=Pay Slip Printing Caption }
    { 6   ;   ;Paid Category       ;Option        ;InitValue=Monthly;
                                                   CaptionML=ENU=Paid Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly,Daily;
                                                   OptionString=Monthly,Yearly,Daily }
    { 7   ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 8   ;   ;Fixed/Percent       ;Option        ;CaptionML=ENU=Fixed/Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent }
    { 9   ;   ;Base Pay Elements   ;Text250       ;TableRelation="Pay Elements" WHERE (Paid Category=CONST(Monthly),
                                                                                       Pay Type=CONST(Addition));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Base Pay Elements }
    { 10  ;   ;Base Amount ( For % );Decimal      ;CaptionML=ENU=Base Amount ( For % );
                                                   Editable=No }
    { 11  ;   ;Percent (%)         ;Decimal       ;CaptionML=ENU=Percent (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 12  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 13  ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 14  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 15  ;   ;Regular Element     ;Boolean       ;CaptionML=ENU=Regular Element }
    { 16  ;   ;Variable Element    ;Boolean       ;CaptionML=ENU=Variable Element }
    { 17  ;   ;Loan Element        ;Boolean       ;CaptionML=ENU=Loan Element }
    { 18  ;   ;Eligible for ESI Earnings;Boolean  ;CaptionML=ENU=Eligible for ESI Earnings }
    { 19  ;   ;Eligible for PF     ;Boolean       ;CaptionML=ENU=Eligible for PF }
    { 20  ;   ;Eligible for PT     ;Boolean       ;CaptionML=ENU=Eligible for PT }
    { 21  ;   ;Eligible for OT     ;Boolean       ;CaptionML=ENU=Eligible for OT }
    { 22  ;   ;Eligible for Bonus  ;Boolean       ;CaptionML=ENU=Eligible for Bonus }
    { 23  ;   ;Eligible for Leave Encashment;Boolean;
                                                   CaptionML=ENU=Eligible for Leave Encashment }
    { 24  ;   ;Eligible for Gratuity;Boolean      ;CaptionML=ENU=Eligible for Gratuity }
    { 25  ;   ;Eligible for Income Tax;Boolean    ;CaptionML=ENU=Eligible for Income Tax }
    { 26  ;   ;Included In Pay Slip;Boolean       ;CaptionML=ENU=Included In Pay Slip }
    { 27  ;   ;Excluded In Pay Slip;Boolean       ;CaptionML=ENU=Excluded In Pay Slip }
    { 28  ;   ;All Grade           ;Boolean       ;CaptionML=ENU=All Grade }
    { 29  ;   ;Predefined Code     ;Boolean       ;CaptionML=ENU=Predefined Code;
                                                   Editable=No }
    { 30  ;   ;Pay Prod. Posting Group;Code20     ;TableRelation="Payroll Product Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                        Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Prod. Posting Group }
    { 31  ;   ;GL Code             ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=GL Code }
    { 32  ;   ;Income Tax Link Code;Option        ;CaptionML=ENU=Income Tax Link Code;
                                                   OptionCaptionML=ENU=" ,E-01,E-02,E-03,E-04,E-05,E-06,E-07,E-08,E-09,E-10,E-11,E-12,E-13,E-14,E-15,E-16,E-17,E-18,E-19,E-20,E-21,E-22,D-01,D-02,D-03";
                                                   OptionString=[ ,E-01,E-02,E-03,E-04,E-05,E-06,E-07,E-08,E-09,E-10,E-11,E-12,E-13,E-14,E-15,E-16,E-17,E-18,E-19,E-20,E-21,E-22,D-01,D-02,D-03] }
    { 33  ;   ;Select              ;Boolean       ;CaptionML=ENU=Select }
    { 34  ;   ;Eligible for Credit Days;Boolean   ;CaptionML=ENU=Eligible for Credit Days }
    { 35  ;   ;Eligible for ESI Limit Amount;Boolean;
                                                   CaptionML=ENU=Eligible for ESI Limit Amount }
    { 36  ;   ;Fixed Pay Element   ;Boolean       ;CaptionML=ENU=Fixed Pay Element }
    { 37  ;   ;Payment Type        ;Option        ;CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Full Payment,First Payment,Second Payment;
                                                   OptionString=Full Payment,First Payment,Second Payment }
    { 38  ;   ;Gross Amount Pay Elements;Boolean  ;CaptionML=ENU=Gross Amount Pay Elements }
    { 39  ;   ;Daily Wages Pay Elements;Boolean   ;CaptionML=ENU=Daily Wages Pay Elements }
    { 40  ;   ;No of Day for DA    ;Decimal       ;CaptionML=ENU=No of Day for DA;
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 41  ;   ;Eligible for Layoff ;Boolean       ;CaptionML=ENU=Eligible for Layoff }
    { 42  ;   ;Eligible for Extra Allowances;Boolean;
                                                   CaptionML=ENU=Eligible for Extra Allowances }
  }
  KEYS
  {
    {    ;Pay Element Code,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
    {    ;Sorting Order,Pay Element Code           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
    }
    END.
  }
}

OBJECT Table 72061 Grades
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Grade Code,Grade Name;
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 GradesElements.RESET;
                 GradesElements.SETRANGE("Location Code", "Location Code");
                 GradesElements.SETRANGE("Salary Plan Code", "Salary Plan Code");
                 GradesElements.SETRANGE("Grade Code", "Grade Code");
                 IF GradesElements.FINDFIRST THEN BEGIN
                   GradesElements.LOCKTABLE;
                   GradesElements.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Grades;
    LookupPageID=Page72079;
    DrillDownPageID=Page72079;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Grade Code          ;Code20        ;CaptionML=ENU=Grade Code }
    { 4   ;   ;Grade Name          ;Text50        ;CaptionML=ENU=Grade Name }
    { 5   ;   ;PF Applicable       ;Boolean       ;CaptionML=ENU=PF Applicable }
    { 6   ;   ;EPS Applicable      ;Boolean       ;CaptionML=ENU=EPS Applicable }
    { 7   ;   ;VPF Applicable      ;Boolean       ;CaptionML=ENU=VPF Applicable }
    { 8   ;   ;ESI Applicable      ;Boolean       ;CaptionML=ENU=ESI Applicable }
    { 9   ;   ;PT Applicable       ;Boolean       ;CaptionML=ENU=PT Applicable }
    { 10  ;   ;LWF Applicable      ;Boolean       ;CaptionML=ENU=LWF Applicable }
    { 11  ;   ;OT Applicable       ;Boolean       ;CaptionML=ENU=OT Applicable }
    { 12  ;   ;Leave Encashment Applicable;Boolean;CaptionML=ENU=Leave Encashment Applicable }
    { 13  ;   ;Bonus Applicable    ;Boolean       ;CaptionML=ENU=Bonus Applicable }
    { 14  ;   ;Gratuity Applicable ;Boolean       ;CaptionML=ENU=Gratuity Applicable }
    { 15  ;   ;Probationary        ;Boolean       ;CaptionML=ENU=Probationary }
    { 16  ;   ;PT Branch Code      ;Code20        ;TableRelation="Professional Tax Header";
                                                   CaptionML=ENU=PT Branch Code }
    { 17  ;   ;Over Time Multiplier;Decimal       ;CaptionML=ENU=Over Time Multiplier }
    { 18  ;   ;Employee VPF ( Employee) %;Decimal ;CaptionML=ENU=Employee VPF ( Employee) % }
    { 19  ;   ;Scale of Pay        ;Text50        ;CaptionML=ENU=Scale of Pay }
  }
  KEYS
  {
    {    ;Grade Code,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GradesElements@1000000000 : Record 72062;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72062 Grades Elements
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Effective Date,Grade Code;
    CaptionML=ENU=Grades Elements;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 4   ;   ;Grade Code          ;Code20        ;CaptionML=ENU=Grade Code }
    { 5   ;   ;Pay Element Code    ;Code20        ;CaptionML=ENU=Pay Element Code }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 8   ;   ;Fixed / Percent     ;Option        ;CaptionML=ENU=Fixed / Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent }
    { 9   ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 10  ;   ;Base Pay Elements   ;Text250       ;CaptionML=ENU=Base Pay Elements }
    { 11  ;   ;Percent (%)         ;Decimal       ;CaptionML=ENU=Percent (%) }
    { 12  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 13  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
  }
  KEYS
  {
    {    ;Pay Element Code,Grade Code,Effective Date,Salary Plan Code,Location Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72063 ESI Setup
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Effective Date,Location Code,Salary Plan Code;
    CaptionML=ENU=ESI Setup;
    LookupPageID=Page72081;
    DrillDownPageID=Page72081;
  }
  FIELDS
  {
    { 1   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;ESI Gross Salary Amount;Decimal    ;CaptionML=ENU=ESI Gross Salary Amount }
    { 5   ;   ;ESI % ( Employee )  ;Decimal       ;CaptionML=ENU=ESI % ( Employee ) }
    { 6   ;   ;ESI % ( Company )   ;Decimal       ;CaptionML=ENU=ESI % ( Company ) }
    { 7   ;   ;ESI Rounding Amount ;Decimal       ;CaptionML=ENU=ESI Rounding Amount }
    { 8   ;   ;ESI Rounding Type   ;Option        ;CaptionML=ENU=ESI Rounding Type;
                                                   OptionCaptionML=ENU=Nearest,Up,Down;
                                                   OptionString=Nearest,Up,Down }
  }
  KEYS
  {
    {    ;Effective Date,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72064 PF Setup
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Effective Date,Location Code,Salary Plan Code,PF Gross Salary Limit;
    CaptionML=ENU=PF Setup;
    LookupPageID=Page72083;
    DrillDownPageID=Page72083;
  }
  FIELDS
  {
    { 1   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;PF Gross Salary Limit;Decimal      ;CaptionML=ENU=PF Gross Salary Limit }
    { 5   ;   ;EPS Gross Salary Limit;Decimal     ;CaptionML=ENU=EPS Gross Salary Limit }
    { 6   ;   ;Employee PF (Employee) %;Decimal   ;CaptionML=ENU=Employee PF (Employee) % }
    { 7   ;   ;Employer PF (Company) %;Decimal    ;CaptionML=ENU=Employer PF (Company) % }
    { 8   ;   ;Employer EPS ( Company) %;Decimal  ;CaptionML=ENU=Employer EPS ( Company) % }
    { 9   ;   ;Employee VPF ( Employee) %;Decimal ;CaptionML=ENU=Employee VPF ( Employee) % }
    { 10  ;   ;PF Admin Charges %  ;Decimal       ;CaptionML=ENU=PF Admin Charges % }
    { 11  ;   ;PF EDLI %           ;Decimal       ;CaptionML=ENU=PF EDLI % }
    { 12  ;   ;PF RIFA %           ;Decimal       ;CaptionML=ENU=PF RIFA % }
    { 13  ;   ;PF Rounding Amount  ;Decimal       ;CaptionML=ENU=PF Rounding Amount }
    { 14  ;   ;PF Rounding Type    ;Option        ;CaptionML=ENU=PF Rounding Type;
                                                   OptionCaptionML=ENU=Nearest,Up,Down;
                                                   OptionString=Nearest,Up,Down }
  }
  KEYS
  {
    {    ;Effective Date,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72065 Professional Tax Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Effective Date,Location Code,Salary Plan Code,Branch Code;
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 ProfessionalTaxLine.RESET;
                 ProfessionalTaxLine.SETRANGE("Effective Date", "Effective Date");
                 ProfessionalTaxLine.SETRANGE("Location Code", "Location Code");
                 ProfessionalTaxLine.SETRANGE("Salary Plan Code", "Salary Plan Code");
                 ProfessionalTaxLine.SETRANGE("Branch Code", "Branch Code");
                 IF ProfessionalTaxLine.FINDFIRST THEN BEGIN
                   ProfessionalTaxLine.LOCKTABLE;
                   ProfessionalTaxLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Professional Tax Header;
    LookupPageID=Page72086;
    DrillDownPageID=Page72086;
  }
  FIELDS
  {
    { 1   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Branch Code         ;Code20        ;CaptionML=ENU=Branch Code }
    { 5   ;   ;Branch Name         ;Text50        ;CaptionML=ENU=Branch Name }
    { 6   ;   ;Calculation Type    ;Option        ;CaptionML=ENU=Calculation Type;
                                                   OptionCaptionML=ENU=1M,6M;
                                                   OptionString=1M,6M }
    { 7   ;   ;Salary Starting Date;Date          ;OnValidate=BEGIN
                                                                "Salary Ending Date" := CALCDATE(FORMAT("Calculation Type") + '-1D',"Salary Starting Date");
                                                              END;

                                                   CaptionML=ENU=Salary Starting Date }
    { 8   ;   ;Salary Ending Date  ;Date          ;CaptionML=ENU=Salary Ending Date }
  }
  KEYS
  {
    {    ;Branch Code,Effective Date,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProfessionalTaxLine@1000000000 : Record 72066;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72066 Professional Tax Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Professional Tax Line;
  }
  FIELDS
  {
    { 1   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Branch Code         ;Code20        ;CaptionML=ENU=Branch Code }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 6   ;   ;Income From         ;Decimal       ;CaptionML=ENU=Income From }
    { 7   ;   ;Income To           ;Decimal       ;CaptionML=ENU=Income To }
    { 8   ;   ;Tax Amount          ;Decimal       ;CaptionML=ENU=Tax Amount }
  }
  KEYS
  {
    {    ;Effective Date,Location Code,Salary Plan Code,Branch Code,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72067 Income Tax Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 IncomeTaxLine.RESET;
                 IncomeTaxLine.SETRANGE("Assessment Year", "Assessment Year");
                 IncomeTaxLine.SETRANGE("Location Code", "Location Code");
                 IncomeTaxLine.SETRANGE("Salary Plan Code","Salary Plan Code");
                 IF IncomeTaxLine.FINDFIRST THEN BEGIN
                   IncomeTaxLine.LOCKTABLE;
                   IncomeTaxLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Income Tax Header;
  }
  FIELDS
  {
    { 1   ;   ;Assessment Year     ;Code20        ;TableRelation="Payroll Year";
                                                   CaptionML=ENU=Assessment Year }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Tax Deduction Limit ;Decimal       ;CaptionML=ENU=Tax Deduction Limit }
    { 5   ;   ;Medical Claim Limit ;Decimal       ;CaptionML=ENU=Medical Claim Limit }
    { 6   ;   ;Physically Handicapped Limit;Decimal;
                                                   CaptionML=ENU=Physically Handicapped Limit }
    { 7   ;   ;Housing Loan Interest Limit;Decimal;CaptionML=ENU=Housing Loan Interest Limit }
    { 8   ;   ;Metro %             ;Decimal       ;CaptionML=ENU=Metro %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 9   ;   ;Non Metro %         ;Decimal       ;CaptionML=ENU=Non Metro %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 10  ;   ;Excess of Rent Paid ;Decimal       ;CaptionML=ENU=Excess of Rent Paid }
    { 11  ;   ;Max. Conveyance     ;Decimal       ;CaptionML=ENU=Max. Conveyance }
  }
  KEYS
  {
    {    ;Assessment Year,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IncomeTaxLine@1000000000 : Record 72068;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72068 Income Tax Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Income Tax Line;
  }
  FIELDS
  {
    { 1   ;   ;Assessment Year     ;Code20        ;CaptionML=ENU=Assessment Year }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=Male,Female,Sr.Citizen;
                                                   OptionString=Male,Female,Sr.Citizen }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 6   ;   ;Income From         ;Decimal       ;CaptionML=ENU=Income From }
    { 7   ;   ;Income To           ;Decimal       ;CaptionML=ENU=Income To }
    { 8   ;   ;Tax %               ;Decimal       ;CaptionML=ENU=Tax %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 9   ;   ;Surcharge %         ;Decimal       ;CaptionML=ENU=Surcharge %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 10  ;   ;E-CESS %            ;Decimal       ;CaptionML=ENU=E-CESS %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11  ;   ;SHE-CESS %          ;Decimal       ;CaptionML=ENU=SHE-CESS %;
                                                   MinValue=0;
                                                   MaxValue=100 }
  }
  KEYS
  {
    {    ;Assessment Year,Location Code,Salary Plan Code,Gender,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72069 Leave Master
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Leave Code,Description;
    CaptionML=ENU=Leave Master;
    LookupPageID=Page72096;
    DrillDownPageID=Page72096;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Leave Code          ;Code20        ;CaptionML=ENU=Leave Code }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Regular             ;Boolean       ;CaptionML=ENU=Regular }
    { 6   ;   ;Total Leaves in a Year Regular;Decimal;
                                                   CaptionML=ENU=Total Leaves in a Year Regular;
                                                   Editable=No }
    { 7   ;   ;Credit Interval Regular;DateFormula;OnValidate=BEGIN
                                                                "Calculate Leave Days Year Reg";
                                                              END;

                                                   CaptionML=ENU=Credit Interval Regular }
    { 8   ;   ;Leave in a Credit Int. Regular;Decimal;
                                                   OnValidate=BEGIN
                                                                "Calculate Leave Days Year Reg";
                                                              END;

                                                   CaptionML=ENU=Leave in a Credit Int. Regular }
    { 9   ;   ;Probationary        ;Boolean       ;CaptionML=ENU=Probationary }
    { 10  ;   ;Total Leaves in a Year Prob.;Decimal;
                                                   CaptionML=ENU=Total Leaves in a Year Prob.;
                                                   Editable=No }
    { 11  ;   ;Credit Interval Prob.;DateFormula  ;OnValidate=BEGIN
                                                                "Calculate Leave Days Year Pro"
                                                              END;

                                                   CaptionML=ENU=Credit Interval Prob. }
    { 12  ;   ;Leave in a Credit Int. Prob.;Decimal;
                                                   OnValidate=BEGIN
                                                                "Calculate Leave Days Year Pro";
                                                              END;

                                                   CaptionML=ENU=Leave in a Credit Int. Prob. }
    { 13  ;   ;Encash Leave        ;Boolean       ;CaptionML=ENU=Encash Leave }
    { 14  ;   ;Maximum Encash Leave;Decimal       ;CaptionML=ENU=Maximum Encash Leave }
    { 15  ;   ;Carry Forward       ;Boolean       ;CaptionML=ENU=Carry Forward }
    { 16  ;   ;Paid Leave          ;Boolean       ;OnValidate=BEGIN
                                                                "UnPaid Leave" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Paid Leave }
    { 17  ;   ;UnPaid Leave        ;Boolean       ;OnValidate=BEGIN
                                                                "Paid Leave" := FALSE;
                                                              END;

                                                   CaptionML=ENU=UnPaid Leave }
    { 18  ;   ;Create Leave Balance;Boolean       ;CaptionML=ENU=Create Leave Balance }
    { 19  ;   ;Full Day            ;Boolean       ;CaptionML=ENU=Full Day }
    { 20  ;   ;Mark As Full Day First Half;Option ;CaptionML=ENU=Mark As Full Day First Half;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,,,On-Duty";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved] }
    { 21  ;   ;Mark As Full Day Secod Half;Option ;CaptionML=ENU=Mark As Full Day Secod Half;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,,,On-Duty";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved] }
    { 22  ;   ;First Half Day      ;Boolean       ;CaptionML=ENU=First Half Day }
    { 23  ;   ;I'st Mark As First Half Day;Option ;CaptionML=ENU=I'st Mark As First Half Day;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,,,On-Duty";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved] }
    { 24  ;   ;I'st Mark As Second Half Day;Option;CaptionML=ENU=I'st Mark As Second Half Day;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,,,On-Duty";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved] }
    { 25  ;   ;Second Half Day     ;Boolean       ;CaptionML=ENU=Second Half Day }
    { 26  ;   ;II'nd Mark As First Half Day;Option;CaptionML=ENU=II'nd Mark As First Half Day;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,,,On-Duty";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved] }
    { 27  ;   ;II'nd Mark As Second Half Day;Option;
                                                   CaptionML=ENU=II'nd Mark As Second Half Day;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,,,On-Duty";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved] }
  }
  KEYS
  {
    {    ;Leave Code,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoofMonths@1000000002 : Integer;
      TempDate@1000000001 : Date;
      TempDate1@1000000000 : Date;

    PROCEDURE "Calculate Leave Days Year Reg"@1000000000();
    BEGIN
      IF FORMAT("Credit Interval Regular") <> '' THEN BEGIN
        NoofMonths := 0;
        TempDate := WORKDATE;
        TempDate1 := WORKDATE;
        TempDate := CALCDATE("Credit Interval Regular",TempDate);
        REPEAT
          TempDate1 := CALCDATE('+1M',TempDate1);
          NoofMonths += 1;
        UNTIL TempDate1 >= TempDate;
        "Total Leaves in a Year Regular" := "Leave in a Credit Int. Regular" * 12 / NoofMonths;
      END;
    END;

    PROCEDURE "Calculate Leave Days Year Pro"@1000000002();
    BEGIN
      IF FORMAT("Credit Interval Prob.") <> '' THEN BEGIN
        NoofMonths := 0;
        TempDate := WORKDATE;
        TempDate1 := WORKDATE;
        TempDate := CALCDATE("Credit Interval Prob.",TempDate);
        REPEAT
          TempDate1 := CALCDATE('+1M',TempDate1);
          NoofMonths += 1;
        UNTIL TempDate1 >= TempDate;
        "Total Leaves in a Year Prob." := "Leave in a Credit Int. Prob." * 12 / NoofMonths;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72070 Insurance Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Pay Element Code,Employee No.,Name;
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 LICLine.RESET;
                 LICLine.SETRANGE("Employee No.","Employee No.");
                 LICLine.SETRANGE("Pay Element Code","Pay Element Code");
                 LICLine.SETRANGE("Location Code","Location Code");
                 LICLine.SETRANGE("Salary Plan Code","Salary Plan Code");
                 IF LICLine.FINDFIRST THEN BEGIN
                   LICLine.LOCKTABLE;
                   LICLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Insurance Header;
    LookupPageID=Page72091;
    DrillDownPageID=Page72091;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements";
                                                   CaptionML=ENU=Pay Element Code }
    { 4   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 5   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 7   ;   ;No. of Policy       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Insurance Line" WHERE (Location Code=FIELD(Location Code),
                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                             Employee No.=FIELD(Employee No.),
                                                                                             Pay Element Code=FIELD(Pay Element Code),
                                                                                             Blocked=CONST(No)));
                                                   CaptionML=ENU=No. of Policy;
                                                   Editable=No }
    { 8   ;   ;Total Premium Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Insurance Line"."Premium Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                            Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                            Employee No.=FIELD(Employee No.),
                                                                                                            Pay Element Code=FIELD(Pay Element Code),
                                                                                                            Blocked=CONST(No)));
                                                   CaptionML=ENU=Total Premium Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 9   ;   ;Total Value Insured ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Insurance Line"."Insured Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                            Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                            Employee No.=FIELD(Employee No.),
                                                                                                            Pay Element Code=FIELD(Pay Element Code),
                                                                                                            Blocked=CONST(No)));
                                                   CaptionML=ENU=Total Value Insured;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 10  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
  }
  KEYS
  {
    {    ;Pay Element Code,Employee No.,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000001 : Record 5200;
      LICLine@1000000000 : Record 72071;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72071 Insurance Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Insurance Line;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 4   ;   ;Pay Element Code    ;Code20        ;CaptionML=ENU=Pay Element Code }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 6   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date;
                                                   NotBlank=Yes }
    { 7   ;   ;Policy No.          ;Text30        ;CaptionML=ENU=Policy No. }
    { 8   ;   ;Policy Date         ;Date          ;CaptionML=ENU=Policy Date }
    { 9   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Premium Amount      ;Decimal       ;CaptionML=ENU=Premium Amount;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 11  ;   ;Insured Amount      ;Decimal       ;CaptionML=ENU=Insured Amount;
                                                   AutoFormatType=1 }
    { 12  ;   ;Matured Date        ;Date          ;CaptionML=ENU=Matured Date }
    { 13  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
  }
  KEYS
  {
    {    ;Employee No.,Pay Element Code,Location Code,Salary Plan Code,Line No.;
                                                   Clustered=Yes }
    {    ;Blocked                                 ;SumIndexFields=Premium Amount,Insured Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72072 Medical Reimbu. Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Pay Element Code,Employee No.,Name;
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 MedicalReimbuLine.RESET;
                 MedicalReimbuLine.SETRANGE("Employee No.","Employee No.");
                 MedicalReimbuLine.SETRANGE("Pay Element Code","Pay Element Code");
                 MedicalReimbuLine.SETRANGE("Location Code","Location Code");
                 MedicalReimbuLine.SETRANGE("Salary Plan Code","Salary Plan Code");
                 IF MedicalReimbuLine.FINDFIRST THEN BEGIN
                   MedicalReimbuLine.LOCKTABLE;
                   MedicalReimbuLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Medical Reimbu. Header;
    LookupPageID=Page72094;
    DrillDownPageID=Page72094;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements";
                                                   CaptionML=ENU=Pay Element Code }
    { 4   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 5   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 7   ;   ;No of Bills         ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Medical Reimbu. Line" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                   Pay Element Code=FIELD(Pay Element Code),
                                                                                                   Blocked=CONST(No)));
                                                   CaptionML=ENU=No of Bills;
                                                   Editable=No }
    { 8   ;   ;Last Year Amount    ;Decimal       ;OnValidate=BEGIN
                                                                "Total Amount" := "Last Year Amount" + "Current Year Eligible Amount";
                                                                "Balance Amount" := "Total Amount" - "Claimed Amount";
                                                              END;

                                                   CaptionML=ENU=Last Year Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 9   ;   ;Current Year Eligible Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                "Total Amount" := "Last Year Amount" + "Current Year Eligible Amount";
                                                                "Balance Amount" := "Total Amount" - "Claimed Amount";
                                                              END;

                                                   CaptionML=ENU=Current Year Eligible Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 10  ;   ;Total Amount        ;Decimal       ;CaptionML=ENU=Total Amount;
                                                   Editable=No }
    { 11  ;   ;Claimed Amount      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Medical Reimbu. Line"."Bill Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                               Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                               Employee No.=FIELD(Employee No.),
                                                                                                               Pay Element Code=FIELD(Pay Element Code),
                                                                                                               Blocked=CONST(No)));
                                                   OnValidate=BEGIN
                                                                "Total Amount" := "Last Year Amount" + "Current Year Eligible Amount";
                                                                "Balance Amount" := "Total Amount" - "Claimed Amount";
                                                              END;

                                                   CaptionML=ENU=Claimed Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 12  ;   ;Balance Amount      ;Decimal       ;CaptionML=ENU=Balance Amount;
                                                   Editable=No }
    { 13  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
  }
  KEYS
  {
    {    ;Employee No.,Pay Element Code,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000000 : Record 5200;
      MedicalReimbuLine@1000000001 : Record 72073;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72073 Medical Reimbu. Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Medical Reimbu. Line;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 4   ;   ;Pay Element Code    ;Code20        ;CaptionML=ENU=Pay Element Code }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 6   ;   ;Reimburesment Date  ;Date          ;CaptionML=ENU=Reimburesment Date;
                                                   NotBlank=Yes }
    { 7   ;   ;Bill No.            ;Text30        ;CaptionML=ENU=Bill No.;
                                                   NotBlank=Yes }
    { 8   ;   ;Bill Date           ;Date          ;CaptionML=ENU=Bill Date }
    { 9   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Bill Amount         ;Decimal       ;CaptionML=ENU=Bill Amount;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 11  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
  }
  KEYS
  {
    {    ;Employee No.,Pay Element Code,Location Code,Salary Plan Code,Line No.;
                                                   Clustered=Yes }
    {    ;Blocked                                 ;SumIndexFields=Bill Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72074 Payroll Business Posting Group
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Code,Description;
    CaptionML=ENU=Payroll Business Posting Group;
    LookupPageID=Page72100;
    DrillDownPageID=Page72100;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
  }
  KEYS
  {
    {    ;Code,Location Code,Salary Plan Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72075 Payroll Product Posting Group
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Code,Description;
    CaptionML=ENU=Payroll Product Posting Group;
    LookupPageID=Page72102;
    DrillDownPageID=Page72102;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Code                ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Code }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
  }
  KEYS
  {
    {    ;Code,Location Code,Salary Plan Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72076 Payroll General Posting Setup
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Pay Bus.Posting Group,Pay Prod. Posting Group,G/L Code;
    CaptionML=ENU=Payroll General Posting Setup;
    LookupPageID=Page72104;
    DrillDownPageID=Page72104;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Pay Bus.Posting Group;Code20       ;TableRelation="Payroll Business Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                         Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Bus.Posting Group }
    { 4   ;   ;Pay Prod. Posting Group;Code20     ;TableRelation="Payroll Product Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                        Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Prod. Posting Group }
    { 5   ;   ;G/L Code            ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=G/L Code }
  }
  KEYS
  {
    {    ;Pay Bus.Posting Group,Pay Prod. Posting Group,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72077 Payroll Employee Posting Group
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Code,Description;
    CaptionML=ENU=Payroll Employee Posting Group;
    LookupPageID=Page72106;
    DrillDownPageID=Page72106;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Code                ;Code20        ;TableRelation="Payroll Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF PayrollBusinessPostingGroup.GET(Code,"Location Code","Salary Plan Code") THEN
                                                                  Description := PayrollBusinessPostingGroup.Description;
                                                              END;

                                                   CaptionML=ENU=Code }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Salary Payable1 A/c ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Salary Payable1 A/c }
    { 6   ;   ;ESI Payable A/c     ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=ESI Payable A/c }
    { 7   ;   ;PF Payable A/c      ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=PF Payable A/c }
    { 8   ;   ;EPS Payable A/c     ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=EPS Payable A/c }
    { 9   ;   ;PF Admin Charge Payable A/c;Code20 ;TableRelation="G/L Account";
                                                   CaptionML=ENU=PF Admin Charge Payable A/c }
    { 10  ;   ;EDLI Payable A/c    ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=EDLI Payable A/c }
    { 11  ;   ;RIFA Payable A/c    ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=RIFA Payable A/c }
    { 12  ;   ;PT Payable A/c      ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=PT Payable A/c }
    { 13  ;   ;TDS Payable A/c     ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=TDS Payable A/c }
    { 14  ;   ;Bonus Payable A/c   ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Bonus Payable A/c }
    { 15  ;   ;Arrear Salary Payable A/c;Code20   ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Arrear Salary Payable A/c }
    { 16  ;   ;Loan Refundable A/c ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Loan Refundable A/c }
    { 17  ;   ;Salary Payable2 A/c ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=Salary Payable2 A/c }
  }
  KEYS
  {
    {    ;Code,Location Code,Salary Plan Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayrollBusinessPostingGroup@1102155000 : Record 72074;

    BEGIN
    END.
  }
}

OBJECT Table 72078 Employee Pay Elements
{
  OBJECT-PROPERTIES
  {
    Date=13-06-19;
    Time=15:37:37;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Employee Pay Elements;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Effective Date      ;Date          ;CaptionML=ENU=Effective Date }
    { 4   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   OnValidate=BEGIN
                                                                PayElements.GET("Pay Element Code","Location Code","Salary Plan Code");
                                                                Description := PayElements.Description;
                                                                "Pay Type" := PayElements."Pay Type";
                                                                "Fixed/Percent" := PayElements."Fixed/Percent";
                                                                "Amount Calculation Type" := PayElements."Amount Calculation Type";
                                                                "Base Pay Elements" := PayElements."Base Pay Elements";
                                                                "Percent (%)" := PayElements."Percent (%)";
                                                                "Sorting Order" := PayElements."Sorting Order";
                                                                "Excluded In Pay Slip" := PayElements."Excluded In Pay Slip";
                                                              END;

                                                   CaptionML=ENU=Pay Element Code }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=Yes }
    { 6   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 7   ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement;
                                                   Editable=No }
    { 8   ;   ;Fixed/Percent       ;Option        ;CaptionML=ENU=Fixed/Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent;
                                                   Editable=No }
    { 9   ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 10  ;   ;Base Pay Elements   ;Text250       ;CaptionML=ENU=Base Pay Elements;
                                                   Editable=No }
    { 11  ;   ;Percent (%)         ;Decimal       ;CaptionML=ENU=Percent (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 12  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 13  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order;
                                                   Editable=No }
    { 14  ;   ;Excluded In Pay Slip;Boolean       ;CaptionML=ENU=Excluded In Pay Slip }
    { 50000;  ;Designation Code    ;Code20         }
  }
  KEYS
  {
    {    ;Effective Date,Pay Element Code,Location Code,Salary Plan Code,Employee No;
                                                   Clustered=Yes }
    {    ;Effective Date,Sorting Order,Pay Type    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayElements@1000000000 : Record 72060;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72079 Employee Leave Attachment
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Employee Leave Attachment;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   Editable=No }
    { 4   ;   ;Leave Code          ;Code20        ;TableRelation="Leave Master" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Leave Code }
  }
  KEYS
  {
    {    ;Employee No,Location Code,Salary Plan Code,Leave Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72080 Daily Attendance
{
  OBJECT-PROPERTIES
  {
    Date=05-06-18;
    Time=11:31:49;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Salary Cyclic Code,Employee No,Name;
    CaptionML=ENU=Daily Attendance;
    LookupPageID=Page72112;
    DrillDownPageID=Page72112;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cyclic Code }
    { 4   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 5   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 6   ;   ;Attendance Date     ;Date          ;CaptionML=ENU=Attendance Date }
    { 7   ;   ;In Time             ;Time          ;OnValidate=BEGIN
                                                                VALIDATE("Out Time");
                                                              END;

                                                   CaptionML=ENU=In Time }
    { 8   ;   ;Out Time            ;Time          ;OnValidate=VAR
                                                                LateComingDuration@1102159000 : Integer;
                                                              BEGIN
                                                                IF "Shift Code" <> '' THEN BEGIN
                                                                  Shift.GET("Shift Code","Location Code","Salary Plan Code");

                                                                  IF ("In Time" <> 0T) OR ("Out Time" = 0T) THEN
                                                                    IF Shift."Late Coming Applicable" THEN
                                                                      IF "In Time" > Shift."Late Coming Time Starts From" THEN BEGIN
                                                                        LateComingDuration := "In Time" - Shift."Late Coming Time Starts From";
                                                                        "Late Coming Hours" := TotalHoursCalculation("In Time" - Shift."Late Coming Time Starts From");
                                                                      END;
                                                                END;

                                                                IF ("In Time" = 0T) AND ("Out Time" = 0T) THEN BEGIN
                                                                  "Late Coming Hours" := 0;
                                                                  "Early Going Hours" := 0;
                                                                  "Early OT Hours" := 0;

                                                                  "Total Permission In Mins" := 0;
                                                                  "Total OT In Mins" := 0;
                                                                  "Hours Worked" := 0;
                                                                  "Total Hours Worked" := 0;
                                                                END;

                                                                IF ("In Time" <> 0T) AND ("Out Time" <> 0T) THEN
                                                                  CalculateAllHours;

                                                                IF NOT "Non Working Day" THEN
                                                                  IF ("In Time" = 0T) AND ("Out Time" = 0T) THEN BEGIN
                                                                    "Hours Worked" := 0;
                                                                    "Total Hours Worked" := 0;
                                                                    "First Half Attendance Type" := "First Half Attendance Type"::Absent;
                                                                    "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
                                                                    VALIDATE("First Half Attendance Type");
                                                                    VALIDATE("Second Half Attendance Type");
                                                                  END;

                                                                IF "Weekly Off Status" THEN BEGIN
                                                                  "First Half Attendance Type" := "First Half Attendance Type"::"Weekly Off";
                                                                  "Second Half Attendance Type" := "Second Half Attendance Type"::"Weekly Off";
                                                                  VALIDATE("First Half Attendance Type");
                                                                  VALIDATE("Second Half Attendance Type");
                                                                END;

                                                                IF "Holiday Status" THEN BEGIN
                                                                  "First Half Attendance Type" := "First Half Attendance Type"::Holiday;
                                                                  "Second Half Attendance Type" := "Second Half Attendance Type"::Holiday;
                                                                  VALIDATE("First Half Attendance Type");
                                                                  VALIDATE("Second Half Attendance Type");
                                                                END;

                                                                IF "Lay Off (Yes/No)" THEN
                                                                  VALIDATE("Lay Off (Yes/No)");
                                                              END;

                                                   CaptionML=ENU=Out Time }
    { 9   ;   ;Hours Worked        ;Decimal       ;CaptionML=ENU=Hours Worked;
                                                   Editable=No }
    { 10  ;   ;Actual Hrs          ;Decimal       ;CaptionML=ENU=Actual Hrs;
                                                   Editable=No }
    { 11  ;   ;Total OT In Mins    ;Decimal       ;CaptionML=ENU=Total OT In Mins;
                                                   Editable=No }
    { 12  ;   ;OT Approved Hrs     ;Decimal       ;CaptionML=ENU=OT Approved Hrs;
                                                   Editable=No }
    { 13  ;   ;Total Hours Worked  ;Decimal       ;CaptionML=ENU=Total Hours Worked;
                                                   Editable=No }
    { 14  ;   ;First Half Attendance Type;Option  ;OnValidate=BEGIN
                                                                ValidateAttendanceType;
                                                              END;

                                                   CaptionML=ENU=First Half Attendance Type;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off] }
    { 15  ;   ;Second Half Attendance Type;Option ;OnValidate=BEGIN
                                                                ValidateAttendanceType;
                                                              END;

                                                   CaptionML=ENU=Second Half Attendance Type;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off] }
    { 16  ;   ;Leave Code          ;Code20        ;CaptionML=ENU=Leave Code }
    { 17  ;   ;Present             ;Decimal       ;CaptionML=ENU=Present }
    { 18  ;   ;Absent              ;Decimal       ;CaptionML=ENU=Absent }
    { 19  ;   ;Leave               ;Decimal       ;CaptionML=ENU=Leave }
    { 20  ;   ;Weekly Off          ;Decimal       ;CaptionML=ENU=Weekly Off }
    { 21  ;   ;Holiday             ;Decimal       ;CaptionML=ENU=Holiday }
    { 22  ;   ;On-Duty             ;Decimal       ;CaptionML=ENU=On-Duty }
    { 23  ;   ;Not Joined          ;Decimal       ;CaptionML=ENU=Not Joined }
    { 24  ;   ;Relieved            ;Decimal       ;CaptionML=ENU=Relieved }
    { 25  ;   ;Payable Days        ;Decimal       ;CaptionML=ENU=Payable Days }
    { 26  ;   ;Non Payable Days    ;Decimal       ;CaptionML=ENU=Non Payable Days }
    { 27  ;   ;Permission (Yes/No) ;Boolean       ;OnValidate=BEGIN
                                                                IF "Permission (Yes/No)" THEN
                                                                  Reason := 'Personal Work / Late'
                                                                ELSE
                                                                  Reason := '';
                                                              END;

                                                   CaptionML=ENU=Permission (Yes/No) }
    { 28  ;   ;Total Permission In Mins;Decimal   ;OnValidate=BEGIN
                                                                IF "Total Permission In Mins" > 0 THEN BEGIN
                                                                  "Permission (Yes/No)" := TRUE;
                                                                  Reason := 'Personal Work / Late';
                                                                END
                                                                ELSE BEGIN
                                                                  "Permission (Yes/No)" := FALSE;
                                                                  Reason := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Total Permission In Mins }
    { 29  ;   ;Reason              ;Text30        ;CaptionML=ENU=Reason }
    { 30  ;   ;Actual Time In      ;Time          ;CaptionML=ENU=Actual Time In }
    { 31  ;   ;Actual Time Out     ;Time          ;CaptionML=ENU=Actual Time Out }
    { 32  ;   ;Total Break Hours   ;Decimal       ;CaptionML=ENU=Total Break Hours;
                                                   Editable=No }
    { 33  ;   ;Activity            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Time Sheet" WHERE (Location Code=FIELD(Location Code),
                                                                                         Salary Plan Code=FIELD(Salary Plan Code),
                                                                                         Employee No=FIELD(Employee No),
                                                                                         Attend Date=FIELD(Attendance Date)));
                                                   CaptionML=ENU=Activity;
                                                   Editable=No }
    { 34  ;   ;Shift Code          ;Code20        ;TableRelation=Shift;
                                                   CaptionML=ENU=Shift Code }
    { 35  ;   ;Day No.             ;Integer       ;CaptionML=ENU=Day No. }
    { 36  ;   ;Week No             ;Integer       ;CaptionML=ENU=Week No }
    { 37  ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 38  ;   ;Month               ;Integer       ;CaptionML=ENU=Month;
                                                   ValuesAllowed=[1;2;3;4;5;6;7;8;9;10;11;12] }
    { 39  ;   ;Leave Year Code     ;Code10        ;CaptionML=ENU=Leave Year Code;
                                                   Editable=No }
    { 40  ;   ;Synchronize         ;Boolean       ;CaptionML=ENU=Synchronize }
    { 41  ;   ;Late Coming Hours   ;Decimal       ;CaptionML=ENU=Late Coming Hours }
    { 42  ;   ;Early Going Hours   ;Decimal       ;CaptionML=ENU=Early Going Hours }
    { 43  ;   ;Early OT Hours      ;Decimal       ;CaptionML=ENU=Early OT Hours }
    { 44  ;   ;Late OT Hours       ;Decimal       ;CaptionML=ENU=Late OT Hours }
    { 45  ;   ;Weekly Off Status   ;Boolean       ;CaptionML=ENU=Weekly Off Status }
    { 46  ;   ;Holiday Status      ;Boolean       ;CaptionML=ENU=Holiday Status }
    { 47  ;   ;Non Working Day     ;Boolean       ;CaptionML=ENU=Non Working Day }
    { 48  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 49  ;   ;Lay Off             ;Decimal       ;CaptionML=ENU=Lay Off }
    { 50  ;   ;Manual Entry        ;Boolean       ;CaptionML=ENU=Manual Entry;
                                                   Editable=No }
    { 51  ;   ;System Entry        ;Boolean       ;CaptionML=ENU=System Entry;
                                                   Editable=No }
    { 52  ;   ;Attendance Verified ;Boolean       ;CaptionML=ENU=Attendance Verified;
                                                   Editable=No }
    { 53  ;   ;Lay Off (Yes/No)    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Lay Off (Yes/No)" THEN BEGIN
                                                                  "First Half Attendance Type" := "First Half Attendance Type"::"Lay Off";
                                                                  "Second Half Attendance Type" := "Second Half Attendance Type"::"Lay Off";
                                                                  VALIDATE("First Half Attendance Type");
                                                                  VALIDATE("Second Half Attendance Type");
                                                                END;

                                                                IF NOT "Lay Off (Yes/No)" THEN BEGIN
                                                                  VALIDATE("In Time");
                                                                  VALIDATE("Out Time");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Lay Off (Yes/No) }
    { 54  ;   ;Comp Off Date       ;Date          ;CaptionML=ENU=Comp Off Date }
    { 55  ;   ;Punch Total Mins Worked;Decimal    ;CaptionML=ENU=Punch Total Mins Worked;
                                                   Editable=No }
    { 56  ;   ;Salary Processed    ;Boolean        }
    { 57  ;   ;Leave Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Leave Type" = "Leave Type"::" " THEN
                                                                   "Leave Availed" := 0;

                                                                IF "Leave Type" = "Leave Type"::"Full Day" THEN
                                                                   "Leave Availed" := 1;

                                                                IF "Leave Type" = "Leave Type"::"First Half Day" THEN
                                                                   "Leave Availed" := 0.5;

                                                                IF "Leave Type" = "Leave Type"::"Second Half Day" THEN
                                                                   "Leave Availed" := 0.5;
                                                              END;

                                                   OptionCaptionML=ENU=" ,Full Day,First Half Day,Second Half Day";
                                                   OptionString=[ ,Full Day,First Half Day,Second Half Day];
                                                   Editable=No }
    { 58  ;   ;Leave Application No;Code20        ;Editable=No }
    { 59  ;   ;Leave Availed       ;Decimal        }
  }
  KEYS
  {
    {    ;Employee No,Attendance Date,Salary Cyclic Code,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
    {    ;Present,Absent,Leave,Weekly Off,Holiday,On-Duty;
                                                   SumIndexFields=Present,Absent,Leave,Weekly Off,Holiday,On-Duty }
    {    ;Not Joined,Relieved,Payable Days,Total OT In Mins,Total Permission In Mins,Lay Off;
                                                   SumIndexFields=Not Joined,Relieved,Payable Days,Total OT In Mins,Total Permission In Mins,Lay Off }
    {    ;Location Code,Salary Plan Code,Leave Code,Leave Year Code;
                                                   SumIndexFields=Leave Availed }
    {    ;Attendance Date,Location Code,Salary Plan Code,Salary Cyclic Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CheckTime@1000000002 : Time;
      StartDateTime@1000000001 : DateTime;
      EndDateTime@1000000000 : DateTime;
      Shift@1102155000 : Record 72059;
      HRPayrollSetup@1102159001 : Record 72051;
      LocationHRPayrollSetup@1102159000 : Record 72052;

    PROCEDURE TotalHoursCalculation@1102155000(TotalDuration@1102155000 : Integer) : Decimal;
    VAR
      TotalMins@1102155028 : Integer;
      TotalHrsMins@1102155027 : Decimal;
      TotalMiliSec@1102155009 : Integer;
      TotalRestSec@1102155008 : Integer;
      TotalSec@1102155007 : Integer;
      TotalRestMin@1102155006 : Integer;
      TotalMin@1102155005 : Integer;
      TotalRestHour@1102155004 : Integer;
    BEGIN
      TotalMiliSec := TotalDuration MOD 1000;
      TotalRestSec := TotalDuration DIV 1000;
      TotalSec := TotalRestSec MOD 60;
      TotalRestMin := TotalRestSec DIV 60;
      TotalMin := TotalRestMin MOD 60;
      TotalRestHour := TotalRestMin DIV 60;

      TotalHrsMins := TotalRestHour + (TotalMin / 100);
      EXIT(TotalHrsMins);
    END;

    PROCEDURE CalculateAllHours@1102155001();
    VAR
      PersonInoutTotalDuration@1102155009 : Integer;
      BreakTotalDuration@1102155008 : Integer;
      PersonInOutDuration@1102155007 : Integer;
      BreakInOutDuration@1102155006 : Integer;
      LateComingDuration@1102155003 : Integer;
      EarlyGoingDuration@1102155002 : Integer;
      EarlyOTDuration@1102155001 : Integer;
      LateOTDuration@1102155000 : Integer;
      Employee@1102155004 : Record 5200;
      TotalOTHours@1102159000 : Decimal;
    BEGIN
      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      Employee.GET("Employee No");

      IF "Shift Code" = '' THEN
        "Shift Code" := Employee."Working Shift Code";

      Shift.GET("Shift Code","Location Code","Salary Plan Code");

      CLEAR(PersonInoutTotalDuration);
      CLEAR(BreakTotalDuration);
      CLEAR(PersonInOutDuration);
      CLEAR(BreakInOutDuration);
      CLEAR(LateComingDuration);
      CLEAR(EarlyGoingDuration);
      CLEAR(EarlyOTDuration);
      CLEAR(LateOTDuration);

      CLEAR("Total Hours Worked");
      CLEAR("Late Coming Hours");
      CLEAR("Early Going Hours");
      CLEAR("Total Permission In Mins");
      CLEAR("Early OT Hours");
      CLEAR("Late OT Hours");
      CLEAR("Total Break Hours");
      CLEAR("Total OT In Mins");
      CLEAR(TotalOTHours);

      //-- Total Hours Calculation.

      PersonInOutDuration := "Out Time" - "In Time";
      "Hours Worked" := TotalHoursCalculation(PersonInOutDuration);

      //-- Break Hours Calculation.
      IF (Shift."Break Start Time" <> 0T) AND (Shift."Break End Time" <> 0T) THEN BEGIN
        BreakInOutDuration := Shift."Break End Time" - Shift."Break Start Time";
        "Total Break Hours" := TotalHoursCalculation(BreakInOutDuration);
      END;

      "Total Hours Worked" := TotalHoursCalculation(PersonInOutDuration - BreakInOutDuration);

      IF "Total Hours Worked" < 0 THEN
        "Total Hours Worked" := 0;

      // Permission Calculation.

      IF Shift."Late Coming Applicable" THEN
        IF "In Time" > Shift."Late Coming Time Starts From" THEN BEGIN
          LateComingDuration := "In Time" - Shift."Late Coming Time Starts From";
          "Late Coming Hours" := TotalHoursCalculation("In Time" - Shift."Late Coming Time Starts From");
        END;

      //MESSAGE('Allow Early => %1  PersonOuttime => %2 ',AllowableEarlyGoingTime,PersonOutTime);

      IF Shift."Early Going Applicable" THEN
        IF "Out Time" < Shift."Late Coming Time Starts From" THEN BEGIN
          EarlyGoingDuration := Shift."Late Coming Time Starts From" - "Out Time";
          "Early Going Hours" := TotalHoursCalculation(Shift."Late Coming Time Starts From" - "Out Time");
        END;

      "Total Permission In Mins" := (LateComingDuration + EarlyGoingDuration) / 60000;

      //-- OverTime Calculation.

      //MESSAGE('Time Starts Before => %1  PersonIntime => %2 ',EarlyOTTime,PersonInTime);

      IF Shift."Morning OT Applicable" THEN
        IF "In Time" < Shift."Morning OT Starts From" THEN BEGIN
          EarlyOTDuration := Shift."Morning OT Starts From" - "In Time";
          "Early OT Hours" := TotalHoursCalculation(Shift."Morning OT Starts From" - "In Time");
        END;

      //MESSAGE('Time Starts Before => %1  PersonOuttime => %2 ',LateOTTime,PersonOutTime);

      IF Shift."Evening OT Applicable" THEN
        IF "Out Time" > Shift."Evening OT Starts From" THEN BEGIN
          LateOTDuration := "Out Time" - Shift."Evening OT Starts From";
          "Late OT Hours" := TotalHoursCalculation("Out Time" - Shift."Evening OT Starts From");
        END;

      "Total OT In Mins" := (EarlyOTDuration + LateOTDuration) / 60000;

      //-- New Changes for HTC Footwear Division on 29/12/2009

      IF Shift."Friday Over Time" THEN BEGIN
        CLEAR(LateOTDuration);
        IF "Day No." = Shift."Punching Days" THEN
          IF Shift."Friday Ending Punching Time" <> 0T THEN BEGIN
            IF "Out Time" > Shift."Friday Time Limit Evening OT" THEN BEGIN
              LateOTDuration := "Out Time" - Shift."Friday Ending Punching Time";
              "Late OT Hours" := TotalHoursCalculation("Out Time" - Shift."Friday Ending Punching Time");
            END;
            "Total OT In Mins" := (EarlyOTDuration + LateOTDuration) / 60000;
          END;
      END;

      IF "Total OT In Mins" <= LocationHRPayrollSetup."Over Time Min Minutes" THEN
        "Total OT In Mins" := 0;

      IF Employee."Extra Allowance Applicable" THEN
        "Total OT In Mins" := 0;

      IF "Non Working Day" THEN BEGIN
        IF Employee."Extra Allowance Applicable" THEN BEGIN
          IF ("Total Hours Worked" > LocationHRPayrollSetup."Extra Wages Min Hours") AND
              ("Total Hours Worked" < LocationHRPayrollSetup."Extra Wages Max Hours")
          THEN
            "Total OT In Mins" := LocationHRPayrollSetup."Ex.Wages Days Min 3 To 6 Hours";

          IF "Total Hours Worked" > LocationHRPayrollSetup."Extra Wages Max Hours" THEN
            "Total OT In Mins" := LocationHRPayrollSetup."Ex.Wages Days 6 Hours Above";
        END;

        IF Employee."OT Type" = Employee."OT Type"::"Hourly Based" THEN
          "Total OT In Mins" := "Convert Hours To Mins"("Total Hours Worked");

        "Total Permission In Mins" := 0;
        "Late Coming Hours" := 0;
        "Early Going Hours" := 0;
      END;

      //-- New Changes for HTC Footwear Division on 30/12/2009
      IF NOT Employee."Extra Allowance Applicable" THEN
        IF LocationHRPayrollSetup."Over Time Hours Round Off" THEN BEGIN
          TotalOTHours := "Convert Mins To Hours"("Total OT In Mins");
          TotalOTHours := ROUND(TotalOTHours,1,'<');
          "Total OT In Mins" := "Convert Hours To Mins"(TotalOTHours);
        END;

      //-- Holiday OT & Weekly off Over Time

      //--------------------------------

      IF "Hours Worked" < LocationHRPayrollSetup."Absent Hours Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Absent;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF "Hours Worked" > LocationHRPayrollSetup."Absent Hours Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Present;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF ("Hours Worked" >= LocationHRPayrollSetup."Absent Hours Limit") AND
         ("Hours Worked" <= LocationHRPayrollSetup."No of Hours in Half Day")
      THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      {
      IF "Early Going Hours" > LocationHRPayrollSetup."Early Going Permission Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF "Late Coming Hours" > LocationHRPayrollSetup."Late Coming Permission Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Absent;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Present;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;
      }
    END;

    PROCEDURE ValidateAttendanceType@1102159001();
    BEGIN
      Present := 0;
      Absent := 0;
      Leave := 0;
      "Weekly Off" := 0;
      Holiday := 0;
      "On-Duty" := 0;
      "Not Joined" := 0;
      Relieved := 0;
      "Lay Off" := 0;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Present THEN BEGIN
        Present := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Present THEN BEGIN
        Present := 0.5;
        "Payable Days" := 0.5;

        IF "First Half Attendance Type" = "First Half Attendance Type"::Present THEN BEGIN
          Present := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Absent THEN BEGIN
        Absent := 0.5;
        "Non Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Absent THEN BEGIN
        Absent := 0.5;
        "Non Payable Days" := 0.5;
        IF "First Half Attendance Type" = "First Half Attendance Type"::Absent THEN BEGIN
          Absent := 1;
          "Payable Days" := 0;
          "Non Payable Days" := 1;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Leave THEN BEGIN
        Leave := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Leave THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          Leave := 0.5;
          "Payable Days" := 1;
        END ELSE BEGIN
          Leave := 0.5;
          "Payable Days" := 0.5;
          "Non Payable Days" := 0;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::Leave THEN BEGIN
          Leave := 1;
          "Payable Days" := 1;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"Weekly Off" THEN BEGIN
        "Weekly Off" := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::"Weekly Off" THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          "Weekly Off" := 0.5;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END ELSE BEGIN
          "Weekly Off" := 0.5;
          "Payable Days" := 0.5;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::"Weekly Off" THEN BEGIN
          "Weekly Off" := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Holiday THEN BEGIN
        Holiday := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Holiday THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          Holiday := 0.5;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END ELSE BEGIN
          Holiday := 0.5;
          "Payable Days" := 0.5;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::Holiday THEN BEGIN
          Holiday := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"On-Duty" THEN BEGIN
        "On-Duty" := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::"On-Duty" THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          "On-Duty" := 0.5;
          "Payable Days" := 1;
        END ELSE BEGIN
          "On-Duty" := 0.5;
          "Payable Days" := 0.5;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::"On-Duty" THEN BEGIN
          "On-Duty" := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"Not Joined" THEN BEGIN
        "Second Half Attendance Type" := "Second Half Attendance Type"::"Not Joined";
        Present := 0;
        Absent := 0;
        Leave := 0;
        "Weekly Off" := 0;
        Holiday := 0;
        "On-Duty" := 0;
        Relieved := 0;
        "Lay Off" := 0;
        "Payable Days" := 0;
        "Not Joined" := 1;
        "Payable Days" := 0;
        "Non Payable Days" := 1;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Relieved THEN BEGIN
        "Second Half Attendance Type" := "Second Half Attendance Type"::Relieved;
        Present := 0;
        Absent := 0;
        Leave := 0;
        "Weekly Off" := 0;
        Holiday := 0;
        "On-Duty" := 0;
        "Not Joined" := 0;
        "Lay Off" := 0;
        "Payable Days" := 0;
        Relieved := 1;
        "Payable Days" := 0;
        "Non Payable Days" := 1;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"Lay Off" THEN BEGIN
        "Second Half Attendance Type" := "Second Half Attendance Type"::"Lay Off";
        "Lay Off" := 1;
      //   "Payable Days" := 0.5;
        "Payable Days" := 0;
        Present := 0;
        Absent := 0;
        Leave := 0;
        "Weekly Off" := 0;
        Holiday := 0;
        "On-Duty" := 0;
        "Not Joined" := 0;
        Relieved := 0;
        "Non Payable Days" := 0;
      END;
    END;

    PROCEDURE "Convert Mins To Hours"@1000000023(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours);
      CLEAR(DecimalPart);
      CLEAR(IntegerPart);

      DecimalPart := TotalHrsMins MOD 60;
      IntegerPart := TotalHrsMins - DecimalPart;
      IntegerPart := IntegerPart / 60;
      ConvertHours := IntegerPart + (DecimalPart / 100);

      EXIT(ConvertHours);
    END;

    PROCEDURE "Convert Hours To Mins"@1102159000(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours);
      CLEAR(DecimalPart);
      CLEAR(IntegerPart);

      ConvertHours := TotalHrsMins * 100;
      DecimalPart := ConvertHours MOD 100;
      DecimalPart := DecimalPart / 100;
      IntegerPart := TotalHrsMins - DecimalPart;
      ConvertHours := (IntegerPart * 60) + (DecimalPart * 100);

      EXIT(ConvertHours);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 72081 Time Sheet
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Employee No;
    CaptionML=ENU=Time Sheet;
    LookupPageID=Page72113;
    DrillDownPageID=Page72113;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 4   ;   ;Attend Date         ;Date          ;CaptionML=ENU=Attend Date;
                                                   NotBlank=Yes }
    { 5   ;   ;Line No             ;Integer       ;CaptionML=ENU=Line No }
    { 6   ;   ;Time From           ;Time          ;OnValidate=BEGIN
                                                                IF "Time From" = 0T THEN BEGIN
                                                                  "Time To" := 0T;
                                                                  "Total Hours" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Time From;
                                                   NotBlank=Yes }
    { 7   ;   ;Time To             ;Time          ;OnValidate=BEGIN
                                                                "Total Hours" := TotalHours("Time From","Time To");
                                                              END;

                                                   CaptionML=ENU=Time To;
                                                   NotBlank=Yes;
                                                   BlankNumbers=BlankZero }
    { 8   ;   ;Total Hours         ;Decimal       ;CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 9   ;   ;Name of the Task    ;Text50        ;CaptionML=ENU=Name of the Task }
    { 10  ;   ;Completed           ;Boolean       ;CaptionML=ENU=Completed }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Employee No,Attend Date,Line No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE TotalHours@1000000001(InTime@1000000000 : Time;OutTime@1000000001 : Time) TotalHours : Decimal;
    VAR
      StartDateTime@1000000005 : DateTime;
      EndDateTime@1000000004 : DateTime;
      Day@1000000003 : Date;
      CheckTime@1000000002 : Time;
    BEGIN
      CLEAR(CheckTime);
      CLEAR(Day);
      CLEAR(StartDateTime);
      CLEAR(EndDateTime);

      IF (InTime <> 0T) AND (OutTime <> 0T) THEN BEGIN
        CheckTime := 130000T;
        Day := TODAY;

        IF (InTime > CheckTime) AND (OutTime < CheckTime) THEN BEGIN
          StartDateTime := CREATEDATETIME(Day, InTime);
          EndDateTime := CREATEDATETIME((Day + 1), OutTime);
          TotalHours := ABS((StartDateTime - EndDateTime) / 3600000);
        END ELSE
          TotalHours := ABS((InTime - OutTime) / 3600000);
      END;

      IF (InTime = 0T) AND (OutTime = 0T) THEN
        TotalHours := 0;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72082 Monthly Attendance
{
  OBJECT-PROPERTIES
  {
    Date=05-06-18;
    Time=11:31:22;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Salary Cycle Code,Name;
    CaptionML=ENU=Monthly Attendance;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month;
                                                   ValuesAllowed=[1;2;3;4;5;6;7;8;9;10;11;12] }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   Editable=No }
    { 9   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 10  ;   ;Present             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Present WHERE (Location Code=FIELD(Location Code),
                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                     Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                     Employee No=FIELD(Employee No),
                                                                                                     Present=FILTER(<>0)));
                                                   CaptionML=ENU=Present;
                                                   Editable=No }
    { 11  ;   ;Absent              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Absent WHERE (Location Code=FIELD(Location Code),
                                                                                                    Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                    Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                    Employee No=FIELD(Employee No),
                                                                                                    Absent=FILTER(<>0)));
                                                   CaptionML=ENU=Absent;
                                                   Editable=No }
    { 12  ;   ;Leave               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Leave WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                   Employee No=FIELD(Employee No),
                                                                                                   Leave=FILTER(<>0)));
                                                   CaptionML=ENU=Leave;
                                                   Editable=No }
    { 13  ;   ;Weekly Off          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Weekly Off" WHERE (Location Code=FIELD(Location Code),
                                                                                                          Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                          Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                          Employee No=FIELD(Employee No),
                                                                                                          Weekly Off=FILTER(<>0)));
                                                   CaptionML=ENU=Weekly Off;
                                                   Editable=No }
    { 14  ;   ;Holiday             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Holiday WHERE (Location Code=FIELD(Location Code),
                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                     Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                     Employee No=FIELD(Employee No),
                                                                                                     Holiday=FILTER(<>0)));
                                                   CaptionML=ENU=Holiday;
                                                   Editable=No }
    { 15  ;   ;On-Duty             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".On-Duty WHERE (Location Code=FIELD(Location Code),
                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                     Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                     Employee No=FIELD(Employee No),
                                                                                                     On-Duty=FILTER(<>0)));
                                                   CaptionML=ENU=On-Duty;
                                                   Editable=No }
    { 16  ;   ;Not Joined          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Relieved WHERE (Location Code=FIELD(Location Code),
                                                                                                      Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                      Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                      Employee No=FIELD(Employee No),
                                                                                                      Not Joined=FILTER(<>0)));
                                                   CaptionML=ENU=Not Joined;
                                                   Editable=No }
    { 17  ;   ;Relieved            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Relieved WHERE (Location Code=FIELD(Location Code),
                                                                                                      Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                      Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                      Employee No=FIELD(Employee No),
                                                                                                      Relieved=FILTER(<>0)));
                                                   CaptionML=ENU=Relieved;
                                                   Editable=No }
    { 18  ;   ;Over Time In Mins   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Total OT In Mins" WHERE (Location Code=FIELD(Location Code),
                                                                                                                Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                                Employee No=FIELD(Employee No),
                                                                                                                Total OT In Mins=FILTER(<>0)));
                                                   CaptionML=ENU=Over Time In Mins;
                                                   Editable=No }
    { 19  ;   ;Total Payable Days  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Payable Days" WHERE (Location Code=FIELD(Location Code),
                                                                                                            Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                            Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                            Employee No=FIELD(Employee No),
                                                                                                            Payable Days=FILTER(<>0)));
                                                   CaptionML=ENU=Total Payable Days;
                                                   Editable=No }
    { 20  ;   ;Actual Gross Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Actual Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Pay Type=CONST(Addition)));
                                                   CaptionML=ENU=Actual Gross Amount;
                                                   Editable=Yes }
    { 21  ;   ;Payable Gross Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Type=CONST(Addition)));
                                                   CaptionML=ENU=Payable Gross Amount;
                                                   Editable=Yes }
    { 22  ;   ;Actual Reimburesment Amount;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Actual Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Pay Type=CONST(Reimbursement)));
                                                   CaptionML=ENU=Actual Reimburesment Amount;
                                                   Editable=No }
    { 23  ;   ;Payable Reimburesment Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Type=CONST(Reimbursement)));
                                                   CaptionML=ENU=Payable Reimburesment Amount;
                                                   Editable=No }
    { 24  ;   ;Actual Deduction Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Actual Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Pay Type=CONST(Deduction)));
                                                   CaptionML=ENU=Actual Deduction Amount;
                                                   Editable=Yes }
    { 25  ;   ;Payable Deduction Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Type=CONST(Deduction)));
                                                   CaptionML=ENU=Payable Deduction Amount;
                                                   Editable=Yes }
    { 26  ;   ;Actual Net Amount   ;Decimal       ;CaptionML=ENU=Actual Net Amount;
                                                   Editable=Yes }
    { 27  ;   ;Payable Net Amount  ;Decimal       ;CaptionML=ENU=Payable Net Amount;
                                                   Editable=Yes }
    { 28  ;   ;Pay Amount          ;Decimal       ;CaptionML=ENU=Pay Amount;
                                                   Editable=No }
    { 29  ;   ;Paid Amount         ;Decimal       ;CaptionML=ENU=Paid Amount;
                                                   Editable=No }
    { 30  ;   ;Salary Processed    ;Boolean       ;CaptionML=ENU=Processed }
    { 31  ;   ;Processed Date      ;Date          ;CaptionML=ENU=Processed Date }
    { 32  ;   ;Journal Batch Name  ;Code20        ;CaptionML=ENU=Journal Batch Name }
    { 33  ;   ;Journal Template Name;Code20       ;CaptionML=ENU=Journal Template Name }
    { 34  ;   ;Posted Document No  ;Code20        ;CaptionML=ENU=Posted Document No }
    { 35  ;   ;Posted Date         ;Date          ;CaptionML=ENU=Posted Date }
    { 36  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 37  ;   ;Paid                ;Boolean       ;CaptionML=ENU=Paid }
    { 38  ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 39  ;   ;Pay Method          ;Option        ;CaptionML=ENU=Pay Method;
                                                   OptionCaptionML=ENU=Cash,Cheque,Bank Transfer;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 40  ;   ;Cheque No.          ;Code20        ;CaptionML=ENU=Cheque No. }
    { 41  ;   ;Cheque Date         ;Date          ;CaptionML=ENU=Cheque Date }
    { 42  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=ENU=Account No. }
    { 43  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 44  ;   ;I Payment Document No.;Code20      ;CaptionML=ENU=I Payment Document No. }
    { 45  ;   ;I Payment Date      ;Date          ;CaptionML=ENU=I Payment Date }
    { 46  ;   ;Stop Payment        ;Boolean       ;CaptionML=ENU=Stop Payment }
    { 47  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 48  ;   ;Total Permission In Mins;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Total Permission In Mins" WHERE (Location Code=FIELD(Location Code),
                                                                                                                        Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                        Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                                        Employee No=FIELD(Employee No),
                                                                                                                        Total Permission In Mins=FILTER(<>0)));
                                                   CaptionML=ENU=Total Permission In Mins;
                                                   Editable=No }
    { 49  ;   ;Credit Days         ;Decimal       ;CaptionML=ENU=Credit Days }
    { 50  ;   ;First Net Amount    ;Decimal       ;CaptionML=ENU=First Net Amount;
                                                   Editable=No }
    { 51  ;   ;Second Net Amount   ;Decimal       ;CaptionML=ENU=Second Net Amount;
                                                   Editable=No }
    { 52  ;   ;Payment Type        ;Option        ;CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Full Payment,First Payment,Second Payment;
                                                   OptionString=Full Payment,First Payment,Second Payment }
    { 53  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 54  ;   ;Lay Off             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Lay Off" WHERE (Location Code=FIELD(Location Code),
                                                                                                       Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                       Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                       Employee No=FIELD(Employee No),
                                                                                                       Lay Off=FILTER(<>0)));
                                                   CaptionML=ENU=Lay Off;
                                                   Editable=No }
    { 55  ;   ;Total Perm. Hours   ;Decimal       ;CaptionML=ENU=Total Perm. Hours;
                                                   Editable=No }
    { 56  ;   ;Total Over Time Hours;Decimal      ;CaptionML=ENU=Total Over Time Hours;
                                                   Editable=No }
    { 57  ;   ;Manual LOP Days     ;Decimal       ;MinValue=0;
                                                   MaxValue=31 }
    { 58  ;   ;Total Days Count    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Daily Attendance" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code),
                                                                                               Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                               Employee No=FIELD(Employee No)));
                                                   CaptionML=ENU=Total Days Count;
                                                   Editable=No }
    { 59  ;   ;II Payment Document No.;Code20     ;CaptionML=ENU=II Payment Document No. }
    { 60  ;   ;II Payment Date     ;Date          ;CaptionML=ENU=II Payment Date }
    { 61  ;   ;Branch Code         ;Code10        ;CaptionML=ENU=Branch Code }
    { 62  ;   ;Manual Total Days Worked;Decimal   ;CaptionML=ENU=Manual Total Days Worked;
                                                   Editable=No }
    { 63  ;   ;Negative Pay        ;Boolean       ;CaptionML=ENU=Negative Pay }
  }
  KEYS
  {
    {    ;Employee No,Salary Cycle Code,Payroll Start Date,Payroll End Date,Month,Year,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
    {    ;Employee No,Payroll End Date             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72083 Leave Application
{
  OBJECT-PROPERTIES
  {
    Date=06-08-24;
    Time=17:07:04;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Leave Requsition No.,Application Date,Employee No.,Name;
    OnInsert=BEGIN
               IF "Leave Requsition No." = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Leave No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Leave No.",xRec."No. Series",0D,"Leave Requsition No.","No. Series");
               END;

               "Application Date" := TODAY;
               "Creator User ID" := USERID;
               "Creator Date Time" := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               //IF (Status <> Status::Created) THEN
               //    ERROR('You cannot delete Leave Application');
             END;

    OnRename=BEGIN
               ERROR('You cannot Rename the Leave Application');
             END;

    CaptionML=ENU=Leave Application;
    LookupPageID=Page72149;
    DrillDownPageID=Page72149;
  }
  FIELDS
  {
    { 1   ;   ;Leave Requsition No.;Code20        ;OnValidate=BEGIN
                                                                IF "Leave Requsition No." <> xRec."Leave Requsition No." THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Leave No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Leave Requsition No. }
    { 2   ;   ;Application Date    ;Date          ;CaptionML=ENU=Application Date;
                                                   Editable=No }
    { 3   ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 4   ;   ;Application Type    ;Option        ;CaptionML=ENU=Application Type;
                                                   OptionCaptionML=ENU=Leave Application,Cancellation Application;
                                                   OptionString=Leave Application,Cancellation Application }
    { 5   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                Employee.GET("Employee No.");
                                                                Name := Employee."First Name" + ' ' + Employee.Initials;
                                                                Designation := Employee."Job Title";
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Designation         ;Text50        ;CaptionML=ENU=Designation;
                                                   Editable=No }
    { 8   ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                "To Date" := "From Date";
                                                                VALIDATE("To Date");
                                                                "Application Date" := "From Date";
                                                                "Recommending Date" := "From Date";
                                                                "Sanctioning Date" := "From Date";
                                                                Reason := 'Personal Work';
                                                                //"Recommending Authority" := 'AANAND.M';
                                                                //"Sanctioning Authority" := 'AANAND.M';
                                                              END;

                                                   CaptionML=ENU=From Date;
                                                   NotBlank=Yes }
    { 9   ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                IF "To Date" < "From Date" THEN
                                                                  ERROR(Text0004);

                                                                "No.of.Days" := ("To Date" - "From Date") + 1;

                                                                IF "No.of.Days" > 1 THEN BEGIN
                                                                  "First Half Day" := FALSE;
                                                                  "Second Half Day" := FALSE;
                                                                END;

                                                                IF "No.of.Days" >= 1 THEN
                                                                  "Full Day" := TRUE;

                                                                IF "No.of.Days" = 1 THEN
                                                                  IF "First Half Day" OR "Second Half Day" THEN

                                                                    "No.of.Days" := 1 - 0.5;
                                                              END;

                                                   CaptionML=ENU=To Date;
                                                   NotBlank=Yes }
    { 10  ;   ;Leave Code          ;Code20        ;CaptionML=ENU=Leave Code }
    { 11  ;   ;Full Day            ;Boolean       ;OnValidate=BEGIN
                                                                IF "No.of.Days" > 1 THEN BEGIN
                                                                  "First Half Day" := FALSE;
                                                                  "Second Half Day" := FALSE;
                                                                END;

                                                                IF "Full Day" THEN BEGIN
                                                                  "First Half Day" := FALSE;
                                                                  "Second Half Day" := FALSE;
                                                                END;

                                                                VALIDATE("From Date");
                                                                VALIDATE("To Date");
                                                              END;

                                                   CaptionML=ENU=Full Day }
    { 12  ;   ;First Half Day      ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("From Date");
                                                                VALIDATE("To Date");

                                                                IF "No.of.Days" > 1 THEN BEGIN
                                                                  "First Half Day" := FALSE;
                                                                  "Second Half Day" := FALSE;
                                                                END;

                                                                IF "First Half Day" THEN BEGIN
                                                                  "Full Day" := FALSE;
                                                                  "Second Half Day" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=First Half Day }
    { 13  ;   ;Second Half Day     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("From Date");
                                                                VALIDATE("To Date");

                                                                IF "No.of.Days" > 1 THEN BEGIN
                                                                  "First Half Day" := FALSE;
                                                                  "Second Half Day" := FALSE;
                                                                END;

                                                                IF "Second Half Day" THEN BEGIN
                                                                  "First Half Day" := FALSE;
                                                                  "Full Day" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Second Half Day }
    { 14  ;   ;Leave Balance       ;Decimal       ;CaptionML=ENU=Leave Balance;
                                                   Editable=No }
    { 15  ;   ;No.of.Days          ;Decimal       ;CaptionML=ENU=No.of.Days;
                                                   Editable=No }
    { 16  ;   ;Reason              ;Text50        ;CaptionML=ENU=Reason }
    { 17  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Created,Request,Open,Canceled,Rejected,Approved,Closed;
                                                   OptionString=Created,Request,Open,Canceled,Rejected,Approved,Closed }
    { 18  ;   ;Recommending Authority;Text50      ;TableRelation=Employee;
                                                   OnLookup=BEGIN
                                                              IF PAGE.RUNMODAL(0,Employee) = ACTION::LookupOK THEN
                                                                "Recommending Authority" := Employee."First Name";
                                                            END;

                                                   CaptionML=ENU=Recommending Authority }
    { 19  ;   ;Recommending Date   ;Date          ;OnValidate=BEGIN
                                                                IF "Recommending Date" < "Application Date" THEN
                                                                  ERROR(Text0005);
                                                              END;

                                                   CaptionML=ENU=Recommending Date }
    { 20  ;   ;Recommending Status ;Option        ;CaptionML=ENU=Recommending Status;
                                                   OptionCaptionML=ENU=Recommended,Not Recommended;
                                                   OptionString=Recommended,Not Recommended }
    { 21  ;   ;Sanctioning Authority;Text50       ;TableRelation=Employee;
                                                   OnLookup=BEGIN
                                                              IF PAGE.RUNMODAL(0,Employee) = ACTION::LookupOK THEN
                                                                "Sanctioning Authority" := Employee."First Name";
                                                            END;

                                                   CaptionML=ENU=Sanctioning Authority }
    { 22  ;   ;Sanctioning Date    ;Date          ;OnValidate=BEGIN
                                                                //IF "Sanctioning Date" < "Application Date" THEN
                                                                //  ERROR(Text0005);
                                                              END;

                                                   CaptionML=ENU=Sanctioning Date }
    { 23  ;   ;Sanctioning Status  ;Option        ;CaptionML=ENU=Sanctioning Status;
                                                   OptionCaptionML=ENU=Sanctioned,Not Sanctioned;
                                                   OptionString=Sanctioned,Not Sanctioned }
    { 24  ;   ;Cancellation Date   ;Date          ;CaptionML=ENU=Cancellation Date }
    { 25  ;   ;Creator User ID     ;Code20        ;CaptionML=ENU=Creator User ID;
                                                   Editable=No }
    { 26  ;   ;Creator Date Time   ;DateTime      ;CaptionML=ENU=Creator Date Time;
                                                   Editable=No }
    { 27  ;   ;Processed           ;Boolean       ;CaptionML=ENU=Processed;
                                                   Editable=No }
    { 28  ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 30  ;   ;Leave Year Code     ;Code20        ;TableRelation="Payroll Year"."Year Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Year Code=FIELD(Leave Year Code)) }
    { 31  ;   ;Academic Year       ;Code20         }
  }
  KEYS
  {
    {    ;Leave Requsition No.                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000009 : Record 72051;
      LocationHRPayrollSetup@1000000000 : Record 72052;
      Employee@1000000001 : Record 5200;
      NoSeriesMgt@1000000002 : Codeunit 396;
      Text0001@1000000007 : TextConst 'ENU=Sanction Incharge Should not Same Person';
      Text0002@1000000006 : TextConst 'ENU=This Leave is cancelled, You can not do any modifications.';
      Text0003@1000000005 : TextConst 'ENU=Processing is done, You cannot cancel these leaves.';
      Text0004@1000000004 : TextConst 'ENU=The Leave End Date Should not Lesserthan the Leave Start Date';
      Text0005@1000000003 : TextConst 'ENU=Leave Approval Date Should not Lesserthan the Leave Application Date';
      LeaveBalance@1000000008 : Record 72084;
      LeaveApplication@1102159000 : Record 72083;

    PROCEDURE AssistEdit@2(OldLeaveApplication@1000 : Record 72083) : Boolean;
    VAR
      LeaveApplication@1000000000 : Record 72083;
    BEGIN
      WITH LeaveApplication DO BEGIN
        LeaveApplication := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Leave No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Leave No.",OldLeaveApplication."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Leave Requsition No.");
          Rec := LeaveApplication;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE "Leave Batch Posting"@1102159000(LeaveRequestNo@1102159000 : Code[20]);
    BEGIN
      LeaveApplication.RESET;

      IF LeaveRequestNo <> 'ALL' THEN
         LeaveApplication.SETRANGE("Leave Requsition No.", LeaveRequestNo);
      LeaveApplication.SETRANGE(Status, LeaveApplication.Status::Created);
      IF LeaveApplication.FINDFIRST THEN BEGIN
         REPEAT
            "Daily Attendance Update"(LeaveApplication);
         UNTIL LeaveApplication.NEXT = 0;
      END;
    END;

    PROCEDURE "Daily Attendance Update"@1102159001(LeaveApplication1@1102159000 : Record 72083);
    VAR
      DailyAttendance@1102159001 : Record 72080;
      LeaveMaster@1102159002 : Record 72069;
    BEGIN
      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code", LeaveApplication1."Location Code");
      DailyAttendance.SETRANGE("Salary Plan Code", LeaveApplication1."Salary Plan Code");
      DailyAttendance.SETRANGE("Employee No", LeaveApplication1."Employee No.");
      DailyAttendance.SETRANGE("Attendance Date", LeaveApplication1."From Date", LeaveApplication1."To Date");
      IF DailyAttendance.FIND('-') THEN BEGIN
         REPEAT

      //     IF (DailyAttendance."Leave Code" = '') AND (DailyAttendance."Non Working Day" = FALSE) THEN
           IF (DailyAttendance."Leave Code" = '') THEN
           IF LeaveApplication1."Application Type" = LeaveApplication1."Application Type"::"Leave Application" THEN BEGIN
              DailyAttendance."In Time" := 0T;
              DailyAttendance."Out Time" := 0T;
              DailyAttendance."Hours Worked" := 0;
              LeaveApplication1.TESTFIELD("Leave Code");
              LeaveMaster.GET(LeaveApplication1."Leave Code",LeaveApplication1."Location Code",
                              LeaveApplication1."Salary Plan Code");

              IF LeaveApplication1."Full Day" THEN BEGIN
                 DailyAttendance."First Half Attendance Type"  := LeaveMaster."Mark As Full Day First Half";
                 DailyAttendance."Second Half Attendance Type" := LeaveMaster."Mark As Full Day Secod Half";
                 DailyAttendance."Leave Type" := DailyAttendance."Leave Type"::"Full Day";
              END;

              IF LeaveApplication1."First Half Day" THEN BEGIN
                 DailyAttendance."First Half Attendance Type"  := LeaveMaster."I'st Mark As First Half Day";
                 DailyAttendance."Second Half Attendance Type" := LeaveMaster."I'st Mark As Second Half Day";
                 DailyAttendance."Leave Type" := DailyAttendance."Leave Type"::"First Half Day";
              END;

              IF LeaveApplication1."Second Half Day" THEN BEGIN
                 DailyAttendance."First Half Attendance Type"  := LeaveMaster."II'nd Mark As First Half Day";
                 DailyAttendance."Second Half Attendance Type" := LeaveMaster."II'nd Mark As Second Half Day";
                 DailyAttendance."Leave Type" := DailyAttendance."Leave Type"::"Second Half Day";
              END;
              DailyAttendance."Leave Code" := LeaveApplication1."Leave Code";
              DailyAttendance."Manual Entry" := TRUE;
           END;

           IF DailyAttendance."Leave Code" <> '' THEN
           IF LeaveApplication1."Application Type" = LeaveApplication1."Application Type"::"Cancellation Application" THEN BEGIN
              IF LocationHRPayrollSetup."Default Attendance Type" IN [LocationHRPayrollSetup."Default Attendance Type"::" ",
                                                                      LocationHRPayrollSetup."Default Attendance Type"::Absent] THEN
      BEGIN
                 DailyAttendance."In Time" := 0T;
                 DailyAttendance."Out Time" := 0T;
              END;

              IF LocationHRPayrollSetup."Default Attendance Type" = LocationHRPayrollSetup."Default Attendance Type"::Present THEN BEGIN
                 DailyAttendance."In Time" := DailyAttendance."Actual Time In";
                 DailyAttendance."Out Time" := DailyAttendance."Actual Time Out";
              END;

              DailyAttendance."Leave Code" := '';
              DailyAttendance."Manual Entry" := FALSE;
              DailyAttendance."Leave Type" := DailyAttendance."Leave Type"::" ";
              DailyAttendance.VALIDATE("In Time");
              DailyAttendance.VALIDATE("Out Time");
            END;

           DailyAttendance."Leave Application No" := LeaveApplication1."Leave Requsition No.";
           DailyAttendance.VALIDATE("Leave Type");
           DailyAttendance.VALIDATE("First Half Attendance Type");
           DailyAttendance.VALIDATE("Second Half Attendance Type");

           DailyAttendance.MODIFY;

         UNTIL DailyAttendance.NEXT=0;

      LeaveApplication1.Status := LeaveApplication1.Status::Approved;
      LeaveApplication1.Processed := TRUE;
      LeaveApplication1.MODIFY;

      LeaveBalance.RESET;
      LeaveBalance.SETRANGE("Location Code",    LeaveApplication1."Location Code");
      LeaveBalance.SETRANGE("Salary Plan Code", LeaveApplication1."Salary Plan Code");
      LeaveBalance.SETRANGE("Leave Code",       LeaveApplication1."Leave Code");
      LeaveBalance.SETRANGE("Employee No",      LeaveApplication1."Employee No.");
      IF LeaveBalance.FIND('-') THEN
         REPEAT
           LeaveBalance.VALIDATE("Leave Opening Balance");
           LeaveBalance.MODIFY;
         UNTIL LeaveBalance.NEXT = 0;

      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72084 Leave Entitlement
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    LookupPageID=Page72116;
    DrillDownPageID=Page72116;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup" }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan" }
    { 3   ;   ;Leave Year Code     ;Code20        ;Editable=No }
    { 4   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN
                                                                   Name := Employee."First Name"+' '+Employee.Initials;
                                                              END;

                                                   SQL Data Type=Variant }
    { 5   ;   ;Name                ;Text50        ;Editable=No }
    { 6   ;   ;Probationary        ;Boolean        }
    { 7   ;   ;Leave Code          ;Code20        ;Editable=No }
    { 8   ;   ;Leave Opening Balance;Decimal      ;OnValidate=BEGIN
                                                                CALCFIELDS("Total Leave Eligible for Year", "Total Leave Availed");
                                                                "Total Leave Balance" := "Leave Opening Balance" + "Total Leave Eligible for Year";
                                                                "Leave Closing Balance" := ("Total Leave Balance" - ("Total Leave Availed" + "Total Leave Encashed"));
                                                              END;
                                                               }
    { 9   ;   ;Total Leave Eligible for Year;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Leave Credited"."No. of Leaves" WHERE (Location Code=FIELD(Location Code),
                                                                                                           Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                           Employee No=FIELD(Employee No),
                                                                                                           Leave Code=FIELD(Leave Code),
                                                                                                           No. of Leaves=FILTER(<>0),
                                                                                                           Leave Year Code=FIELD(Leave Year Code)));
                                                   Editable=No }
    { 10  ;   ;Total Leave Balance ;Decimal       ;Editable=No }
    { 11  ;   ;Total Leave Availed ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Leave Availed" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Leave Code=FIELD(Leave Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Leave Year Code=FIELD(Leave Year Code)));
                                                   Editable=No }
    { 12  ;   ;Total Leave Encashed;Decimal       ;Editable=No }
    { 13  ;   ;Leave Closing Balance;Decimal      ;OnValidate=BEGIN
                                                                CALCFIELDS("Total Leave Eligible for Year", "Total Leave Availed");
                                                                "Total Leave Balance"   := "Leave Opening Balance" + "Total Leave Eligible for Year";
                                                                "Leave Closing Balance" := ("Total Leave Balance" - ("Total Leave Availed" + "Total Leave Encashed"));
                                                              END;

                                                   Editable=No }
    { 14  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter }
    { 15  ;   ;Synchronize         ;Boolean        }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Leave Year Code,Employee No,Leave Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000000 : Record 5200;

    BEGIN
    END.
  }
}

OBJECT Table 72085 Leave Credited
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Leave Credited;
    LookupPageID=Page72117;
    DrillDownPageID=Page72117;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Leave Start Date    ;Date          ;CaptionML=ENU=Leave Start Date }
    { 4   ;   ;Leave End Date      ;Date          ;CaptionML=ENU=Leave End Date }
    { 5   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 6   ;   ;Leave Code          ;Code20        ;CaptionML=ENU=Leave Code }
    { 7   ;   ;No. of Leaves       ;Decimal       ;CaptionML=ENU=No. of Leaves }
    { 8   ;   ;Active              ;Boolean       ;CaptionML=ENU=Active }
    { 9   ;   ;Leave Year Code     ;Code20        ;CaptionML=ENU=Leave Year Code;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Employee No,Leave Code,Leave Start Date,Leave End Date,Leave Year Code;
                                                   Clustered=Yes }
    {    ;No. of Leaves                           ;SumIndexFields=No. of Leaves }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 72086 Leave Encashment
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Leave Encashment;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Leave Year Code     ;Code20        ;CaptionML=ENU=Leave Year Code }
    { 4   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 5   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 6   ;   ;Leave Code          ;Code20        ;TableRelation="Leave Master" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Leave Code }
    { 7   ;   ;No of Leave to Encash;Decimal      ;OnValidate=BEGIN
                                                                IF "No of Leave to Encash" > "Encash Leave Balance" THEN
                                                                  ERROR('No of Leave Encash is Greater than Leave Balance');

                                                                "Encashment Amount" := "No of Leave to Encash" * "Earnings Per Day";
                                                                "Encashment Amount" := ROUND("Encashment Amount",1,'=');
                                                              END;

                                                   CaptionML=ENU=No of Leave to Encash }
    { 8   ;   ;Encash Leave Balance;Decimal       ;CaptionML=ENU=Encash Leave Balance }
    { 9   ;   ;Earnings Per Day    ;Decimal       ;CaptionML=ENU=Earnings Per Day }
    { 10  ;   ;Encashment Amount   ;Decimal       ;CaptionML=ENU=Encashment Amount }
    { 11  ;   ;Pay Date            ;Date          ;CaptionML=ENU=Pay Date }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Leave Year Code,Employee No,Leave Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72087 Employee Loan
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Loan Id" = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Loan No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Loan No.",xRec."No. Series",0D,"Loan Id","No. Series");
               END;
             END;

    CaptionML=ENU=Employee Loan;
    LookupPageID=Page72119;
    DrillDownPageID=Page72119;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Loan Id             ;Code20        ;OnValidate=BEGIN
                                                                IF "Loan Id" <> xRec."Loan Id" THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Loan No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Loan Id }
    { 4   ;   ;Loan Code           ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code),
                                                                                       Loan Element=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF PayElements.GET("Loan Code","Location Code","Salary Plan Code") THEN BEGIN
                                                                  "Purpose of loan" := PayElements.Description;
                                                                  "Total Loan Amount" := PayElements.Amount;
                                                                  "Loan Balance Amount" := "Total Loan Amount";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Loan Code }
    { 5   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  Name := Employee."First Name";
                                                                  "Location Code" := Employee."Location Code";
                                                                  "Salary Plan Code" := Employee."Salary Plan Code";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 7   ;   ;Total Loan Amount   ;Decimal       ;CaptionML=ENU=Total Loan Amount }
    { 8   ;   ;Loan Type           ;Option        ;CaptionML=ENU=Loan Type;
                                                   OptionCaptionML=ENU=" ,Interest Free,Flat Rate,Dimnishing Rate";
                                                   OptionString=[ ,Interest Free,Flat Rate,Dimnishing Rate] }
    { 9   ;   ;Rate of Interest    ;Decimal       ;CaptionML=ENU=Rate of Interest }
    { 10  ;   ;No of Installment   ;Integer       ;CaptionML=ENU=No of Installment }
    { 11  ;   ;Purpose of loan     ;Text50        ;CaptionML=ENU=Purpose of loan }
    { 12  ;   ;Loan Ref. No        ;Code50        ;CaptionML=ENU=Loan Ref. No }
    { 13  ;   ;Loan Ref. Date      ;Date          ;CaptionML=ENU=Loan Ref. Date }
    { 14  ;   ;Loan Sanction Date  ;Date          ;CaptionML=ENU=Loan Sanction Date }
    { 15  ;   ;Loan Starting Date  ;Date          ;OnValidate=BEGIN
                                                                "Loan End Date" := "Loan Starting Date";

                                                                IF "Loan Starting Date" < "Loan Sanction Date" THEN
                                                                  ERROR('Enter Valid Date of Loan Sanction Date,\ It Should not lessthan the Loan Starting Date');
                                                              END;

                                                   CaptionML=ENU=Loan Starting Date }
    { 16  ;   ;Loan End Date       ;Date          ;CaptionML=ENU=Loan End Date }
    { 17  ;   ;Installment Amount  ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Installment Amount");

                                                                "No of Installment" := ROUND(("Total Loan Amount" / "Installment Amount"),1,'>');
                                                              END;

                                                   CaptionML=ENU=Installment Amount }
    { 18  ;   ;Total Interest Amount;Decimal      ;CaptionML=ENU=Total Interest Amount;
                                                   Editable=No }
    { 19  ;   ;Loan Balance Amount ;Decimal       ;CaptionML=ENU=Loan Balance Amount;
                                                   Editable=No }
    { 20  ;   ;No Deduction Request;Boolean       ;CaptionML=ENU=No Deduction Request }
    { 21  ;   ;Partial Deduction   ;Boolean       ;CaptionML=ENU=Partial Deduction }
    { 22  ;   ;Completed           ;Boolean       ;CaptionML=ENU=Completed }
    { 23  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 24  ;   ;Loan Date Interval  ;DateFormula   ;CaptionML=ENU=Loan Date Interval;
                                                   Editable=No }
    { 25  ;   ;Opening Loan Amount ;Decimal       ;OnValidate=BEGIN
                                                                "Total Loan Amount" := "Opening Loan Amount";

                                                                IF "Installment Amount" > 0 THEN
                                                                  "No of Installment" := ROUND(("Total Loan Amount" / "Installment Amount"),1,'>');

                                                                CALCFIELDS("Total Loans Deducted");
                                                                "Closing Balance Amount" := "Opening Loan Amount" - "Loans Deducted";
                                                              END;

                                                   CaptionML=ENU=Opening Loan Amount }
    { 26  ;   ;Total Loans Deducted;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Employee Loan Details"."EMI Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                               Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                               Loan Code=FIELD(Loan Code),
                                                                                                               Employee No=FIELD(Employee No),
                                                                                                               Loan Closed=FILTER(Yes)));
                                                   CaptionML=ENU=Total Loans Deducted;
                                                   Editable=No }
    { 27  ;   ;Closing Balance Amount;Decimal     ;OnValidate=BEGIN
                                                                CALCFIELDS("Total Loans Deducted");
                                                                "Closing Balance Amount" := "Opening Loan Amount" - "Loans Deducted";

                                                                IF "Closing Balance Amount" <= 0 THEN
                                                                  Completed := TRUE;
                                                              END;

                                                   CaptionML=ENU=Closing Balance Amount;
                                                   Editable=No }
    { 28  ;   ;Loan Plan           ;Option        ;OnValidate=BEGIN
                                                                IF "Loan Plan" = "Loan Plan"::Weekly THEN
                                                                  EVALUATE("Loan Date Interval",'1W');

                                                                IF "Loan Plan" = "Loan Plan"::FortNight THEN
                                                                  EVALUATE("Loan Date Interval",'15D');

                                                                IF "Loan Plan" = "Loan Plan"::Monthly THEN
                                                                  EVALUATE("Loan Date Interval",'1M');
                                                              END;

                                                   CaptionML=ENU=Loan Plan;
                                                   OptionCaptionML=ENU=" ,Weekly,FortNight,Monthly";
                                                   OptionString=[ ,Weekly,FortNight,Monthly] }
    { 29  ;   ;Loans Deducted      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Element Code=FIELD(Loan Code)));
                                                   CaptionML=ENU=Loans Deducted;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Loan Id                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000005 : Record 72052;
      NoSeriesMgt@1000000004 : Codeunit 396;
      Employee@1000000003 : Record 5200;
      EmployeeLoan@1102159002 : Record 72087;
      PayElements@1102159001 : Record 72060;
      EndDate@1000000002 : Date;

    PROCEDURE AssistEdit@2(OldEmployeeLoan@1000 : Record 72087) : Boolean;
    BEGIN
      WITH EmployeeLoan DO BEGIN
        EmployeeLoan := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Loan No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Loan No.",OldEmployeeLoan."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Loan Id");
          Rec := EmployeeLoan;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72088 Employee Loan Details
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Employee Loan Details;
    LookupPageID=Page72120;
    DrillDownPageID=Page72120;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                                  "Location Code" := Employee."Location Code";
                                                                  "Salary Plan Code" := Employee."Salary Plan Code";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 4   ;   ;Loan Code           ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code),
                                                                                       Loan Element=CONST(Yes));
                                                   CaptionML=ENU=Loan Code }
    { 5   ;   ;Salary Process Date ;Date          ;CaptionML=ENU=Salary Process Date }
    { 6   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 7   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 8   ;   ;Loan Amount         ;Decimal       ;CaptionML=ENU=Loan Amount }
    { 9   ;   ;Payment Due         ;Decimal       ;CaptionML=ENU=Payment Due }
    { 10  ;   ;EMI Deducted        ;Decimal       ;CaptionML=ENU=EMI Deducted }
    { 11  ;   ;EMI Amount          ;Decimal       ;CaptionML=ENU=EMI Amount }
    { 12  ;   ;Interest            ;Decimal       ;CaptionML=ENU=Interest }
    { 13  ;   ;Principal           ;Decimal       ;CaptionML=ENU=Principal }
    { 14  ;   ;Balance Amount      ;Decimal       ;OnValidate=BEGIN
                                                                {
                                                                IF "Repayment Date" = 0 THEN
                                                                  "Loan Closed" := TRUE;
                                                                }
                                                              END;

                                                   CaptionML=ENU=Balance Amount }
    { 15  ;   ;Repayment Date      ;Date          ;CaptionML=ENU=Repayment Date }
    { 16  ;   ;Loan Closed         ;Boolean       ;CaptionML=ENU=Loan Closed }
    { 17  ;   ;Loan Deduction Interval;DateFormula;CaptionML=ENU=Loan Deduction Interval }
    { 18  ;   ;LoanId              ;Code20        ;CaptionML=ENU=LoanId }
  }
  KEYS
  {
    {    ;Employee No,Loan Code,LoanId,Line No.   ;Clustered=Yes }
    {    ;Location Code,Salary Plan Code,Employee No,Loan Code,Loan Closed;
                                                   SumIndexFields=EMI Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1102159000 : Record 5200;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72089 Misc Add/Deductions
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Misc Add/Deductions;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Element Code }
    { 10  ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 11  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly;
                                                   OptionString=Monthly,Yearly;
                                                   Editable=No }
    { 12  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement;
                                                   Editable=No }
    { 13  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 14  ;   ;Created Date        ;Date          ;CaptionML=ENU=Created Date;
                                                   Editable=No }
    { 15  ;   ;User Id             ;Code20        ;CaptionML=ENU=User Id }
    { 16  ;   ;Element Type        ;Option        ;CaptionML=ENU=Element Type;
                                                   OptionCaptionML=ENU=" ,OT Calculation";
                                                   OptionString=[ ,OT Calculation] }
    { 17  ;   ;Total OT Hours      ;Decimal       ;CaptionML=ENU=Total OT Hours }
    { 18  ;   ;OT Type             ;Option        ;CaptionML=ENU=OT Type;
                                                   OptionCaptionML=ENU=" ,Fixed Amount,Hourly Based";
                                                   OptionString=[ ,Fixed Amount,Hourly Based] }
    { 19  ;   ;OT Fixed Amount     ;Decimal       ;CaptionML=ENU=OT Fixed Amount }
    { 20  ;   ;Paid Category       ;Option        ;CaptionML=ENU=Paid Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly,Daily;
                                                   OptionString=Monthly,Yearly,Daily }
    { 30  ;   ;Gender              ;Option        ;OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 31  ;   ;Pay Category        ;Option        ;OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary] }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee No,Pay Element Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72090 Processed Salary
{
  OBJECT-PROPERTIES
  {
    Date=05-06-18;
    Time=11:32:29;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Employee No;
    CaptionML=ENU=Processed Salary;
    LookupPageID=Page72124;
    DrillDownPageID=Page72124;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Paid Category       ;Option        ;CaptionML=ENU=Paid Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly,Daily;
                                                   OptionString=Monthly,Yearly,Daily }
    { 11  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 12  ;   ;Fixed / Percent     ;Option        ;CaptionML=ENU=Fixed / Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent }
    { 13  ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 14  ;   ;Base Pay Elements   ;Text250       ;CaptionML=ENU=Base Pay Elements;
                                                   Editable=No }
    { 15  ;   ;Percentage (%)      ;Decimal       ;CaptionML=ENU=Percentage (%) }
    { 16  ;   ;Included In Pay Slip;Boolean       ;CaptionML=ENU=Included In Pay Slip }
    { 17  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 18  ;   ;Total Days in a Month;Integer      ;CaptionML=ENU=Total Days in a Month }
    { 19  ;   ;Paid Days           ;Decimal       ;CaptionML=ENU=Paid Days }
    { 20  ;   ;Actual Amount       ;Decimal       ;CaptionML=ENU=Actual Amount }
    { 21  ;   ;Payable Amount      ;Decimal       ;CaptionML=ENU=Payable Amount }
    { 22  ;   ;PF / ESI / PT Gross Earnings;Decimal;
                                                   CaptionML=ENU=PF / ESI / PT Gross Earnings }
    { 23  ;   ;EPS Gross Earnings  ;Decimal       ;CaptionML=ENU=EPS Gross Earnings }
    { 24  ;   ;Account No.         ;Code20        ;CaptionML=ENU=Account No. }
    { 25  ;   ;Employee VPF Amount ;Decimal       ;CaptionML=ENU=Employee VPF Amount }
    { 26  ;   ;Employee PF / ESI Amount;Decimal   ;CaptionML=ENU=Employee PF / ESI Amount }
    { 27  ;   ;Employer PF / ESI Amount;Decimal   ;CaptionML=ENU=Employer PF / ESI Amount }
    { 28  ;   ;Employer EPS Amount ;Decimal       ;CaptionML=ENU=Employer EPS Amount }
    { 29  ;   ;PF Admin Charges Amount;Decimal    ;CaptionML=ENU=PF Admin Charges Amount }
    { 30  ;   ;PF EDLI Amount      ;Decimal       ;CaptionML=ENU=PF EDLI Amount }
    { 31  ;   ;PF RIFA Amount      ;Decimal       ;CaptionML=ENU=PF RIFA Amount }
    { 32  ;   ;Salary Processed    ;Boolean       ;CaptionML=ENU=Salary Processed }
    { 33  ;   ;Salary Posted       ;Boolean       ;CaptionML=ENU=Salary Posted }
    { 34  ;   ;Loan                ;Boolean       ;CaptionML=ENU=Loan }
    { 35  ;   ;Payment Type        ;Option        ;CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Full Payment,First Payment,Second Payment;
                                                   OptionString=Full Payment,First Payment,Second Payment }
    { 36  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 37  ;   ;Branch Code         ;Code10        ;CaptionML=ENU=Branch Code }
    { 38  ;   ;PF Applicable       ;Boolean       ;CaptionML=ENU=PF Applicable }
    { 39  ;   ;Loan Id             ;Code20        ;TableRelation="Employee Loans";
                                                   CaptionML=ENU=Loan Id }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee No,Pay Element Code;
                                                   Clustered=Yes }
    {    ;Sorting Order,Pay Element Code,Pay Type  }
    {    ;Pay Type                                ;SumIndexFields=Actual Amount,Payable Amount }
    {    ;Employee No                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72091 Revision Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Pay Revision Id" = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Pay Revision No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Pay Revision No.",xRec."No. Series",0D,"Pay Revision Id","No. Series");
               END;

               IF HRPayrollSetup.GET(USERID) THEN BEGIN
                 "Location Code" := HRPayrollSetup."Location Code";
                 "Salary Plan Code" := HRPayrollSetup."Salary Plan Code";
               END;

               "Pay Revision Processing Date" := TODAY;
             END;

    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 RevisionLine.RESET;
                 RevisionLine.SETRANGE("Pay Revision Id", "Pay Revision Id");
                 IF RevisionLine.FINDFIRST THEN BEGIN
                   RevisionLine.LOCKTABLE;
                   RevisionLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Revision Header;
    LookupPageID=Page72129;
    DrillDownPageID=Page72129;
  }
  FIELDS
  {
    { 1   ;   ;Pay Revision Id     ;Code20        ;OnValidate=BEGIN
                                                                IF "Pay Revision Id" <> xRec."Pay Revision Id" THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Pay Revision No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Pay Revision Id }
    { 2   ;   ;Pay Revision Processing Date;Date  ;CaptionML=ENU=Pay Revision Processing Date }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 5   ;   ;New Effective Date  ;Date          ;CaptionML=ENU=New Effective Date }
    { 6   ;   ;Revision Amount     ;Decimal       ;CaptionML=ENU=Revision Amount }
    { 7   ;   ;Revision Percent    ;Decimal       ;CaptionML=ENU=Revision Percent }
    { 8   ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 9   ;   ;Based on            ;Option        ;CaptionML=ENU=Based on;
                                                   OptionCaptionML=ENU=Amount,Percent;
                                                   OptionString=Amount,Percent }
    { 10  ;   ;Arrears Starting Date;Date         ;CaptionML=ENU=Arrears Starting Date }
    { 11  ;   ;Arrears Ending Date ;Date          ;CaptionML=ENU=Arrears Ending Date }
    { 12  ;   ;Arrears Generated   ;Boolean       ;CaptionML=ENU=Arrears Generated }
    { 13  ;   ;VDA Increase Amount ;Decimal       ;CaptionML=ENU=VDA Increase Amount }
    { 14  ;   ;VDA Eligible Max Amount;Decimal    ;CaptionML=ENU=VDA Eligible Max Amount }
  }
  KEYS
  {
    {    ;Pay Revision Id                         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000004 : Record 72052;
      NoSeriesMgt@1000000001 : Codeunit 396;
      RevisionLine@1000000002 : Record 72092;
      PayElements@1000000003 : Record 72060;

    PROCEDURE AssistEdit@2(OldRevisionHeader@1000 : Record 72091) : Boolean;
    VAR
      RevisionHeader@1001 : Record 72091;
    BEGIN
      WITH RevisionHeader DO BEGIN
        RevisionHeader := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Pay Revision No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Pay Revision No.",OldRevisionHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Pay Revision Id");
          Rec := RevisionHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72092 Revision Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Revision Line;
  }
  FIELDS
  {
    { 1   ;   ;Pay Revision Id     ;Code20        ;CaptionML=ENU=Pay Revision Id }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Last Effective Date ;Date          ;CaptionML=ENU=Last Effective Date }
    { 5   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements";
                                                   CaptionML=ENU=Pay Element Code }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 7   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 8   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 9   ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement;
                                                   Editable=No }
    { 10  ;   ;Fixed/Percent       ;Option        ;CaptionML=ENU=Fixed/Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent;
                                                   Editable=No }
    { 11  ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount;
                                                   Editable=No }
    { 12  ;   ;Base Pay Elements   ;Text250       ;CaptionML=ENU=Base Pay Elements }
    { 13  ;   ;Last Drawn Amount   ;Decimal       ;CaptionML=ENU=Last Drawn Amount }
    { 14  ;   ;Last Drawn Percent (%);Decimal     ;CaptionML=ENU=Last Drawn Percent (%) }
    { 15  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order;
                                                   Editable=No }
    { 16  ;   ;New Effective Date  ;Date          ;CaptionML=ENU=New Effective Date }
    { 17  ;   ;Revised Amount      ;Decimal       ;OnValidate=BEGIN
                                                                "Difference Amount" := "Revised Amount" - "Last Drawn Amount";
                                                              END;

                                                   CaptionML=ENU=Revised Amount }
    { 18  ;   ;Revised Percent (%) ;Decimal       ;OnValidate=BEGIN
                                                                "Difference Percent (%)" := "Revised Percent (%)" - "Last Drawn Percent (%)";
                                                              END;

                                                   CaptionML=ENU=Revised Percent (%) }
    { 19  ;   ;Difference Amount   ;Decimal       ;OnValidate=BEGIN
                                                                "Revised Amount" := "Last Drawn Amount" + "Difference Amount";
                                                              END;

                                                   CaptionML=ENU=Difference Amount }
    { 20  ;   ;Difference Percent (%);Decimal     ;CaptionML=ENU=Difference Percent (%) }
    { 21  ;   ;Old Grade Code      ;Code20        ;TableRelation=Grades;
                                                   CaptionML=ENU=Old Grade Code }
    { 22  ;   ;New Grade Code      ;Code20        ;TableRelation=Grades;
                                                   CaptionML=ENU=New Grade Code }
    { 23  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 24  ;   ;Posted Date         ;Date          ;CaptionML=ENU=Posted Date }
    { 25  ;   ;Pay Revised         ;Boolean       ;CaptionML=ENU=Pay Revised }
    { 26  ;   ;Excluded In Pay Slip;Boolean       ;CaptionML=ENU=Excluded In Pay Slip }
    { 27  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary] }
  }
  KEYS
  {
    {    ;Pay Revision Id,Location Code,Salary Plan Code,Last Effective Date,Pay Element Code,Employee No;
                                                   Clustered=Yes }
    {    ;Employee No,Sorting Order                }
    {    ;Last Drawn Amount,Employee No            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72093 Arrears Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 ArrearsLine.RESET;
                 ArrearsLine.SETRANGE("Arrears Id", "Arrears Id");
                 IF ArrearsLine.FINDFIRST THEN BEGIN
                   ArrearsLine.LOCKTABLE;
                   ArrearsLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Arrears Header;
    LookupPageID=Page72141;
    DrillDownPageID=Page72141;
  }
  FIELDS
  {
    { 1   ;   ;Arrears Id          ;Code20        ;CaptionML=ENU=Arrears Id }
    { 2   ;   ;Arrears Process Date;Date          ;CaptionML=ENU=Arrears Process Date;
                                                   Editable=No }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code;
                                                   Editable=No }
    { 5   ;   ;Pay Revision Id     ;Code20        ;CaptionML=ENU=Pay Revision Id;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Arrears Id,Arrears Process Date,Location Code,Salary Plan Code,Pay Revision Id;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ArrearsLine@1000000000 : Record 72094;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72094 Arrears Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Arrears Line;
    LookupPageID=Page72136;
    DrillDownPageID=Page72136;
  }
  FIELDS
  {
    { 1   ;   ;Arrears Id          ;Code20        ;CaptionML=ENU=Arrears Id }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 5   ;   ;Salary Cycle Code   ;Code20        ;CaptionML=ENU=Salary Cycle Code }
    { 6   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 7   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 8   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 9   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 10  ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 11  ;   ;Pay Element Code    ;Code20        ;TableRelation="Professional Tax Line";
                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 12  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 13  ;   ;Total Days in a Month;Integer      ;CaptionML=ENU=Total Days in a Month }
    { 14  ;   ;Paid Days           ;Decimal       ;CaptionML=ENU=Paid Days }
    { 15  ;   ;Actual Amount       ;Decimal       ;CaptionML=ENU=Actual Amount }
    { 16  ;   ;Payable Amount      ;Decimal       ;CaptionML=ENU=Payable Amount }
    { 17  ;   ;Difference Amount / Percent(%);Decimal;
                                                   CaptionML=ENU=Difference Amount / Percent(%) }
    { 18  ;   ;Arrear Amount       ;Decimal       ;CaptionML=ENU=Arrear Amount }
    { 19  ;   ;PF Gross Earnings   ;Decimal       ;CaptionML=ENU=PF Gross Earnings }
    { 20  ;   ;Employee PF Amount  ;Decimal       ;CaptionML=ENU=Employee PF Amount }
    { 21  ;   ;Employer PF Amount  ;Decimal       ;CaptionML=ENU=Employer PF Amount }
    { 22  ;   ;Employer EPS Amount ;Decimal       ;CaptionML=ENU=Employer EPS Amount }
    { 23  ;   ;PF Admin Charges Amount;Decimal    ;CaptionML=ENU=PF Admin Charges Amount }
    { 24  ;   ;PF EDLI Amount      ;Decimal       ;CaptionML=ENU=PF EDLI Amount }
    { 25  ;   ;PF RIFA Amount      ;Decimal       ;CaptionML=ENU=PF RIFA Amount }
    { 26  ;   ;Fixed/Percent       ;Option        ;CaptionML=ENU=Fixed/Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Arrears Id,Line No.                     ;Clustered=Yes }
    {    ;Employee No                             ;SumIndexFields=Arrear Amount }
    {    ;Salary Cycle Code,Employee No,Sorting Order }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72095 Final Settlement Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 FinalSettlementLine.RESET;
                 FinalSettlementLine.SETRANGE("Location Code", "Location Code");
                 FinalSettlementLine.SETRANGE("Salary Plan Code", "Salary Plan Code");
                 FinalSettlementLine.SETRANGE("Employee No", "Employee No.");
                 IF FinalSettlementLine.FINDFIRST THEN BEGIN
                   FinalSettlementLine.LOCKTABLE;
                   FinalSettlementLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Final Settlement Header;
    LookupPageID=Page72136;
    DrillDownPageID=Page72136;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code)) }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date;
                                                   Editable=No }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date;
                                                   Editable=No }
    { 6   ;   ;Month               ;Integer       ;CaptionML=ENU=Month;
                                                   Editable=No }
    { 7   ;   ;Year                ;Integer       ;CaptionML=ENU=Year;
                                                   Editable=No }
    { 8   ;   ;Employee No.        ;Code20        ;TableRelation=Employee WHERE (Location Code=FIELD(Location Code),
                                                                                 Salary Plan Code=FIELD(Salary Plan Code),
                                                                                 Status=CONST(Inactive));
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN BEGIN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                                  "Date of Joining" := Employee."Employment Date";
                                                                  "Date of Leaving" := Employee."Date of Relieving";
                                                                  Month := DATE2DMY("Date of Leaving",2);
                                                                  Year := DATE2DMY("Date of Leaving",3);
                                                                  "Grautity Service Year" := ROUND((("Date of Leaving" - "Date of Joining") / 365.2364),1,'>');
                                                                END;

                                                                LeaveMaster.RESET;
                                                                LeaveMaster.SETRANGE("Location Code", "Location Code");
                                                                LeaveMaster.SETRANGE("Salary Plan Code", "Salary Plan Code");
                                                                LeaveMaster.SETRANGE("Encash Leave", TRUE);
                                                                IF LeaveMaster.FINDFIRST THEN
                                                                  REPEAT
                                                                    LeaveEntitlement.RESET;
                                                                    LeaveEntitlement.SETRANGE("Location Code", "Location Code");
                                                                    LeaveEntitlement.SETRANGE("Salary Plan Code", "Salary Plan Code");
                                                                    LeaveEntitlement.SETRANGE("Leave Code", LeaveMaster."Leave Code");
                                                                    LeaveEntitlement.SETRANGE("Employee No", "Employee No.");
                                                                    IF LeaveEntitlement.FINDFIRST THEN
                                                                      REPEAT
                                                                        "Total Encash Leave" += LeaveEntitlement."Leave Closing Balance";
                                                                      UNTIL LeaveEntitlement.NEXT = 0;
                                                                  UNTIL LeaveMaster.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 9   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 10  ;   ;Date of Joining     ;Date          ;CaptionML=ENU=Date of Joining;
                                                   Editable=No }
    { 11  ;   ;Date of Leaving     ;Date          ;CaptionML=ENU=Date of Leaving;
                                                   Editable=No }
    { 12  ;   ;Grautity Service Year;Integer      ;CaptionML=ENU=Grautity Service Year;
                                                   Editable=No }
    { 13  ;   ;Total Encash Leave  ;Decimal       ;CaptionML=ENU=Total Encash Leave;
                                                   Editable=No }
    { 14  ;   ;Days Worked         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Payable Days" WHERE (Location Code=FIELD(Location Code),
                                                                                                            Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                            Employee No=FIELD(Employee No.),
                                                                                                            Salary Cyclic Code=FIELD(Salary Cycle Code)));
                                                   CaptionML=ENU=Days Worked;
                                                   Editable=No }
    { 15  ;   ;Total Gross Earnings;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Final Settlement Line"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                   Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                                   Employee No=FIELD(Employee No.),
                                                                                                                   Pay Type=FILTER(<>Deduction)));
                                                   CaptionML=ENU=Total Gross Earnings;
                                                   Editable=No }
    { 16  ;   ;Total Deductions    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Final Settlement Line"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                    Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                                    Employee No=FIELD(Employee No.),
                                                                                                                    Pay Type=CONST(Deduction)));
                                                   OnValidate=BEGIN
                                                                "Net Amount" := "Total Gross Earnings" - "Total Deductions";
                                                              END;

                                                   CaptionML=ENU=Total Deductions;
                                                   Editable=No }
    { 17  ;   ;Net Amount          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Final Settlement Line"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                   Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                                   Employee No=FIELD(Employee No.)));
                                                   CaptionML=ENU=Net Amount;
                                                   Editable=No }
    { 18  ;   ;Journal Template Name;Code20       ;CaptionML=ENU=Journal Template Name }
    { 19  ;   ;Journal Batch Name  ;Code20        ;CaptionML=ENU=Journal Batch Name }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 21  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000000 : Record 5200;
      LeaveMaster@1000000001 : Record 72069;
      LeaveEntitlement@1000000002 : Record 72084;
      FinalSettlementLine@1000000003 : Record 72096;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72096 Final Settlement Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Final Settlement Line;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements";
                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Paid Category       ;Option        ;CaptionML=ENU=Paid Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly;
                                                   OptionString=Monthly,Yearly }
    { 11  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 12  ;   ;Fixed / Percent     ;Option        ;CaptionML=ENU=Fixed / Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent }
    { 13  ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 14  ;   ;Base Pay Elements   ;Text250       ;CaptionML=ENU=Base Pay Elements;
                                                   Editable=No }
    { 15  ;   ;Percentage (%)      ;Decimal       ;CaptionML=ENU=Percentage (%) }
    { 16  ;   ;Included In Pay Slip;Boolean       ;CaptionML=ENU=Included In Pay Slip }
    { 17  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 18  ;   ;Total Days in a Month;Integer      ;CaptionML=ENU=Total Days in a Month }
    { 19  ;   ;Paid Days           ;Decimal       ;CaptionML=ENU=Paid Days }
    { 20  ;   ;Actual Amount       ;Decimal       ;OnValidate=BEGIN
                                                                IF "Pay Type" = "Pay Type"::Deduction THEN
                                                                  "Actual Amount" := - "Actual Amount";
                                                              END;

                                                   CaptionML=ENU=Actual Amount }
    { 21  ;   ;Payable Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Pay Type" = "Pay Type"::Deduction THEN
                                                                  "Payable Amount" := - "Payable Amount";
                                                              END;

                                                   CaptionML=ENU=Payable Amount }
    { 22  ;   ;PF / ESI / PT Gross Earnings;Decimal;
                                                   CaptionML=ENU=PF / ESI / PT Gross Earnings }
    { 23  ;   ;EPS Gross Earnings  ;Decimal       ;CaptionML=ENU=EPS Gross Earnings }
    { 24  ;   ;Account No.         ;Code20        ;CaptionML=ENU=Account No. }
    { 25  ;   ;Employee VPF Amount ;Decimal       ;CaptionML=ENU=Employee VPF Amount }
    { 26  ;   ;Employee PF / ESI Amount;Decimal   ;CaptionML=ENU=Employee PF / ESI Amount }
    { 27  ;   ;Employer PF / ESI Amount;Decimal   ;CaptionML=ENU=Employer PF / ESI Amount }
    { 28  ;   ;Employer EPS Amount ;Decimal       ;CaptionML=ENU=Employer EPS Amount }
    { 29  ;   ;PF Admin Charges Amount;Decimal    ;CaptionML=ENU=PF Admin Charges Amount }
    { 30  ;   ;PF EDLI Amount      ;Decimal       ;CaptionML=ENU=PF EDLI Amount }
    { 31  ;   ;PF RIFA Amount      ;Decimal       ;CaptionML=ENU=PF RIFA Amount }
    { 32  ;   ;Salary Processed    ;Boolean       ;CaptionML=ENU=Salary Processed }
    { 33  ;   ;Salary Posted       ;Boolean       ;CaptionML=ENU=Salary Posted }
    { 34  ;   ;Loan                ;Boolean       ;CaptionML=ENU=Loan }
    { 35  ;   ;Payment Type        ;Option        ;CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Full Payment,First Payment,Second Payment;
                                                   OptionString=Full Payment,First Payment,Second Payment }
    { 36  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary] }
    { 37  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee No,Pay Element Code;
                                                   Clustered=Yes }
    {    ;Pay Type,Sorting Order                  ;SumIndexFields=Payable Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72097 Posted Daily Attendance
{
  OBJECT-PROPERTIES
  {
    Date=05-06-18;
    Time=11:33:39;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Salary Cyclic Code,Employee No,Name;
    CaptionML=ENU=Daily Attendance;
    LookupPageID=Page72112;
    DrillDownPageID=Page72112;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cyclic Code }
    { 4   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 5   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 6   ;   ;Attendance Date     ;Date          ;CaptionML=ENU=Attendance Date }
    { 7   ;   ;In Time             ;Time          ;OnValidate=BEGIN
                                                                VALIDATE("Out Time");
                                                              END;

                                                   CaptionML=ENU=In Time }
    { 8   ;   ;Out Time            ;Time          ;OnValidate=VAR
                                                                LateComingDuration@1102159000 : Integer;
                                                              BEGIN
                                                                IF "Shift Code" <> '' THEN BEGIN
                                                                  Shift.GET("Shift Code","Location Code","Salary Plan Code");

                                                                  IF ("In Time" <> 0T) OR ("Out Time" = 0T) THEN
                                                                    IF Shift."Late Coming Applicable" THEN
                                                                      IF "In Time" > Shift."Late Coming Time Starts From" THEN BEGIN
                                                                        LateComingDuration := "In Time" - Shift."Late Coming Time Starts From";
                                                                        "Late Coming Hours" := TotalHoursCalculation("In Time" - Shift."Late Coming Time Starts From");
                                                                      END;
                                                                END;

                                                                IF ("In Time" = 0T) AND ("Out Time" = 0T) THEN BEGIN
                                                                  "Late Coming Hours" := 0;
                                                                  "Early Going Hours" := 0;
                                                                  "Early OT Hours" := 0;

                                                                  "Total Permission In Mins" := 0;
                                                                  "Total OT In Mins" := 0;
                                                                  "Hours Worked" := 0;
                                                                  "Total Hours Worked" := 0;
                                                                END;

                                                                IF ("In Time" <> 0T) AND ("Out Time" <> 0T) THEN
                                                                  CalculateAllHours;

                                                                IF NOT "Non Working Day" THEN
                                                                  IF ("In Time" = 0T) AND ("Out Time" = 0T) THEN BEGIN
                                                                    "Hours Worked" := 0;
                                                                    "Total Hours Worked" := 0;
                                                                    "First Half Attendance Type" := "First Half Attendance Type"::Absent;
                                                                    "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
                                                                    VALIDATE("First Half Attendance Type");
                                                                    VALIDATE("Second Half Attendance Type");
                                                                  END;

                                                                IF "Weekly Off Status" THEN BEGIN
                                                                  "First Half Attendance Type" := "First Half Attendance Type"::"Weekly Off";
                                                                  "Second Half Attendance Type" := "Second Half Attendance Type"::"Weekly Off";
                                                                  VALIDATE("First Half Attendance Type");
                                                                  VALIDATE("Second Half Attendance Type");
                                                                END;

                                                                IF "Holiday Status" THEN BEGIN
                                                                  "First Half Attendance Type" := "First Half Attendance Type"::Holiday;
                                                                  "Second Half Attendance Type" := "Second Half Attendance Type"::Holiday;
                                                                  VALIDATE("First Half Attendance Type");
                                                                  VALIDATE("Second Half Attendance Type");
                                                                END;

                                                                IF "Lay Off (Yes/No)" THEN
                                                                  VALIDATE("Lay Off (Yes/No)");
                                                              END;

                                                   CaptionML=ENU=Out Time }
    { 9   ;   ;Hours Worked        ;Decimal       ;CaptionML=ENU=Hours Worked;
                                                   Editable=No }
    { 10  ;   ;Actual Hrs          ;Decimal       ;CaptionML=ENU=Actual Hrs;
                                                   Editable=No }
    { 11  ;   ;Total OT In Mins    ;Decimal       ;CaptionML=ENU=Total OT In Mins;
                                                   Editable=No }
    { 12  ;   ;OT Approved Hrs     ;Decimal       ;CaptionML=ENU=OT Approved Hrs;
                                                   Editable=No }
    { 13  ;   ;Total Hours Worked  ;Decimal       ;CaptionML=ENU=Total Hours Worked;
                                                   Editable=No }
    { 14  ;   ;First Half Attendance Type;Option  ;OnValidate=BEGIN
                                                                ValidateAttendanceType;
                                                              END;

                                                   CaptionML=ENU=First Half Attendance Type;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off] }
    { 15  ;   ;Second Half Attendance Type;Option ;OnValidate=BEGIN
                                                                ValidateAttendanceType;
                                                              END;

                                                   CaptionML=ENU=Second Half Attendance Type;
                                                   OptionCaptionML=ENU=" ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off";
                                                   OptionString=[ ,Present,Absent,Leave,Weekly Off,Holiday,On-Duty,Not Joined,Relieved,Lay Off] }
    { 16  ;   ;Leave Code          ;Code20        ;CaptionML=ENU=Leave Code }
    { 17  ;   ;Present             ;Decimal       ;CaptionML=ENU=Present }
    { 18  ;   ;Absent              ;Decimal       ;CaptionML=ENU=Absent }
    { 19  ;   ;Leave               ;Decimal       ;CaptionML=ENU=Leave }
    { 20  ;   ;Weekly Off          ;Decimal       ;CaptionML=ENU=Weekly Off }
    { 21  ;   ;Holiday             ;Decimal       ;CaptionML=ENU=Holiday }
    { 22  ;   ;On-Duty             ;Decimal       ;CaptionML=ENU=On-Duty }
    { 23  ;   ;Not Joined          ;Decimal       ;CaptionML=ENU=Not Joined }
    { 24  ;   ;Relieved            ;Decimal       ;CaptionML=ENU=Relieved }
    { 25  ;   ;Payable Days        ;Decimal       ;CaptionML=ENU=Payable Days }
    { 26  ;   ;Non Payable Days    ;Decimal       ;CaptionML=ENU=Non Payable Days }
    { 27  ;   ;Permission (Yes/No) ;Boolean       ;OnValidate=BEGIN
                                                                IF "Permission (Yes/No)" THEN
                                                                  Reason := 'Personal Work / Late'
                                                                ELSE
                                                                  Reason := '';
                                                              END;

                                                   CaptionML=ENU=Permission (Yes/No) }
    { 28  ;   ;Total Permission In Mins;Decimal   ;OnValidate=BEGIN
                                                                IF "Total Permission In Mins" > 0 THEN BEGIN
                                                                  "Permission (Yes/No)" := TRUE;
                                                                  Reason := 'Personal Work / Late';
                                                                END
                                                                ELSE BEGIN
                                                                  "Permission (Yes/No)" := FALSE;
                                                                  Reason := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Total Permission In Mins }
    { 29  ;   ;Reason              ;Text30        ;CaptionML=ENU=Reason }
    { 30  ;   ;Actual Time In      ;Time          ;CaptionML=ENU=Actual Time In }
    { 31  ;   ;Actual Time Out     ;Time          ;CaptionML=ENU=Actual Time Out }
    { 32  ;   ;Total Break Hours   ;Decimal       ;CaptionML=ENU=Total Break Hours;
                                                   Editable=No }
    { 33  ;   ;Activity            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Time Sheet" WHERE (Location Code=FIELD(Location Code),
                                                                                         Salary Plan Code=FIELD(Salary Plan Code),
                                                                                         Employee No=FIELD(Employee No),
                                                                                         Attend Date=FIELD(Attendance Date)));
                                                   CaptionML=ENU=Activity;
                                                   Editable=No }
    { 34  ;   ;Shift Code          ;Code20        ;TableRelation=Shift;
                                                   CaptionML=ENU=Shift Code }
    { 35  ;   ;Day No.             ;Integer       ;CaptionML=ENU=Day No. }
    { 36  ;   ;Week No             ;Integer       ;CaptionML=ENU=Week No }
    { 37  ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 38  ;   ;Month               ;Integer       ;CaptionML=ENU=Month;
                                                   ValuesAllowed=[1;2;3;4;5;6;7;8;9;10;11;12] }
    { 39  ;   ;Leave Year Code     ;Code10        ;CaptionML=ENU=Leave Year Code;
                                                   Editable=No }
    { 40  ;   ;Synchronize         ;Boolean       ;CaptionML=ENU=Synchronize }
    { 41  ;   ;Late Coming Hours   ;Decimal       ;CaptionML=ENU=Late Coming Hours }
    { 42  ;   ;Early Going Hours   ;Decimal       ;CaptionML=ENU=Early Going Hours }
    { 43  ;   ;Early OT Hours      ;Decimal       ;CaptionML=ENU=Early OT Hours }
    { 44  ;   ;Late OT Hours       ;Decimal       ;CaptionML=ENU=Late OT Hours }
    { 45  ;   ;Weekly Off Status   ;Boolean       ;CaptionML=ENU=Weekly Off Status }
    { 46  ;   ;Holiday Status      ;Boolean       ;CaptionML=ENU=Holiday Status }
    { 47  ;   ;Non Working Day     ;Boolean       ;CaptionML=ENU=Non Working Day }
    { 48  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 49  ;   ;Lay Off             ;Decimal       ;CaptionML=ENU=Lay Off }
    { 50  ;   ;Manual Entry        ;Boolean       ;CaptionML=ENU=Manual Entry;
                                                   Editable=No }
    { 51  ;   ;System Entry        ;Boolean       ;CaptionML=ENU=System Entry;
                                                   Editable=No }
    { 52  ;   ;Attendance Verified ;Boolean       ;CaptionML=ENU=Attendance Verified;
                                                   Editable=No }
    { 53  ;   ;Lay Off (Yes/No)    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Lay Off (Yes/No)" THEN BEGIN
                                                                  "First Half Attendance Type" := "First Half Attendance Type"::"Lay Off";
                                                                  "Second Half Attendance Type" := "Second Half Attendance Type"::"Lay Off";
                                                                  VALIDATE("First Half Attendance Type");
                                                                  VALIDATE("Second Half Attendance Type");
                                                                END;

                                                                IF NOT "Lay Off (Yes/No)" THEN BEGIN
                                                                  VALIDATE("In Time");
                                                                  VALIDATE("Out Time");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Lay Off (Yes/No) }
    { 54  ;   ;Comp Off Date       ;Date          ;CaptionML=ENU=Comp Off Date }
    { 55  ;   ;Punch Total Mins Worked;Decimal    ;CaptionML=ENU=Punch Total Mins Worked;
                                                   Editable=No }
    { 56  ;   ;Present (Yes/No)    ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Present (Yes/No) }
    { 57  ;   ;Absent (Yes/No)     ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Absent (Yes/No) }
    { 58  ;   ;Leave (Yes/No)      ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Leave (Yes/No) }
    { 59  ;   ;Weekly Off (Yes/No) ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Weekly Off (Yes/No) }
    { 60  ;   ;Holiday (Yes/No)    ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Holiday (Yes/No) }
    { 61  ;   ;On-Duty (Yes/No)    ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=On-Duty (Yes/No) }
    { 62  ;   ;Not Joined (Yes/No) ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Not Joined (Yes/No) }
    { 63  ;   ;Relieved (Yes/No)   ;Boolean       ;OnValidate=BEGIN
                                                                ValidatePunch;
                                                              END;

                                                   CaptionML=ENU=Relieved (Yes/No) }
  }
  KEYS
  {
    {    ;Employee No,Attendance Date,Salary Cyclic Code,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
    {    ;Present,Absent,Leave,Weekly Off,Holiday,On-Duty;
                                                   SumIndexFields=Present,Absent,Leave,Weekly Off,Holiday,On-Duty }
    {    ;Not Joined,Relieved,Payable Days,Total OT In Mins,Total Permission In Mins,Lay Off;
                                                   SumIndexFields=Not Joined,Relieved,Payable Days,Total OT In Mins,Total Permission In Mins,Lay Off }
    {    ;Location Code,Salary Plan Code,Leave Code,Leave Year Code;
                                                   SumIndexFields=Leave }
    {    ;Attendance Date,Location Code,Salary Plan Code,Salary Cyclic Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CheckTime@1000000002 : Time;
      StartDateTime@1000000001 : DateTime;
      EndDateTime@1000000000 : DateTime;
      Shift@1102155000 : Record 72059;
      HRPayrollSetup@1102159001 : Record 72051;
      LocationHRPayrollSetup@1102159000 : Record 72052;

    PROCEDURE TotalHoursCalculation@1102155000(TotalDuration@1102155000 : Integer) : Decimal;
    VAR
      TotalMins@1102155028 : Integer;
      TotalHrsMins@1102155027 : Decimal;
      TotalMiliSec@1102155009 : Integer;
      TotalRestSec@1102155008 : Integer;
      TotalSec@1102155007 : Integer;
      TotalRestMin@1102155006 : Integer;
      TotalMin@1102155005 : Integer;
      TotalRestHour@1102155004 : Integer;
    BEGIN
      TotalMiliSec := TotalDuration MOD 1000;
      TotalRestSec := TotalDuration DIV 1000;
      TotalSec := TotalRestSec MOD 60;
      TotalRestMin := TotalRestSec DIV 60;
      TotalMin := TotalRestMin MOD 60;
      TotalRestHour := TotalRestMin DIV 60;

      TotalHrsMins := TotalRestHour + (TotalMin / 100);
      EXIT(TotalHrsMins);
    END;

    PROCEDURE CalculateAllHours@1102155001();
    VAR
      PersonInoutTotalDuration@1102155009 : Integer;
      BreakTotalDuration@1102155008 : Integer;
      PersonInOutDuration@1102155007 : Integer;
      BreakInOutDuration@1102155006 : Integer;
      LateComingDuration@1102155003 : Integer;
      EarlyGoingDuration@1102155002 : Integer;
      EarlyOTDuration@1102155001 : Integer;
      LateOTDuration@1102155000 : Integer;
      Employee@1102155004 : Record 5200;
      TotalOTHours@1102159000 : Decimal;
    BEGIN
      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      Employee.GET("Employee No");

      IF "Shift Code" = '' THEN
        "Shift Code" := Employee."Working Shift Code";

      Shift.GET("Shift Code","Location Code","Salary Plan Code");

      CLEAR(PersonInoutTotalDuration);
      CLEAR(BreakTotalDuration);
      CLEAR(PersonInOutDuration);
      CLEAR(BreakInOutDuration);
      CLEAR(LateComingDuration);
      CLEAR(EarlyGoingDuration);
      CLEAR(EarlyOTDuration);
      CLEAR(LateOTDuration);

      CLEAR("Total Hours Worked");
      CLEAR("Late Coming Hours");
      CLEAR("Early Going Hours");
      CLEAR("Total Permission In Mins");
      CLEAR("Early OT Hours");
      CLEAR("Late OT Hours");
      CLEAR("Total Break Hours");
      CLEAR("Total OT In Mins");
      CLEAR(TotalOTHours);

      //-- Total Hours Calculation.

      PersonInOutDuration := "Out Time" - "In Time";
      "Hours Worked" := TotalHoursCalculation(PersonInOutDuration);

      //-- Break Hours Calculation.
      IF (Shift."Break Start Time" <> 0T) AND (Shift."Break End Time" <> 0T) THEN BEGIN
        BreakInOutDuration := Shift."Break End Time" - Shift."Break Start Time";
        "Total Break Hours" := TotalHoursCalculation(BreakInOutDuration);
      END;

      "Total Hours Worked" := TotalHoursCalculation(PersonInOutDuration - BreakInOutDuration);

      IF "Total Hours Worked" < 0 THEN
        "Total Hours Worked" := 0;

      // Permission Calculation.

      IF Shift."Late Coming Applicable" THEN
        IF "In Time" > Shift."Late Coming Time Starts From" THEN BEGIN
          LateComingDuration := "In Time" - Shift."Late Coming Time Starts From";
          "Late Coming Hours" := TotalHoursCalculation("In Time" - Shift."Late Coming Time Starts From");
        END;

      //MESSAGE('Allow Early => %1  PersonOuttime => %2 ',AllowableEarlyGoingTime,PersonOutTime);

      IF Shift."Early Going Applicable" THEN
        IF "Out Time" < Shift."Late Coming Time Starts From" THEN BEGIN
          EarlyGoingDuration := Shift."Late Coming Time Starts From" - "Out Time";
          "Early Going Hours" := TotalHoursCalculation(Shift."Late Coming Time Starts From" - "Out Time");
        END;

      "Total Permission In Mins" := (LateComingDuration + EarlyGoingDuration) / 60000;

      //-- OverTime Calculation.

      //MESSAGE('Time Starts Before => %1  PersonIntime => %2 ',EarlyOTTime,PersonInTime);

      IF Shift."Morning OT Applicable" THEN
        IF "In Time" < Shift."Morning OT Starts From" THEN BEGIN
          EarlyOTDuration := Shift."Morning OT Starts From" - "In Time";
          "Early OT Hours" := TotalHoursCalculation(Shift."Morning OT Starts From" - "In Time");
        END;

      //MESSAGE('Time Starts Before => %1  PersonOuttime => %2 ',LateOTTime,PersonOutTime);

      IF Shift."Evening OT Applicable" THEN
        IF "Out Time" > Shift."Evening OT Starts From" THEN BEGIN
          LateOTDuration := "Out Time" - Shift."Evening OT Starts From";
          "Late OT Hours" := TotalHoursCalculation("Out Time" - Shift."Evening OT Starts From");
        END;

      "Total OT In Mins" := (EarlyOTDuration + LateOTDuration) / 60000;

      //-- New Changes for HTC Footwear Division on 29/12/2009

      IF Shift."Friday Over Time" THEN BEGIN
        CLEAR(LateOTDuration);
        IF "Day No." = Shift."Punching Days" THEN
          IF Shift."Friday Ending Punching Time" <> 0T THEN BEGIN
            IF "Out Time" > Shift."Friday Time Limit Evening OT" THEN BEGIN
              LateOTDuration := "Out Time" - Shift."Friday Ending Punching Time";
              "Late OT Hours" := TotalHoursCalculation("Out Time" - Shift."Friday Ending Punching Time");
            END;
            "Total OT In Mins" := (EarlyOTDuration + LateOTDuration) / 60000;
          END;
      END;

      IF "Total OT In Mins" <= LocationHRPayrollSetup."Over Time Min Minutes" THEN
        "Total OT In Mins" := 0;

      IF Employee."Extra Allowance Applicable" THEN
        "Total OT In Mins" := 0;

      IF "Non Working Day" THEN BEGIN
        IF Employee."Extra Allowance Applicable" THEN BEGIN
          IF ("Total Hours Worked" > LocationHRPayrollSetup."Extra Wages Min Hours") AND
              ("Total Hours Worked" < LocationHRPayrollSetup."Extra Wages Max Hours")
          THEN
            "Total OT In Mins" := LocationHRPayrollSetup."Ex.Wages Days Min 3 To 6 Hours";

          IF "Total Hours Worked" > LocationHRPayrollSetup."Extra Wages Max Hours" THEN
            "Total OT In Mins" := LocationHRPayrollSetup."Ex.Wages Days 6 Hours Above";
        END;

        IF Employee."OT Type" = Employee."OT Type"::"Hourly Based" THEN
          "Total OT In Mins" := "Convert Hours To Mins"("Total Hours Worked");

        "Total Permission In Mins" := 0;
        "Late Coming Hours" := 0;
        "Early Going Hours" := 0;
      END;

      //-- New Changes for HTC Footwear Division on 30/12/2009
      IF NOT Employee."Extra Allowance Applicable" THEN
        IF LocationHRPayrollSetup."Over Time Hours Round Off" THEN BEGIN
          TotalOTHours := "Convert Mins To Hours"("Total OT In Mins");
          TotalOTHours := ROUND(TotalOTHours,1,'<');
          "Total OT In Mins" := "Convert Hours To Mins"(TotalOTHours);
        END;

      //-- Holiday OT & Weekly off Over Time

      //--------------------------------

      IF "Hours Worked" < LocationHRPayrollSetup."Absent Hours Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Absent;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF "Hours Worked" > LocationHRPayrollSetup."Absent Hours Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Present;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF ("Hours Worked" >= LocationHRPayrollSetup."Absent Hours Limit") AND
         ("Hours Worked" <= LocationHRPayrollSetup."No of Hours in Half Day")
      THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      {
      IF "Early Going Hours" > LocationHRPayrollSetup."Early Going Permission Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Absent;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF "Late Coming Hours" > LocationHRPayrollSetup."Late Coming Permission Limit" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Absent;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Present;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;
      }
    END;

    PROCEDURE ValidateAttendanceType@1102159001();
    BEGIN
      Present := 0;
      Absent := 0;
      Leave := 0;
      "Weekly Off" := 0;
      Holiday := 0;
      "On-Duty" := 0;
      "Not Joined" := 0;
      Relieved := 0;
      "Lay Off" := 0;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Present THEN BEGIN
        Present := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Present THEN BEGIN
        Present := 0.5;
        "Payable Days" := 0.5;

        IF "First Half Attendance Type" = "First Half Attendance Type"::Present THEN BEGIN
          Present := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Absent THEN BEGIN
        Absent := 0.5;
        "Non Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Absent THEN BEGIN
        Absent := 0.5;
        "Non Payable Days" := 0.5;
        IF "First Half Attendance Type" = "First Half Attendance Type"::Absent THEN BEGIN
          Absent := 1;
          "Payable Days" := 0;
          "Non Payable Days" := 1;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Leave THEN BEGIN
        Leave := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Leave THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          Leave := 0.5;
          "Payable Days" := 1;
        END ELSE BEGIN
          Leave := 0.5;
          "Payable Days" := 0.5;
          "Non Payable Days" := 0;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::Leave THEN BEGIN
          Leave := 1;
          "Payable Days" := 1;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"Weekly Off" THEN BEGIN
        "Weekly Off" := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::"Weekly Off" THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          "Weekly Off" := 0.5;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END ELSE BEGIN
          "Weekly Off" := 0.5;
          "Payable Days" := 0.5;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::"Weekly Off" THEN BEGIN
          "Weekly Off" := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Holiday THEN BEGIN
        Holiday := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::Holiday THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          Holiday := 0.5;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END ELSE BEGIN
          Holiday := 0.5;
          "Payable Days" := 0.5;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::Holiday THEN BEGIN
          Holiday := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"On-Duty" THEN BEGIN
        "On-Duty" := 0.5;
        "Payable Days" := 0.5;
      END;

      IF "Second Half Attendance Type" = "Second Half Attendance Type"::"On-Duty" THEN BEGIN
        IF "Payable Days" = 0.5 THEN BEGIN
          "On-Duty" := 0.5;
          "Payable Days" := 1;
        END ELSE BEGIN
          "On-Duty" := 0.5;
          "Payable Days" := 0.5;
        END;

        IF "First Half Attendance Type" = "First Half Attendance Type"::"On-Duty" THEN BEGIN
          "On-Duty" := 1;
          "Payable Days" := 1;
          "Non Payable Days" := 0;
        END;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"Not Joined" THEN BEGIN
        "Second Half Attendance Type" := "Second Half Attendance Type"::"Not Joined";
        Present := 0;
        Absent := 0;
        Leave := 0;
        "Weekly Off" := 0;
        Holiday := 0;
        "On-Duty" := 0;
        Relieved := 0;
        "Lay Off" := 0;
        "Payable Days" := 0;
        "Not Joined" := 1;
        "Payable Days" := 0;
        "Non Payable Days" := 1;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::Relieved THEN BEGIN
        "Second Half Attendance Type" := "Second Half Attendance Type"::Relieved;
        Present := 0;
        Absent := 0;
        Leave := 0;
        "Weekly Off" := 0;
        Holiday := 0;
        "On-Duty" := 0;
        "Not Joined" := 0;
        "Lay Off" := 0;
        "Payable Days" := 0;
        Relieved := 1;
        "Payable Days" := 0;
        "Non Payable Days" := 1;
      END;

      IF "First Half Attendance Type" = "First Half Attendance Type"::"Lay Off" THEN BEGIN
        "Second Half Attendance Type" := "Second Half Attendance Type"::"Lay Off";
        "Lay Off" := 1;
      //   "Payable Days" := 0.5;
        "Payable Days" := 0;
        Present := 0;
        Absent := 0;
        Leave := 0;
        "Weekly Off" := 0;
        Holiday := 0;
        "On-Duty" := 0;
        "Not Joined" := 0;
        Relieved := 0;
        "Non Payable Days" := 0;
      END;
    END;

    PROCEDURE "Convert Mins To Hours"@1000000023(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours);
      CLEAR(DecimalPart);
      CLEAR(IntegerPart);

      DecimalPart := TotalHrsMins MOD 60;
      IntegerPart := TotalHrsMins - DecimalPart;
      IntegerPart := IntegerPart / 60;
      ConvertHours := IntegerPart + (DecimalPart / 100);

      EXIT(ConvertHours);
    END;

    PROCEDURE "Convert Hours To Mins"@1102159000(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours);
      CLEAR(DecimalPart);
      CLEAR(IntegerPart);

      ConvertHours := TotalHrsMins * 100;
      DecimalPart := ConvertHours MOD 100;
      DecimalPart := DecimalPart / 100;
      IntegerPart := TotalHrsMins - DecimalPart;
      ConvertHours := (IntegerPart * 60) + (DecimalPart * 100);

      EXIT(ConvertHours);
    END;

    PROCEDURE ValidatePunch@1102159002();
    BEGIN
      "Present (Yes/No)" := FALSE;
      "Absent (Yes/No)" := FALSE;
      "Leave (Yes/No)" := FALSE;
      "Weekly Off (Yes/No)" := FALSE;
      "Holiday (Yes/No)" := FALSE;
      "On-Duty (Yes/No)" := FALSE;
      "Not Joined (Yes/No)" := FALSE;
      "Relieved (Yes/No)" := FALSE;

      IF "Present (Yes/No)" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::Present;
        "Second Half Attendance Type" := "Second Half Attendance Type"::Present;
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF NOT "Present (Yes/No)" THEN BEGIN
        VALIDATE("In Time");
        VALIDATE("Out Time");
      END;

      IF "Lay Off (Yes/No)" THEN BEGIN
        "First Half Attendance Type" := "First Half Attendance Type"::"Lay Off";
        "Second Half Attendance Type" := "Second Half Attendance Type"::"Lay Off";
        VALIDATE("First Half Attendance Type");
        VALIDATE("Second Half Attendance Type");
      END;

      IF NOT "Lay Off (Yes/No)" THEN BEGIN
        VALIDATE("In Time");
        VALIDATE("Out Time");
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 72098 Posted Monthly Attendance
{
  OBJECT-PROPERTIES
  {
    Date=05-06-18;
    Time=11:33:58;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Salary Plan Code,Salary Cycle Code,Name;
    CaptionML=ENU=Monthly Attendance;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month;
                                                   ValuesAllowed=[1;2;3;4;5;6;7;8;9;10;11;12] }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   Editable=No }
    { 9   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 10  ;   ;Present             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Present WHERE (Location Code=FIELD(Location Code),
                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                     Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                     Employee No=FIELD(Employee No),
                                                                                                     Present=FILTER(<>0)));
                                                   CaptionML=ENU=Present;
                                                   Editable=No }
    { 11  ;   ;Absent              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Absent WHERE (Location Code=FIELD(Location Code),
                                                                                                    Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                    Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                    Employee No=FIELD(Employee No),
                                                                                                    Absent=FILTER(<>0)));
                                                   CaptionML=ENU=Absent;
                                                   Editable=No }
    { 12  ;   ;Leave               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Leave WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                   Employee No=FIELD(Employee No),
                                                                                                   Leave=FILTER(<>0)));
                                                   CaptionML=ENU=Leave;
                                                   Editable=No }
    { 13  ;   ;Weekly Off          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Weekly Off" WHERE (Location Code=FIELD(Location Code),
                                                                                                          Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                          Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                          Employee No=FIELD(Employee No),
                                                                                                          Weekly Off=FILTER(<>0)));
                                                   CaptionML=ENU=Weekly Off;
                                                   Editable=No }
    { 14  ;   ;Holiday             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Holiday WHERE (Location Code=FIELD(Location Code),
                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                     Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                     Employee No=FIELD(Employee No),
                                                                                                     Holiday=FILTER(<>0)));
                                                   CaptionML=ENU=Holiday;
                                                   Editable=No }
    { 15  ;   ;On-Duty             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".On-Duty WHERE (Location Code=FIELD(Location Code),
                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                     Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                     Employee No=FIELD(Employee No),
                                                                                                     On-Duty=FILTER(<>0)));
                                                   CaptionML=ENU=On-Duty;
                                                   Editable=No }
    { 16  ;   ;Not Joined          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Relieved WHERE (Location Code=FIELD(Location Code),
                                                                                                      Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                      Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                      Employee No=FIELD(Employee No),
                                                                                                      Not Joined=FILTER(<>0)));
                                                   CaptionML=ENU=Not Joined;
                                                   Editable=No }
    { 17  ;   ;Relieved            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance".Relieved WHERE (Location Code=FIELD(Location Code),
                                                                                                      Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                      Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                      Employee No=FIELD(Employee No),
                                                                                                      Relieved=FILTER(<>0)));
                                                   CaptionML=ENU=Relieved;
                                                   Editable=No }
    { 18  ;   ;Over Time In Mins   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Total OT In Mins" WHERE (Location Code=FIELD(Location Code),
                                                                                                                Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                                Employee No=FIELD(Employee No),
                                                                                                                Total OT In Mins=FILTER(<>0)));
                                                   CaptionML=ENU=Over Time In Mins;
                                                   Editable=No }
    { 19  ;   ;Total Payable Days  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Payable Days" WHERE (Location Code=FIELD(Location Code),
                                                                                                            Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                            Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                            Employee No=FIELD(Employee No),
                                                                                                            Payable Days=FILTER(<>0)));
                                                   CaptionML=ENU=Total Payable Days;
                                                   Editable=No }
    { 20  ;   ;Actual Gross Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Actual Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Pay Type=CONST(Addition)));
                                                   CaptionML=ENU=Actual Gross Amount;
                                                   Editable=No }
    { 21  ;   ;Payable Gross Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Type=CONST(Addition)));
                                                   CaptionML=ENU=Payable Gross Amount;
                                                   Editable=No }
    { 22  ;   ;Actual Reimburesment Amount;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Actual Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Pay Type=CONST(Reimbursement)));
                                                   CaptionML=ENU=Actual Reimburesment Amount;
                                                   Editable=No }
    { 23  ;   ;Payable Reimburesment Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Type=CONST(Reimbursement)));
                                                   CaptionML=ENU=Payable Reimburesment Amount;
                                                   Editable=No }
    { 24  ;   ;Actual Deduction Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Actual Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                             Employee No=FIELD(Employee No),
                                                                                                             Pay Type=CONST(Deduction)));
                                                   CaptionML=ENU=Actual Deduction Amount;
                                                   Editable=No }
    { 25  ;   ;Payable Deduction Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Salary Cycle Code=FIELD(Salary Cycle Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Pay Type=CONST(Deduction)));
                                                   CaptionML=ENU=Payable Deduction Amount;
                                                   Editable=No }
    { 26  ;   ;Actual Net Amount   ;Decimal       ;CaptionML=ENU=Actual Net Amount;
                                                   Editable=No }
    { 27  ;   ;Payable Net Amount  ;Decimal       ;CaptionML=ENU=Payable Net Amount;
                                                   Editable=No }
    { 28  ;   ;Pay Amount          ;Decimal       ;CaptionML=ENU=Pay Amount;
                                                   Editable=No }
    { 29  ;   ;Paid Amount         ;Decimal       ;CaptionML=ENU=Paid Amount;
                                                   Editable=No }
    { 30  ;   ;Processed           ;Boolean       ;CaptionML=ENU=Processed }
    { 31  ;   ;Processed Date      ;Date          ;CaptionML=ENU=Processed Date }
    { 32  ;   ;Journal Batch Name  ;Code20        ;CaptionML=ENU=Journal Batch Name }
    { 33  ;   ;Journal Template Name;Code20       ;CaptionML=ENU=Journal Template Name }
    { 34  ;   ;Posted Document No  ;Code20        ;CaptionML=ENU=Posted Document No }
    { 35  ;   ;Posted Date         ;Date          ;CaptionML=ENU=Posted Date }
    { 36  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 37  ;   ;Paid                ;Boolean       ;CaptionML=ENU=Paid }
    { 38  ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 39  ;   ;Pay Method          ;Option        ;CaptionML=ENU=Pay Method;
                                                   OptionCaptionML=ENU=Cash,Cheque,Bank Transfer;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 40  ;   ;Cheque No.          ;Code20        ;CaptionML=ENU=Cheque No. }
    { 41  ;   ;Cheque Date         ;Date          ;CaptionML=ENU=Cheque Date }
    { 42  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=ENU=Account No. }
    { 43  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 44  ;   ;I Payment Document No.;Code20      ;CaptionML=ENU=I Payment Document No. }
    { 45  ;   ;I Payment Date      ;Date          ;CaptionML=ENU=I Payment Date }
    { 46  ;   ;Stop Payment        ;Boolean       ;CaptionML=ENU=Stop Payment }
    { 47  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 48  ;   ;Total Permission In Mins;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Total Permission In Mins" WHERE (Location Code=FIELD(Location Code),
                                                                                                                        Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                        Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                                        Employee No=FIELD(Employee No),
                                                                                                                        Total Permission In Mins=FILTER(<>0)));
                                                   CaptionML=ENU=Total Permission In Mins;
                                                   Editable=No }
    { 49  ;   ;Credit Days         ;Decimal       ;CaptionML=ENU=Credit Days }
    { 50  ;   ;First Net Amount    ;Decimal       ;CaptionML=ENU=First Net Amount;
                                                   Editable=No }
    { 51  ;   ;Second Net Amount   ;Decimal       ;CaptionML=ENU=Second Net Amount;
                                                   Editable=No }
    { 52  ;   ;Payment Type        ;Option        ;CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Full Payment,First Payment,Second Payment;
                                                   OptionString=Full Payment,First Payment,Second Payment }
    { 53  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 54  ;   ;Lay Off             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Daily Attendance"."Lay Off" WHERE (Location Code=FIELD(Location Code),
                                                                                                       Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                       Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                                       Employee No=FIELD(Employee No),
                                                                                                       Lay Off=FILTER(<>0)));
                                                   CaptionML=ENU=Lay Off;
                                                   Editable=No }
    { 55  ;   ;Total Perm. Hours   ;Decimal       ;CaptionML=ENU=Total Perm. Hours;
                                                   Editable=No }
    { 56  ;   ;Total Over Time Hours;Decimal      ;CaptionML=ENU=Total Over Time Hours;
                                                   Editable=No }
    { 57  ;   ;Total DA Days       ;Decimal       ;CaptionML=ENU=Total DA Days;
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 58  ;   ;Total Days Count    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Daily Attendance" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code),
                                                                                               Salary Cyclic Code=FIELD(Salary Cycle Code),
                                                                                               Employee No=FIELD(Employee No)));
                                                   CaptionML=ENU=Total Days Count;
                                                   Editable=No }
    { 59  ;   ;II Payment Document No.;Code20     ;CaptionML=ENU=II Payment Document No. }
    { 60  ;   ;II Payment Date     ;Date          ;CaptionML=ENU=II Payment Date }
    { 61  ;   ;Branch Code         ;Code10        ;CaptionML=ENU=Branch Code }
    { 62  ;   ;Manual Total Days Worked;Decimal   ;CaptionML=ENU=Manual Total Days Worked;
                                                   Editable=No }
    { 63  ;   ;Negative Pay        ;Boolean       ;CaptionML=ENU=Negative Pay }
  }
  KEYS
  {
    {    ;Employee No,Salary Cycle Code,Payroll Start Date,Payroll End Date,Month,Year,Location Code,Salary Plan Code;
                                                   Clustered=Yes }
    {    ;Employee No,Payroll End Date             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72099 Posted Misc Add/Deductions
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Misc Add/Deductions;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Element Code }
    { 10  ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 11  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly;
                                                   OptionString=Monthly,Yearly;
                                                   Editable=No }
    { 12  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement;
                                                   Editable=No }
    { 13  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 14  ;   ;Created Date        ;Date          ;CaptionML=ENU=Created Date;
                                                   Editable=No }
    { 15  ;   ;User Id             ;Code20        ;CaptionML=ENU=User Id }
    { 16  ;   ;Element Type        ;Option        ;CaptionML=ENU=Element Type;
                                                   OptionCaptionML=ENU=" ,OT Calculation";
                                                   OptionString=[ ,OT Calculation] }
    { 17  ;   ;Total OT Hours      ;Decimal       ;CaptionML=ENU=Total OT Hours }
    { 18  ;   ;OT Type             ;Option        ;CaptionML=ENU=OT Type;
                                                   OptionCaptionML=ENU=" ,Fixed Amount,Hourly Based";
                                                   OptionString=[ ,Fixed Amount,Hourly Based] }
    { 19  ;   ;OT Fixed Amount     ;Decimal       ;CaptionML=ENU=OT Fixed Amount }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee No,Pay Element Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72100 Posted Processed Salary
{
  OBJECT-PROPERTIES
  {
    Date=05-06-18;
    Time=11:33:12;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    DataCaptionFields=Employee No;
    CaptionML=ENU=Processed Salary;
    LookupPageID=Page72124;
    DrillDownPageID=Page72124;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Paid Category       ;Option        ;CaptionML=ENU=Paid Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly,Daily;
                                                   OptionString=Monthly,Yearly,Daily }
    { 11  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 12  ;   ;Fixed / Percent     ;Option        ;CaptionML=ENU=Fixed / Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent }
    { 13  ;   ;Amount Calculation Type;Option     ;CaptionML=ENU=Amount Calculation Type;
                                                   OptionCaptionML=ENU=Pay Day,Full Amount;
                                                   OptionString=Pay Day,Full Amount }
    { 14  ;   ;Base Pay Elements   ;Text250       ;CaptionML=ENU=Base Pay Elements;
                                                   Editable=No }
    { 15  ;   ;Percentage (%)      ;Decimal       ;CaptionML=ENU=Percentage (%) }
    { 16  ;   ;Included In Pay Slip;Boolean       ;CaptionML=ENU=Included In Pay Slip }
    { 17  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 18  ;   ;Total Days in a Month;Integer      ;CaptionML=ENU=Total Days in a Month }
    { 19  ;   ;Paid Days           ;Decimal       ;CaptionML=ENU=Paid Days }
    { 20  ;   ;Actual Amount       ;Decimal       ;CaptionML=ENU=Actual Amount }
    { 21  ;   ;Payable Amount      ;Decimal       ;CaptionML=ENU=Payable Amount }
    { 22  ;   ;PF / ESI / PT Gross Earnings;Decimal;
                                                   CaptionML=ENU=PF / ESI / PT Gross Earnings }
    { 23  ;   ;EPS Gross Earnings  ;Decimal       ;CaptionML=ENU=EPS Gross Earnings }
    { 24  ;   ;Account No.         ;Code20        ;CaptionML=ENU=Account No. }
    { 25  ;   ;Employee VPF Amount ;Decimal       ;CaptionML=ENU=Employee VPF Amount }
    { 26  ;   ;Employee PF / ESI Amount;Decimal   ;CaptionML=ENU=Employee PF / ESI Amount }
    { 27  ;   ;Employer PF / ESI Amount;Decimal   ;CaptionML=ENU=Employer PF / ESI Amount }
    { 28  ;   ;Employer EPS Amount ;Decimal       ;CaptionML=ENU=Employer EPS Amount }
    { 29  ;   ;PF Admin Charges Amount;Decimal    ;CaptionML=ENU=PF Admin Charges Amount }
    { 30  ;   ;PF EDLI Amount      ;Decimal       ;CaptionML=ENU=PF EDLI Amount }
    { 31  ;   ;PF RIFA Amount      ;Decimal       ;CaptionML=ENU=PF RIFA Amount }
    { 32  ;   ;Salary Processed    ;Boolean       ;CaptionML=ENU=Salary Processed }
    { 33  ;   ;Salary Posted       ;Boolean       ;CaptionML=ENU=Salary Posted }
    { 34  ;   ;Loan                ;Boolean       ;CaptionML=ENU=Loan }
    { 35  ;   ;Payment Type        ;Option        ;CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Full Payment,First Payment,Second Payment;
                                                   OptionString=Full Payment,First Payment,Second Payment }
    { 36  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary,Class III Permanent,Class III Temporary] }
    { 37  ;   ;Branch Code         ;Code10        ;CaptionML=ENU=Branch Code }
    { 38  ;   ;PF Applicable       ;Boolean       ;CaptionML=ENU=PF Applicable }
    { 39  ;   ;Loan Id             ;Code20        ;TableRelation="Employee Loans";
                                                   CaptionML=ENU=Loan Id }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee No,Pay Element Code;
                                                   Clustered=Yes }
    {    ;Sorting Order,Pay Element Code,Pay Type  }
    {    ;Pay Type                                ;SumIndexFields=Actual Amount,Payable Amount }
    {    ;Employee No                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72101 Income Tax
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    LookupPageID=Page72138;
    DrillDownPageID=Page72138;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup" }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan" }
    { 3   ;   ;Assessment Year     ;Code20        ;TableRelation="Payroll Year"."Year Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Year Type=CONST(Income Tax Year)) }
    { 4   ;   ;Salary Year         ;Code20        ;TableRelation="Payroll Year"."Year Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Year Type=CONST(Salary Year)) }
    { 5   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code)) }
    { 6   ;   ;Employee No         ;Code20        ;TableRelation=Employee.No. WHERE (No.=FILTER(<>'')) }
    { 7   ;   ;Name                ;Text50         }
    { 8   ;   ;Designation         ;Text50         }
    { 9   ;   ;P.A.N.No            ;Code20         }
    { 10  ;   ;Sex                 ;Option        ;OptionCaptionML=ENU=" ,Female,Male,Sr.Citizen";
                                                   OptionString=[ ,Female,Male,Sr.Citizen] }
    { 11  ;   ;Physically Handicapped;Boolean      }
    { 12  ;   ;Senior Citizen      ;Boolean        }
    { 13  ;   ;Projection Not Required;Boolean     }
    { 14  ;   ;Remaining Month for Projection;Integer }
    { 15  ;   ;Last Month Gross Salary;Decimal     }
    { 16  ;   ;Salary Gross Earning Actual;Decimal }
    { 17  ;   ;Salary Gross Earning Projected;Decimal }
    { 18  ;   ;Salary Gross Earning Total;Decimal  }
    { 19  ;   ;Bonus               ;Decimal        }
    { 20  ;   ;Leave Salary        ;Decimal        }
    { 21  ;   ;Arrears Amount      ;Decimal        }
    { 22  ;   ;D.A Arrears - 1     ;Decimal        }
    { 23  ;   ;D.A Arrears - 2     ;Decimal        }
    { 24  ;   ;HRA Arrears         ;Decimal        }
    { 25  ;   ;Hon Amount          ;Decimal        }
    { 26  ;   ;Medical Reimburement;Decimal        }
    { 27  ;   ;Previous Job Earnings;Decimal       }
    { 28  ;   ;LTA                 ;Decimal        }
    { 29  ;   ;Perk-1              ;Decimal        }
    { 30  ;   ;Perk-2              ;Decimal        }
    { 31  ;   ;Other Earnings-1    ;Decimal        }
    { 32  ;   ;Other Earnings-2    ;Decimal        }
    { 33  ;   ;Other Earnings Total;Decimal        }
    { 34  ;   ;HRA                 ;Decimal        }
    { 35  ;   ;Conv.Allowance      ;Decimal        }
    { 36  ;   ;Transport Conveyance;Decimal        }
    { 37  ;   ;Exemptions Totals   ;Decimal        }
    { 38  ;   ;Professional Tax    ;Decimal        }
    { 39  ;   ;Entertainment Tax   ;Decimal        }
    { 40  ;   ;Gross Salary Income ;Decimal        }
    { 41  ;   ;Housing Loan Interest;Decimal       }
    { 42  ;   ;Gross Total Income  ;Decimal        }
    { 43  ;   ;Actual - PF (Salary);Decimal        }
    { 44  ;   ;Actual - PF (Direct);Decimal        }
    { 45  ;   ;Actual - Total PF   ;Decimal        }
    { 46  ;   ;Actual - LIC Premium (Salary);Decimal }
    { 47  ;   ;Actual - LIC Premium (Direct);Decimal }
    { 48  ;   ;Actual - Total LIC Premium;Decimal  }
    { 49  ;   ;Actual - NSC (Direct);Decimal       }
    { 50  ;   ;Actual - NSC Interest;Decimal       }
    { 51  ;   ;Actual - ULIP       ;Decimal        }
    { 52  ;   ;Actual - NSS Self   ;Decimal        }
    { 53  ;   ;Actual - Mutal Fund ;Decimal        }
    { 54  ;   ;Actual -Housing Loan Principal;Decimal }
    { 55  ;   ;Actual -Infra Development Bond;Decimal }
    { 56  ;   ;Actual -Other 80 Deduction - 1;Decimal }
    { 57  ;   ;Actual -Other 80 Deduction - 2;Decimal }
    { 58  ;   ;Actual - Total 80 Deduction;Decimal }
    { 59  ;   ;Actual - 80CCC (Pension Fund);Decimal }
    { 60  ;   ;Actual - 80D (Mediclaim);Decimal    }
    { 61  ;   ;Actual - 80DD(Handicapped Dep);Decimal }
    { 62  ;   ;Actual - 80DDB(Medical Ex Spl);Decimal }
    { 63  ;   ;Actual - 80G (Donations);Decimal    }
    { 64  ;   ;Actual - 80U(Physically Handi);Decimal }
    { 65  ;   ;Actual - Total 80A-Z Deduction;Decimal }
    { 66  ;   ;Proj - PF (Salary)  ;Decimal        }
    { 67  ;   ;Proj - PF (Direct)  ;Decimal        }
    { 68  ;   ;Proj - Total PF     ;Decimal        }
    { 69  ;   ;Proj - LIC Premium (Salary);Decimal }
    { 70  ;   ;Proj - LIC Premium (Direct);Decimal }
    { 71  ;   ;Proj - Total LIC Premium;Decimal    }
    { 72  ;   ;Proj - NSC (Direct) ;Decimal        }
    { 73  ;   ;Proj - NSC Interest ;Decimal        }
    { 74  ;   ;Proj - ULIP         ;Decimal        }
    { 75  ;   ;Proj - NSS Self     ;Decimal        }
    { 76  ;   ;Proj - Mutal Fund   ;Decimal        }
    { 77  ;   ;Proj - Housing Loan Principal;Decimal }
    { 78  ;   ;Proj - Infra Development Bond;Decimal }
    { 79  ;   ;Proj - Other 80 Deduction - 1;Decimal }
    { 80  ;   ;Proj - Other 80 Deduction - 2;Decimal }
    { 81  ;   ;Proj - Total 80 Deduction;Decimal   }
    { 82  ;   ;Proj - 80CCC (Pension Fund);Decimal }
    { 83  ;   ;Proj - 80D (Mediclaim);Decimal      }
    { 84  ;   ;Proj - 80DD(Handicapped Dep);Decimal }
    { 85  ;   ;Proj - 80DDB(Medical Ex Spl);Decimal }
    { 86  ;   ;Proj - 80G (Donations);Decimal      }
    { 87  ;   ;Proj - 80U(Physically Handi);Decimal }
    { 88  ;   ;Proj - Total 80A-Z Deduction;Decimal }
    { 89  ;   ;Taxable Income      ;Decimal        }
    { 90  ;   ;Income Tax Amount   ;Decimal        }
    { 91  ;   ;Higher Edu Cess Amount;Decimal      }
    { 92  ;   ;Cess Amount         ;Decimal        }
    { 93  ;   ;Surcharge Amount    ;Decimal        }
    { 94  ;   ;Total Tax Amount    ;Decimal        }
    { 95  ;   ;Tax Paid            ;Decimal        }
    { 96  ;   ;Tax Refund          ;Decimal        }
    { 97  ;   ;Tax Balance         ;Decimal        }
    { 98  ;   ;Tax Per Month       ;Decimal        }
    { 99  ;   ;Food Plus Card Allow;Decimal        }
    { 100 ;   ;Rent Received       ;Decimal        }
    { 101 ;   ;Medical Bill        ;Decimal        }
    { 102 ;   ;Medical Allow       ;Decimal        }
    { 103 ;   ;Proj -  80E (Educational Loan);Decimal }
    { 104 ;   ;Actu -  80E (Educational Loan);Decimal }
    { 105 ;   ;Printed             ;Boolean        }
    { 106 ;   ;Verified            ;Boolean        }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Assessment Year,Employee No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EmpRec@1102159000 : Record 5200;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72102 Income Tax Challan Details
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup" }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan" }
    { 3   ;   ;Assessment Year     ;Code20        ;TableRelation="Payroll Year"."Year Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Year Type=CONST(Income Tax Year)) }
    { 4   ;   ;Salary Year         ;Code20        ;TableRelation="Payroll Year"."Year Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                   Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                   Year Type=CONST(Salary Year)) }
    { 5   ;   ;Salary Cyclic Code  ;Code20        ;TableRelation="Payroll Month & Year"."Salary Cyclic Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                    Salary Plan Code=FIELD(Salary Plan Code)) }
    { 6   ;   ;Challan Process Year;Integer        }
    { 7   ;   ;Challan Process Month;Integer       }
    { 8   ;   ;Employe No          ;Code20        ;TableRelation=Employee }
    { 9   ;   ;Taxable Gross Salary;Decimal        }
    { 10  ;   ;Section Code        ;Code20         }
    { 11  ;   ;Voucher / Challan No;Code20         }
    { 12  ;   ;Voucher / Challan Date;Date         }
    { 13  ;   ;Bank Code           ;Code20         }
    { 14  ;   ;Challan Income Tax  ;Decimal        }
    { 15  ;   ;Challan Surcharge   ;Decimal        }
    { 16  ;   ;Challan ECess       ;Decimal        }
    { 17  ;   ;Challan Interest Amount;Decimal     }
    { 18  ;   ;Challan Other Amount;Decimal        }
    { 19  ;   ;Total Deposit Amount as Vouche;Decimal;
                                                   OnValidate=BEGIN
                                                                "Total Deposit Amount as Vouche" := "Challan Income Tax" + "Challan Surcharge" + "Challan ECess";
                                                              END;
                                                               }
    { 20  ;   ;Total Deposit as Deductee;Decimal   }
    { 21  ;   ;TDS/TCS Income Tax  ;Decimal        }
    { 22  ;   ;TDS/TCS Surcharge   ;Decimal        }
    { 23  ;   ;TDS/TCS Cess        ;Decimal        }
    { 24  ;   ;Total Income Tax    ;Decimal        }
    { 25  ;   ;TDS/TCS Interest Amount;Decimal     }
    { 26  ;   ;TDS/TCS Others      ;Decimal        }
    { 27  ;   ;Cheque / DD No.     ;Code20         }
    { 28  ;   ;Bank/Cash           ;Option        ;OptionString=[ ,Cheque,Cash] }
    { 29  ;   ;Post                ;Boolean        }
    { 30  ;   ;Salary Paid Date    ;Date           }
    { 31  ;   ;Select              ;Boolean        }
    { 32  ;   ;Pay Element Code    ;Code20         }
    { 33  ;   ;Total Challan Amount;Decimal        }
    { 34  ;   ;Quarterly Code      ;Option        ;OptionString=Q1,Q2,Q3,Q4 }
    { 35  ;   ;Employee Code       ;Code20         }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Assessment Year,Salary Cyclic Code,Employe No;
                                                   Clustered=Yes }
    {    ;Employe No,Quarterly Code,Location Code,Salary Plan Code,Assessment Year,Salary Cyclic Code }
    {    ;Employe No,Salary Cyclic Code            }
    {    ;Employee Code,Quarterly Code             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72103 Income Tax Exemptions
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                IF EmplR.GET("Employee No.") THEN
                                                                  Name := EmplR."First Name";
                                                              END;
                                                               }
    { 2   ;   ;Name                ;Text50         }
    { 3   ;   ;Excemption Type     ;Option        ;OptionCaptionML=ENU=" ,Rent Paid,Insurance,Medical Bill,Loan Principle,Loan Interest,Donation,Rent Received,Transport Conveyance";
                                                   OptionString=[ ,Rent Paid,Insurance,Medical Bill,Loan Principle,Loan Interest,Donation,Rent Received,Transport Conveyance] }
    { 4   ;   ;Line No.            ;Integer        }
    { 5   ;   ;Exemption No.       ;Code20         }
    { 6   ;   ;Details             ;Text250        }
    { 7   ;   ;Amount              ;Decimal        }
    { 8   ;   ;Metro/Non Metro     ;Option        ;OptionCaptionML=ENU=Metro,Non Metro;
                                                   OptionString=Metro,Non Metro }
    { 9   ;   ;Location Code       ;Code20         }
    { 10  ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan" }
    { 11  ;   ;Salary Year Code    ;Code20         }
    { 12  ;   ;Payroll Start Date  ;Date           }
    { 13  ;   ;Payroll End Date    ;Date           }
    { 14  ;   ;Year                ;Integer        }
    { 15  ;   ;Month               ;Integer        }
    { 16  ;   ;Created Date        ;Date           }
    { 17  ;   ;User ID             ;Code20         }
    { 18  ;   ;Effective Date      ;Date           }
  }
  KEYS
  {
    {    ;Employee No.,Location Code,Salary Plan Code,Salary Year Code,Effective Date,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EmplR@1102159000 : Record 5200;

    BEGIN
    END.
  }
}

OBJECT Table 72104 Increment Header
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Pay Increment Id" = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Pay Revision No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Pay Revision No.",xRec."No. Series",0D,"Pay Increment Id","No. Series");
               END;

               IF HRPayrollSetup.GET(USERID) THEN BEGIN
                 "Location Code" := HRPayrollSetup."Location Code";
                 "Salary Plan Code" := HRPayrollSetup."Salary Plan Code";
               END;

               "Pay Increment Date" := TODAY;
             END;

    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 IncrementLine.RESET;
                 IncrementLine.SETRANGE("Pay Increment Id", "Pay Increment Id");
                 IF IncrementLine.FINDFIRST THEN BEGIN
                   IncrementLine.LOCKTABLE;
                   IncrementLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Increment Header;
  }
  FIELDS
  {
    { 1   ;   ;Pay Increment Id    ;Code20        ;OnValidate=BEGIN
                                                                IF "Pay Increment Id" <> xRec."Pay Increment Id" THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Pay Revision No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Pay Increment Id }
    { 2   ;   ;Pay Increment Date  ;Date          ;CaptionML=ENU=Pay Increment Date }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 5   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  Name := Employee."First Name";
                                                                  "Scale of Pay" := Employee."Scale of Pay";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Increment Starting Date;Date       ;CaptionML=ENU=Increment Starting Date }
    { 8   ;   ;Increment Date Interval;DateFormula;CaptionML=ENU=Increment Date Interval }
    { 9   ;   ;Salary From-1       ;Decimal       ;CaptionML=ENU=Salary From-1 }
    { 10  ;   ;Salary To-1         ;Decimal       ;CaptionML=ENU=Salary To-1 }
    { 11  ;   ;Increment Amount-1  ;Decimal       ;CaptionML=ENU=Increment Amount-1 }
    { 12  ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 13  ;   ;Scale of Pay        ;Text50        ;CaptionML=ENU=Scale of Pay;
                                                   Editable=No }
    { 14  ;   ;Salary From-2       ;Decimal       ;CaptionML=ENU=Salary From-2 }
    { 15  ;   ;Salary To-2         ;Decimal       ;CaptionML=ENU=Salary To-2 }
    { 16  ;   ;Increment Amount-2  ;Decimal       ;CaptionML=ENU=Increment Amount-2 }
  }
  KEYS
  {
    {    ;Pay Increment Id                        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000004 : Record 72052;
      NoSeriesMgt@1000000001 : Codeunit 396;
      IncrementLine@1000000002 : Record 72105;
      Employee@1000000003 : Record 5200;

    PROCEDURE AssistEdit@2(OldIncrementHeader@1000 : Record 72104) : Boolean;
    VAR
      IncrementHeader@1001 : Record 72104;
    BEGIN
      WITH IncrementHeader DO BEGIN
        IncrementHeader := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Pay Revision No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Pay Revision No.",OldIncrementHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Pay Increment Id");
          Rec := IncrementHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72105 Increment Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Increment Line;
  }
  FIELDS
  {
    { 1   ;   ;Pay Increment Id    ;Code20        ;CaptionML=ENU=Pay Increment Id }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   Editable=No }
    { 5   ;   ;Line No             ;Integer       ;CaptionML=ENU=Line No }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Increment Date      ;Date          ;CaptionML=ENU=Increment Date;
                                                   Editable=No }
    { 8   ;   ;Basic Pay           ;Decimal       ;CaptionML=ENU=Basic Pay;
                                                   Editable=No }
    { 9   ;   ;Increment Amount    ;Decimal       ;CaptionML=ENU=Increment Amount;
                                                   Editable=No }
    { 10  ;   ;Revised Basic Pay   ;Decimal       ;CaptionML=ENU=Revised Basic Pay;
                                                   Editable=No }
    { 11  ;   ;Next Increment Date ;Date          ;CaptionML=ENU=Next Increment Date;
                                                   Editable=No }
    { 12  ;   ;Note Order Printed  ;Boolean       ;CaptionML=ENU=Note Order Printed }
    { 13  ;   ;Sanction Order Printed;Boolean     ;CaptionML=ENU=Sanction Order Printed }
    { 14  ;   ;Increment Posted    ;Boolean       ;CaptionML=ENU=Increment Posted }
    { 15  ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 16  ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
  }
  KEYS
  {
    {    ;Pay Increment Id,Employee No,Line No    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72106 Revision Pay Elements
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Revision Pay Elements;
  }
  FIELDS
  {
    { 1   ;   ;Pay Revision Id     ;Code20        ;CaptionML=ENU=Pay Revision Id }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code),
                                                                                       Pay Type=CONST(Addition),
                                                                                       Regular Element=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF PayElements.GET("Pay Element Code", "Location Code","Salary Plan Code") THEN BEGIN
                                                                  Description := PayElements.Description;
                                                                  "Fixed / Percent" := PayElements."Fixed/Percent";

                                                                  IF "Fixed / Percent" = "Fixed / Percent"::Percent THEN BEGIN
                                                                    "Old Amount / Percent(%)" := PayElements."Percent (%)";
                                                                    "Revised Amount / Percent(%)" := PayElements."Percent (%)";
                                                                  END;

                                                                  IF "Fixed / Percent" = "Fixed / Percent"::Fixed THEN BEGIN
                                                                    "Old Amount / Percent(%)" := PayElements.Amount;
                                                                    "Revised Amount / Percent(%)" := PayElements.Amount;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Pay Element Code }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 6   ;   ;Fixed / Percent     ;Option        ;CaptionML=ENU=Fixed / Percent;
                                                   OptionCaptionML=ENU=Fixed,Percent;
                                                   OptionString=Fixed,Percent;
                                                   Editable=No }
    { 7   ;   ;Old Amount / Percent(%);Decimal    ;CaptionML=ENU=Old Amount / Percent(%) }
    { 8   ;   ;Revised Amount / Percent(%);Decimal;OnValidate=BEGIN
                                                                "Difference Amount / Percent(%)" := "Revised Amount / Percent(%)" - "Old Amount / Percent(%)";
                                                              END;

                                                   CaptionML=ENU=Revised Amount / Percent(%) }
    { 9   ;   ;Difference Amount / Percent(%);Decimal;
                                                   CaptionML=ENU=Difference Amount / Percent(%) }
    { 10  ;   ;Revise              ;Boolean       ;CaptionML=ENU=Revise }
  }
  KEYS
  {
    {    ;Pay Revision Id,Location Code,Salary Plan Code,Pay Element Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayElements@1000000000 : Record 72060;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72107 Arrears Header Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               {
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 ArrearsLine.RESET;
                 ArrearsLine.SETRANGE("Arrears Id", "Arrears Id");
                 IF ArrearsLine.FINDFIRST THEN BEGIN
                   ArrearsLine.LOCKTABLE;
                   ArrearsLine.DELETEALL;
                 END;
               END;
               }
             END;

    CaptionML=ENU=Arrears Header Line;
  }
  FIELDS
  {
    { 1   ;   ;Arrears Id          ;Code20        ;CaptionML=ENU=Arrears Id }
    { 2   ;   ;Location Code       ;Code20        ;CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No;
                                                   NotBlank=Yes }
    { 5   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 6   ;   ;Total Arrear Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Arrears Line"."Arrear Amount" WHERE (Arrears Id=FIELD(Arrears Id),
                                                                                                         Employee No=FIELD(Employee No)));
                                                   CaptionML=ENU=Total Arrear Amount;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Arrears Id,Location Code,Salary Plan Code,Employee No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ArrearsLine@1000000000 : Record 72096;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72108 Item Piece Rate Master
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Piece Rate Master;
    LookupPageID=Page72142;
    DrillDownPageID=Page72142;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Item Code           ;Code20        ;CaptionML=ENU=Item Code;
                                                   NotBlank=Yes }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Rate                ;Decimal       ;CaptionML=ENU=Rate }
  }
  KEYS
  {
    {    ;Item Code,Location Code,Salary Plan Code;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72109 Piece Rate Pay Elements
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Piece Rate Pay Elements;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   OnValidate=BEGIN
                                                                IF PayElements.GET("Pay Element Code", "Location Code","Salary Plan Code") THEN
                                                                  Description := PayElements.Description;
                                                              END;

                                                   CaptionML=ENU=Pay Element Code }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 5   ;   ;Percent(%)          ;Decimal       ;CaptionML=ENU=Percent(%) }
    { 6   ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hourly Rate,Piece Rate;
                                                   OptionString=Hourly Rate,Piece Rate }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Pay Element Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PayElements@1000000000 : Record 72060;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72110 Piece Rate Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Piece Rate ID No." = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Piece Rate No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Piece Rate No.",xRec."No. Series",0D,"Piece Rate ID No.","No. Series");
               END;

               IF HRPayrollSetup.GET(USERID) THEN BEGIN
                 "Location Code" := HRPayrollSetup."Location Code";
                 "Salary Plan Code" := HRPayrollSetup."Salary Plan Code";
                 "Salary Cyclic Code" := HRPayrollSetup."Salary Cyclic Code";
                 "Starting Date" := HRPayrollSetup."Salary Start Date";
                 "Ending Date" := HRPayrollSetup."Salary End Date";
               END;

               "Piece Rate Entry Date" := TODAY;
               "Creator User Id" := USERID;
               "Created Date Time" := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 PieceRateLine.RESET;
                 PieceRateLine.SETRANGE("Piece Rate ID No.", "Piece Rate ID No.");
                 IF PieceRateLine.FINDFIRST THEN BEGIN
                   PieceRateLine.LOCKTABLE;
                   PieceRateLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Piece Rate Header;
    LookupPageID=Page72146;
    DrillDownPageID=Page72146;
  }
  FIELDS
  {
    { 1   ;   ;Piece Rate ID No.   ;Code20        ;OnValidate=BEGIN
                                                                IF "Piece Rate ID No." <> xRec."Piece Rate ID No." THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Piece Rate No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Piece Rate ID No. }
    { 2   ;   ;Piece Rate Entry Date;Date         ;CaptionML=ENU=Piece Rate Entry Date;
                                                   Editable=No }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 5   ;   ;Salary Cyclic Code  ;Code20        ;CaptionML=ENU=Salary Cyclic Code;
                                                   Editable=No }
    { 6   ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date;
                                                   Editable=No }
    { 7   ;   ;Ending Date         ;Date          ;CaptionML=ENU=Ending Date;
                                                   Editable=No }
    { 8   ;   ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
    { 9   ;   ;Creator User Id     ;Code20        ;CaptionML=ENU=Creator User Id;
                                                   Editable=No }
    { 10  ;   ;Created Date Time   ;DateTime      ;CaptionML=ENU=Created Date Time;
                                                   Editable=No }
    { 11  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted;
                                                   Editable=No }
    { 12  ;   ;Posted Date Time    ;DateTime      ;CaptionML=ENU=Posted Date Time;
                                                   Editable=No }
    { 13  ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
  }
  KEYS
  {
    {    ;Piece Rate ID No.                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000002 : Record 72051;
      LocationHRPayrollSetup@1000000003 : Record 72052;
      Employee@1000000000 : Record 5200;
      NoSeriesMgt@1000000004 : Codeunit 396;
      PieceRateLine@1000000005 : Record 72111;

    PROCEDURE AssistEdit@2(OldPieceRateHeader@1000 : Record 72110) : Boolean;
    VAR
      PieceRateHeader@1001 : Record 72110;
    BEGIN
      WITH PieceRateHeader DO BEGIN
        PieceRateHeader := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Piece Rate No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Piece Rate No.",OldPieceRateHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Piece Rate ID No.");
          Rec := PieceRateHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72111 Piece Rate Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Piece Rate Line;
  }
  FIELDS
  {
    { 1   ;   ;Piece Rate ID No.   ;Code20        ;CaptionML=ENU=Piece Rate ID No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 5   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN
                                                                  Name := Employee."First Name";
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Work Order Date     ;Date          ;CaptionML=ENU=Work Order Date;
                                                   NotBlank=Yes }
    { 8   ;   ;Work Order No.      ;Text30        ;CaptionML=ENU=Work Order No.;
                                                   NotBlank=Yes }
    { 9   ;   ;Item Code           ;Code20        ;TableRelation="Item Piece Rate Master";
                                                   OnValidate=BEGIN
                                                                ItemPieceRateMaster.GET("Item Code","Location Code","Salary Plan Code");
                                                                Description := ItemPieceRateMaster.Description;
                                                                Rate := ItemPieceRateMaster.Rate;
                                                                Amount := "No. Of Pieces" * Rate;
                                                              END;

                                                   CaptionML=ENU=Item Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 11  ;   ;No. Of Pieces       ;Integer       ;OnValidate=BEGIN
                                                                Amount := "No. Of Pieces" * Rate;
                                                              END;

                                                   CaptionML=ENU=No. Of Pieces;
                                                   MinValue=1;
                                                   MaxValue=9999 }
    { 12  ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                Amount := "No. Of Pieces" * Rate;
                                                              END;

                                                   CaptionML=ENU=Rate;
                                                   MinValue=1;
                                                   MaxValue=9,999.99 }
    { 13  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   Editable=No }
    { 14  ;   ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
    { 15  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
  }
  KEYS
  {
    {    ;Piece Rate ID No.,Location Code,Salary Plan Code,Line No.;
                                                   Clustered=Yes }
    {    ;Employee No.,Work Order Date             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1000000000 : Record 5200;
      ItemPieceRateMaster@1102159000 : Record 72108;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72112 Gate Pass
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               HRPayrollSetup.GET(USERID);
               LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
               IF "Out Pass No." = '' THEN BEGIN
                 LocationHRPayrollSetup.TESTFIELD("Employee Gate Pass No");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Employee Gate Pass No",xRec."No. Series",0D,"Out Pass No.","No. Series");
               END;

               "Out Pass Date" := TODAY;
               "Out Date" := TODAY;
               "Out Time" := TIME;
               "In Date" := TODAY;
               "In Time" := TIME;
               "User ID" := USERID;
               "Creator Date" := TODAY;
             END;

    CaptionML=ENU=Gate Pass;
    LookupPageID=Page72148;
    DrillDownPageID=Page72148;
  }
  FIELDS
  {
    { 1   ;   ;Out Pass No.        ;Code20        ;OnValidate=BEGIN
                                                                IF "Out Pass No." <> xRec."Out Pass No." THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Employee Gate Pass No");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Out Pass No. }
    { 2   ;   ;Out Pass Date       ;Date          ;CaptionML=ENU=Out Pass Date;
                                                   Editable=No }
    { 3   ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
    { 4   ;   ;Gate Pass Type      ;Option        ;CaptionML=ENU=Gate Pass Type;
                                                   OptionCaptionML=ENU=Permission,On-Duty;
                                                   OptionString=Permission,On-Duty }
    { 5   ;   ;Employee No.        ;Code10        ;TableRelation=Employee WHERE (Status=FILTER(Active));
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN BEGIN
                                                                  Name := Employee."First Name";
                                                                  Designation := Employee."Designation Code";
                                                                END
                                                                ELSE BEGIN
                                                                  Name := '';
                                                                  Designation := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Designation         ;Text50        ;CaptionML=ENU=Designation;
                                                   Editable=No }
    { 8   ;   ;Reason              ;Text50        ;CaptionML=ENU=Reason }
    { 9   ;   ;Out Date            ;Date          ;CaptionML=ENU=Out Date }
    { 10  ;   ;Out Time            ;Time          ;CaptionML=ENU=Out Time }
    { 11  ;   ;In Date             ;Date          ;CaptionML=ENU=In Date }
    { 12  ;   ;In Time             ;Time          ;CaptionML=ENU=In Time }
    { 13  ;   ;Sanction In-Charge  ;Code20        ;TableRelation=Employee WHERE (Status=FILTER(Active));
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Sanction In-Charge") THEN
                                                                  "In-Charge Name" := Employee."First Name"
                                                                ELSE
                                                                  "In-Charge Name" := '';
                                                              END;

                                                   CaptionML=ENU=Sanction In-Charge }
    { 14  ;   ;In-Charge Name      ;Text50        ;CaptionML=ENU=In-Charge Name;
                                                   Editable=No }
    { 15  ;   ;Authorized Person   ;Code20        ;TableRelation=Employee WHERE (Status=FILTER(Active));
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Authorized Person") THEN
                                                                  "Authorized Name" := Employee."First Name"
                                                                ELSE
                                                                  "Authorized Name" := '';
                                                              END;

                                                   CaptionML=ENU=Authorized Person }
    { 16  ;   ;Authorized Name     ;Text50        ;CaptionML=ENU=Authorized Name;
                                                   Editable=No }
    { 17  ;   ;User ID             ;Code20        ;CaptionML=ENU=User ID }
    { 18  ;   ;Creator Date        ;Date          ;CaptionML=ENU=Creator Date }
  }
  KEYS
  {
    {    ;Out Pass No.                            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HumanResourcesSetup@1000000005 : Record 5218;
      NoSeriesMgt@1000000004 : Codeunit 396;
      Employee@1000000003 : Record 5200;
      HRPayrollSetup@1102155000 : Record 72051;
      LocationHRPayrollSetup@1102155001 : Record 72052;

    PROCEDURE AssistEdit@2(OldGatePass@1000 : Record 72112) : Boolean;
    VAR
      GatePass@1001 : Record 72112;
    BEGIN
      WITH GatePass DO BEGIN
        GatePass := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Employee Gate Pass No");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Employee Gate Pass No",OldGatePass."No. Series","No. Series") THEN BEGIN
          HRPayrollSetup.GET(USERID);
          LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
          LocationHRPayrollSetup.TESTFIELD("Employee Gate Pass No");
          NoSeriesMgt.SetSeries("Out Pass No.");
          Rec := GatePass;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 72113 IF Form B Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Form B Id" = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Pay Revision No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Pay Revision No.",xRec."No. Series",0D,"Form B Id","No. Series");
               END;

               IF HRPayrollSetup.GET(USERID) THEN BEGIN
                 "Location Code" := HRPayrollSetup."Location Code";
                 "Salary Plan Code" := HRPayrollSetup."Salary Plan Code";
               END;

               "Processed Date" := TODAY;
             END;

    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 IFFormBLine.RESET;
                 IFFormBLine.SETRANGE("Form B Id", "Form B Id");
                 IF IFFormBLine.FINDFIRST THEN BEGIN
                   IFFormBLine.LOCKTABLE;
                   IFFormBLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=IF Form B Header;
    LookupPageID=Page72153;
    DrillDownPageID=Page72153;
  }
  FIELDS
  {
    { 1   ;   ;Form B Id           ;Code20        ;OnValidate=BEGIN
                                                                IF "Form B Id" <> xRec."Form B Id" THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Pay Revision No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Page B Id }
    { 2   ;   ;Processed Date      ;Date          ;CaptionML=ENU=Processed Date;
                                                   Editable=No }
    { 3   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 4   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code;
                                                   Editable=No }
    { 5   ;   ;No. Series          ;Code20        ;CaptionML=ENU=No. Series }
  }
  KEYS
  {
    {    ;Form B Id                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000004 : Record 72052;
      NoSeriesMgt@1000000001 : Codeunit 396;
      IFFormBLine@1000000002 : Record 72114;
      PayElements@1000000003 : Record 72060;

    PROCEDURE AssistEdit@2(OldIFFormBHeader@1000 : Record 72113) : Boolean;
    VAR
      IFFormBHeader@1001 : Record 72113;
    BEGIN
      WITH IFFormBHeader DO BEGIN
        IFFormBHeader := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Pay Revision No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Pay Revision No.",OldIFFormBHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Form B Id");
          Rec := IFFormBHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72114 IF Form B Line
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=IF Form B Line;
  }
  FIELDS
  {
    { 1   ;   ;Form B Id           ;Code20        ;CaptionML=ENU=Page B Id }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Month               ;Integer       ;CaptionML=ENU=Month;
                                                   MinValue=0;
                                                   MaxValue=12 }
    { 5   ;   ;Year                ;Integer       ;CaptionML=ENU=Year;
                                                   MinValue=0;
                                                   MaxValue=9999 }
    { 6   ;   ;Total No of Employees;Integer      ;CaptionML=ENU=Total No of Employees }
    { 7   ;   ;Basic Wages         ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Total Amount");
                                                              END;

                                                   CaptionML=ENU=Basic Wages }
    { 8   ;   ;D.A Amount          ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Total Amount");
                                                              END;

                                                   CaptionML=ENU=D.A Amount }
    { 9   ;   ;Over Time Amount    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Total Amount");
                                                              END;

                                                   CaptionML=ENU=Over Time Amount }
    { 10  ;   ;Bonus Amount        ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Total Amount");
                                                              END;

                                                   CaptionML=ENU=Bonus Amount }
    { 11  ;   ;Total Amount        ;Decimal       ;OnValidate=BEGIN
                                                                "Total Amount" := "Basic Wages" + "D.A Amount" + "Over Time Amount" + "Bonus Amount";
                                                              END;

                                                   CaptionML=ENU=Total Amount;
                                                   Editable=No }
    { 12  ;   ;Fine Amount         ;Decimal       ;CaptionML=ENU=Fine Amount }
    { 13  ;   ;Other Deductions    ;Decimal       ;CaptionML=ENU=Other Deductions }
    { 14  ;   ;Amount Actually Paid;Decimal       ;CaptionML=ENU=Amount Actually Paid }
    { 15  ;   ;Balance Due to the Employee;Decimal;CaptionML=ENU=Balance Due to the Employee }
    { 16  ;   ;Remarks             ;Text50        ;CaptionML=ENU=Remarks }
  }
  KEYS
  {
    {    ;Form B Id,Location Code,Salary Plan Code,Month,Year;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72115 Salary Posting
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Salary Posting;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Branch Code         ;Code20        ;TableRelation="Dimension Value" WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Branch Code }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 11  ;   ;Actual Amount       ;Decimal       ;CaptionML=ENU=Actual Amount }
    { 12  ;   ;Payable Amount      ;Decimal       ;CaptionML=ENU=Payable Amount }
    { 13  ;   ;Employee VPF Amount ;Decimal       ;CaptionML=ENU=Employee VPF Amount }
    { 14  ;   ;Employee PF / ESI Amount;Decimal   ;CaptionML=ENU=Employee PF / ESI Amount }
    { 15  ;   ;Employer PF / ESI Amount;Decimal   ;CaptionML=ENU=Employer PF / ESI Amount }
    { 16  ;   ;Employer EPS Amount ;Decimal       ;CaptionML=ENU=Employer EPS Amount }
    { 17  ;   ;PF Admin Charges Amount;Decimal    ;CaptionML=ENU=PF Admin Charges Amount }
    { 18  ;   ;PF EDLI Amount      ;Decimal       ;CaptionML=ENU=PF EDLI Amount }
    { 19  ;   ;PF RIFA Amount      ;Decimal       ;CaptionML=ENU=PF RIFA Amount }
    { 20  ;   ;Journal Batch Name  ;Code20        ;CaptionML=ENU=Journal Batch Name }
    { 21  ;   ;Journal Template Name;Code20       ;CaptionML=ENU=Journal Template Name }
    { 22  ;   ;Salary Due Document No;Code20      ;CaptionML=ENU=Salary Due Document No }
    { 23  ;   ;Salary Due Posted Date;Date        ;CaptionML=ENU=Salary Due Posted Date }
    { 24  ;   ;Salary Payment Document No.;Code20 ;CaptionML=ENU=Salary Payment Document No. }
    { 25  ;   ;Salary Payment Date ;Date          ;CaptionML=ENU=Salary Payment Date }
    { 26  ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 27  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=ENU=Account No. }
    { 28  ;   ;Pay Method          ;Option        ;CaptionML=ENU=Pay Method;
                                                   OptionCaptionML=ENU=Cash,Cheque,Bank Transfer;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 29  ;   ;Cheque No.          ;Code20        ;CaptionML=ENU=Cheque No. }
    { 30  ;   ;Cheque Date         ;Date          ;CaptionML=ENU=Cheque Date }
    { 31  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 32  ;   ;Emp Posting Group   ;Code20        ;TableRelation="Payroll Employee Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                         Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Emp Posting Group }
    { 33  ;   ;Pay Bus. Posting Group;Code20      ;TableRelation="Payroll Business Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                         Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Bus. Posting Group }
    { 34  ;   ;Pay Element Description;Text50     ;CaptionML=ENU=Pay Element Description }
    { 35  ;   ;Salary Due Entry    ;Boolean       ;CaptionML=ENU=Salary Due Entry;
                                                   Editable=No }
    { 36  ;   ;Salary Payment Entry;Boolean       ;CaptionML=ENU=Salary Payment Entry;
                                                   Editable=No }
    { 37  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Branch Code,Pay Type,Sorting Order;
                                                   Clustered=Yes }
    {    ;Sorting Order,Pay Element Code,Pay Type  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DimMgt@1102155000 : Codeunit 408;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Processed Salary","Branch Code",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72116 Bonus Header
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Bonus Id." = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Bonus No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Bonus No.",xRec."No. Series",0D,"Bonus Id.","No. Series");
               END;

               "Bonus Declare Date" := TODAY;

               IF HRPayrollSetup.GET(USERID) THEN BEGIN
                 "Location Code" := HRPayrollSetup."Location Code";
                 "Salary Plan Code" := HRPayrollSetup."Salary Plan Code";
                 "Bonus Min No of Years" := LocationHRPayrollSetup."Bonus Min. No of Years";
                 "Bonus Max No of Years" := LocationHRPayrollSetup."Bonus Max No of Years";
                 "Bonusable Earnings Min Limit" := LocationHRPayrollSetup."Bonusable Earning Min Limit";
                 "Bonusable Earnings Max Limit" := LocationHRPayrollSetup."Bonusable Earning Max Limit";
                 "Bonus (%)" := LocationHRPayrollSetup."Bonus (%)";
                 "Ex-Gratia (%)" := LocationHRPayrollSetup."Ex-Gratia (%)";
               END;

               PayrollYear.RESET;
               PayrollYear.SETRANGE("Location Code", "Location Code");
               PayrollYear.SETRANGE("Salary Plan Code", "Salary Plan Code");
               PayrollYear.SETRANGE("Year Type", PayrollYear."Year Type"::"Bonus Year");
               PayrollYear.SETRANGE(Closed, FALSE);
               IF PayrollYear.FINDFIRST THEN BEGIN
                 "Bonus Year" := PayrollYear."Year Code";
                 "Bonus Start Date" := PayrollYear."Year Start Date";
                 "Bonus End Date" := PayrollYear."Year End Date";
               END;
             END;

    OnDelete=BEGIN
               IF CONFIRM('Are Sure to Delete the Records <Yes/No> Delete All Lines..!!') THEN BEGIN
                 BonusLine.RESET;
                 BonusLine.SETRANGE("Bonus Id.", "Bonus Id.");
                 IF BonusLine.FINDFIRST THEN BEGIN
                   BonusLine.LOCKTABLE;
                   BonusLine.DELETEALL;
                 END;
               END;
             END;

    CaptionML=ENU=Bonus Header;
    LookupPageID=Page72160;
    DrillDownPageID=Page72160;
  }
  FIELDS
  {
    { 1   ;   ;Bonus Id.           ;Code20        ;OnValidate=BEGIN
                                                                IF "Bonus Id." <> xRec."Bonus Id." THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Bonus No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bonus Id. }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Bonus Year          ;Code20        ;CaptionML=ENU=Bonus Year }
    { 5   ;   ;Bonus Start Date    ;Date          ;CaptionML=ENU=Bonus Start Date }
    { 6   ;   ;Bonus End Date      ;Date          ;CaptionML=ENU=Bonus End Date }
    { 7   ;   ;Bonus Declare Date  ;Date          ;CaptionML=ENU=Bonus Declare Date }
    { 8   ;   ;Bonus Min No of Years;Integer      ;CaptionML=ENU=Bonus Min No of Years }
    { 9   ;   ;Bonus Max No of Years;Integer      ;CaptionML=ENU=Bonus Max No of Years }
    { 10  ;   ;Bonusable Earnings Min Limit;Decimal;
                                                   CaptionML=ENU=Bonusable Earnings Min Limit }
    { 11  ;   ;Bonusable Earnings Max Limit;Decimal;
                                                   CaptionML=ENU=Bonusable Earnings Max Limit }
    { 12  ;   ;Bonus (%)           ;Decimal       ;CaptionML=ENU=Bonus (%) }
    { 13  ;   ;Ex-Gratia (%)       ;Decimal       ;CaptionML=ENU=Ex-Gratia (%) }
    { 14  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 15  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary] }
    { 16  ;   ;Staff Total EL Days ;Decimal       ;CaptionML=ENU=Staff Total EL Days }
    { 17  ;   ;Staff Total CL Days ;Decimal       ;CaptionML=ENU=Staff Total CL Days }
    { 18  ;   ;Worker Total EL Days;Decimal       ;CaptionML=ENU=Worker Total EL Days }
    { 19  ;   ;Worker Total CL Days;Decimal       ;CaptionML=ENU=Worker Total CL Days }
    { 20  ;   ;Total Days In a Year;Decimal       ;CaptionML=ENU=Total Days In a Year }
  }
  KEYS
  {
    {    ;Bonus Id.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000004 : Record 72052;
      PayrollYear@1000000002 : Record 72054;
      NoSeriesMgt@1000000001 : Codeunit 396;
      BonusLine@1000000003 : Record 72117;

    PROCEDURE AssistEdit@2(OldBonusHeader@1000 : Record 72116) : Boolean;
    VAR
      BonusHeader@1001 : Record 72116;
    BEGIN
      WITH BonusHeader DO BEGIN
        BonusHeader := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Bonus No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Bonus No.",OldBonusHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("Bonus Id.");
          Rec := BonusHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72117 Bonus Line
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               BonusDetailedLine.RESET;
               BonusDetailedLine.SETRANGE("Location Code", "Location Code");
               BonusDetailedLine.SETRANGE("Salary Plan Code", "Salary Plan Code");
               BonusDetailedLine.SETRANGE("Bonus Id.", "Bonus Id.");
               BonusDetailedLine.SETRANGE("Employee No", "Employee No");
               IF BonusDetailedLine.FINDFIRST THEN BEGIN
                 BonusDetailedLine.LOCKTABLE;
                 BonusDetailedLine.DELETEALL;
               END;
             END;

    CaptionML=ENU=Bonus Line;
  }
  FIELDS
  {
    { 1   ;   ;Bonus Id.           ;Code20        ;CaptionML=ENU=Bonus Id. }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Bonus Year          ;Code20        ;CaptionML=ENU=Bonus Year }
    { 5   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                                  "Employee Category" := Employee."Employee Category";
                                                                END
                                                                ELSE BEGIN
                                                                  Name := '';
                                                                  "Employee Category" := "Employee Category"::" ";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Pay Element Code    ;Code20        ;CaptionML=ENU=Pay Element Code }
    { 8   ;   ;Service Year        ;Integer       ;CaptionML=ENU=Service Year }
    { 9   ;   ;No of Days Worked   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bonus Detailed Line"."Days Worked" WHERE (Bonus Id.=FIELD(Bonus Id.),
                                                                                                              Location Code=FIELD(Location Code),
                                                                                                              Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                              Bonus Year=FIELD(Bonus Year),
                                                                                                              Employee No=FIELD(Employee No)));
                                                   CaptionML=ENU=No of Days Worked;
                                                   Editable=No }
    { 10  ;   ;Bonusable Earnings  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bonus Detailed Line"."Bonusable Earnings" WHERE (Bonus Id.=FIELD(Bonus Id.),
                                                                                                                     Location Code=FIELD(Location Code),
                                                                                                                     Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                                     Bonus Year=FIELD(Bonus Year),
                                                                                                                     Employee No=FIELD(Employee No)));
                                                   CaptionML=ENU=Bonusable Earnings;
                                                   Editable=No }
    { 11  ;   ;Bonus %             ;Decimal       ;CaptionML=ENU=Bonus % }
    { 12  ;   ;Ex-Gratia %         ;Decimal       ;CaptionML=ENU=Ex-Gratia % }
    { 13  ;   ;Bonus Amt           ;Decimal       ;CaptionML=ENU=Bonus Amt }
    { 14  ;   ;Ex-Gratia Amt       ;Decimal       ;CaptionML=ENU=Ex-Gratia Amt }
    { 15  ;   ;Gross Bonus Amt     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bonus Misc Add/Deductions".Amount WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Bonus ID.=FIELD(Bonus Id.),
                                                                                                             Employee No.=FIELD(Employee No),
                                                                                                             Pay Type=FILTER(Addition)));
                                                   CaptionML=ENU=Gross Bonus Amt;
                                                   Editable=No }
    { 16  ;   ;Deduction Amt       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bonus Misc Add/Deductions".Amount WHERE (Location Code=FIELD(Location Code),
                                                                                                             Salary Plan Code=FIELD(Salary Plan Code),
                                                                                                             Bonus ID.=FIELD(Bonus Id.),
                                                                                                             Employee No.=FIELD(Employee No),
                                                                                                             Pay Type=FILTER(Deduction)));
                                                   CaptionML=ENU=Deduction Amt;
                                                   Editable=No }
    { 17  ;   ;Total Net Bonus Amt ;Decimal       ;CaptionML=ENU=Total Net Bonus Amt;
                                                   Editable=No }
    { 18  ;   ;Select (Y/N)        ;Boolean       ;CaptionML=ENU=Select (Y/N) }
    { 19  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary] }
    { 20  ;   ;Service Month       ;Decimal       ;CaptionML=ENU=Service Month }
    { 21  ;   ;Total Days In a Year;Decimal       ;CaptionML=ENU=Total Days In a Year }
  }
  KEYS
  {
    {    ;Bonus Id.,Location Code,Salary Plan Code,Bonus Year,Employee No;
                                                   Clustered=Yes }
    {    ;Employee Category,Service Year,Service Month,Employee No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1102159000 : Record 5200;
      BonusDetailedLine@1102159001 : Record 72118;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72118 Bonus Detailed Line
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Bonus Detailed Line;
    LookupPageID=Page72161;
    DrillDownPageID=Page72161;
  }
  FIELDS
  {
    { 1   ;   ;Bonus Id.           ;Code20        ;CaptionML=ENU=Bonus Id. }
    { 2   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 4   ;   ;Bonus Year          ;Code20        ;CaptionML=ENU=Bonus Year }
    { 5   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Salary Cycle Code }
    { 6   ;   ;Employee No         ;Code20        ;OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials;
                                                                  "Employee Category" := Employee."Employee Category";
                                                                END
                                                                ELSE BEGIN
                                                                  Name := '';
                                                                  "Employee Category" := "Employee Category"::" ";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 7   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 8   ;   ;Days Worked         ;Decimal       ;CaptionML=ENU=Days Worked }
    { 9   ;   ;Bonusable Earnings  ;Decimal       ;CaptionML=ENU=Bonusable Earnings }
    { 10  ;   ;Projection Not Required;Boolean    ;CaptionML=ENU=Projection Not Required }
    { 11  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary] }
  }
  KEYS
  {
    {    ;Employee No,Bonus Id.,Location Code,Salary Plan Code,Bonus Year,Salary Cycle Code;
                                                   SumIndexFields=Days Worked,Bonusable Earnings;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1102159000 : Record 5200;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72119 Bonus Misc Add/Deductions
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Bonus Misc Add/Deductions;
    LookupPageID=Page72163;
    DrillDownPageID=Page72163;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Bonus ID.           ;Code20        ;CaptionML=ENU=Bonus ID. }
    { 4   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No.") THEN
                                                                  Name := Employee."First Name" + ' ' + Employee.Initials
                                                                ELSE
                                                                  Name := '';
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 5   ;   ;Pay Element Code    ;Code20        ;CaptionML=ENU=Pay Element Code }
    { 6   ;   ;Bonus Year Code     ;Code20        ;CaptionML=ENU=Bonus Year Code }
    { 7   ;   ;Bonus Start Date    ;Date          ;CaptionML=ENU=Bonus Start Date }
    { 8   ;   ;Bonus End Date      ;Date          ;CaptionML=ENU=Bonus End Date }
    { 9   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 10  ;   ;Paid Category       ;Option        ;CaptionML=ENU=Paid Category;
                                                   OptionCaptionML=ENU=Monthly,Yearly;
                                                   OptionString=Monthly,Yearly;
                                                   Editable=No }
    { 11  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement;
                                                   Editable=No }
    { 12  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 13  ;   ;Created Date        ;Date          ;CaptionML=ENU=Created Date;
                                                   Editable=No }
    { 14  ;   ;User Id             ;Code20        ;CaptionML=ENU=User Id }
    { 15  ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 16  ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 17  ;   ;CL / EL Paid Days   ;Decimal       ;CaptionML=ENU=CL / EL Paid Days }
    { 18  ;   ;System Generated    ;Boolean       ;CaptionML=ENU=System Generated }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Bonus ID.,Employee No.,Pay Element Code;
                                                   Clustered=Yes }
    {    ;Pay Type                                ;SumIndexFields=Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Employee@1102159000 : Record 5200;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72120 Employee Loans
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Location Code" = '' THEN BEGIN
                 HRPayrollSetup.GET(USERID);
                 LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                 LocationHRPayrollSetup.TESTFIELD("Loan No.");
                 NoSeriesMgt.InitSeries(LocationHRPayrollSetup."Loan No.",
                 xRec."No. Series",0D,"Loan Id","No. Series");
               END;

               "Loan Sanctioned Date" := TODAY;
               "Created Date" := TODAY;
               "Created User Id" := USERID;
             END;

    OnModify=BEGIN
               "Modified Date" := TODAY;
               "Modified User Id" := USERID;
             END;

    OnDelete=BEGIN
               //ERROR('You Cannot Delete Posted Transaction');
             END;

    CaptionML=ENU=Employee Loans;
    LookupPageID=Page72166;
    DrillDownPageID=Page72166;
  }
  FIELDS
  {
    { 1   ;   ;Loan Id             ;Code20        ;OnValidate=BEGIN
                                                                IF "Loan Id" <> xRec."Loan Id" THEN BEGIN
                                                                  HRPayrollSetup.GET(USERID);
                                                                  LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
                                                                  NoSeriesMgt.TestManual(LocationHRPayrollSetup."Loan No.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Loan Id }
    { 2   ;   ;Employee No         ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF Employee.GET("Employee No") THEN BEGIN
                                                                  "Location Code" := Employee."Location Code";
                                                                  "Salary Plan Code" := Employee."Salary Plan Code";
                                                                  Name := Employee."First Name" + '.' + Employee.Initials;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No }
    { 3   ;   ;Loan Code           ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code),
                                                                                       Loan Element=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF PayElements.GET("Loan Code","Location Code","Salary Plan Code") THEN BEGIN
                                                                  "Purpose of Loan" := PayElements.Description;
                                                                  "Loan Sanctioned Amount" := PayElements.Amount;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Loan Code }
    { 4   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code;
                                                   Editable=No }
    { 5   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code;
                                                   Editable=No }
    { 6   ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=No }
    { 7   ;   ;Purpose of Loan     ;Text50        ;CaptionML=ENU=Purpose of Loan }
    { 8   ;   ;Loan Starting Date  ;Date          ;CaptionML=ENU=Loan Starting Date }
    { 9   ;   ;Loan Sanctioned Date;Date          ;CaptionML=ENU=Loan Sanctioned Date }
    { 10  ;   ;Loan Sanctioned Amount;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Loan Starting Date");
                                                                ValidateBalanceAmount;
                                                              END;

                                                   CaptionML=ENU=Loan Sanctioned Amount }
    { 11  ;   ;Deduction Amount    ;Decimal       ;OnValidate=BEGIN
                                                                ValidateBalanceAmount;
                                                              END;

                                                   CaptionML=ENU=Deduction Amount }
    { 12  ;   ;Total Loans Deducted;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Processed Salary"."Payable Amount" WHERE (Location Code=FIELD(Location Code),
                                                                                                              Employee No=FIELD(Employee No),
                                                                                                              Branch Code=FIELD(Loan Id)));
                                                   CaptionML=ENU=Total Loans Deducted;
                                                   Editable=No }
    { 13  ;   ;Loan Balance Amount ;Decimal       ;CaptionML=ENU=Loan Balance Amount;
                                                   Editable=No }
    { 14  ;   ;Repayment Date      ;Date          ;CaptionML=ENU=Repayment Date }
    { 15  ;   ;Repayment Amount    ;Decimal       ;OnValidate=BEGIN
                                                                ValidateBalanceAmount;
                                                              END;

                                                   CaptionML=ENU=Repayment Amount }
    { 16  ;   ;No Deduction Request;Boolean       ;CaptionML=ENU=No Deduction Request }
    { 17  ;   ;Completed           ;Boolean       ;CaptionML=ENU=Completed }
    { 18  ;   ;Created Date        ;Date          ;CaptionML=ENU=Created Date }
    { 19  ;   ;Created User Id     ;Code20        ;CaptionML=ENU=Created User Id }
    { 20  ;   ;Modified Date       ;Date          ;CaptionML=ENU=Modified Date }
    { 21  ;   ;Modified User Id    ;Code20        ;CaptionML=ENU=Modified User Id }
    { 40  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
  }
  KEYS
  {
    {    ;Loan Id                                 ;Clustered=Yes }
    {    ;Employee No                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000005 : Record 72052;
      NoSeriesMgt@1000000004 : Codeunit 396;
      Employee@1000000003 : Record 5200;
      PayElements@1102159001 : Record 72060;
      EndDate@1000000002 : Date;

    PROCEDURE AssistEdit@2(OldEmployeeLoans@1000 : Record 72120) : Boolean;
    VAR
      EmployeeLoans@1102159000 : Record 72120;
    BEGIN
      WITH EmployeeLoans DO BEGIN
        EmployeeLoans := Rec;
        HRPayrollSetup.GET(USERID);
        LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
        LocationHRPayrollSetup.TESTFIELD("Loan No.");
        IF NoSeriesMgt.SelectSeries(LocationHRPayrollSetup."Loan No.",
           OldEmployeeLoans."No. Series","No. Series")
        THEN BEGIN
          NoSeriesMgt.SetSeries("Loan Id");
          Rec := EmployeeLoans;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateBalanceAmount@1102159000();
    BEGIN
      CALCFIELDS("Total Loans Deducted");
      "Loan Balance Amount" := "Loan Sanctioned Amount" - "Total Loans Deducted" - "Repayment Amount";
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 72121 Salary Posting-1
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Salary Posting;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code20        ;TableRelation="Location HR & Payroll Setup";
                                                   CaptionML=ENU=Location Code }
    { 2   ;   ;Salary Plan Code    ;Code20        ;TableRelation="Salary Plan";
                                                   CaptionML=ENU=Salary Plan Code }
    { 3   ;   ;Salary Cycle Code   ;Code20        ;TableRelation="Payroll Month & Year" WHERE (Location Code=FIELD(Location Code),
                                                                                               Salary Plan Code=FIELD(Salary Plan Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Salary Cycle Code }
    { 4   ;   ;Payroll Start Date  ;Date          ;CaptionML=ENU=Payroll Start Date }
    { 5   ;   ;Payroll End Date    ;Date          ;CaptionML=ENU=Payroll End Date }
    { 6   ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 7   ;   ;Month               ;Integer       ;CaptionML=ENU=Month }
    { 8   ;   ;Branch Code         ;Code20        ;TableRelation="Dimension Value" WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Branch Code }
    { 9   ;   ;Pay Element Code    ;Code20        ;TableRelation="Pay Elements" WHERE (Location Code=FIELD(Location Code),
                                                                                       Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Element Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Pay Type            ;Option        ;CaptionML=ENU=Pay Type;
                                                   OptionCaptionML=ENU=Addition,Deduction,Reimbursement;
                                                   OptionString=Addition,Deduction,Reimbursement }
    { 11  ;   ;Actual Amount       ;Decimal       ;CaptionML=ENU=Actual Amount }
    { 12  ;   ;Payable Amount      ;Decimal       ;CaptionML=ENU=Payable Amount }
    { 13  ;   ;Employee VPF Amount ;Decimal       ;CaptionML=ENU=Employee VPF Amount }
    { 14  ;   ;Employee PF / ESI Amount;Decimal   ;CaptionML=ENU=Employee PF / ESI Amount }
    { 15  ;   ;Employer PF / ESI Amount;Decimal   ;CaptionML=ENU=Employer PF / ESI Amount }
    { 16  ;   ;Employer EPS Amount ;Decimal       ;CaptionML=ENU=Employer EPS Amount }
    { 17  ;   ;PF Admin Charges Amount;Decimal    ;CaptionML=ENU=PF Admin Charges Amount }
    { 18  ;   ;PF EDLI Amount      ;Decimal       ;CaptionML=ENU=PF EDLI Amount }
    { 19  ;   ;PF RIFA Amount      ;Decimal       ;CaptionML=ENU=PF RIFA Amount }
    { 20  ;   ;Journal Batch Name  ;Code20        ;CaptionML=ENU=Journal Batch Name }
    { 21  ;   ;Journal Template Name;Code20       ;CaptionML=ENU=Journal Template Name }
    { 22  ;   ;Salary Due Document No;Code20      ;CaptionML=ENU=Salary Due Document No }
    { 23  ;   ;Salary Due Posted Date;Date        ;CaptionML=ENU=Salary Due Posted Date }
    { 24  ;   ;Salary Payment Document No.;Code20 ;CaptionML=ENU=Salary Payment Document No. }
    { 25  ;   ;Salary Payment Date ;Date          ;CaptionML=ENU=Salary Payment Date }
    { 26  ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 27  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=ENU=Account No. }
    { 28  ;   ;Pay Method          ;Option        ;CaptionML=ENU=Pay Method;
                                                   OptionCaptionML=ENU=Cash,Cheque,Bank Transfer;
                                                   OptionString=Cash,Cheque,Bank Transfer }
    { 29  ;   ;Cheque No.          ;Code20        ;CaptionML=ENU=Cheque No. }
    { 30  ;   ;Cheque Date         ;Date          ;CaptionML=ENU=Cheque Date }
    { 31  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 32  ;   ;Emp Posting Group   ;Code20        ;TableRelation="Payroll Employee Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                         Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Emp Posting Group }
    { 33  ;   ;Pay Bus. Posting Group;Code20      ;TableRelation="Payroll Business Posting Group" WHERE (Location Code=FIELD(Location Code),
                                                                                                         Salary Plan Code=FIELD(Salary Plan Code));
                                                   CaptionML=ENU=Pay Bus. Posting Group }
    { 34  ;   ;Pay Element Description;Text50     ;CaptionML=ENU=Pay Element Description }
    { 35  ;   ;Salary Due Entry    ;Boolean       ;CaptionML=ENU=Salary Due Entry;
                                                   Editable=No }
    { 36  ;   ;Salary Payment Entry;Boolean       ;CaptionML=ENU=Salary Payment Entry;
                                                   Editable=No }
    { 37  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 38  ;   ;Employee Category   ;Option        ;CaptionML=ENU=Employee Category;
                                                   OptionCaptionML=ENU=" ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary";
                                                   OptionString=[ ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary] }
  }
  KEYS
  {
    {    ;Location Code,Salary Plan Code,Salary Cycle Code,Employee Category,Pay Type,Sorting Order;
                                                   Clustered=Yes }
    {    ;Sorting Order,Pay Element Code,Pay Type  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DimMgt@1102155000 : Codeunit 408;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Processed Salary","Branch Code",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Tables Added for Payroll Module.
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Table 91865 Course and Stream
{
  OBJECT-PROPERTIES
  {
    Date=15-03-18;
    Time=10:03:00;
    Modified=Yes;
    Version List=EDU;
  }
  PROPERTIES
  {
    LookupPageID=Page91915;
    DrillDownPageID=Page91915;
  }
  FIELDS
  {
    { 1   ;   ;Course              ;Text80         }
    { 2   ;   ;Course Stream       ;Text30         }
  }
  KEYS
  {
    {    ;Course                                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 71000 Admission
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RecStudent@1102155000 : Integer;
      Text000@1102155002 : TextConst 'ENU=Journal already created';
      Text001@1102155003 : TextConst 'ENU=Sales completed.';
      Text002@1102155004 : TextConst 'ENU=Registration completed.';
      Text003@1102155005 : TextConst 'ENU=Student capacity for the class %1';
      Text004@1102155006 : TextConst 'ENU=Please submit all the certificates.';
      Text005@1102155007 : TextConst 'ENU=Subject group needs to be captured for this application.';
      Text006@1102155008 : TextConst 'ENU=Subject needs to be filled in for the group.';
      Text007@1102155009 : TextConst 'ENU=Sale of Application closed.';
      Text008@1102155010 : TextConst 'ENU=Registration closed.';
      Text009@1102155011 : TextConst 'ENU=Student Capacity for the Class %1, Curriculam %2 exceedes';
      Text010@1102159000 : TextConst 'ENU=Reason Should not be Empty for Free Prospectus';

    PROCEDURE "Application Journal"@1102155000("ApplnNo."@1102155000 : Code[20];Process@1102155014 : 'Sales,Registration');
    VAR
      "No.SeriesLine"@1102155012 : Record 309;
      "TempDocNo."@1102155011 : Code[20];
      Application@1102155010 : Record 71002;
      AdmissionSetup@1102155009 : Record 71000;
      GenJnlLine@1102155008 : Record 81;
      "No.seriesManagement"@1102155004 : Codeunit 396;
      PaymentMethod@1102155001 : Record 289;
      Enquiry@1102155002 : Record 71001;
      TxtBalAccType@1102155003 : Text[30];
    BEGIN
      // Start 02.KATHIR
      AdmissionSetup.GET;
      AdmissionSetup.TESTFIELD("Journal Template Name");
      Application.GET("ApplnNo.");
      Application.TESTFIELD(Class);
      Application.TESTFIELD("Curriculum Intrested");
      Application.TESTFIELD("Academic Year");
      Application.TESTFIELD("Date of Birth");
      CLEAR("TempDocNo.");

      IF (Application."Free Prospectus" = TRUE) AND
        (Application.Reason = '') THEN
        ERROR(Text010);

      IF Process = Process::Sales THEN BEGIN
        IF ( NOT (Application."Free Prospectus") AND
          (Application."Application Status"=0))
        THEN BEGIN
          PaymentMethod.GET(Application."Mode of Payment");
          PaymentMethod.TESTFIELD("Bal. Account No.");
        END;
      END;

      IF Process = Process::Registration THEN BEGIN
        PaymentMethod.GET(Application."Mode of Payment");
        PaymentMethod.TESTFIELD("Bal. Account No.");
      END;

      IF Process = Process::Sales THEN BEGIN
        IF (Application."Application Status" = Application."Application Status"::Sold) OR
           (Application."Application Status" = Application."Application Status"::Received)
        THEN
          ERROR(Text000);
        AdmissionSetup.TESTFIELD("Application Sales Batch Name");
        AdmissionSetup.TESTFIELD("Application Sales Posting No.");
        "TempDocNo." := "No.seriesManagement".GetNextNo(AdmissionSetup."Application Sales Posting No.",0D,FALSE);

      END;

      IF Process = Process::Registration THEN BEGIN
        IF Application."Application Status" = Application."Application Status"::Received THEN
          ERROR(Text000);
        AdmissionSetup.TESTFIELD("Registration Batch Name");
        AdmissionSetup.TESTFIELD("Registration Posting No.");
        "TempDocNo." := "No.seriesManagement".GetNextNo(AdmissionSetup."Registration Posting No.",0D,FALSE);
      END;

      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Journal Template Name",AdmissionSetup."Journal Template Name");
      IF Process = Process::Sales THEN
        GenJnlLine.SETRANGE("Journal Batch Name",AdmissionSetup."Application Sales Batch Name")
      ELSE
        IF Process = Process::Registration THEN
          GenJnlLine.SETRANGE("Journal Batch Name",AdmissionSetup."Registration Batch Name");

      IF GenJnlLine.FINDLAST THEN
        GenJnlLine."Line No." := GenJnlLine."Line No." + 10000
      ELSE
        GenJnlLine."Line No." := 10000;

      IF Process = Process::Sales THEN BEGIN
        GenJnlLine."Journal Batch Name" := AdmissionSetup."Application Sales Batch Name";
        GenJnlLine."Posting Date" := Application."Date of Sale";
        GenJnlLine."Credit Amount" := Application."Application Cost";
        GenJnlLine."Cheque No."  := Application."Cheque / DD No.";
        GenJnlLine."Cheque Date" := Application."Cheque / DD Date";
      END;

      IF Process = Process::Registration THEN BEGIN
        GenJnlLine."Journal Batch Name" := AdmissionSetup."Registration Batch Name";
        GenJnlLine."Posting Date" := Application."Date of Receive";
        GenJnlLine."Credit Amount" := Application."Registration Cost";
        GenJnlLine."Cheque No."  := Application."Reg DD / Cheque No";
        GenJnlLine."Cheque Date" := Application."Reg DD / Cheque Date";
      END;

      GenJnlLine.VALIDATE("Credit Amount");

      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";

      IF Process = Process::Sales THEN
        GenJnlLine."Account No." := AdmissionSetup."Application Cost Account No.";

      IF Process = Process::Registration THEN
        GenJnlLine."Account No." := AdmissionSetup."Registration Cost Account No.";

      GenJnlLine.VALIDATE("Account No.");
      GenJnlLine."Journal Template Name" := AdmissionSetup."Journal Template Name";
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
      GenJnlLine."Document No." := "TempDocNo.";

      IF PaymentMethod."Bal. Account Type"=0 THEN
        GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";

      IF PaymentMethod."Bal. Account Type"=1 THEN
        GenJnlLine."Bal. Account Type":= GenJnlLine."Bal. Account Type"::"Bank Account";

      GenJnlLine."Bal. Account No." := PaymentMethod."Bal. Account No.";
      GenJnlLine.VALIDATE("Credit Amount");
      GenJnlLine.Description := Application."No.";
      IF GenJnlLine.Amount <> 0 THEN
      GenJnlLine.INSERT(TRUE);

      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Journal Template Name",AdmissionSetup."Journal Template Name");

      IF Process = Process::Sales THEN
        GenJnlLine.SETRANGE("Journal Batch Name",AdmissionSetup."Application Sales Batch Name");
      IF Process = Process::Registration THEN
        GenJnlLine.SETRANGE("Journal Batch Name",AdmissionSetup."Registration Batch Name");


      GenJnlLine.SETRANGE("Document No.","TempDocNo.");
      IF GenJnlLine.FINDSET THEN
        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJnlLine);

        IF Process = Process::Sales THEN BEGIN
          Application."Application Status" := Application."Application Status"::Sold;
          IF Enquiry.GET(Application."Enquiry No.") THEN BEGIN
            Enquiry."Enquiry Closed" := TRUE;
            Enquiry.MODIFY;
          END;

        END ELSE
          IF Process = Process::Registration THEN
          BEGIN
            Application."Application Status" := Application."Application Status"::Received;
            Application."Hostel Acommodation" := TRUE;
          END;

        Application.MODIFY;

        IF Process = Process::Sales THEN
          MESSAGE(Text001)
        ELSE
          IF Process = Process::Registration THEN
            MESSAGE(Text002);
      // Stop 02.KATHIR
    END;

    PROCEDURE "Update Receipt"@1102155003("ApplNo."@1102155000 : Code[20]);
    VAR
      Application@1102155006 : Record 71002;
      AdmissionSetup@1102155005 : Record 71000;
      Process@1102155001 : 'Sales,Registration';
    BEGIN
      //Start 03.KATHIR
      Application.GET("ApplNo.");
      AdmissionSetup.GET;

      IF AdmissionSetup."Registration Cost Needed" THEN BEGIN
       IF Application."Date of Receive" = 0D THEN
        Application."Date of Receive" := TODAY;
        Application.MODIFY;
        "Application Journal"("ApplNo.",Process::Registration);
      END ELSE BEGIN
       IF Application."Date of Receive" = 0D THEN
        Application."Date of Receive" := TODAY;
        Application."Application Status" := Application."Application Status"::Received;
        Application.MODIFY;
        MESSAGE(Text002);
      END;
      //Stop 03.KATHIR
    END;

    PROCEDURE AllotStudentNo@1102155002(ApplNo@1102155000 : Code[20]);
    VAR
      Application@1102155001 : Record 71002;
      Admission@1102155002 : Record 71000;
      StudentNo@1102155003 : Code[20];
      NoSeriesMgmt@1102155004 : Codeunit 396;
      RollNo@1102155005 : Code[20];
      Student@1102155006 : Record 71046;
      Customer@1102155007 : Record 18;
      TEXT0001@1102155008 : TextConst 'ENU="Roll No. %1 Generated for this application "';
      TEXT0002@1102155009 : TextConst 'ENU=Already Converted as Student';
      FeeGeneration@1102155010 : Report 71067;
      InitialFeeSetup@1102155013 : Record 71908;
      CombineCode@1102155012 : Text[50];
      IntCount@1102155011 : Integer;
      ShiptoAddress@1102155014 : Record 222;
      ClassCard@1102155015 : Record 71006;
      ClassSection@1102155016 : Record 71015;
      SetSection@1102155017 : Code[10];
      Student1@1102155018 : Record 71046;
      SkipBool@1102155019 : Boolean;
      JudesFeeMang@1102155020 : Codeunit 71046;
    BEGIN
       // Start 04.KATHIR
      Application.GET(ApplNo);
      IF Application."Application Status" = Application."Application Status"::Admitted THEN
        ERROR(TEXT0002);

      {
      IntCount := 0;
      InitialFeeSetup.RESET;
      IF InitialFeeSetup.FINDSET THEN
        REPEAT
          IntCount += 1;
          CombineCode += InitialFeeSetup."Fee Type Code";
          IF IntCount <> InitialFeeSetup.COUNT THEN
            CombineCode += '|';
        UNTIL InitialFeeSetup.NEXT = 0;
      }

      Application.TESTFIELD("Application Status",Application."Application Status"::Selected);
      Application.TESTFIELD(Class);
      Application.TESTFIELD("Academic Year");
      Application.TESTFIELD("Curriculum Intrested");

      Admission.GET;
      Admission.TESTFIELD("Student No.");
      Admission.TESTFIELD("Gen. Bus. Posting Group");
      Admission.TESTFIELD("Customer Posting Group");

      // Start 14.VIGNESH
      ClassSection.RESET;
      ClassSection.SETCURRENTKEY(Class,Curriculum,"Academic Year");
      ClassSection.SETRANGE(Class,Application.Class);
      ClassSection.SETRANGE(Curriculum,Application."Curriculum Intrested");
      ClassSection.SETRANGE("Academic Year",Application."Academic Year");
      ClassSection.CALCSUMS(Capacity);

      Student1.RESET;
      Student1.SETCURRENTKEY(Class,Curriculum,"Academic Year");
      Student1.SETRANGE(Class,Application.Class);
      Student1.SETRANGE(Curriculum,Application."Curriculum Intrested");
      Student1.SETRANGE("Academic Year",Application."Academic Year");
      Student1.SETRANGE("Student Status",Student1."Student Status"::Student);
      IF Student1.COUNT >= ClassSection.Capacity THEN
        ERROR(Text009,Application.Class,Application."Curriculum Intrested");
      SkipBool := FALSE;

      IF ClassSection.FINDSET THEN
        REPEAT
          IF ClassSection."Present Strength" < ClassSection.Capacity THEN BEGIN
            SetSection := ClassSection.Section;
            SkipBool := TRUE;
          END;
        UNTIL (ClassSection.NEXT = 0) OR SkipBool;

      IF NOT SkipBool THEN
        ERROR(Text003,Application.Class,Application."Curriculum Intrested");
      IF NOT CheckCertificate(ApplNo) THEN
        ERROR(Text004);


      // Stop 14.VIGNESH
      StudentNo := NoSeriesMgmt.GetNextNo(Admission."Student No.",0D,TRUE);
      Student.INIT;
      Student.TRANSFERFIELDS(Application);
      Student."No." := StudentNo;
      Student."Application No." := ApplNo;
      Student.VALIDATE("Date Of Birth");
      Student."Date Joined" := TODAY;
      Student."New Student" := TRUE;
      Student.Section := SetSection;
      Student."Class Code" := Student.Class + '-' + Student.Section + '-' + Student.Curriculum + '-' + Student."Academic Year";
      Student."Student Status" := Student."Student Status"::Student;
      Student.INSERT;

      "Update Optional Subjects"(ApplNo,StudentNo);

      // Stop 04.KATHIR
      // Start 05.KATHIR
      Customer."No." := StudentNo ;
      Customer.VALIDATE(Name,COPYSTR(Application."Name of the pupil",1,50));
      Customer.Address := COPYSTR(Application.Address1,1,50);
      Customer."Address 2" := COPYSTR(Application.Address2,1,50);
      Customer.City := Application.City;
      Customer."Phone No." := Application."Phone Number";
      Customer.County := Application.Country;
      Customer."E-Mail" := Application."E-Mail Address";
      Customer.VALIDATE("Gen. Bus. Posting Group",Admission."Gen. Bus. Posting Group");
      Customer.VALIDATE("Customer Posting Group",Admission."Customer Posting Group");
      Customer.INSERT(TRUE);
      Application."Application Status" := Application."Application Status"::Admitted;
      Application."Student No." := StudentNo;
      Application.MODIFY;
       // Stop 05.KATHIR
      // Start 06.KATHIR


      JudesFeeMang.ProcessFee(ApplNo,StudentNo);

      {
      Student1.RESET;
      Student1.SETFILTER("No.",StudentNo);
      FeeGeneration.SetFeeType(CombineCode);
      FeeGeneration.USEREQUESTFORM(FALSE);
      FeeGeneration.SETTABLEVIEW(Student1);
      FeeGeneration.RUN;
      MESSAGE(TEXT0001,StudentNo);
      // Stop 06.KATHIR
       }
    END;

    PROCEDURE "Check Age Limit"@1102155004(Class@1102155000 : Code[10];Curriculum@1102155001 : Code[10];AcadYr@1102155002 : Code[10];Age@1102155004 : Integer) : Boolean;
    VAR
      ClassCard@1102155003 : Record 71006;
    BEGIN
      // Start 07.KATHIR
      ClassCard.RESET;
      ClassCard.SETCURRENTKEY(Class,Curriculum,"Academic Year");
      ClassCard.SETRANGE(Class, Class);
      ClassCard.SETRANGE(Curriculum,Curriculum);
      ClassCard.SETRANGE("Academic Year",AcadYr);
      IF ClassCard.FINDFIRST THEN BEGIN
        IF (ClassCard."Miniimum Age Limit" <> 0) AND (ClassCard."Maximum Age Limit" <> 0) THEN BEGIN
          IF (ClassCard."Miniimum Age Limit" >= Age) AND (ClassCard."Maximum Age Limit" <= Age) THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
      //Stop 07.KATHIR
    END;

    PROCEDURE "Update Optional Subjects"@1102155006(ApplnNo@1102155000 : Code[20];StudentNo@1102155004 : Code[20]);
    VAR
      ApplicationOptionalSubject@1102155001 : Record 71011;
      Application@1102155002 : Record 71002;
      StudentOptionalSubject@1102155003 : Record 71051;
    BEGIN
      // Start 10.KATHIR
      ApplicationOptionalSubject.SETRANGE("Application No",ApplnNo);
      IF ApplicationOptionalSubject.FINDSET THEN
        REPEAT
          StudentOptionalSubject."Student No" := StudentNo;
          StudentOptionalSubject."Subject Group" := ApplicationOptionalSubject."Subject Group";
          StudentOptionalSubject.Subject := ApplicationOptionalSubject.Subject;
          StudentOptionalSubject.Description := ApplicationOptionalSubject.Description;
          StudentOptionalSubject.INSERT;
        UNTIL ApplicationOptionalSubject.NEXT = 0;
      // Stop 10.KATHIR
    END;

    PROCEDURE CheckApplicationDate@1102155011(GetClass@1102155001 : Code[20];GetCurriculum@1102155002 : Code[20];GetYear@1102155003 : Code[10]) : Boolean;
    VAR
      ClassCard@1102155000 : Record 71006;
      AdmissionSetup@1102155004 : Record 71000;
    BEGIN
      // Start 11.VIGNESH
      AdmissionSetup.GET;
      IF AdmissionSetup."Application Sale Method" = AdmissionSetup."Application Sale Method"::Common THEN BEGIN
        IF (AdmissionSetup."Application Sales From" <> 0D) AND (AdmissionSetup."Application Sales To" <> 0D) THEN
          IF (AdmissionSetup."Application Sales From" <= TODAY) AND
             (AdmissionSetup."Application Sales To" >= TODAY)
          THEN
            EXIT(TRUE)
          ELSE BEGIN
            ERROR(Text007);
            EXIT(FALSE);
          END;
      END ELSE
        IF AdmissionSetup."Application Sale Method" = AdmissionSetup."Application Sale Method"::Classwise THEN BEGIN
          ClassCard.RESET;
          ClassCard.SETCURRENTKEY(Class,Curriculum);
          ClassCard.SETRANGE(Class,GetClass);
          ClassCard.SETRANGE(Curriculum,GetCurriculum);
          //ClassCard.SETRANGE("Academic Year",GetYear);
          IF ClassCard.FINDFIRST THEN BEGIN
            IF (ClassCard."Application Sale From" <> 0D) AND (ClassCard."Application Sale Till" <> 0D) THEN BEGIN
              IF (ClassCard."Application Sale From" <= TODAY) AND (ClassCard."Application Sale Till" >= TODAY) THEN
                EXIT(TRUE)
              ELSE BEGIN
                MESSAGE(Text007);
                EXIT(FALSE);
              END;
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(TRUE);
        END ELSE
          EXIT(TRUE);
      // Stop 11.VIGNESH
    END;

    PROCEDURE CheckRegistrationDate@1102155012(GetClass@1102155000 : Code[20];GetCurriculum@1102155003 : Code[20];GetYear@1102155002 : Code[10]) : Boolean;
    VAR
      ClassCard@1102155001 : Record 71006;
    BEGIN
      // Start 12.VIGNESH
      ClassCard.RESET;
      ClassCard.SETCURRENTKEY(Class,Curriculum);
      ClassCard.SETRANGE(Class,GetClass);
      ClassCard.SETRANGE(Curriculum,GetCurriculum);
      ClassCard.SETRANGE("Academic Year",GetYear);
      IF ClassCard.FINDFIRST THEN BEGIN
        IF (ClassCard."Application Receive From" <> 0D) AND (ClassCard."Application Receive Till" <> 0D) THEN BEGIN
          IF (ClassCard."Application Receive From" <= TODAY) AND (ClassCard."Application Receive Till" >= TODAY) THEN
            EXIT(TRUE)
          ELSE BEGIN
            MESSAGE(Text008);
            EXIT(FALSE);
          END;
        END ELSE
          EXIT(TRUE);
      END ELSE
        EXIT(TRUE);
      // Stop 12.VIGNESH
    END;

    PROCEDURE CheckCertificate@1102155001("GetAppNo."@1102155000 : Code[20]) : Boolean;
    VAR
      ApplicationCertificate@1102155001 : Record 71010;
    BEGIN
      // Start 13.VIGNESH
      ApplicationCertificate.RESET;
      ApplicationCertificate.SETRANGE("Application No.","GetAppNo.");
      IF ApplicationCertificate.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
      // Stop 13.VIGNESH
    END;

    PROCEDURE SpotAdmitChangeStatus@1102155007("GetApplNo."@1102155000 : Code[20]);
    VAR
      Application@1102155001 : Record 71002;
    BEGIN
      // Start 15.VIGNESH
      Application.GET("GetApplNo.");
      Application."Application Status" := Application."Application Status"::Selected;
      Application.MODIFY;
      AllotStudentNo("GetApplNo.");
      // Stop 15.VIGNESH
    END;

    BEGIN
    {
         No     Date       Sign     Trigger                     Description
      ------------------------------------------------------------------------------------------------------------------------------
        01     22/09/09   KATHIR   Application Received()       Function created for updating the Application status
                                                                   from Sold to received
        02     22/09/09   KATHIR   Sales Application Journal()  Function Created to Create Journal for application sales
        03     22/09/09   KATHIR   Update receipt ()            Function added to generate registration Cost
        04     24/09/09   KATHIR   AllotStudentNo ()            Code added to Insert Student from application
        05     24/09/09   KATHIR   AllotStudentNo ()            Code added to Insert student in to Customer
        06     24/09/09   KATHIR   AllotStudentNo ()            Code added to Generate Initial Fees for the student
        08     26/09/09   KATHIR   Check Age Limit()            Code added to check age limit of the applicant while admission
        09     29/09/09   KATHIR   Check Subject Group()        Code added to check the Subject Group in application
        10     29/09/09   KATHIR   Update Optional Subject()    Code added to Update Optional subjects to Student
        11     03/10/09   VIGNESH  CheckApplicationDate()       Code added to validate the application Date
        12     03/10/09   VIGNESH  CheckRegistrationDate()      Code added to validate the Registration Date
        13     16/11/09   VIGNESH  CheckCertificate             Code added to validadte certificate befor alloting the roll no.
        14     17/11/09   VIGNESH  AllotStudentNo ()            Code modified to validate the Certificatie & Capacity
        15     24/11/09   VIGNESH  SpotAdmitChangeStatus()      Code added to Change the Applciation Status ti allocate roll no
    }
    END.
  }
}

OBJECT Codeunit 71001 Evaluation
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Application@1102155000 : Record 71002;
      ApplicantEvaluation@1102155001 : Record 71009;
      EvaluationHead@1102155002 : Record 71012;
      ClassEvaluation@1102155003 : Record 71008;
      Total@1102155004 : Decimal;
      EducationVertical@1102155005 : Codeunit 71880;
      StartNo@1102155006 : Code[10];
      EndNo@1102155007 : Code[10];
      Application1@1102155008 : Record 71002;
      SelectionProcessLine@1102155009 : Record 71014;
      ApplicantEvaluation1@1102155010 : Record 71009;
      ClassEvaluation1@1102155011 : Record 71008;
      Text000@1102155012 : TextConst 'ENU=Total Weight-Age should be 100 for class %1 and for curriculam %2';
      Text001@1102155013 : TextConst 'ENU=Class Evaluation does not EXIST';
      Text002@1102155014 : TextConst 'ENU=Evaluation %1 is not calculated for Class %2 and Curriculum %3';
      Text003@1102155015 : TextConst 'ENU=Selection Updated sucessfully';

    PROCEDURE GetApplicants@1102155000(VAR EvaluationNo@1102155000 : Code[10]);
    VAR
      TotalWeightage@1102155001 : Decimal;
    BEGIN
      // Start 01.GUNA
      TotalWeightage := 0;
      EvaluationHead.GET(EvaluationNo);
      EvaluationHead.TESTFIELD(Class);
      EvaluationHead.TESTFIELD(Curriculum);
      EvaluationHead.TESTFIELD("Academic Year");
      EvaluationHead.TESTFIELD("Evaluation Code");
      // Start 07.VIGNESH
      ClassEvaluation1.RESET;
      ClassEvaluation1.SETRANGE(Class,EvaluationHead.Class);
      ClassEvaluation1.SETRANGE(Curriculum,EvaluationHead.Curriculum);
      ClassEvaluation1.SETRANGE("Academic Year",EvaluationHead."Academic Year");
      IF ClassEvaluation1.FINDSET THEN
        REPEAT
          TotalWeightage += ClassEvaluation1.Weightage;
        UNTIL ClassEvaluation1.NEXT = 0;
      IF TotalWeightage <> 100 THEN
        ERROR(Text000,EvaluationHead.Class,EvaluationHead.Curriculum);
      // Stop 07.VIGNESH
      ClassEvaluation.RESET;
      ClassEvaluation.SETRANGE(Class,EvaluationHead.Class);
      ClassEvaluation.SETRANGE(Curriculum,EvaluationHead.Curriculum);
      ClassEvaluation.SETRANGE("Academic Year",EvaluationHead."Academic Year");
      ClassEvaluation.SETRANGE("Evaluation Method Code",EvaluationHead."Evaluation Code");
      IF ClassEvaluation.ISEMPTY THEN
        ERROR(Text001)
      ELSE
        IF ClassEvaluation.FINDFIRST THEN;
      Application.RESET;
      Application.SETCURRENTKEY(Class,"Curriculum Intrested","Academic Year");
      Application.SETRANGE(Class,EvaluationHead.Class);
      Application.SETRANGE("Curriculum Intrested",EvaluationHead.Curriculum);
      Application.SETRANGE("Academic Year",EvaluationHead."Academic Year");
      Application.SETRANGE("Application Status",Application."Application Status"::Received);
      IF Application.FINDSET THEN
        REPEAT
          // Start 08.VIGNESH
          ApplicantEvaluation1.RESET;
          ApplicantEvaluation1.SETRANGE("Application No.",Application."No.");
          ApplicantEvaluation1.SETRANGE("Evaluation Method Code",EvaluationHead."Evaluation Code");
          ApplicantEvaluation1.SETRANGE(ApplicantEvaluation1.Class,EvaluationHead.Class);
          IF ApplicantEvaluation1.ISEMPTY THEN BEGIN
          // Stop 08.VIGNESH
            ApplicantEvaluation."Application No." := Application."No.";
            ApplicantEvaluation."Evaluation Method Code" := EvaluationHead."Evaluation Code";
            ApplicantEvaluation."Maximum Mark" := ClassEvaluation."Maximum Mark";
            ApplicantEvaluation."Pass Mark" := ClassEvaluation."Pass Mark";
            ApplicantEvaluation.Weightage := ClassEvaluation.Weightage;
            ApplicantEvaluation."Applicant Name" := Application."Name of the pupil";
            ApplicantEvaluation."Evaluation No." := EvaluationNo;
            ApplicantEvaluation.Class := Application.Class;
            IF ClassEvaluation."Prequalification Mark" THEN
              "Prequalification Marks"(ApplicantEvaluation);
            ApplicantEvaluation.INSERT;
          // Start 08.VIGNESH
          END;
          // Stop 08.VIGNESH
        UNTIL Application.NEXT = 0;
      // Stop 01.GUNA
    END;

    PROCEDURE "Selection Process"@1102155001(VAR "SelectionNo."@1102155000 : Code[10]) : Decimal;
    VAR
      SelectionProcess@1102155001 : Record 71013;
    BEGIN
      // Start 02.GUNA
      IF SelectionProcess.GET("SelectionNo.") THEN BEGIN
        SelectionProcess.TESTFIELD(Class);
        SelectionProcess.TESTFIELD(Curriculum);
        SelectionProcess.TESTFIELD("Academic Year");
      // Start 09.VIGNESH
        ClassEvaluation.RESET;
        ClassEvaluation.SETRANGE(Class,SelectionProcess.Class);
        ClassEvaluation.SETRANGE(Curriculum,SelectionProcess.Curriculum);
        ClassEvaluation.SETRANGE("Academic Year",SelectionProcess."Academic Year");
        IF ClassEvaluation.FINDSET THEN
          REPEAT
            EvaluationHead.RESET;
            EvaluationHead.SETCURRENTKEY(Class,Curriculum,"Academic Year","Evaluation Code");
            EvaluationHead.SETRANGE(Class,SelectionProcess.Class);
            EvaluationHead.SETRANGE(Curriculum,SelectionProcess.Curriculum);
            EvaluationHead.SETRANGE("Academic Year",SelectionProcess."Academic Year");
            EvaluationHead.SETRANGE("Evaluation Code",ClassEvaluation."Evaluation Method Code");
            IF EvaluationHead.FINDFIRST THEN BEGIN
              ApplicantEvaluation.RESET;
              ApplicantEvaluation.SETCURRENTKEY("Evaluation No.");
              ApplicantEvaluation.SETRANGE("Evaluation No.",EvaluationHead."Evaluation No.");
              IF ApplicantEvaluation.ISEMPTY THEN
                ERROR(Text002,ClassEvaluation."Evaluation Method Code",SelectionProcess.Class,SelectionProcess.Curriculum);
            END ELSE
              ERROR(Text002,ClassEvaluation."Evaluation Method Code",SelectionProcess.Class,SelectionProcess.Curriculum);
          UNTIL ClassEvaluation.NEXT = 0;
      // Stop 09.VIGNESH

        Application.RESET;
        Application.SETRANGE(Class,SelectionProcess.Class);
        Application.SETRANGE("Curriculum Intrested",SelectionProcess.Curriculum);
        Application.SETRANGE("Academic Year",SelectionProcess."Academic Year");
        Application.SETRANGE("Application Status",Application."Application Status"::Received);
      //  Application.SETRANGE(Application."No.",'APP01909');

        IF Application.FINDSET THEN
          REPEAT
      //      MESSAGE('inside');
            SelectionProcessLine."Evaluation Total" := CalcTotal(Application."No.");
            SelectionProcessLine."Selection No." := "SelectionNo.";
            SelectionProcessLine."Application No" := Application."No.";
            SelectionProcessLine.Name := Application."Name of the pupil";
            SelectionProcessLine.Gender := Application."Applicant Gender";
            SelectionProcessLine.INSERT;
          UNTIL Application.NEXT = 0;

        SelectionProcessLine.RESET;
        SelectionProcessLine.SETRANGE("Selection No.","SelectionNo.");
        IF SelectionProcessLine.FINDSET THEN;
        CalcRank(SelectionProcessLine);
      END;
      // Stop 02.GUNA
    END;

    PROCEDURE CalcTotal@1102155002(VAR "ApplicationNo."@1102155000 : Code[10]) : Decimal;
    BEGIN
      // Start 03.GUNA
      CLEAR(Total);
      ApplicantEvaluation.RESET;
      ApplicantEvaluation.SETRANGE("Application No.","ApplicationNo.");
      IF ApplicantEvaluation.FINDSET THEN
        REPEAT
      //    MESSAGE("ApplicationNo.");
      //    MESSAGE(ApplicantEvaluation."Evaluation Method Code");
          IF(ApplicantEvaluation."Mark Obtained" = 0) AND
            (ApplicantEvaluation."Maximum Mark" = 0) THEN
            Total := Total + 0
          ELSE
            Total := Total + ((ApplicantEvaluation."Mark Obtained" / ApplicantEvaluation."Maximum Mark" * 100)
            * (ApplicantEvaluation.Weightage / 100));
        UNTIL ApplicantEvaluation.NEXT = 0;
      EXIT(Total);
      // Stop 03.GUNA
    END;

    PROCEDURE CalcRank@1102155006(VAR SelectionProcessLine@1102155000 : Record 71014);
    VAR
      Ranking@1102155001 : Record 71894;
    BEGIN
      // Start 04.GUNA
      IF SelectionProcessLine.FINDSET THEN
        REPEAT
          Ranking."No." := SelectionProcessLine."Application No";
          Ranking.Average := SelectionProcessLine."Evaluation Total";
          Ranking.INSERT(TRUE);
        UNTIL SelectionProcessLine.NEXT = 0;

      IF SelectionProcessLine.FINDSET THEN
        IF Ranking.GET(SelectionProcessLine."Application No") THEN
          StartNo := Ranking."Entry No.";

      IF SelectionProcessLine.FINDLAST THEN
        IF Ranking.GET(SelectionProcessLine."Application No") THEN
          EndNo := Ranking."Entry No.";

      EducationVertical.RankGeneration(StartNo,EndNo);

      IF SelectionProcessLine.FINDSET THEN
        REPEAT
          Ranking.SETRANGE("No.",SelectionProcessLine."Application No");
          IF Ranking.FINDFIRST THEN BEGIN
            SelectionProcessLine.Rank := Ranking.Rank;
            SelectionProcessLine.MODIFY;
          END;
        UNTIL SelectionProcessLine.NEXT = 0;
      Ranking.RESET;
      Ranking.SETRANGE("Entry No.",StartNo,EndNo);
      IF Ranking.FINDSET THEN
        Ranking.DELETEALL;
      // Stop 04.GUNA
    END;

    PROCEDURE UpdateStatus@1102155003(SelectionNo@1102155000 : Code[10]);
    BEGIN
      // Start 05 VANDHANA
      SelectionProcessLine.RESET;
      SelectionProcessLine.SETRANGE("Selection No.",SelectionNo);
      IF SelectionProcessLine.FINDSET THEN
        REPEAT
          IF Application1.GET(SelectionProcessLine."Application No") THEN BEGIN
            Application1."Application Status" := Application1."Application Status"::Received;
            IF SelectionProcessLine.Select THEN BEGIN
              Application1."Selection Number" := SelectionProcessLine."Selection No.";
              Application1."Evaluation Total" := SelectionProcessLine."Evaluation Total";
              Application1.Rank := SelectionProcessLine.Rank;
              Application1."Application Status" := Application1."Application Status"::Selected;
            END;
            Application1.MODIFY;
          END;
        UNTIL SelectionProcessLine.NEXT = 0;
      MESSAGE(Text003);
      // Stop 05 VANDHANA
    END;

    PROCEDURE "Prequalification Marks"@1102155004(VAR ApplicantEvaluation@1102155000 : Record 71009);
    VAR
      ApplicationMark@1102155001 : Record 71003;
      ObtainedMarks@1102155002 : Decimal;
      TotalMarks@1102155003 : Decimal;
    BEGIN
      // Start 07.GUNA
      CLEAR(TotalMarks);
      ApplicationMark.RESET;
      ApplicationMark.SETRANGE("Application No",ApplicantEvaluation."Application No.");
      IF ApplicationMark.FINDSET THEN
        REPEAT
          ObtainedMarks := ObtainedMarks + ApplicationMark."Mark Obtained";
          TotalMarks := TotalMarks + ApplicationMark.Maximum;
        UNTIL ApplicationMark.NEXT = 0;

      ApplicantEvaluation."Maximum Mark" := TotalMarks;
      ApplicantEvaluation."Mark Obtained" := ObtainedMarks;
      // Stop 07.GUNA
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01  06.10.09   GUNA    GetApplicants
      02  06.10.09   GUNA    Selection Process
      03  06.10.09   GUNA    CalcTotal
      04  06.10.09   GUNA    Calcrank
      05  07.10.09  VANDHANA UpdateStatus                 Code to update the Sel. Process Line details in the application table.
      06  16.11.09   GUNA    UpdateStatus                 Code commented to allow all applications to be updated
      06  17.11.09   GUNA   "Prequalification Marks"      Code to calculate prequalification TOTALs
      07  17.11.09   VIGNESH GetApplicants                Code added to validate the weight age
      08  24.11.09   VIGNESH GetApplicants                Code added to validate the Applicant
      09  24.11.09   VIGNESH Selection Process            Code added to run the selection process is all the evaluation is recorded
    }
    END.
  }
}

OBJECT Codeunit 71040 Academics
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Student@1102155000 : Record 71046;
      FacultyClassPlanHeader@1102155001 : Record 71172;
      Text001@1102155002 : TextConst 'ENU=Home Work Duration exceeded';
      Text002@1102155003 : TextConst 'ENU=Home Work Approved';
      Text000@1102155004 : TextConst 'ENU=Student Subject Updated';
      Text003@1102155005 : TextConst 'ENU=Students has not allocated for the Class %1';
      Text004@1102155006 : TextConst 'ENU=Subject Group need to be captured for the Student %1';
      Text005@1102155007 : TextConst 'ENU=Subject need to filled in for the Group %1';
      Text006@1102155008 : TextConst 'ENU=Grade Updated to all Classes';
      Text007@1102155009 : TextConst 'ENU=Subjects for this Class %1 and Curriculim %2 is not done''';
      Text008@1102155010 : TextConst 'ENU=Secticons are anot allocated for this class %1 and curriculum %2';
      Text009@1102155011 : TextConst 'ENU=Copy Subjects Completed';
      Text010@1102155012 : TextConst 'ENU=Already the Plan Has been Appoved';
      Text011@1102155013 : TextConst 'ENU=Already the Plan Has been Rejected';
      Text012@1102155014 : TextConst 'ENU=The Plan Has not been Applied';
      Text013@1102155015 : TextConst 'ENU=Please give the comments for the rejection';
      Text014@1102155016 : TextConst 'ENU=Optional Subjects needs to be captured for the Student %1';
      VarCnt@1102159000 : Integer;
      VarVal@1102159001 : Integer;
      VarCnt1@1102159002 : Integer;
      VarVal1@1102159003 : Integer;

    PROCEDURE "Insert Student Subjects"@1102155000(ClassCode@1102155000 : Code[20]);
    VAR
      StudentSubjects@1102155003 : Record 71049;
      ClassSubjects@1102155007 : Record 71048;
      StudentSubjects1@1102155008 : Record 71049;
      ClassSectionSubjects@1102155009 : Record 71016;
    BEGIN
      // Start 01.VIGNESH
      Student.RESET;
      Student.SETRANGE("Class Code",ClassCode);
      IF Student.FINDSET THEN BEGIN
        REPEAT
          StudentSubjects.RESET;
          StudentSubjects.SETRANGE("Student No.",Student."No.");
          StudentSubjects.SETRANGE("Class Code",ClassCode);
          StudentSubjects.DELETEALL;

          ClassSectionSubjects.RESET;
          ClassSectionSubjects.SETRANGE("Class Code",ClassCode);
          ClassSectionSubjects.SETRANGE("Subject Group",'MAJOR');
          ClassSectionSubjects.SETRANGE(ClassSectionSubjects."Group Code",Student."Subject Group");
          IF ClassSectionSubjects.FINDSET THEN
            REPEAT
              IF NOT StudentSubjects1.GET(Student."No.",Student."Academic Year",ClassSectionSubjects.Subject) THEN BEGIN
                StudentSubjects.INIT;
                StudentSubjects."Student No." := Student."No.";
                StudentSubjects."Academic Year" := Student."Academic Year";
                StudentSubjects.Subject := ClassSectionSubjects.Subject;
                StudentSubjects."Subject Group" := ClassSectionSubjects."Subject Group";
                StudentSubjects.Class := ClassSectionSubjects.Class;
                StudentSubjects.Section := ClassSectionSubjects.Section;
                StudentSubjects.Curriculum := ClassSectionSubjects.Curriculum;
                StudentSubjects.Description := ClassSectionSubjects.Description;
                StudentSubjects."Student Gender" := Student.Gender;
                StudentSubjects."Class Code" := ClassCode;
                StudentSubjects.INSERT;
              END;
            UNTIL ClassSectionSubjects.NEXT = 0;

            //Coding Added by kathir - for II Language - Start

            ClassSectionSubjects.RESET;
            ClassSectionSubjects.SETRANGE("Class Code",ClassCode);
            ClassSectionSubjects.SETRANGE("Subject Group",'SEC LANG');
            ClassSectionSubjects.SETRANGE(ClassSectionSubjects."II Lang Type",Student."Second Language");
            IF ClassSectionSubjects.FINDSET THEN
              REPEAT
                IF NOT StudentSubjects1.GET(Student."No.",Student."Academic Year",ClassSectionSubjects.Subject) THEN BEGIN
                  StudentSubjects.INIT;
                  StudentSubjects."Student No." := Student."No.";
                  StudentSubjects."Academic Year" := Student."Academic Year";
                  StudentSubjects.Subject := ClassSectionSubjects.Subject;
                  StudentSubjects."Subject Group" := ClassSectionSubjects."Subject Group";
                  StudentSubjects.Class := ClassSectionSubjects.Class;
                  StudentSubjects.Section := ClassSectionSubjects.Section;
                  StudentSubjects.Curriculum := ClassSectionSubjects.Curriculum;
                  StudentSubjects.Description := ClassSectionSubjects.Description;
                  StudentSubjects."Student Gender" := Student.Gender;
                  StudentSubjects."Class Code" := ClassCode;
                  StudentSubjects.INSERT;
                END;
              UNTIL ClassSectionSubjects.NEXT = 0;

           //Coding Added by kathir - for II Language - Stop
        UNTIL Student.NEXT = 0;
      END ELSE
        ERROR(Text003,ClassCode);
      MESSAGE(Text000);
      // Stop 01.VIGNESH
    END;

    PROCEDURE "Copy Grades"@1102155004();
    VAR
      Class@1102155000 : Record 71041;
      Curriculum@1102155001 : Record 71042;
      Grade@1102155002 : Record 71889;
      EducationVertical@1102155003 : Codeunit 71880;
      AcadYr@1102155004 : Code[10];
      ClassGrade@1102155005 : Record 71054;
    BEGIN
       // Start 04.KATHIR
      AcadYr := EducationVertical.GetAcademicYear;
      IF Class.FINDSET THEN
        REPEAT
          IF Curriculum.FINDSET THEN
            REPEAT
              IF Grade.FINDSET THEN
                REPEAT
                  IF NOT ClassGrade.GET(Class.Code,Curriculum.Code,AcadYr,Grade.Code) THEN BEGIN
                    ClassGrade.INIT;
                    ClassGrade.Class := Class.Code;
                    ClassGrade.Curriculum := Curriculum.Code;
                    ClassGrade."Academic Year" := AcadYr;
                    ClassGrade."Grade Code" := Grade.Code;
                    ClassGrade.Description := Grade.Description;
                    // Start 05.VIGNESH
                    ClassGrade.Points := Grade.Points;
                    // Stop 05.VIGNESH
                    ClassGrade."Max Percentage" := Grade."Max Percentage";
                    ClassGrade."Min Percentage" := Grade."Min Percentage";
                    ClassGrade.INSERT;
                  END;
                UNTIL Grade.NEXT = 0;
            UNTIL Curriculum.NEXT = 0;
        UNTIL Class.NEXT = 0;
      MESSAGE(Text006);
       // Stop 04.KATHIR
    END;

    PROCEDURE "Copy Subjects"@1102155003(getClass@1102155000 : Code[20];getCurriculum@1102155001 : Code[20];getAcademicYear@1102155002 : Code[20]);
    VAR
      ClassCard@1102155003 : Record 71006;
      ClassSubjects@1102155004 : Record 71048;
      ClassSection@1102155005 : Record 71015;
      ClassSectionSubjects@1102155006 : Record 71016;
      ClassSubjects1@1102155007 : Record 71048;
    BEGIN
      // Start 07.VIGNESH
      ClassCard.RESET;
      ClassCard.SETRANGE(Class,getClass);
      ClassCard.SETRANGE(Curriculum,getCurriculum);
      ClassCard.SETRANGE("Academic Year",getAcademicYear);
      IF ClassCard.FINDFIRST THEN BEGIN
        ClassSubjects.RESET;
        ClassSubjects.SETRANGE(Class,getClass);
        ClassSubjects.SETRANGE(Curriculum,getCurriculum);
        ClassSubjects.SETRANGE("Academic Year",getAcademicYear);
        IF ClassSubjects.ISEMPTY THEN
          ERROR(Text007,getClass,getCurriculum)
        ELSE
          IF ClassSubjects.FINDFIRST THEN BEGIN
            ClassSection.RESET;
            ClassSection.SETRANGE(Class,getClass);
            ClassSection.SETRANGE(Curriculum,getCurriculum);
            ClassSection.SETRANGE("Academic Year",getAcademicYear);
            IF ClassSection.ISEMPTY THEN
              ERROR(Text008,getClass,getCurriculum)
            ELSE
              IF ClassSection.FINDSET THEN
                REPEAT
                  ClassSubjects1.RESET;
                  ClassSubjects1.SETRANGE(Class,getClass);
                  ClassSubjects1.SETRANGE(Curriculum,getCurriculum);
                  ClassSubjects1.SETRANGE("Academic Year",getAcademicYear);
                  IF ClassSubjects1.FINDSET THEN
                    REPEAT
                      ClassSectionSubjects.TRANSFERFIELDS(ClassSubjects1);
                      ClassSectionSubjects.Section := ClassSection.Section;
                      ClassSectionSubjects."Class Code" :=
                      ClassSubjects1.Class + '-' + ClassSection.Section + '-' + ClassSubjects1.Curriculum + '-' + ClassSubjects1.
                        "Academic Year";
                      ClassSectionSubjects.INSERT;
                    UNTIL ClassSubjects1.NEXT = 0;
                UNTIL ClassSection.NEXT = 0;
          END;
        MESSAGE(Text009);
      END;
      // Stop 07.VIGNESH
    END;

    PROCEDURE UpdateStudentCPGAGrade@1102155008(Student@1102155000 : Record 71046);
    VAR
      ClassGrade@1102155001 : Record 71054;
      Point@1102155002 : Decimal;
    BEGIN
      // Start 08.Ankesh
      ClassGrade.RESET;
      ClassGrade.SETCURRENTKEY(Class,Points);
      ClassGrade.SETRANGE(Class,Student.Class);
      Student.CALCFIELDS(CGPA);
      Point := ROUND(Student.CGPA,1,'=');
      ClassGrade.SETRANGE(Points,Point);
      REPEAT
        IF ClassGrade.Class <> '' THEN BEGIN
          Student."CGPA Grade" := ClassGrade."Grade Code";
          Student.MODIFY;
        END;
      UNTIL ClassGrade.NEXT = 0;
      // Stop 08.Ankesh
    END;

    PROCEDURE GetStudents@1102155009(HomeworkNo@1102155000 : Code[20]);
    VAR
      HomeWork@1102155001 : Record 71063;
      HomeworkLine@1102155002 : Record 71064;
    BEGIN
       // Start 01.KATHIR
      HomeWork.GET(HomeworkNo);
      HomeWork.TESTFIELD(Class);
      HomeWork.TESTFIELD(Section);
      HomeWork.TESTFIELD("Academic Year");
      HomeWork.TESTFIELD(Curriculum);
      HomeWork.TESTFIELD("Subject Code");
      HomeWork.TESTFIELD("Time Required");
      Student.RESET;
      Student.SETRANGE(Class,HomeWork.Class);
      Student.SETRANGE(Section,HomeWork.Section);
      Student.SETRANGE(Curriculum,HomeWork.Curriculum);
      Student.SETRANGE("Academic Year",HomeWork."Academic Year");
      IF Student.FINDSET THEN
        REPEAT
          HomeworkLine."Homework No." := HomeworkNo;
          HomeworkLine."Student No." := Student."No.";
          HomeworkLine."Student Name" := Student.Name;
          HomeworkLine.INSERT;
        UNTIL Student.NEXT = 0;
      // Stop 01.KATHIR
    END;

    PROCEDURE ApproveHomework@1102155010(HomeworkNo@1102155000 : Code[20]);
    VAR
      HomeWork@1102155001 : Record 71063;
      HomeworkLine@1102155002 : Record 71064;
      ClassSection@1102155003 : Record 71015;
      HomeworkRec@1102155004 : Record 71063;
      TotalTime@1102155005 : Decimal;
    BEGIN
      CLEAR(TotalTime);
      HomeWork.GET(HomeworkNo);
      HomeWork.TESTFIELD("Class Code");
      HomeWork.TESTFIELD("Subject Code");
      HomeWork.TESTFIELD("Time Required");
      HomeWork.TESTFIELD("Created Date");
      ClassSection.GET(HomeWork."Class Code");
      HomeworkRec.SETRANGE("Class Code",HomeWork."Class Code");
      HomeworkRec.SETRANGE("Created Date",HomeWork."Created Date");
      HomeworkRec.SETRANGE("Homework Status",HomeworkRec."Homework Status"::"1");
      IF HomeworkRec.FINDSET THEN
        REPEAT
          TotalTime := HomeworkRec."Time Required" + TotalTime;
        UNTIL HomeworkRec.NEXT = 0;

      IF (TotalTime + HomeWork."Time Required") > ClassSection."Home Work Duration" THEN
        ERROR(Text001)
      ELSE BEGIN
        HomeWork."Homework Status" := HomeWork."Homework Status"::"1";
        HomeWork.MODIFY;
      END;
    END;

    PROCEDURE ApplicationSanctionOrCancel@1102155011(Check@1102155000 : Boolean;"No."@1102155001 : Code[10]);
    VAR
      LeaveAppRec@1102155002 : Record 71089;
    BEGIN
      // Start 09.Ankesh
      LeaveAppRec.RESET;
      IF LeaveAppRec.GET("No.") THEN
        IF Check THEN BEGIN
          LeaveAppRec."Leave Status" := LeaveAppRec."Leave Status"::Requested;
          LeaveAppRec.MODIFY;
        END ELSE BEGIN
          LeaveAppRec."Leave Status" := LeaveAppRec."Leave Status"::Sanctioned;
          LeaveAppRec.MODIFY;
        END;
      // Stop 09. Ankesh
    END;

    PROCEDURE "Insert Student Opt Subjects"@1102159000("StudentNo."@1102159000 : Code[20];ClassCode@1102159001 : Code[20]);
    VAR
      StudOptionalSub@1102159002 : Record 71051;
      StudentSubjects@1102159003 : Record 71049;
      ClassSection@1102159004 : Record 71015;
      StudentRec@1102159005 : Record 71046;
      StudentSubjects1@1102159006 : Record 71049;
    BEGIN
      // Function Added by kathir for St judes
      StudentRec.GET("StudentNo.");
      ClassSection.RESET;
      ClassSection.SETRANGE(ClassSection."Class Code",ClassCode);
      IF ClassSection.FINDFIRST THEN;
      VarCnt  := 0;
      VarVal  := 0;
      VarVal1 := 0;
      VarCnt1 := 0;
      IF (StudentRec.Class = '9') OR  (StudentRec.Class = '10') THEN
      BEGIN
          StudOptionalSub.RESET;
          StudOptionalSub.SETCURRENTKEY(Group);
          StudOptionalSub.SETRANGE(StudOptionalSub."Student No","StudentNo.");
          StudOptionalSub.SETRANGE(StudOptionalSub."Class Code",ClassCode);
          IF StudOptionalSub.FINDFIRST THEN
          REPEAT
            IF StudOptionalSub."Class 9 10 Group Code" = StudOptionalSub."Class 9 10 Group Code"::"Group 2" THEN
            BEGIN
             IF StudOptionalSub.Group <> 0 THEN
               BEGIN
                IF VarVal <> StudOptionalSub.Group THEN
                  VarCnt += 1;
                  VarVal := StudOptionalSub.Group;
                END
                ELSE
                  VarCnt += 1;
             END;
             IF StudOptionalSub."Class 9 10 Group Code" = StudOptionalSub."Class 9 10 Group Code"::"Group 3" THEN
             BEGIN
               IF StudOptionalSub.Group <> 0 THEN
               BEGIN
                IF VarVal1 <> StudOptionalSub.Group THEN
                  VarCnt1 += 1;
                VarVal1 := StudOptionalSub.Group;
                END
                ELSE
                  VarCnt1 += 1;

             END;
             IF VarCnt > ClassSection."Max Group 2 Count" THEN
               ERROR('%1 Can choose only %2 Optional Subjects in Group 2',StudentRec.Name,ClassSection."Max Group 2 Count");
             IF VarCnt1 > ClassSection."Max Group 3 Count" THEN
               ERROR('%1 Can choose only %2 Optional Subjects in Group 3',StudentRec.Name,ClassSection."Max Group 2 Count");

             IF NOT StudentSubjects1.GET(StudentRec."No.",StudentRec."Academic Year",StudOptionalSub.Subject) THEN BEGIN
                  StudentSubjects.INIT;
                  StudentSubjects."Student No." := StudentRec."No.";
                  StudentSubjects."Academic Year" := StudentRec."Academic Year";
                  StudentSubjects.Subject := StudOptionalSub.Subject;
                  StudentSubjects."Subject Group" := StudOptionalSub."Subject Group";
                  StudentSubjects.Class := ClassSection.Class;
                  StudentSubjects.Section := ClassSection.Section;
                  StudentSubjects.Curriculum := ClassSection.Curriculum;
                  StudentSubjects.Description := StudOptionalSub.Description;
                  StudentSubjects."Student Gender" := StudentRec.Gender;
                  StudentSubjects."Class Code" := ClassCode;
                  StudentSubjects.INSERT;
                END;
          UNTIL StudOptionalSub.NEXT = 0;
          MESSAGE('Optional Subjects Updated Successfully');
      END;



      //MESSAGE('%1   %2',VarCnt,VarCnt1);
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  29/09/09   KATHIR   Insert Student Subjects()     Function added to Insert student academic Subjects
        02  29/09/09   KATHIR   Check Student Opt Subjects()  Function added to Validate Optional subjects for the student
        03  30/09/09   KATHIR   Insert Stud Opt Subjects()    Function added to Insert Student optional Subjects
        04  01/10/09   KATHIR   Copy Grades()                 Function added to copy Grade Master to all Classes and Curriculum
        05  16/10/09   VIGNESH  Copy Grades()                 code modifiy to all the points field
        06  23/11/09   VIGNESH  Insert Student Subjects()     Section Feild is removed from Parmeters
        07  25/11/09   VIGNESH  Copy Subjects                  Code added to copy the subjects for all sections
        08  18/01/10   Ankesh   UpdateStudentCPGAGrade()      Code to update CPGA grade.
        09  29/06/10   Ankesh   ApplicationSanctionOrCancel() Code to change the status of the student leave application
    }
    END.
  }
}

OBJECT Codeunit 71041 Mark Processing
{
  OBJECT-PROPERTIES
  {
    Date=04-04-23;
    Time=22:30:05;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExamSchedLine@1102155000 : Record 71066;
      StudMarksHeader@1102159000 : Record 71055;

    PROCEDURE "Get Students"@1102155003(MarkNo@1102155000 : Code[20]);
    VAR
      MarksHeader@1102155001 : Record 71052;
      StudentSubjects@1102155002 : Record 71049;
      MarksLine@1102155003 : Record 71053;
      Student@1102155004 : Record 71046;
      ExamCode@1102155005 : Record 71903;
    BEGIN
       // Start 01.KATHIR
      MarksHeader.GET(MarkNo);
      MarksHeader.TESTFIELD("Class Code");
      MarksHeader.TESTFIELD(Class);
      MarksHeader.TESTFIELD(Section);
      MarksHeader.TESTFIELD("Academic Year");
      MarksHeader.TESTFIELD(Curriculum);
      MarksHeader.TESTFIELD(Subject);
      MarksHeader.TESTFIELD("Max Mark");
      MarksHeader.TESTFIELD("Pass Mark");
      MarksHeader.TESTFIELD("Exam Type");
      ExamCode.GET(MarksHeader."Exam Type");
      StudentSubjects.RESET;
      StudentSubjects.SETRANGE(Subject,MarksHeader.Subject);
      StudentSubjects.SETRANGE("Class Code",MarksHeader."Class Code");
      IF StudentSubjects.FINDSET THEN
        REPEAT
          Student.GET(StudentSubjects."Student No.");
          IF Student."Student Status" = Student."Student Status"::Student THEN BEGIN
            MarksLine."Document No." := MarkNo;
            MarksLine.VALIDATE("Document No.");
            MarksLine."Student No." := StudentSubjects."Student No.";
            // Start 03.VIGNESH
            MarksLine."Student Name" := Student.Name;
            // Stop 03.VIGNESH
            MarksLine.Gender := Student.Gender;
            MarksLine."Max Mark" := MarksHeader."Max Mark";
            MarksLine.Class := MarksHeader.Class;
            MarksLine.Section := MarksHeader.Section;
            MarksLine."Academic Year" := MarksHeader."Academic Year";
            MarksLine.Curriculum := MarksHeader.Curriculum;
            MarksLine."Exam Type" := MarksHeader."Exam Type";
            MarksLine."Pass Mark" := MarksHeader."Pass Mark";
            MarksLine.ExamCount := ExamCode."Exam Order";
            MarksLine.Subject := MarksHeader.Subject;
            MarksLine."User ID" := MarksHeader."User ID";
            MarksLine."Class Code" := MarksHeader."Class Code";
            MarksLine.INSERT;
          END;
        UNTIL StudentSubjects.NEXT = 0;
      // Stop 01.KATHIR
    END;

    PROCEDURE "Marks Entry Completed"@1102155000(MarkNo@1102155000 : Code[20]);
    VAR
      MarksHeader@1102155001 : Record 71052;
    BEGIN
      // Start 02.KATHIR
      MarksHeader.GET(MarkNo);
      MarksHeader."Entry Completed" := TRUE;
      MarksHeader.MODIFY;
      // Stop 02.KATHIR
      // Start 04.Ankesh
      ExamSchedLine.RESET;
      //ExamSchedLine.SETRANGE("Academic Year",MarksHeader."Academic Year");
      //ExamSchedLine.SETRANGE("Exam Code",MarksHeader."Exam Type");
      //ExamSchedLine.SETRANGE("Subject Code",MarksHeader.Subject);
      ExamSchedLine.SETRANGE(ExamSchedLine."Class Code",MarksHeader."Class Code");
      ExamSchedLine.SETRANGE(ExamSchedLine."Exam Code",MarksHeader."Exam Type");
      ExamSchedLine.SETRANGE(ExamSchedLine."Subject Code",MarksHeader.Subject);
      IF ExamSchedLine.FINDFIRST THEN BEGIN
        ExamSchedLine."Mark Header Code" := MarkNo;
        ExamSchedLine.MODIFY;
      END;
      // Stop 04.Ankesh
    END;

    PROCEDURE GenerateRank@1102155001(ClassCode@1102155000 : Code[20];ExamCode@1102155001 : Code[20]) Ret : Boolean;
    VAR
      Student@1102155002 : Record 71046;
    BEGIN
      Ret := FALSE;
      IF ValidateMarkEntry(ClassCode,ExamCode)THEN
      BEGIN
        Student.SETRANGE(Student."Class Code",ClassCode);
        Student.SETRANGE(Student."Student Status",Student."Student Status"::Student);
        IF Student.FINDSET THEN BEGIN
          REPEAT
            CreateStudentMark(Student."No.",ExamCode,ClassCode);
            UpdateRank(ClassCode,ExamCode);
          UNTIL Student.NEXT=0;
          Ret := TRUE;
        END;
      END ELSE
        EXIT(Ret);
    END;

    PROCEDURE ValidateMarkEntry@1102155002(ClassCode@1102155001 : Code[20];ExamCode@1102155000 : Code[20]) Ret : Boolean;
    VAR
      ClassSecSubjects@1102155002 : Record 71016;
      MarkHeader@1102155003 : Record 71052;
    BEGIN
      ClassSecSubjects.SETRANGE(ClassSecSubjects."Class Code",ClassCode);
      IF ClassSecSubjects.FINDSET THEN
      REPEAT
        MarkHeader.RESET;
        MarkHeader.SETRANGE(MarkHeader."Class Code",ClassCode);
        MarkHeader.SETRANGE(MarkHeader."Exam Type",ExamCode);
        MarkHeader.SETRANGE(MarkHeader.Subject,ClassSecSubjects.Subject);
        IF MarkHeader.FINDFIRST THEN
        BEGIN
          IF NOT MarkHeader."Entry Completed" THEN
            EXIT(FALSE);
        END
        ELSE
           EXIT(FALSE);
      UNTIL ClassSecSubjects.NEXT=0;
      EXIT(TRUE);
    END;

    PROCEDURE CreateStudentMark@1102155004(StudentNo@1102155000 : Code[20];ExamCode@1102155001 : Code[20];ClassCode@1102159000 : Code[20]);
    VAR
      MarksLine@1102155002 : Record 71053;
      StudMarkHead@1102155007 : Record 71055;
      Student@1102155008 : Record 71046;
      Total@1102155003 : Decimal;
      FailCnt@1102155004 : Integer;
      SubjCnt@1102155005 : Integer;
      AbsSubjCnt@1102155006 : Integer;
      TotalMarkconducted@1102159001 : Decimal;
    BEGIN
      CLEAR(Total);
      CLEAR(FailCnt);
      CLEAR(SubjCnt);
      CLEAR(AbsSubjCnt);
      Student.GET(StudentNo);

      MarksLine.RESET;
      MarksLine.SETRANGE(MarksLine."Student No.",StudentNo);
      MarksLine.SETRANGE(MarksLine."Exam Type",ExamCode);
      MarksLine.SETRANGE(MarksLine."Class Code",ClassCode);
      IF MarksLine.FINDSET THEN
      REPEAT
        Total += MarksLine."Marks Obtained";
        TotalMarkconducted += MarksLine."Max Mark";   //DK-16.07.13
        IF MarksLine.Result = MarksLine.Result::Fail THEN
          FailCnt+= 1;
        IF MarksLine.Result = MarksLine.Result::Absent THEN
        BEGIN
          AbsSubjCnt+=1;
          FailCnt+= 1;
        END;
        SubjCnt+=1;
      UNTIL MarksLine.NEXT=0;

      StudMarkHead.RESET;
      StudMarkHead.SETRANGE(StudMarkHead."Student No.",StudentNo);
      StudMarkHead.SETRANGE(StudMarkHead."Class Code",Student."Class Code");
      StudMarkHead.SETRANGE(StudMarkHead."Exam Type",ExamCode);
      IF StudMarkHead.FINDFIRST THEN
      BEGIN
        StudMarkHead."Total Marks":=Total;
        StudMarkHead."Total No of Subject Failed":= FailCnt;
        IF FailCnt > 0 THEN  BEGIN
          StudMarkHead.Failed:=TRUE;
          StudMarkHead.Rank := 0;
        END
        ELSE
          StudMarkHead.Failed:=FALSE;
        StudMarkHead."Total No of Subject Absent":=AbsSubjCnt;
        IF StudMarkHead."Total Marks" > 0 THEN
          StudMarkHead.Average:= StudMarkHead."Total Marks"/(SubjCnt-AbsSubjCnt);

        StudMarkHead.MODIFY;
      END
      ELSE
      BEGIN
        StudMarkHead."Student No.":=StudentNo;
        StudMarkHead."Exam Type":=ExamCode;
        StudMarkHead.Name:=Student.Name;
        StudMarkHead."Class Code":=Student."Class Code";
        StudMarkHead.Class:=Student.Class;
        StudMarkHead.Section:=Student.Section;
        StudMarkHead.Curriculum:=Student.Curriculum;
        StudMarkHead."Academic Year":= Student."Academic Year";
        StudMarkHead.Height:=Student.Height;
        StudMarkHead.Weight:=Student.Weight;
        StudMarkHead."Total Marks Conducted" := SubjCnt;//DK 15-07-13

        StudMarkHead."Total Marks":=Total;
        StudMarkHead."Total No of Subject Failed":= FailCnt;
        IF FailCnt>0 THEN
          BEGIN
           StudMarkHead.Failed:=TRUE;
           StudMarkHead.Rank := 0;
          END
          ELSE
            StudMarkHead.Failed:=FALSE;
        StudMarkHead."Total No of Subject Absent":=AbsSubjCnt;
        IF StudMarkHead."Total Marks" > 0 THEN BEGIN
          StudMarkHead.Average:= StudMarkHead."Total Marks"/(SubjCnt-AbsSubjCnt);
          StudMarksHeader."Percentage Scored" := (StudMarkHead."Total Marks" / TotalMarkconducted) * 100; //DK-16.07.13
        StudMarkHead.INSERT;
        END;
      END;
    END;

    PROCEDURE UpdateRank@1102155015(ClassCode@1102155000 : Code[20];ExamCode@1102155001 : Code[20]);
    VAR
      StudMarkHead@1102155002 : Record 71055;
      varPrevTot@1102155003 : Decimal;
      varRank@1102155004 : Integer;
      varSame@1102155005 : Boolean;
      SetRank@1102159000 : Integer;
      StudMarkHead1@1102159001 : Record 71055;
      CountSMH@1102159002 : Integer;
    BEGIN
       {
      StudMarkHead.RESET;
      StudMarkHead.SETCURRENTKEY(StudMarkHead."Class Code",StudMarkHead."Exam Type",StudMarkHead.Average);
      StudMarkHead.SETRANGE(StudMarkHead."Class Code",ClassCode);
      StudMarkHead.SETRANGE(StudMarkHead."Exam Type",ExamCode);
      StudMarkHead.SETRANGE(StudMarkHead.Failed,FALSE);
      IF StudMarkHead.ASCENDING(FALSE) THEN;
      IF StudMarkHead.FIND('-') THEN
      REPEAT
        IF varPrevTot= 0 THEN
        BEGIN
          varRank:= varRank + 1;
          varPrevTot:=StudMarkHead."Total Marks";
        END
        ELSE
        BEGIN
        IF varPrevTot = StudMarkHead."Total Marks" THEN
        BEGIN
          varRank:= varRank ;
          varPrevTot:=StudMarkHead."Total Marks";
          varSame:=TRUE;
        END
        ELSE
          IF varPrevTot <> StudMarkHead."Total Marks" THEN
          BEGIN
          IF varSame THEN
            varRank:= varRank + 2
          ELSE
            varRank:= varRank + 1;

          varPrevTot:=StudMarkHead."Total Marks";
          CLEAR(varSame);
        END
        END;
        StudMarkHead.Rank:=varRank;
        StudMarkHead.MODIFY;
      UNTIL StudMarkHead.NEXT=0
      ELSE BEGIN
        StudMarkHead.Rank:= 0;
        StudMarkHead.MODIFY;
      END;
      }
      CLEAR(StudMarkHead);
      StudMarkHead.SETRANGE(StudMarkHead."Class Code",ClassCode);
      StudMarkHead.SETRANGE(StudMarkHead."Exam Type",ExamCode);
      IF StudMarkHead.FINDSET(TRUE,TRUE) THEN
        StudMarkHead.MODIFYALL(StudMarkHead.Rank,0);

      SetRank := 1;
      CLEAR(StudMarkHead);
      StudMarkHead.SETCURRENTKEY(StudMarkHead."Class Code",StudMarkHead."Exam Type",StudMarkHead.Average);
      StudMarkHead.SETRANGE(StudMarkHead."Class Code",ClassCode);
      StudMarkHead.SETRANGE(StudMarkHead."Exam Type",ExamCode);
      StudMarkHead.SETRANGE(StudMarkHead.Failed,FALSE);
      IF StudMarkHead.ASCENDING(FALSE) THEN;
      IF StudMarkHead.FIND('-') THEN
      REPEAT
        StudMarkHead1.RESET;
        StudMarkHead1.SETRANGE("Class Code",ClassCode);
        StudMarkHead1.SETRANGE("Exam Type",ExamCode);
        StudMarkHead1.SETRANGE(Failed,FALSE);
        StudMarkHead1.SETRANGE(Rank,0);
        StudMarkHead1.SETRANGE(Average,StudMarkHead.Average);
        IF StudMarkHead1.FINDSET(TRUE,TRUE) THEN;
        CountSMH := StudMarkHead1.COUNT;
        StudMarkHead1.MODIFYALL(StudMarkHead1.Rank,SetRank);
        IF CountSMH <> 0 THEN
          SetRank := CountSMH + SetRank;
      UNTIL StudMarkHead.NEXT=0;

      StudMarkHead.RESET;
      StudMarkHead.SETCURRENTKEY(StudMarkHead."Class Code",StudMarkHead."Exam Type",StudMarkHead.Average);
      StudMarkHead.SETRANGE(StudMarkHead."Class Code",ClassCode);
      StudMarkHead.SETRANGE(StudMarkHead."Exam Type",ExamCode);
      StudMarkHead.SETRANGE(StudMarkHead.Failed,TRUE);
      IF StudMarkHead.FINDSET THEN BEGIN
        StudMarkHead.MODIFYALL(StudMarkHead.Rank,0);
      END;
    END;

    PROCEDURE MarkEntryNotCompleted@1102155005(ClassCode@1102155001 : Code[20];ExamCode@1102155000 : Code[20]) Ret : ARRAY [50] OF Text[50];
    VAR
      ClassSecSubjects@1102155002 : Record 71016;
      MarkHeader@1102155003 : Record 71052;
      FacultySubject@1102155004 : Record 71150;
      i@1102155005 : Integer;
    BEGIN
      i:=1;
      ClassSecSubjects.SETRANGE(ClassSecSubjects."Class Code",ClassCode);
      IF ClassSecSubjects.FINDSET THEN
      REPEAT
        FacultySubject.RESET;
        FacultySubject.SETRANGE(FacultySubject."Class Code",ClassCode);
        FacultySubject.SETRANGE(FacultySubject."Subject Code",ClassSecSubjects.Subject);
        IF FacultySubject.FINDFIRST THEN;
        MarkHeader.RESET;
        MarkHeader.SETRANGE(MarkHeader."Class Code",ClassCode);
        MarkHeader.SETRANGE(MarkHeader."Exam Type",ExamCode);
        MarkHeader.SETRANGE(MarkHeader.Subject,ClassSecSubjects.Subject);
        IF MarkHeader.FINDFIRST THEN
        BEGIN
          IF MarkHeader."Entry Completed" THEN BEGIN
            Ret[i] += ClassSecSubjects.Subject+','
                     +'TRUE'+','+FacultySubject."Faculty Code"+','+FacultySubject."Faculty Name";
          END ELSE BEGIN
            Ret[i] += ClassSecSubjects.Subject+','
                     +'FALSE'+','+FacultySubject."Faculty Code"+','+FacultySubject."Faculty Name";
          END;
        END ELSE
          Ret[i] += ClassSecSubjects.Subject+','
                     +'FALSE'+','+FacultySubject."Faculty Code"+','+FacultySubject."Faculty Name";

      i+=1;
      UNTIL ClassSecSubjects.NEXT=0;
      Ret[i] := '#EOF';
    END;

    PROCEDURE StudentMarkHeaderPublish@1102159000(ClassCode@1102159000 : Code[20];ExamCode@1102159001 : Code[20]);
    VAR
      MarksLine@1102159002 : Record 71053;
    BEGIN
      // Start .KATHIR
      StudMarksHeader.RESET;
      StudMarksHeader.SETRANGE(StudMarksHeader."Class Code",ClassCode);
      StudMarksHeader.SETRANGE(StudMarksHeader."Exam Type",ExamCode);
      IF StudMarksHeader.FINDFIRST THEN
      REPEAT
        IF NOT StudMarksHeader.Failed THEN //SJ6.01
          UpdateAcademicPts(StudMarksHeader."Student No.",StudMarksHeader."Academic Year",StudMarksHeader."Exam Type");  //SJ6.01
        StudMarksHeader.Published := TRUE;
        StudMarksHeader.MODIFY;
      UNTIL StudMarksHeader.NEXT = 0;

      MarksLine.RESET;
      MarksLine.SETRANGE(MarksLine."Exam Type",ExamCode);
      MarksLine.SETRANGE(MarksLine."Class Code",ClassCode);
      IF MarksLine.FINDSET THEN
      REPEAT
        MarksLine.Published := TRUE;
        MarksLine.MODIFY;
      UNTIL MarksLine.NEXT=0;
      // Stop .KATHIR
    END;

    PROCEDURE UpdateNoofSubjectsFailed@1102159001(StudentNo@1102159002 : Code[20];ExamCode@1102159001 : Code[20];ClassCode@1102159000 : Code[20]);
    VAR
      MarksLine@1102159007 : Record 71053;
      StudMarkHead@1102159006 : Record 71055;
      Student@1102159005 : Record 71046;
      Total@1102159004 : Decimal;
      FailCnt@1102159003 : Integer;
      SubjCnt@1102159009 : Integer;
      AbsSubjCnt@1102159008 : Integer;
    BEGIN
      // Start .KATHIR
      CLEAR(FailCnt);
      CLEAR(SubjCnt);
      CLEAR(AbsSubjCnt);
      Student.GET(StudentNo);

      MarksLine.RESET;
      MarksLine.SETRANGE(MarksLine."Student No.",StudentNo);
      MarksLine.SETRANGE(MarksLine."Exam Type",ExamCode);
      MarksLine.SETRANGE(MarksLine."Class Code",ClassCode);
      IF MarksLine.FINDSET THEN
      REPEAT
        Total += MarksLine."Marks Obtained";
        IF MarksLine.Result = MarksLine.Result::Fail THEN
          FailCnt+= 1;
        IF MarksLine.Result = MarksLine.Result::Absent THEN
        BEGIN
          AbsSubjCnt+=1;
          FailCnt+= 1;
        END;
        SubjCnt+=1;
      UNTIL MarksLine.NEXT=0;

      StudMarkHead.RESET;
      StudMarkHead.SETRANGE(StudMarkHead."Student No.",StudentNo);
      StudMarkHead.SETRANGE(StudMarkHead."Class Code",Student."Class Code");
      StudMarkHead.SETRANGE(StudMarkHead."Exam Type",ExamCode);
      IF StudMarkHead.FINDFIRST THEN
      BEGIN
        StudMarkHead."Total No of Subject Failed":= FailCnt;
        IF FailCnt>0 THEN BEGIN
          StudMarkHead.Failed:=TRUE;
          StudMarkHead.Rank := 0;
        END
        ELSE
          StudMarkHead.Failed:=FALSE;
        StudMarkHead.MODIFY;
      END;
      // Stop .KATHIR
    END;

    PROCEDURE UpdateAcademicPts@1000000000(StudNo@1000000000 : Code[20];AcademicYear@1000000003 : Code[20];ExamType@1000000004 : Code[20]);
    VAR
      StuMarkHead@1000000005 : Record 71055;
      AcadmicPts@1000000001 : Record 71945;
      Grade@1000000002 : Record 71889;
    BEGIN
      StuMarkHead.GET(StudNo,AcademicYear,ExamType);
      Grade.RESET;
      Grade.SETFILTER("Min Percentage",'<=%1',StuMarkHead.Average);
      Grade.SETFILTER("Max Percentage",'>=%1',StuMarkHead.Average);
      IF Grade.FINDLAST THEN BEGIN
        AcadmicPts.INIT;
        AcadmicPts."Student No." := StuMarkHead."Student No.";
        AcadmicPts."Academic Year" := StuMarkHead."Academic Year";
        AcadmicPts."Exam Code" := StuMarkHead."Exam Type";
        AcadmicPts."Class Code" := StuMarkHead."Class Code";
        AcadmicPts.Points := Grade.Points;
        IF NOT AcadmicPts.INSERT THEN
          AcadmicPts.MODIFY;
      END;
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01  01/10/09   KATHIR   Get Students()              Code added to Get students for Mark Processing
        02  14/10/09   KATHIR   Marks Entry Completed()     Function added to Compelete the mark entry process
        03  09/12/09   VIGNESH  Get Students()              Code added to get the studant name
        04  07/07/10   Ankesh   Marks Entry Completed()     Code added to update Exam schedule line with the mark no.
    }
    END.
  }
}

OBJECT Codeunit 71042 Promotion
{
  OBJECT-PROPERTIES
  {
    Date=14-04-22;
    Time=19:47:15;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1102155000 : TextConst 'ENU=Please Set Next Academic Year';
      Text001@1102155001 : TextConst 'ENU=Promotion already done for this class';
      Text002@1102155002 : TextConst 'ENU=Please Generate Promotion Suggest';
      Text003@1102155003 : TextConst 'ENU=Promotion done';
      Text004@1102155004 : TextConst 'ENU=Students Marks Is not generated for Exam Code %1';
      Text005@1102155005 : TextConst 'ENU=Please Enter Promotion Percentage';
      Text006@1102155006 : TextConst 'ENU=Please select the Promotional Weightage for Class %1, Curriculum %2';
      Text007@1102155007 : TextConst 'ENU=Overal Promotional Weightage should be 100';
      Text008@1102155008 : TextConst 'ENU=No promoted Class is Found, do you want to Send this Student to Alumni';
      Text009@1102155009 : TextConst 'ENU=Do you want to update the Student Promotion';

    PROCEDURE "Class Promotion"@1102155000(ClassCode@1102155000 : Code[20]);
    VAR
      PromotionHistory@1102155004 : Record 71060;
      PromotionSuggestion@1102155005 : Record 71059;
      Student@1102155007 : Record 71046;
      ClassCard@1102155008 : Record 71006;
      ClassSection@1102155011 : Record 71015;
      PromotedClass@1102155012 : Code[10];
      ClassCard1@1102155013 : Record 71006;
      AcademicYear1@1102155014 : Record 71904;
      ClassSubjects@1102155009 : Record 71048;
      ClassSubjects1@1102155010 : Record 71048;
      ClassSectionSubjects@1102155016 : Record 71016;
      ClassSectionSubjects1@1102155017 : Record 71016;
      EduSetup@1102155001 : Record 71884;
    BEGIN
      // Start 08.VIGNESH
      //ClassSection.GET(ClassCode);

      ClassSection.RESET;
      ClassSection.SETRANGE(ClassSection."Class Code",ClassCode);
      IF ClassSection.FINDFIRST THEN;


      IF ClassSection.Promoted THEN
        ERROR(Text001);

      IF EduSetup.GET THEN
        EduSetup.TESTFIELD("Academic Year");

      PromotedClass := '';
      ClassCard.RESET;
      ClassCard.SETCURRENTKEY(Sequence);
      ClassCard.SETRANGE(Class,ClassSection.Class);
      ClassCard.SETRANGE(Curriculum,ClassSection.Curriculum);
      ClassCard.SETRANGE("Academic Year",ClassSection."Academic Year");
      IF ClassCard.FINDSET THEN BEGIN
        ClassCard1.RESET;
        ClassCard1.SETCURRENTKEY(Sequence);
        ClassCard1.SETRANGE(Sequence,ClassCard.Sequence + 1);
      //  ClassCard1.SETRANGE(Curriculum,ClassSection.Curriculum);
        IF ClassCard1.FINDFIRST THEN
          PromotedClass := ClassCard1.Class
        ELSE
          IF NOT CONFIRM(Text008,FALSE) THEN
            EXIT;
      END;

      //MESSAGE(EduSetup."Academic Year");
      //MESSAGE(PromotedClass);

      PromotionSuggestion.RESET;
      PromotionSuggestion.SETRANGE("Class Code",ClassCode);
      //PromotionSuggestion.SETFILTER(PromotionSuggestion.Result,'<>%1',PromotionSuggestion.Result::Withheld);
      IF PromotionSuggestion.FINDSET THEN
        REPEAT
          Student.GET(PromotionSuggestion."Student No.");
       //   MESSAGE(Student."No.");
       //   MESSAGE('%1',PromotionSuggestion.Result);
          IF PromotionSuggestion.Result = PromotionSuggestion.Result::Withheld THEN
            Student."Academic Year" := EduSetup."Academic Year"
          ELSE
          BEGIN
          PromotionHistory.INIT;
          PromotionHistory.TRANSFERFIELDS(PromotionSuggestion);
          PromotionHistory."Promoted Academic Year" := EduSetup."Academic Year";
          IF PromotedClass <> '' THEN BEGIN
            IF PromotionSuggestion.Result = PromotionSuggestion.Result::Promoted THEN
              PromotionHistory."Promoted Class" := PromotedClass
            ELSE
              IF PromotionSuggestion.Result = PromotionSuggestion.Result::Detained THEN
                PromotionHistory."Promoted Class" := PromotionSuggestion.Class;
            PromotionHistory."Promoted Academic Year" := EduSetup."Academic Year";
          END;
          PromotionHistory.INSERT;

          IF PromotedClass <> '' THEN BEGIN
            Student.Class := PromotionHistory."Promoted Class";
            Student."Previous Class" := PromotionSuggestion.Class;
            Student."Academic Year" := EduSetup."Academic Year";
            Student."New Student" := FALSE;
          END ELSE
            Student."Student Status" := Student."Student Status"::Alumni;
          Student."Class Code" :=
            PromotionHistory."Promoted Class" + '-' + ClassSection.Section + '-' + ClassSection.Curriculum +
            '-' + EduSetup."Academic Year";
       //   MESSAGE(Student."Class Code");
          END;
          Student.MODIFY;

        UNTIL PromotionSuggestion.NEXT = 0;
      //ERROR('hi');
      ClassSection.Promoted := TRUE;
      ClassSection.MODIFY;
      IF PromotedClass <> '' THEN BEGIN
        //IF NOT ClassSection.GET(PromotedClass + '-' + PromotionSuggestion.Section + '-' + PromotionSuggestion.Curriculum
       //    + '-' + EduSetup."Academic Year")
          IF NOT ClassSection.GET(PromotedClass + '-' + PromotionSuggestion.Section + '-' + PromotionSuggestion.Curriculum
              + '-' + EduSetup."Academic Year",PromotedClass)
          THEN BEGIN
            ClassSection.INIT;
            ClassSection.Class := PromotedClass;
            ClassSection.Section := PromotionSuggestion.Section;
            ClassSection.Curriculum := PromotionSuggestion.Curriculum;
            ClassSection."Academic Year" := EduSetup."Academic Year";
            ClassSection."Class Code" := PromotedClass + '-' + PromotionSuggestion.Section + '-' + PromotionSuggestion.Curriculum
               + '-' + EduSetup."Academic Year";

            IF ClassSection.INSERT THEN;
          END;
        ClassSubjects.RESET;
        ClassSubjects.SETRANGE(Class,PromotedClass);
        ClassSubjects.SETRANGE(Curriculum,PromotionSuggestion.Curriculum);
        ClassSubjects.SETRANGE("Academic Year",EduSetup."Academic Year");
        IF ClassSubjects.ISEMPTY THEN BEGIN
          ClassSubjects.RESET;
          ClassSubjects.SETRANGE(Class,PromotedClass);
          ClassSubjects.SETRANGE(Curriculum,PromotionSuggestion.Curriculum);
          ClassSubjects.SETRANGE("Academic Year",PromotionSuggestion."Academic Year");
          IF ClassSubjects.FINDSET THEN
            REPEAT
              ClassSubjects1.INIT;
              ClassSubjects1.TRANSFERFIELDS(ClassSubjects);
              ClassSubjects1."Academic Year" := EduSetup."Academic Year";
              ClassSubjects1.INSERT;
            UNTIL ClassSubjects.NEXT = 0;
        END;

        ClassSectionSubjects.RESET;
        ClassSectionSubjects.SETRANGE("Class Code",ClassSection."Class Code");
        IF ClassSectionSubjects.ISEMPTY THEN BEGIN
          ClassSectionSubjects.RESET;
          ClassSectionSubjects.SETRANGE(Class,PromotedClass);
          ClassSectionSubjects.SETRANGE(Section,PromotionSuggestion.Section);
          ClassSectionSubjects.SETRANGE(Curriculum,PromotionSuggestion.Curriculum);
          ClassSectionSubjects.SETRANGE("Academic Year",PromotionSuggestion."Academic Year");
          IF ClassSectionSubjects.FINDSET THEN
            REPEAT
              ClassSectionSubjects1.INIT;
              ClassSectionSubjects1.TRANSFERFIELDS(ClassSectionSubjects);
              ClassSectionSubjects1."Academic Year" := EduSetup."Academic Year";
              ClassSectionSubjects1."Class Code" := ClassSection."Class Code";
              IF ClassSectionSubjects1.INSERT THEN;
            UNTIL ClassSectionSubjects.NEXT = 0;
        END;
      END;
      MESSAGE(Text003);
      // Stop 08.VIGNESH
    END;

    PROCEDURE ClassPromotionSuggest@1102155001(ClassCode@1102155000 : Code[20]);
    VAR
      PromotionWeightage@1102155004 : Record 71058;
      MarksLine@1102155005 : Record 71053;
      PromotionSuggestion@1102155006 : Record 71059;
      Student@1102155007 : Record 71046;
      ClassSection@1102155008 : Record 71015;
      TotalmaxMark@1102155009 : Decimal;
      TotalMarksObtained@1102155010 : Decimal;
      TotalPromotionalMarks@1102155011 : Decimal;
      StudentMarkHeader@1102155012 : Record 71055;
    BEGIN
      // Start 09.VIGNESH
      //ClassSection.GET(ClassCode);
      ClassSection.RESET;
      ClassSection.SETRANGE(ClassSection."Class Code",ClassCode);
      IF ClassSection.FINDFIRST THEN;

      IF ClassSection.Promoted THEN
        ERROR(Text001);

      PromotionSuggestion.RESET;
      PromotionSuggestion.SETRANGE("Class Code",ClassCode);
      IF PromotionSuggestion.FINDSET THEN
        IF CONFIRM(Text009,FALSE) THEN
          PromotionSuggestion.DELETEALL;

      IF ClassSection."Promotion Percentage" = 0 THEN
        ERROR(Text005);

      PromotionWeightage.RESET;
      PromotionWeightage.SETCURRENTKEY("Class Code","Curriculum Code","Academic Year Code","Exam Type Code");
      PromotionWeightage.SETRANGE("Class Code",ClassSection.Class);
      PromotionWeightage.SETRANGE("Curriculum Code",ClassSection.Curriculum);
      PromotionWeightage.SETRANGE("Academic Year Code",ClassSection."Academic Year");
      IF PromotionWeightage.ISEMPTY THEN
        ERROR(Text006,ClassSection.Class,ClassSection.Curriculum)
      ELSE
        IF PromotionWeightage.FINDFIRST THEN BEGIN
          PromotionWeightage.CALCSUMS(Weightage);
          IF PromotionWeightage.Weightage <> 100 THEN
            ERROR(Text007);
        END;

      Student.RESET;
      Student.SETRANGE("Class Code",ClassCode);
      Student.SETRANGE("Student Status",Student."Student Status"::Student);
      IF Student.FINDSET THEN
        REPEAT
          TotalPromotionalMarks := 0;
          PromotionWeightage.RESET;
          PromotionWeightage.SETCURRENTKEY("Class Code","Curriculum Code","Academic Year Code","Exam Type Code");
          PromotionWeightage.SETRANGE("Class Code",Student.Class);
          PromotionWeightage.SETRANGE("Curriculum Code",Student.Curriculum);
          PromotionWeightage.SETRANGE("Academic Year Code",Student."Academic Year");
          IF PromotionWeightage.FINDSET THEN
            REPEAT
              StudentMarkHeader.RESET;
              StudentMarkHeader.SETRANGE("Class Code",ClassCode);
              StudentMarkHeader.SETRANGE("Student No.",Student."No.");
              StudentMarkHeader.SETRANGE("Exam Type",PromotionWeightage."Exam Type Code");
              IF StudentMarkHeader.FINDFIRST THEN
                IF StudentMarkHeader.Average <> 0 THEN
                  TotalPromotionalMarks += (StudentMarkHeader.Average * 100) / PromotionWeightage.Weightage;
            UNTIL PromotionWeightage.NEXT = 0;

          PromotionSuggestion.INIT;
          PromotionSuggestion."Student No." := Student."No.";
          PromotionSuggestion.Class := Student.Class;
          PromotionSuggestion.Section := Student.Section;
          PromotionSuggestion.Curriculum := Student.Curriculum;
          PromotionSuggestion."Pass %" := ClassSection."Promotion Percentage";
          PromotionSuggestion."Marks Obtained" := TotalPromotionalMarks;
          IF TotalPromotionalMarks >= ClassSection."Promotion Percentage" THEN
            PromotionSuggestion.Result := PromotionSuggestion.Result::Promoted
          ELSE
            PromotionSuggestion.Result := PromotionSuggestion.Result::Detained;
          PromotionSuggestion."Student Name" := Student.Name;
          PromotionSuggestion."Academic Year" := Student."Academic Year";
          PromotionSuggestion."Class Code" := PromotionSuggestion.Class + '-' + PromotionSuggestion.Section + '-' +
            PromotionSuggestion.Curriculum + '-' + PromotionSuggestion."Academic Year";
          PromotionSuggestion.INSERT;
        UNTIL Student.NEXT = 0;
      // Stop 09.VIGNESH
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01  08/10/09  KATHIR   Class Promotion()          Code added for Class Promotion
        02  23/11/09  VIGNESH  Class Promotion()          Section Feild is removed in parameters
        03  23/11/09  VIGNESH  Class Promotion()          filter Section for class card is removed
        04  23/11/09  VIGNESH  Class Promotion()          Filed removed in Class Card Set current field
        05  23/11/09  VIGNESH  Class Promotion()          filter Section for Promotion suggestion is removed
        06  23/11/09  VIGNESH  Class Promotion()          Filed removed in Class Card Set current field
        07  23/11/09  VIGNESH  Class Promotion()          filter Section for class card is removed
    }
    END.
  }
}

OBJECT Codeunit 71043 Withdrawal
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TransferCertificate@1102155000 : Record 71062;
      Withdrawl@1102155001 : Record 71061;
      Student@1102155002 : Record 71046;
      Text000@1102155003 : TextConst 'ENU=T.C issued';

    PROCEDURE "Issue TC"@1102155000("TCNo."@1102155000 : Code[20];WithdrawlNo@1102155006 : Code[20];"StudentNo."@1102155003 : Code[20]);
    VAR
      Customer@1102155002 : Record 18;
      TEXT001@1102155004 : TextConst 'ENU=Student balance amount is Pending..... Still Want to Continue?';
    BEGIN
      // Start 01.KATHIR
      Withdrawl.GET(WithdrawlNo);
      Customer.GET("StudentNo.");
      Customer.CALCFIELDS("Balance (LCY)");
      IF Customer."Balance (LCY)" > 0 THEN BEGIN
        IF CONFIRM(TEXT001) THEN
          "Issue TC Modify"("TCNo.",WithdrawlNo,"StudentNo.");
      END ELSE
        "Issue TC Modify"("TCNo.",WithdrawlNo,"StudentNo.");
      // Stop 01.KATHIR
    END;

    PROCEDURE "Issue TC Modify"@1102155002("TCNo."@1102155001 : Code[20];WithdrawlNo@1102155000 : Code[20];"StudNo."@1102155002 : Code[20]);
    BEGIN
      // Start 02.KATHIR
      Withdrawl.GET(WithdrawlNo);
      TransferCertificate.GET("TCNo.");
      Student.GET("StudNo.");

      TransferCertificate."TC Issued" := TRUE;
      // Start 03.VIGNESH
      IF TransferCertificate."Date of Issue" = 0D THEN
        TransferCertificate."Date of Issue" := TODAY;
      // Stop 03.VIGNESH
      TransferCertificate.MODIFY;

      Withdrawl."TC Issued" := TRUE;
      // Start 03.VIGNESH
      IF Withdrawl."Withdrawal date" = 0D THEN
        Withdrawl."Withdrawal date" := TODAY;
      // Stop 03.VIGNESH
      Withdrawl.MODIFY;

      Student."Student Status" := Student."Student Status"::Alumni;
      // Start 03.VIGNESH
      IF Student."Date of Leaving" = 0D THEN
        Student."Date of Leaving" := TODAY;
      // Stop 03.VIGNESH
      Student.MODIFY;
      MESSAGE(Text000);
      // Stop 02.KATHIR
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                       Description
      -----------------------------------------------------------------------------------------------
        01   11/10/09  KATHIR   Issue TC()                 Function added to Issue TC
        02   21/10/09  KATHIR   Issue TC Modify()          Function added to modify the student after TC been issued
        03   17/11/09  VIGNESH  Issue TC Modify()          Code modified to validate the date fields
    }
    END.
  }
}

OBJECT Codeunit 71044 Fee Management
{
  OBJECT-PROPERTIES
  {
    Date=02-02-18;
    Time=18:42:50;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1102155000 : TextConst 'ENU=Fee Copied';

    PROCEDURE FeeProcess@1102155000(StudNo@1102155000 : Code[20];FeeCode1@1102155001 : Code[10];Amount@1102155002 : Decimal);
    VAR
      FeeSetup@1102155003 : Record 71072;
      GenJournalTemplate@1102155004 : Record 80;
      GenJournalLine@1102155005 : Record 81;
      NoSeries@1102155006 : Codeunit 396;
      GenJournalBatch@1102155007 : Record 232;
      Genjourrec@1102155008 : Record 81;
      FeeCode@1102155009 : Record 71905;
      Student@1102155010 : Record 71046;
      "TempDocNo."@1102155011 : Code[20];
      CheckBool@1102155012 : Boolean;
    BEGIN
      // Start 01.KATHIR
      CLEAR(NoSeries);
      FeeSetup.GET;
      FeeSetup.TESTFIELD("Journal Template Name");
      FeeSetup.TESTFIELD("Journal Batch Name");
      FeeCode.GET(FeeCode1);
      Student.GET(StudNo);
      "TempDocNo." := NoSeries.GetNextNo(FeeSetup."Fee Number",0D,TRUE);
      GenJournalLine.RESET;
      GenJournalLine.SETRANGE("Journal Template Name",FeeSetup."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",FeeSetup."Journal Batch Name");
      IF GenJournalLine.FINDLAST THEN
        GenJournalLine."Line No." := GenJournalLine."Line No." + 10000
      ELSE
        GenJournalLine."Line No." := 10000;

      GenJournalLine.INIT;
      GenJournalLine."Journal Template Name" := FeeSetup."Journal Template Name";
      GenJournalLine."Journal Batch Name" := FeeSetup."Journal Batch Name";
      GenJournalLine."Account Type" := GenJournalLine."Account Type"::Customer;
      IF Amount > 0 THEN
        GenJournalLine."Document Type" := GenJournalLine."Document Type"::Invoice
      ELSE
        IF Amount < 0 THEN
          GenJournalLine."Document Type" := GenJournalLine."Document Type"::Payment;
      GenJournalLine."Account No." := StudNo;
      GenJournalLine.VALIDATE("Account No.");
      GenJournalLine."Bal. Account Type" := GenJournalLine."Bal. Account Type"::"G/L Account";
      GenJournalLine."Bal. Account No." := FeeCode."G/L Account";
      GenJournalLine.Description := FeeCode.Description;
      GenJournalLine."Posting Date" := TODAY;
      GenJournalLine."Debit Amount" := Amount;
      GenJournalLine.VALIDATE("Debit Amount");
      GenJournalLine."Document No." := "TempDocNo.";
      GenJournalLine.Class := Student.Class;
      GenJournalLine.Section := Student.Section;
      GenJournalLine."Academic Year" := Student."Academic Year";
      GenJournalLine."Fee Code" := FeeCode1;
      GenJournalLine.INSERT(TRUE);
      // Stop 01.KATHIR
    END;

    PROCEDURE CheckDuplication@1000000000("StudNo."@1000000004 : Code[20];FeeCode@1000000003 : Code[20];Class@1000000002 : Code[20];Sec@1000000001 : Code[10];Accyear@1000000000 : Code[20]) : Boolean;
    VAR
      CustLedgerEntry@1000000005 : Record 21;
    BEGIN
      //Start 02.KATHIR
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETCURRENTKEY("Customer No.","Fee Code",Class,Section,"Academic Year");
      CustLedgerEntry.SETRANGE("Customer No.","StudNo.");
      CustLedgerEntry.SETRANGE("Fee Code",FeeCode);
      CustLedgerEntry.SETRANGE(Class,Class);
      CustLedgerEntry.SETRANGE(Section,Sec);
      CustLedgerEntry.SETRANGE("Academic Year",Accyear);
      IF CustLedgerEntry.ISEMPTY THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE)
      // Stop 02.KATHIR
    END;

    PROCEDURE CopyFees@1102155001(feecode@1102155002 : Code[20];ClassFeeNo@1102155003 : Code[20]);
    VAR
      ClassFeeLine@1102155000 : Record 71071;
      ClassFeeLine1@1102155001 : Record 71071;
    BEGIN
      // Start 01 VANDHANA
      ClassFeeLine.RESET;
      ClassFeeLine.SETRANGE("Document No.",feecode);
      IF ClassFeeLine.FINDSET THEN
        REPEAT
          ClassFeeLine1.INIT;
          ClassFeeLine1.TRANSFERFIELDS(ClassFeeLine);
          ClassFeeLine1."Document No." := ClassFeeNo;
          ClassFeeLine1.INSERT;
        UNTIL ClassFeeLine.NEXT = 0;
      MESSAGE(Text000);
      // Stop 01 VANDHANA
    END;

    PROCEDURE "Post Sales"@1102155002("getStudentNo."@1102155000 : Code[20];getFeeCode@1102155001 : Code[20];getAmount@1102155002 : Decimal) : Code[20];
    VAR
      SalesHeader@1102155004 : Record 36;
      SalesLine@1102155003 : Record 37;
      SalesPost@1102155007 : Codeunit 80;
      SalesInvoiceHeader@1102155006 : Record 112;
      FeeComponents@1102155005 : Record 71905;
      Student@1102155009 : Record 71046;
      EducationSetup@1102155010 : Record 71884;
      SalesHeader1@1102155011 : Record 36;
    BEGIN
      // Start 04.VIGNESH
      FeeComponents.GET(getFeeCode);
      FeeComponents.TESTFIELD("G/L Account");
      Student.GET("getStudentNo.");
      EducationSetup.GET;
      SalesHeader.RESET;
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader."Sell-to Customer No." := "getStudentNo.";
      SalesHeader."Posting Date" := TODAY;
      SalesHeader."Shipment Date" := TODAY;
      SalesHeader."Document Date" := TODAY;
      SalesHeader.VALIDATE("Sell-to Customer No.");
      SalesHeader."Payment Method Code" := 'CASH';
      SalesHeader."Payment Terms Code" := '0d';
      SalesHeader.VALIDATE("Payment Terms Code");
      SalesHeader.Ship := TRUE;
      SalesHeader.Invoice := TRUE;
      SalesHeader."Fee Code" := getFeeCode;
      SalesHeader.Section := Student.Section;
      SalesHeader."Academic Year" := EducationSetup."Academic Year";
      SalesHeader.Class := Student.Class;
      SalesHeader.INSERT(TRUE);

      SalesLine.INIT;
      SalesLine."Document Type" := SalesLine."Document Type"::Order;
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." += 10000;
      SalesLine.Type := SalesLine.Type::"G/L Account";
      SalesLine.VALIDATE(Type);
      SalesLine."No." := FeeComponents."G/L Account";
      SalesLine.VALIDATE("No.");
      SalesLine.Quantity := 1;
      SalesLine.VALIDATE(Quantity);
      SalesLine."Unit Price" := getAmount;
      SalesLine.VALIDATE("Unit Price");
      SalesLine.INSERT(TRUE);

      IF SalesHeader1.GET(SalesHeader."Document Type"::Order,SalesHeader."No.") THEN BEGIN
        CLEAR(SalesPost);
        SalesPost.SetPostingDate(FALSE,FALSE,SalesHeader1."Posting Date");
        SalesPost.RUN(SalesHeader1);

        SalesInvoiceHeader.RESET;
        SalesInvoiceHeader.SETRANGE("Order No.",SalesHeader."No.");
        IF SalesInvoiceHeader.FINDFIRST THEN
          EXIT(SalesInvoiceHeader."No.");
      END;
      // Stop 04.VIGNESH
    END;

    BEGIN
    {
        No   Date      Sign     Trigger            Description
      -----------------------------------------------------------------------------------------------
        01  24/09/09   KATHIR   FeeProcess()       Function Added to Create Journal for Fees and also for batch post
        02  25/09/09   KATHIR   CheckDuplication() Function created to check the duplication entry in Cust. ledger Entry
        03  10/10/09  VANDHANA  CopyFees()         Function added to copy feeLines from one fee to another.
        04  14/10/19  VIGNESH   Post Sales()       Function Creted to post the Fee through Sales Order
    }
    END.
  }
}

OBJECT Codeunit 71045 Co-Curricular
{
  OBJECT-PROPERTIES
  {
    Date=02-03-18;
    Time=15:44:19;
    Modified=Yes;
    Version List=EDU3.0,SJ6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1102155000 : TextConst 'ENU=Already This Entry has updated';
      Text001@1102155001 : TextConst 'ENU=Please select the Student(s)';
      Text002@1102155002 : TextConst 'ENU=Total Student required in Participant Type Main is %1';
      Text003@1102155003 : TextConst 'ENU=Total Student required in Participant Type Substitute is %1';
      Text004@1102155004 : TextConst 'ENU=Update Completed';
      Text005@1102155005 : TextConst 'ENU=Already Points has updated';
      Text006@1102155006 : TextConst 'ENU=You cannot Update the Updated already generated';
      Text007@1102155007 : TextConst 'ENU=Lines are not updated';
      Text008@1102155008 : TextConst 'ENU=Update Points Completed';
      Text009@1102155009 : TextConst 'ENU=Do you want to Update this Entry ?';
      Text010@1102155010 : TextConst 'ENU=Do you want to get the Students ?';
      Text011@1102155011 : TextConst 'ENU=Do you want to update the Students ?';
      Text012@1102155012 : TextConst 'ENU="Do you want to update Points to the Students ? "';
      Text013@1102155013 : TextConst 'ENU=Do you want to update Points to the Students ?';
      Student@1102159000 : Record 71046;
      "Class Section"@1102159001 : Record 71015;
      Text014@1102155014 : TextConst 'ENU=Student %1 already Participate %2 Events';

    PROCEDURE UpdateEntry@1102155000("GetDocNo."@1102155000 : Code[20]);
    VAR
      ParticipantEntryHeader@1102155001 : Record 71083;
      ParticipantEntryLine@1102155002 : Record 71084;
      Iscount@1102155003 : Integer;
      iSCOUNT1@1102155004 : Integer;
      ParticipantEntryMulti@1102155005 : Record 71084;
      EducationSetup@1102155006 : Record 71884;
      EventParticipantEntry@1102155007 : Record 71084;
      Text0045@1102155008 : TextConst 'ENU=Student %1 already Participate in %2  event';
    BEGIN
      // Start 01.VIGNESH
      ParticipantEntryHeader.GET("GetDocNo.");
      IF ParticipantEntryHeader."Update Entry" THEN
        ERROR(Text000);

      EducationSetup.GET;

      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.","GetDocNo.");
      IF ParticipantEntryLine.ISEMPTY THEN
        ERROR(Text001);


      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.","GetDocNo.");
      ParticipantEntryLine.SETRANGE("Participant Type",ParticipantEntryLine."Participant Type"::Main);
      IF ParticipantEntryLine.FINDFIRST THEN
      Iscount := ParticipantEntryLine.COUNT;
      IF Iscount <> ParticipantEntryHeader."Team Size" THEN
        ERROR(Text002,ParticipantEntryHeader."Team Size");

      //Cetas, 09-th-August begin
      EventParticipantEntry.RESET;
      EventParticipantEntry.SETRANGE("Academic Year",EducationSetup."Academic Year");
      EventParticipantEntry.SETRANGE("Update Entry",TRUE);
      EventParticipantEntry.SETRANGE("Competition Name",ParticipantEntryLine."Competition Name");
      EventParticipantEntry.SETRANGE("Student No.",ParticipantEntryLine."Student No.");
      IF EventParticipantEntry.FINDSET THEN
        IF EventParticipantEntry.COUNT >= 1 THEN
          ERROR(Text0045,EventParticipantEntry."Student Name",ParticipantEntryHeader."Competition Name");
      //Cetas, 09-th-August end

      // >> SJ6.01
      {
      IF (ParticipantEntryHeader."Event Type" = ParticipantEntryHeader."Event Type"::Individual) THEN BEGIN
      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.","GetDocNo.");
      ParticipantEntryLine.SETRANGE("Participant Type",ParticipantEntryLine."Participant Type"::Substitute);
      IF ParticipantEntryLine.FINDFIRST THEN
      iSCOUNT1 := ParticipantEntryLine.COUNT;
      IF iSCOUNT1 <> ParticipantEntryHeader."Team Size" THEN
        ERROR(Text003,ParticipantEntryHeader."Team Size");
      END;
      }
      // << SJ6.01
      //Commented By S.S.Kumar on 25 March 2012
      //IF NOT CONFIRM(Text009,FALSE) THEN
        //EXIT;
        //End

      //Sub Junior Calculation Begin

      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.","GetDocNo.");
      IF ParticipantEntryLine.FINDFIRST THEN REPEAT
        IF (ParticipantEntryLine."Event Type" = ParticipantEntryLine."Event Type"::Individual)THEN BEGIN
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student Division",'SUB JUNIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Individual);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          IF ParticipantEntryMulti.FINDFIRST THEN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (24+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);
        END
        ELSE IF (ParticipantEntryLine."Event Type" = ParticipantEntryLine."Event Type"::Team)THEN BEGIN
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student Division",'SUB JUNIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Team);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          IF ParticipantEntryMulti.FINDFIRST THEN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (21+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);
        END;
      UNTIL ParticipantEntryLine.NEXT = 0;
      //Sub Junior Calculation end

      //Junior Calculation Begin
      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.","GetDocNo.");
      IF ParticipantEntryLine.FINDFIRST THEN REPEAT
        IF (ParticipantEntryLine."Event Type" = ParticipantEntryLine."Event Type"::Individual)THEN BEGIN
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student Division",'JUNIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Individual);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          IF ParticipantEntryMulti.FINDFIRST THEN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (24+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);
        END
        ELSE IF (ParticipantEntryLine."Event Type" = ParticipantEntryLine."Event Type"::Team)THEN BEGIN
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student Division",'JUNIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Team);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti.Gender,ParticipantEntryMulti.Gender::Male);
          IF ParticipantEntryMulti.FINDFIRST THEN BEGIN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (22+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);
          END;
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student Division",'JUNIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Team);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti.Gender,ParticipantEntryMulti.Gender::Female);
          IF ParticipantEntryMulti.FINDFIRST THEN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (21+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);

        END;
      UNTIL ParticipantEntryLine.NEXT = 0;
      //Junior Calculation Begin

      //Inters, Seniors, Super Seniors Calculation Begin
      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.","GetDocNo.");
      IF ParticipantEntryLine.FINDFIRST THEN REPEAT
        IF (ParticipantEntryLine."Event Type" = ParticipantEntryLine."Event Type"::Individual)THEN BEGIN
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETFILTER(ParticipantEntryMulti."Student Division",'%1 |%2 | %3','INTERS','SENIORS','SUPER SENIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Individual);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          IF ParticipantEntryMulti.FINDFIRST THEN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (25+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);
        END
        ELSE IF (ParticipantEntryLine."Event Type" = ParticipantEntryLine."Event Type"::Team)THEN BEGIN
          CLEAR(iSCOUNT1);
          ParticipantEntryMulti.RESET;
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Academic Year",EducationSetup."Academic Year");
          ParticipantEntryMulti.SETFILTER(ParticipantEntryMulti."Student Division",'%1 |%2 | %3','INTERS','SENIORS','SUPER SENIORS');
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Update Entry",TRUE);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Event Type",ParticipantEntryMulti."Event Type"::Team);
          ParticipantEntryMulti.SETRANGE(ParticipantEntryMulti."Student No.",ParticipantEntryLine."Student No.");
          IF ParticipantEntryMulti.FINDFIRST THEN
            iSCOUNT1 := ParticipantEntryMulti.COUNT;
            IF iSCOUNT1 >= (22+3) THEN
              ERROR(Text014,ParticipantEntryMulti."Student Name",iSCOUNT1);
        END;
      UNTIL ParticipantEntryLine.NEXT = 0;
      //Inters, Seniors, Super Seniors Calculation Begin



      ParticipantEntryHeader."Update Entry" := TRUE;
      ParticipantEntryHeader.MODIFY;
      MESSAGE(Text004);
      // Stop 01.VIGNESH
      ParticipantEntryLine.RESET;
      ParticipantEntryLine.SETRANGE("Document No.",ParticipantEntryHeader."No.");
      IF ParticipantEntryLine.FINDFIRST THEN REPEAT
        ParticipantEntryLine."Update Entry" := TRUE;
        ParticipantEntryLine.MODIFY;
      UNTIL ParticipantEntryLine.NEXT = 0;
    END;

    PROCEDURE GetStudentsIndividual@1102155002("GetDocNo."@1102155000 : Code[20]);
    VAR
      CompetitionResultIndividual@1102155001 : Record 71085;
      ParticipantEntryLine@1102155002 : Record 71084;
      CompetitionResIndvuLine@1102155003 : Record 71086;
      ParticipantEntryHeader@1102155004 : Record 71083;
    BEGIN
      // Start 02.VIGNESH
      CompetitionResultIndividual.GET("GetDocNo.");

      IF CompetitionResultIndividual."Update Results" THEN
        ERROR(Text005);

      CompetitionResultIndividual.TESTFIELD("Competition Entry No.");
      CompetitionResultIndividual.TESTFIELD("Student Division");

      CompetitionResIndvuLine.RESET;
      CompetitionResIndvuLine.SETRANGE("Document No.","GetDocNo.");
      IF CompetitionResIndvuLine.FINDFIRST THEN
       // IF CONFIRM(Text010,FALSE) THEN
          CompetitionResIndvuLine.DELETEALL;

      ParticipantEntryHeader.RESET;
      ParticipantEntryHeader.SETCURRENTKEY("Competition Entry No.","Student Division");
      ParticipantEntryHeader.SETRANGE("Competition Entry No.",CompetitionResultIndividual."Competition Entry No.");
      ParticipantEntryHeader.SETRANGE("Student Division",CompetitionResultIndividual."Student Division");
      //ParticipantEntryHeader.SETRANGE("Update Entry",TRUE);
      ParticipantEntryHeader.SETRANGE("Update Results",FALSE);
      IF ParticipantEntryHeader.FINDSET THEN
        REPEAT
          ParticipantEntryLine.RESET;
          ParticipantEntryLine.SETRANGE("Document No.",ParticipantEntryHeader."No.");
      //ParticipantEntryLine.SETRANGE(ParticipantEntryLine."Participant Type",ParticipantEntryLine."Participant Type"::Main); //Commen
          IF ParticipantEntryLine.FINDSET THEN
            REPEAT
              CompetitionResIndvuLine.INIT;
              CompetitionResIndvuLine.TRANSFERFIELDS(ParticipantEntryLine);
              CompetitionResIndvuLine."Document No." := CompetitionResultIndividual."No.";
              CompetitionResIndvuLine."Competition Type" := CompetitionResultIndividual."Competition Type";
              CompetitionResIndvuLine."Competition Name" := CompetitionResultIndividual."Competition Name";
              CompetitionResIndvuLine.Class := ParticipantEntryLine.Class;
              CompetitionResIndvuLine.Section := ParticipantEntryLine.Section;

              CompetitionResIndvuLine.INSERT;
            UNTIL ParticipantEntryLine.NEXT = 0;
        UNTIL ParticipantEntryHeader.NEXT = 0;
      // Stop 02.VIGNESH
    END;

    PROCEDURE GetStudentsTeam@1102155003("GetDocNo."@1102155000 : Code[20]);
    VAR
      CompetitionResultTeam@1102155001 : Record 71087;
      ParticipantEntryLine@1102155002 : Record 71084;
      CompetitionResTeamLine@1102155003 : Record 71088;
      ParticipantEntryHeader@1102155004 : Record 71083;
    BEGIN
      // Start 03.VIGNESH
      CompetitionResultTeam.GET("GetDocNo.");
      IF CompetitionResultTeam."Update Results" THEN
        ERROR(Text005);
      CompetitionResultTeam.TESTFIELD("Competition Entry No.");
      CompetitionResultTeam.TESTFIELD("Student Division");

      CompetitionResTeamLine.RESET;
      CompetitionResTeamLine.SETRANGE("Document No.","GetDocNo.");
      IF CompetitionResTeamLine.FINDFIRST THEN
       //IF CONFIRM(Text011,FALSE) THEN
          CompetitionResTeamLine.DELETEALL;

      ParticipantEntryHeader.RESET;
      ParticipantEntryHeader.SETCURRENTKEY("Competition Entry No.","Student Division");
      ParticipantEntryHeader.SETRANGE("Competition Entry No.",CompetitionResultTeam."Competition Entry No.");
      ParticipantEntryHeader.SETRANGE("Student Division",CompetitionResultTeam."Student Division");
      ParticipantEntryHeader.SETRANGE("Event Type",ParticipantEntryHeader."Event Type"::Team);
      //ParticipantEntryHeader.SETRANGE("Update Entry",TRUE);
      ParticipantEntryHeader.SETRANGE("Update Results",FALSE);
      IF ParticipantEntryHeader.FINDFIRST THEN
        REPEAT
          CompetitionResTeamLine.INIT;
          CompetitionResTeamLine."Document No." := CompetitionResultTeam."No.";
          CompetitionResTeamLine."Team No." := ParticipantEntryHeader."Team No.";
          CompetitionResTeamLine.House := ParticipantEntryHeader.House;
          CompetitionResTeamLine."Competition Type" := ParticipantEntryHeader."Competition Type";
          CompetitionResTeamLine."Competition Name" := ParticipantEntryHeader."Competition Name";
          CompetitionResTeamLine."Student Division" := ParticipantEntryHeader."Student Division";
          CompetitionResTeamLine."Academic Year" := CompetitionResultTeam."Academic Year";
          CompetitionResTeamLine."Competition Entry No." := CompetitionResultTeam."Competition Entry No.";
          CompetitionResTeamLine.INSERT;
        UNTIL ParticipantEntryHeader.NEXT = 0;
      // Stop 03.VIGNESH
    END;

    PROCEDURE UpdatePointsIndividual@1102155004("getDocNo."@1102155000 : Code[20];IsForceUpdate@1000000000 : Boolean);
    VAR
      ParticipantEntryLine@1102155001 : Record 71084;
      CompetitionResIndvuLine@1102155002 : Record 71086;
      CompetitionResultIndividual@1102155003 : Record 71085;
      ParticipantEntryHeader@1102155004 : Record 71083;
      CompetitionEntryHeader@1102155005 : Record 71081;
      CompetitionResIndvuLine1@1102155006 : Record 71086;
      CoCurricularPointsSetup@1102155007 : Record 71077;
    BEGIN
      // Start 04.VIGNESH
      //IF NOT CONFIRM(Text012,FALSE) THEN
        //EXIT;

      //11.06.2013 begin
      CompetitionResIndvuLine1.RESET;
      CompetitionResIndvuLine1.SETRANGE("Document No.","getDocNo.");
      CompetitionResIndvuLine1.SETRANGE(Position,CompetitionResIndvuLine1.Position::"1st Place");
      IF CompetitionResIndvuLine1.FINDSET THEN REPEAT
         IF CoCurricularPointsSetup.GET(CompetitionResIndvuLine1."Competition Type") THEN;
          IF CompetitionResIndvuLine1.COUNT > 1 THEN
            CompetitionResIndvuLine1.Points := (CoCurricularPointsSetup."1st Place" + CoCurricularPointsSetup."2nd Place")/2;
            CompetitionResIndvuLine1.MODIFY;
      UNTIL CompetitionResIndvuLine1.NEXT = 0;
      //11.06.2013 end

      CompetitionResultIndividual.GET("getDocNo.");
      IF CompetitionResultIndividual."Update Results" AND NOT IsForceUpdate THEN
        ERROR(Text006);

      CompetitionResIndvuLine.RESET;
      CompetitionResIndvuLine.SETRANGE("Document No.","getDocNo.");
      IF CompetitionResIndvuLine.ISEMPTY THEN
        ERROR(Text007)
      ELSE
        IF CompetitionResIndvuLine.FINDSET THEN
          REPEAT
            ParticipantEntryLine.RESET;
            ParticipantEntryLine.SETCURRENTKEY("Competition Entry No.","Student Division","Student No.");
            ParticipantEntryLine.SETRANGE("Competition Entry No.",CompetitionResIndvuLine."Competition Entry No.");
            ParticipantEntryLine.SETRANGE("Student Division",CompetitionResIndvuLine."Student Division");
            ParticipantEntryLine.SETRANGE("Student No.",CompetitionResIndvuLine."Student No.");
            IF ParticipantEntryLine.FINDFIRST THEN BEGIN
              ParticipantEntryLine.Position := CompetitionResIndvuLine.Position;
              //11.06.13 begin
              IF CompetitionResIndvuLine.Position = CompetitionResIndvuLine.Position::"1st Place" THEN
                ParticipantEntryLine.Points := CompetitionResIndvuLine1.Points
              ELSE
                ParticipantEntryLine.Points := CompetitionResIndvuLine.Points ;
              //11.06.13 end

              //ParticipantEntryLine.Points := CompetitionResIndvuLine.Points ;
              ParticipantEntryLine."Details NUM" := CompetitionResIndvuLine."Details NUM";
              ParticipantEntryLine."Details TXT" := CompetitionResIndvuLine."Details TXT";
              ParticipantEntryLine."Update Results" := TRUE;
              ParticipantEntryLine.MODIFY;
            END;
          UNTIL CompetitionResIndvuLine.NEXT = 0;

      ParticipantEntryHeader.RESET;
      ParticipantEntryHeader.SETCURRENTKEY("Competition Entry No.","Student Division");
      ParticipantEntryHeader.SETRANGE("Competition Entry No.",CompetitionResultIndividual."Competition Entry No.");
      ParticipantEntryHeader.SETRANGE("Student Division",CompetitionResultIndividual."Student Division");
      ParticipantEntryHeader.MODIFYALL("Update Results",TRUE);
      ParticipantEntryHeader.MODIFYALL("Update Entry",TRUE);
      ParticipantEntryHeader.MODIFYALL("Competition Status",ParticipantEntryHeader."Competition Status"::Completed);

      CompetitionResultIndividual."Update Results" := TRUE;
      CompetitionResultIndividual."Competition Status" := CompetitionResultIndividual."Competition Status"::Completed;

      CompetitionEntryHeader.GET(CompetitionResultIndividual."Competition Entry No.");
      //CompetitionEntryHeader."Competition Status" := CompetitionEntryHeader."Competition Status"::Completed;
      CompetitionEntryHeader.MODIFY;
      IF CompetitionResultIndividual.MODIFY THEN
        MESSAGE(Text008);
      // Stop 04.VIGNESH
      COMMIT;
    END;

    PROCEDURE UpdatePointTeam@1102155005("getDocNo."@1102155000 : Code[20]);
    VAR
      ParticipantEntryLine@1102155001 : Record 71084;
      CompetitionResultTeam@1102155002 : Record 71087;
      CompetitionResTeamLine@1102155003 : Record 71088;
      ParticipantEntryHeader@1102155004 : Record 71083;
    BEGIN
      // Start 05.VIGNESH
      //IF NOT CONFIRM(Text012,FALSE) THEN
       // EXIT;

      CompetitionResultTeam.GET("getDocNo.");
      IF CompetitionResultTeam."Update Results" THEN
        ERROR(Text006);

      CompetitionResTeamLine.RESET;
      CompetitionResTeamLine.SETRANGE("Document No.","getDocNo.");
      IF CompetitionResTeamLine.ISEMPTY THEN
        ERROR(Text007)
      ELSE
        IF CompetitionResTeamLine.FINDFIRST THEN
          REPEAT
            ParticipantEntryLine.RESET;
            ParticipantEntryLine.SETCURRENTKEY("Competition Entry No.","Student Division","Team No.");
            ParticipantEntryLine.SETRANGE("Competition Entry No.",CompetitionResTeamLine."Competition Entry No.");
            ParticipantEntryLine.SETRANGE("Student Division",CompetitionResTeamLine."Student Division");
            ParticipantEntryLine.SETRANGE("Team No.",CompetitionResTeamLine."Team No.");
            ParticipantEntryLine.SETRANGE(ParticipantEntryLine."Participant Type",
            ParticipantEntryLine."Participant Type" :: Main); //DS01 Added on 260712
            IF ParticipantEntryLine.FINDFIRST THEN
            BEGIN
              ParticipantEntryLine.MODIFYALL(Position,CompetitionResTeamLine.Position);
              ParticipantEntryLine.MODIFYALL(Points,CompetitionResTeamLine.Points);
              ParticipantEntryLine."Details NUM" := CompetitionResTeamLine."Details NUM";
              ParticipantEntryLine."Details TXT" := CompetitionResTeamLine."Details TXT";

              ParticipantEntryLine.MODIFYALL("Update Results",TRUE);
            END;
          UNTIL CompetitionResTeamLine.NEXT = 0;

      ParticipantEntryHeader.RESET;
      ParticipantEntryHeader.SETCURRENTKEY("Competition Entry No.","Student Division");
      ParticipantEntryHeader.SETRANGE("Competition Entry No.",CompetitionResTeamLine."Competition Entry No.");
      ParticipantEntryHeader.SETRANGE("Student Division",CompetitionResTeamLine."Student Division");
      ParticipantEntryHeader.MODIFYALL("Update Results",TRUE);
      ParticipantEntryHeader.MODIFYALL("Update Entry",TRUE);
      CompetitionResultTeam."Update Results" := TRUE;
      IF CompetitionResultTeam.MODIFY THEN
        MESSAGE(Text008);
      // Stop 05.VIGNESH
    END;

    PROCEDURE GetStudents@1102159000("GetDocNo."@1102159000 : Code[20]);
    VAR
      ParticipantEntryHeader@1102159001 : Record 71083;
      ParticipantEntryLine@1102159002 : Record 71084;
      CompetitionEntryLine@1102155000 : Record 71082;
      LocalAge1@1102155001 : Integer;
      TempAge1@1102155002 : Integer;
      Age3@1102155003 : Integer;
      Months2@1102155004 : Integer;
      Age@1102155005 : Integer;
      Months@1102155006 : Integer;
    BEGIN
      IF ParticipantEntryHeader.GET("GetDocNo.") THEN
      BEGIN
        Student.RESET;
        Student.SETRANGE(Student.House,ParticipantEntryHeader.House);
        Student.SETRANGE(Student.Gender,ParticipantEntryHeader.Gender);
        Student.SETRANGE(Student."Academic Year",ParticipantEntryHeader."Academic Year");
        Student.SETRANGE(Student."Student Status",Student."Student Status"::Student);


        IF Student.FINDSET THEN
        REPEAT
          CompetitionEntryLine.SETRANGE(CompetitionEntryLine."Document No.",ParticipantEntryHeader."Competition Entry No.");
          IF CompetitionEntryLine.FINDFIRST THEN BEGIN
            //CompetitionEntryLine.TESTFIELD("Min Age");
            //CompetitionEntryLine.TESTFIELD("Max Age");
            //CompetitionEntryLine.TESTFIELD("Cut Off Date");
            CompetitionEntryLine.TESTFIELD("Cut Off Date");
            CompetitionEntryLine."Temp Cut off Date" := TODAY;
            IF Student."Date Of Birth" <> 0D THEN BEGIN
                LocalAge1 := CompetitionEntryLine."Temp Cut off Date" - Student."Date Of Birth";
                TempAge1 := ROUND(LocalAge1 / 365,1,'<');
                Age3 := LocalAge1 MOD 365;
                Months2 := ROUND(Age3 / 30,1,'=');
                Age := TempAge1;
                Months := Months2;
                Student.TESTFIELD(House);
              //  House :=Student.House;
            END;
          END;

         IF CompetitionEntryLine."Cut Off Date" <= Student."Date Of Birth" THEN BEGIN
         //IF (Age >= CompetitionEntryLine."Min Age") OR (Age <= CompetitionEntryLine."Max Age") THEN BEGIN
            ParticipantEntryLine.INIT;
            ParticipantEntryLine."Document No."          := ParticipantEntryHeader."No.";
            ParticipantEntryLine."Student No."           := Student."No.";
            ParticipantEntryLine.Class                   := Student.Class;
            ParticipantEntryLine."Student Name"          := Student.Name;
            ParticipantEntryLine.House                   := Student.House;
            ParticipantEntryLine.Gender                  := Student.Gender;
            ParticipantEntryLine."Competition Entry No." := ParticipantEntryHeader."Competition Entry No.";
            ParticipantEntryLine."Competition Type"      := ParticipantEntryHeader."Competition Type";
            ParticipantEntryLine."Competition Name"      := ParticipantEntryHeader."Competition Name";
            ParticipantEntryLine."Student Division"      := ParticipantEntryHeader."Student Division";
            ParticipantEntryLine."Event Code"            := ParticipantEntryHeader."Event Code";
            ParticipantEntryLine."Event Type"            := ParticipantEntryHeader."Event Type";
            ParticipantEntryLine."Academic Year"         := ParticipantEntryHeader."Academic Year";
        //    ParticipantEntryLine.Age                     := Student.Age;
        //    ParticipantEntryLine.Months                  := Student.Months;
            ParticipantEntryLine.Age                     := Age;
            ParticipantEntryLine.Months                  := Months;


            IF "Class Section".GET(Student."Class Code") THEN
            BEGIN
              IF "Class Section"."Academic Year" = ParticipantEntryHeader."Academic Year" THEN
                ParticipantEntryLine.INSERT(TRUE);
            END;
         END;
        UNTIL Student.NEXT = 0;
      END;
    END;

    PROCEDURE CheckPositions@1102159001("getDocNo."@1102159000 : Code[20]) Ret : Text[30];
    VAR
      CompetitionResIndvuLine@1102159001 : Record 71086;
      CompetitionResIndvuLineNew@1102159002 : Record 71086;
      CompetitionRes@1102159003 : Record 71086;
    BEGIN

      CompetitionResIndvuLine.RESET;
      CompetitionResIndvuLine.SETRANGE(CompetitionResIndvuLine."Document No.","getDocNo.");
      CompetitionResIndvuLine.SETFILTER(CompetitionResIndvuLine.Position,'<>%1 & <>%2',0,CompetitionResIndvuLine.Position::Participation
      );
      IF CompetitionResIndvuLine.FINDSET THEN
      REPEAT
        CompetitionRes.RESET;
        CompetitionRes.SETRANGE(CompetitionRes."Document No.","getDocNo.");
        CompetitionRes.SETFILTER(CompetitionRes.Position,'<>%1 & <>%2',0,
                                 CompetitionRes.Position::Participation);
        CompetitionRes.SETRANGE(CompetitionRes.Position,CompetitionResIndvuLine.Position);
        IF CompetitionRes.FINDFIRST THEN
        BEGIN
          IF CompetitionRes.COUNT > 1 THEN
          BEGIN
            CompetitionRes.SETFILTER(CompetitionRes.Position,'%1..%2',
                                     CompetitionRes.Position+1,CompetitionRes.Position +  CompetitionRes.COUNT -1 );
            IF CompetitionRes.FINDFIRST THEN
            BEGIN
              //ERROR('%1 Cannot be Entered as there are more earlier Places' ,CompetitionRes.Position,CompetitionRes.Position-1);
              ERROR(FORMAT(CompetitionRes.Position));

            END;
          END;  ;
        END;
      UNTIL CompetitionResIndvuLine.NEXT = 0;
    END;

    PROCEDURE "----Cetas1-----"@1102155006();
    BEGIN
    END;

    PROCEDURE UpdatePointTeam1@1102155001("getDocNo."@1102155000 : Code[20];IsForceUpdate@1000000000 : Boolean);
    VAR
      ParticipantEntryLine@1102155001 : Record 71084;
      CompetitionResultTeam@1102155002 : Record 71087;
      CompetitionResTeamLine@1102155003 : Record 71088;
      ParticipantEntryHeader@1102155004 : Record 71083;
    BEGIN
      //DS01 added on 260712
      CompetitionResultTeam.GET("getDocNo.");
      IF CompetitionResultTeam."Update Results" AND NOT IsForceUpdate THEN
        ERROR(Text006);

      CompetitionResTeamLine.RESET;
      CompetitionResTeamLine.SETRANGE("Document No.","getDocNo.");
      IF CompetitionResTeamLine.ISEMPTY THEN
        ERROR(Text007)
      ELSE
        IF CompetitionResTeamLine.FINDFIRST THEN
          REPEAT
            ParticipantEntryLine.RESET;
            ParticipantEntryLine.SETCURRENTKEY("Competition Entry No.","Student Division","Team No.");
            ParticipantEntryLine.SETRANGE("Competition Entry No.",CompetitionResTeamLine."Competition Entry No.");
            ParticipantEntryLine.SETRANGE("Student Division",CompetitionResTeamLine."Student Division");
            ParticipantEntryLine.SETRANGE("Team No.",CompetitionResTeamLine."Team No.");
            ParticipantEntryLine.SETRANGE(ParticipantEntryLine."Participant Type",
            ParticipantEntryLine."Participant Type" :: Main); //DS01 Added on 260712
            IF ParticipantEntryLine.FINDFIRST THEN
            BEGIN
              ParticipantEntryLine.MODIFYALL(Position,CompetitionResTeamLine.Position);
              ParticipantEntryLine.MODIFYALL(Points,CompetitionResTeamLine.Points);
              ParticipantEntryLine."Details NUM" := CompetitionResTeamLine."Details NUM";
              ParticipantEntryLine."Details TXT" := CompetitionResTeamLine."Details TXT";

              ParticipantEntryLine.MODIFYALL("Update Results",TRUE);
            END;
          UNTIL CompetitionResTeamLine.NEXT = 0;

      ParticipantEntryHeader.RESET;
      ParticipantEntryHeader.SETCURRENTKEY("Competition Entry No.","Student Division");
      ParticipantEntryHeader.SETRANGE("Competition Entry No.",CompetitionResTeamLine."Competition Entry No.");
      ParticipantEntryHeader.SETRANGE("Student Division",CompetitionResTeamLine."Student Division");
      ParticipantEntryHeader.MODIFYALL("Update Results",TRUE);
      ParticipantEntryHeader.MODIFYALL("Update Entry",TRUE);
      CompetitionResultTeam."Update Results" := TRUE;
      IF CompetitionResultTeam.MODIFY THEN
        MESSAGE(Text008);

      COMMIT;
      //DS01 added on 260712
    END;

    BEGIN
    {
      No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
      01   15.12.09  VIGNESH  UpdateEntry()                Code added to updateEntry
      02   15.12.09  VIGNESH  GetStudentsIndividual()      Code added to get the Students for individual
      03   15.12.09  VIGNESH  GetStudentsTeam()            Code added to get the Students for team
      04   15.12.09  VIGNESH  UpdatePointsIndividual()     Code added to updated poing for event individual
      05   15.12.09  VIGNESH  UpdatePointsteam()           Code added to updated poing for event team

      SJ6.01 21/01/18 GB
        - Remove Substitute validation
    }
    END.
  }
}

OBJECT Codeunit 71046 Judes Fee Management
{
  OBJECT-PROPERTIES
  {
    Date=02-03-16;
    Time=18:30:44;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ProcessFee@1102155000(AppNo@1102155005 : Code[20];StudNo@1102155027 : Code[20]);
    VAR
      RollStr@1102155023 : Code[10];
      CustRec@1102155022 : Record 18;
      RollNo@1102155021 : Code[10];
      RegRec@1102155020 : Record 50000;
      SalesSetup@1102155019 : Record 311;
      NoSeriesMgmt@1102155018 : Codeunit 396;
      RunSeries@1102155017 : Code[10];
      "StateNo."@1102155016 : Dialog;
      StateStr@1102155015 : Text[30];
      FeesStructure@1102155014 : Record 50010;
      SalesHeadRec@1102155013 : Record 36;
      SalesLine@1102155012 : Record 37;
      Clas@1102155011 : Integer;
      Bool@1102155010 : Boolean;
      "Doc No"@1102155009 : Code[20];
      Cnt@1102155008 : Integer;
      CompRec@1102155007 : Record 2000000006;
      PostInv@1102155006 : Report 297;
      GenSetup@1102155004 : Record 98;
      GenJlRec@1102155003 : Record 81;
      GnlJnlPost@1102155002 : Codeunit 11;
      varint@1102155001 : Integer;
      "Print Admission"@1102155000 : Report 50069;
      AppRec@1102155024 : Record 71002;
      AdmSetupRec@1102155025 : Record 71000;
      FeeSetupRec@1102155026 : Record 71072;
      EduSetup@1102155028 : Record 71884;
      RecStudentSubject@1000000002 : Record 71011;
      InsertValue@1000000001 : Boolean;
      Flag@1000000000 : Boolean;
    BEGIN
      IF AppRec.GET(AppNo) THEN BEGIN
      RollNo:=StudNo;
      FeeSetupRec.GET;
      Bool:= EVALUATE(Clas,AppRec.Class);
        IF AppRec."Staff Child" THEN
        BEGIN
          FeeSetupRec.GET;
          FeesStructure.RESET;
          FeesStructure.SETRANGE(FeesStructure."Academic Year",AppRec."Academic Year");
          FeesStructure.SETFILTER(FeesStructure."From Class",'<=%1',Clas);
          FeesStructure.SETFILTER(FeesStructure."To Class",'>=%1',Clas);
          FeesStructure.SETFILTER(FeesStructure."Type Of Fees",'%1|%2|%3',FeesStructure."Type Of Fees"::Initial,
                    FeesStructure."Type Of Fees"::Term1,FeesStructure."Type Of Fees"::Term2);
          FeesStructure.SETRANGE(FeesStructure."Staff Child",TRUE);
          FeesStructure.SETRANGE(FeesStructure.Company,'St Jude''s Stores');
          "Doc No":= NoSeriesMgmt.GetNextNo(FeeSetupRec."Fee Number",0D,TRUE);
          IF FeesStructure.FIND('-') THEN
          BEGIN
            REPEAT
              GenJlRec.CHANGECOMPANY('St Jude''s Stores');
              GenJlRec.SETRANGE(GenJlRec."Journal Template Name",FeeSetupRec."Journal Template Name");
              GenJlRec.SETRANGE(GenJlRec."Journal Batch Name",FeeSetupRec."Journal Batch Name");
              IF GenJlRec.FIND('+') THEN;
              Cnt:=Cnt+1;
              GenJlRec.INIT;
              GenJlRec."Journal Template Name":=FeeSetupRec."Journal Template Name";
              GenJlRec."Journal Batch Name":= FeeSetupRec."Journal Batch Name";
              GenJlRec."Line No.":=GenJlRec."Line No."+10000;
              GenJlRec."Account Type":=GenJlRec."Account Type"::Customer;
              GenJlRec.VALIDATE(GenJlRec."Account No.",RollNo);
              GenJlRec.VALIDATE(GenJlRec."Bal. Account No.",FeesStructure."G/L Account");
              GenJlRec."Document Type":=GenJlRec."Document Type"::Invoice;
              GenJlRec.Description:=FeesStructure."Fee Description";
              GenJlRec."Type of Fees":=FeesStructure."Type Of Fees";
             // GenJlRec."Posting Date":=WORKDATE;
              IF EduSetup.FINDFIRST THEN
               IF EduSetup."Admission Posting Date" <> 0D THEN
                 GenJlRec."Posting Date":=EduSetup."Admission Posting Date"
               ELSE
                 GenJlRec."Posting Date":=WORKDATE;
              GenJlRec."Document No.":="Doc No"+'/'+FORMAT(Cnt);
              GenJlRec.VALIDATE(GenJlRec.Amount,FeesStructure.Amount);
              GenJlRec.Description:=FeesStructure."Fee Description";
              GenJlRec.INSERT(TRUE);
            UNTIL FeesStructure.NEXT =0;
         //   CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",GenJlRec);
          //  MESSAGE('Student No %1 Has been Alloted & Invoiced',"Roll No.");
          END
        ELSE
          ERROR('There is No Fees Structure defined for this class');
        END
        ELSE
        BEGIN

          GenSetup.GET;
          FeesStructure.RESET;
          FeesStructure.SETRANGE(FeesStructure."Academic Year",AppRec."Academic Year");
          FeesStructure.SETFILTER(FeesStructure."From Class",'<=%1',Clas);
          FeesStructure.SETFILTER(FeesStructure."To Class",'>=%1',Clas);
          FeesStructure.SETFILTER(FeesStructure."Type Of Fees",'%1|%2|%3',FeesStructure."Type Of Fees"::Initial,
                    FeesStructure."Type Of Fees"::Term1,FeesStructure."Type Of Fees"::Term2);
          IF NOT AppRec."Thai Student" THEN
            FeesStructure.SETRANGE(FeesStructure.Thai,FALSE);
          FeesStructure.SETRANGE(FeesStructure.Company,COMPANYNAME);
          "Doc No":= NoSeriesMgmt.GetNextNo(FeeSetupRec."Fee Number",0D,TRUE);
          IF FeesStructure.FIND('-') THEN
          BEGIN

            IF FeesStructure.Company=COMPANYNAME  THEN
            BEGIN
              EVALUATE(varint,AppRec.Class);
              IF (varint >= 11) THEN
              BEGIN
                IF AppRec.Group<>AppRec.Group::" " THEN
                BEGIN
                  CASE AppRec.Group OF


                    AppRec.Group::"Group A" : BEGIN
                                         FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',FeesStructure.Group::
      "Group B",
                                         FeesStructure.Group::"Group C",FeesStructure.Group::"Group D",FeesStructure.Group::"Group E");
                                          END;

                    AppRec.Group::"Group B" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                                        FeesStructure.Group::"Group A",
                                        FeesStructure.Group::"Group C",FeesStructure.Group::"Group D",FeesStructure.Group::"Group E");
                    AppRec.Group::"Group C" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                                        FeesStructure.Group::"Group B",
                                        FeesStructure.Group::"Group A",FeesStructure.Group::"Group D",FeesStructure.Group::"Group E");
                    AppRec.Group::"Group D" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                                        FeesStructure.Group::"Group A",
                                        FeesStructure.Group::"Group C",FeesStructure.Group::"Group B",FeesStructure.Group::"Group E");
                    AppRec.Group::"5" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                                        FeesStructure.Group::"Group A",
                                        FeesStructure.Group::"Group C",FeesStructure.Group::"Group B",FeesStructure.Group::"Group D");

                  END;

                END ELSE
                  ERROR ('Group is not allotted for the Student');
              END;
            END;

           GenJlRec.SETRANGE(GenJlRec."Journal Template Name",FeeSetupRec."Journal Template Name");
           GenJlRec.SETRANGE(GenJlRec."Journal Batch Name",FeeSetupRec."Journal Batch Name");
           IF GenJlRec.FIND('+') THEN;
           REPEAT
            InsertValue :=  TRUE; // vignesh
            Cnt:=Cnt+1;
            GenJlRec.INIT;
            GenJlRec."Journal Template Name":=FeeSetupRec."Journal Template Name";
            GenJlRec."Journal Batch Name":= FeeSetupRec."Journal Batch Name";
            GenJlRec."Line No.":=GenJlRec."Line No."+10000;
            GenJlRec."Account Type":=GenJlRec."Account Type"::Customer;
            GenJlRec.VALIDATE(GenJlRec."Account No.",RollNo);
            GenJlRec.VALIDATE(GenJlRec."Bal. Account No.",FeesStructure."G/L Account");
            GenJlRec.Description:=FeesStructure."Fee Description";
            GenJlRec."Type of Fees":=FeesStructure."Type Of Fees";
      //      GenJlRec."Posting Date":=WORKDATE;
              IF EduSetup.FINDFIRST THEN
               IF EduSetup."Admission Posting Date" <> 0D THEN
                 GenJlRec."Posting Date":=EduSetup."Admission Posting Date"
               ELSE
                 GenJlRec."Posting Date":=WORKDATE;

            GenJlRec."Document Type":= GenJlRec."Document Type"::Invoice;
            GenJlRec."Document No.":="Doc No"+'/'+FORMAT(Cnt);
            GenJlRec.VALIDATE(GenJlRec.Amount,FeesStructure.Amount);
            // Vignesh Start
            IF  FeesStructure."Group Subject" <>  ''  THEN  BEGIN
              Flag  :=  TRUE;
              RecStudentSubject.RESET;
              RecStudentSubject.SETRANGE(RecStudentSubject."Application No",AppRec."No.");
              IF  RecStudentSubject.FINDFIRST THEN  BEGIN
                REPEAT
                  IF  Flag  THEN BEGIN
                    IF  RecStudentSubject.Subject = FeesStructure."Group Subject" THEN BEGIN
                      InsertValue :=  TRUE;
                      Flag  :=  FALSE;
                    END ELSE
                      InsertValue :=  FALSE;
                  END;
                UNTIL RecStudentSubject.NEXT  = 0
              END ELSE BEGIN
                InsertValue :=  FALSE;
              END
            END;
            // Vignesh End
            IF  InsertValue THEN BEGIN
              GenJlRec.INSERT(TRUE);
            END;
          UNTIL FeesStructure.NEXT = 0;
        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",GenJlRec);
        END
        ELSE
          ERROR('There is No Fees Structure defined for this class');

        // Code to enter the values for the students into general journal for diff companies

        CompRec.RESET;
        CompRec.SETFILTER(CompRec.Name,'<>%1',COMPANYNAME);
       // IF NOT AppRec."Hostel Acommodation" THEN
       //   CompRec.SETFILTER(CompRec.Name,'<>%1|<>%2',COMPANYNAME,'St Jude''s Hostel');
        IF CompRec.FINDSET THEN
        REPEAT
        IF (NOT ((NOT AppRec."Hostel Acommodation")
          AND (CompRec.Name = 'St Jude''s Hostel') ) )THEN
        BEGIN
        //vignesh
        GenJlRec.CHANGECOMPANY(CompRec.Name);
        GenJlRec.SETRANGE(GenJlRec."Journal Template Name",FeeSetupRec."Journal Template Name");
        GenJlRec.SETRANGE(GenJlRec."Journal Batch Name",FeeSetupRec."Journal Batch Name");
        IF GenJlRec.FIND('+') THEN;
          FeesStructure.RESET;
          FeesStructure.SETRANGE(FeesStructure."Academic Year",AppRec."Academic Year");
          FeesStructure.SETFILTER(FeesStructure."From Class",'<=%1',Clas);
          FeesStructure.SETFILTER(FeesStructure."To Class",'>=%1',Clas);
          FeesStructure.SETFILTER(FeesStructure."Type Of Fees",'%1|%2|%3',FeesStructure."Type Of Fees"::Initial,
                    FeesStructure."Type Of Fees"::Term1,FeesStructure."Type Of Fees"::Term2);
          // Code Added by GUNA

          FeesStructure.SETFILTER(FeesStructure.Company,CompRec.Name);
          IF CompRec.Name = 'St Jude''s Computer Academy' THEN
          BEGIN
            EVALUATE(varint,AppRec.Class);
            IF (varint >= 11) THEN
            BEGIN
              IF AppRec.Group<>AppRec.Group::" " THEN
              BEGIN
                CASE AppRec.Group OF


                AppRec.Group::"Group A" : BEGIN
                                         FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',FeesStructure.Group::
      "Group B",
                                         FeesStructure.Group::"Group C",FeesStructure.Group::"Group D",FeesStructure.Group::"Group E");
                                          END;

                AppRec.Group::"Group B" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                FeesStructure.Group::"Group A",
                                        FeesStructure.Group::"Group C",FeesStructure.Group::"Group D",FeesStructure.Group::"Group E");
                AppRec.Group::"Group C" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                FeesStructure.Group::"Group B",
                                        FeesStructure.Group::"Group A",FeesStructure.Group::"Group D",FeesStructure.Group::"Group E");
                AppRec.Group::"Group D" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                FeesStructure.Group::"Group A",
                                        FeesStructure.Group::"Group C",FeesStructure.Group::"Group B",FeesStructure.Group::"Group E");
                AppRec.Group::"5" : FeesStructure.SETFILTER(FeesStructure.Group,'<>%1&<>%2&<>%3&<>%4',
                FeesStructure.Group::"Group A",
                                        FeesStructure.Group::"Group C",FeesStructure.Group::"Group B",FeesStructure.Group::"Group D");

               END;
             END;
           END;
          END;

          //FeesStructur.SETRANGE(FeesStructur."Type Of Fees",Tm+1);
          //FeesStructure.SETFILTER(FeesStructure.Company,CompRec.Name);
          IF FeesStructure.FINDSET THEN
          REPEAT
            Cnt:=Cnt+1;
            GenJlRec.INIT;
            GenJlRec."Journal Template Name":=FeeSetupRec."Journal Template Name";
            GenJlRec."Journal Batch Name":= FeeSetupRec."Journal Batch Name";
            GenJlRec."Line No.":=GenJlRec."Line No."+10000;
            GenJlRec."Account Type":=GenJlRec."Account Type"::Customer;
            GenJlRec.VALIDATE(GenJlRec."Account No.",RollNo);
            GenJlRec.VALIDATE(GenJlRec."Bal. Account No.",FeesStructure."G/L Account");
            GenJlRec."Type of Fees":=FeesStructure."Type Of Fees";
            GenJlRec.Description:=FeesStructure."Fee Description";
      //      GenJlRec."Posting Date":=WORKDATE;
              IF EduSetup.FINDFIRST THEN
               IF EduSetup."Admission Posting Date" <> 0D THEN
                 GenJlRec."Posting Date":=EduSetup."Admission Posting Date"
               ELSE
                 GenJlRec."Posting Date":=WORKDATE;

            GenJlRec."Document Type":= GenJlRec."Document Type"::Invoice;
            GenJlRec."Document No.":="Doc No"+'/'+FORMAT(Cnt);
            GenJlRec.VALIDATE(GenJlRec.Amount,FeesStructure.Amount);
            GenJlRec.INSERT(TRUE);
          UNTIL FeesStructure.NEXT = 0

        //vignesh
          END;
        //vignesh

        UNTIL CompRec.NEXT = 0;
        //CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",GenJlRec);
        END;

        MESSAGE('Student No %1 Has been Alloted & Invoiced',RollNo);
        MESSAGE('Please open Other companies to invoice the Student');
        // FSSH01
       END;
        // Latest
    END;

    PROCEDURE PostPayment@1102155001(VAR Rec@1102155000 : Record 81);
    VAR
      PostBatch@1102155001 : Codeunit 13;
      DocNo@1102155002 : Code[20];
      StudNo@1102155003 : Code[20];
      AllocRec@1102155004 : Record 50012;
    BEGIN
      DocNo:=Rec."Document No.";
      //StudNo:=Rec."Account No.";
      PostBatch.RUN(Rec);
      AllocRec.RESET;

      AllocRec.SETRANGE(AllocRec."Document No",DocNo);
      //AllocRec.SETRANGE(AllocRec."Student No.",StudNo);
      IF AllocRec.FINDSET THEN
        REPORT.RUN(50025,FALSE,FALSE,AllocRec);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 71170 Scheme Of Work
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FacultyClassPlanHeader@1102155000 : Record 71172;
      Text001@1102155001 : TextConst 'ENU=Already the Plan Has been Applied';
      Text002@1102155002 : TextConst 'ENU=Already the Plan Has been Appoved';
      Text003@1102155003 : TextConst 'ENU=Already the Plan Has been Rejected';
      Text004@1102155004 : TextConst 'ENU=Do you want to send this for approval ?';
      Text005@1102155005 : TextConst 'ENU=The Plan Has not been Applied';
      Text006@1102155006 : TextConst 'ENU=Already the Plan Has been Appoved';
      Text007@1102155007 : TextConst 'ENU=Do you want approve this plan ?';
      Text008@1102155008 : TextConst 'ENU=The Plan Has not been Applied';
      Text009@1102155009 : TextConst 'ENU=Already the Plan Has been Appoved';
      Text010@1102155010 : TextConst 'ENU=Already the Plan Has been Rejected';
      Text011@1102155011 : TextConst 'ENU=Do you want reject this plan ?';
      Text012@1102155012 : TextConst 'ENU=Please give the comments for the rejection';

    PROCEDURE ApplyFacultyPlan@1102155007(cdeDocument@1102155000 : Code[20]);
    BEGIN
      IF FacultyClassPlanHeader.GET(cdeDocument) THEN BEGIN
        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Applied THEN
          ERROR(Text001);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Approved THEN
          ERROR(Text002);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Rejected THEN
          ERROR(Text003);

        IF CONFIRM(Text004,TRUE) THEN BEGIN
          FacultyClassPlanHeader."Plan Status" := FacultyClassPlanHeader."Plan Status"::Applied;
          FacultyClassPlanHeader.MODIFY;
        END;
      END;
    END;

    PROCEDURE ApproveFacultyPlan@1102155006(cdeDocument@1102155000 : Code[20]);
    BEGIN
      IF FacultyClassPlanHeader.GET(cdeDocument) THEN BEGIN
        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::" " THEN
          ERROR(Text005);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Approved THEN
          ERROR(Text006);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Applied THEN
          IF CONFIRM(Text007,TRUE) THEN BEGIN
            FacultyClassPlanHeader."Plan Status" := FacultyClassPlanHeader."Plan Status"::Approved;
            FacultyClassPlanHeader.MODIFY;
          END;
      END;
    END;

    PROCEDURE RejectFacultyPlan@1102155005(cdeDocument@1102155000 : Code[20]);
    BEGIN
      IF FacultyClassPlanHeader.GET(cdeDocument) THEN BEGIN
        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::" " THEN
          ERROR(Text008);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Approved THEN
          ERROR(Text009);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Rejected THEN
          ERROR(Text010);

        IF FacultyClassPlanHeader."Plan Status" = FacultyClassPlanHeader."Plan Status"::Applied THEN
          IF CONFIRM(Text011,TRUE) THEN BEGIN
            IF FacultyClassPlanHeader.Comments = '' THEN
              ERROR(Text011);
            FacultyClassPlanHeader."Plan Status" := FacultyClassPlanHeader."Plan Status"::Rejected;
            FacultyClassPlanHeader.MODIFY;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 71630 Library Transactions
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BookTransRec@1102155000 : Record 71632;
      AccessionRec@1102155001 : Record 71631;
      LibrarySetup@1102155002 : Record 71633;
      IntDays@1102155005 : Integer;
      VarFine@1102155004 : Decimal;
      VarStaff@1102155003 : Decimal;
      ItemRec@1102155006 : Record 27;
      BookRec@1102155007 : Record 71630;
      BookTr@1102155008 : Record 71632;
      IntMaxBook@1102155009 : Integer;
      IntCount@1102155010 : Integer;
      PurchLineRec@1102155012 : Record 39;
      i@1000000000 : Integer;
      AdvBook@1102155011 : Record 71635;
      EducationSetup@1102155013 : Record 71884;
      LibrarySetupClassWise@1102155014 : Record 71636;
      LibrarySetupCourseWise@1102155015 : Record 71637;
      Student@1102155016 : Record 71046;
      StudentCOLLEGE@1102155017 : Record 71355;
      Text000@1102155018 : TextConst 'ENU=Select Company';
      Text001@1102155019 : TextConst 'ENU=Please Enter Maximum No. of Books for the Staff';
      Text002@1102155020 : TextConst 'ENU=Please Enter Maximum No. of Books for the Students';
      Text003@1102155021 : TextConst 'ENU=Please enter Total No of Books Eligible for Class %1';
      Text004@1102155022 : TextConst 'ENU=Please enter Total No of Books Eligible for Course %1';
      Text005@1102155023 : TextConst 'ENU=Books Issued Successfully';
      Text006@1102155024 : TextConst 'ENU=Max Limit for Issuing is over';
      Text007@1102155025 : TextConst 'ENU=Books Returned Successfully';
      Text008@1102155026 : TextConst 'ENU=you cannot return the book unless you pay the fine';
      Text009@1102155027 : TextConst 'ENU=Item Created Successfully';
      Text010@1102155028 : TextConst 'ENU=Advance Booking completed';
      Text011@1102155029 : TextConst 'ENU=Enter the Fine Amount For Students';
      Text012@1102155030 : TextConst 'ENU=Enter the Fine Amount For Staff';
      Text013@1102155031 : TextConst 'ENU=Fine already paid';
      Text014@1102155032 : TextConst 'ENU=Fees Generated';
      Text015@1102155033 : TextConst 'ENU=Maximum No of Renewal Has To Be Assigned';
      Text016@1102155034 : TextConst 'ENU=Maximum Renewal Has Been Exceeded';
      Text017@1102155035 : TextConst 'ENU=Book Renewed Successfully';
      AccessNo@1102155036 : Code[20];

    PROCEDURE "Book Issue"@1102155000("EntryNo."@1102155000 : Integer);
    BEGIN
      // Start 01.VIGNESH
      CLEAR(IntCount);

      EducationSetup.GET;
      IF EducationSetup.Company = EducationSetup.Company::" " THEN
        ERROR(Text000);

      LibrarySetup.GET;
      IF LibrarySetup."No. of Books - Staffs" = 0 THEN
        ERROR(Text001);

      IF BookTransRec.GET("EntryNo.") THEN BEGIN
        BookTransRec.TESTFIELD("No.");
        BookTransRec.TESTFIELD("Accession No.");
        BookTransRec.TESTFIELD("Date of Issue");
        BookTransRec.TESTFIELD("Date of Return");
        BookTr.RESET;
        BookTr.SETCURRENTKEY("No.","Transaction Status");
        BookTr.SETRANGE("No.",BookTransRec."No.");
        BookTr.SETRANGE("Transaction Status",BookTr."Transaction Status"::Issued);
        IntCount := BookTr.COUNT;
        IF BookTransRec.Type = BookTransRec.Type::Student THEN BEGIN
          IF EducationSetup.Company = EducationSetup.Company::School THEN BEGIN
            IF Student.GET(BookTransRec."No.") THEN BEGIN
              IF LibrarySetupClassWise.GET(Student.Class) THEN BEGIN
                IF LibrarySetupClassWise."No. of Books - Students" <> 0 THEN
                  IntMaxBook := LibrarySetupClassWise."No. of Books - Students"
                ELSE
                  ERROR(Text002);
              END ELSE
                ERROR(Text003,Student.Class);
            END;
          END ELSE
            IF EducationSetup.Company = EducationSetup.Company::College THEN BEGIN
              IF StudentCOLLEGE.GET(BookTransRec."No.") THEN BEGIN
                IF LibrarySetupCourseWise.GET(StudentCOLLEGE."Course Code") THEN BEGIN
                  IF LibrarySetupCourseWise."No. of Books - Students" <> 0 THEN
                    IntMaxBook := LibrarySetupCourseWise."No. of Books - Students"
                  ELSE
                    ERROR(Text002);
                END ELSE
                  ERROR(Text004,StudentCOLLEGE."Course Code");
              END;
            END;
        END ELSE
          IF BookTransRec.Type = BookTransRec.Type::Staff THEN
            IntMaxBook := LibrarySetup."No. of Books - Staffs";

      // Start 09.GUNA
        IF AccessionRec.GET(BookTransRec."Book No.",BookTransRec."Accession No.") THEN BEGIN
          AccessionRec.Booked := TRUE;
          AccessionRec.MODIFY;
        END;
      // Stop 09.GUNA
        IF IntCount < IntMaxBook THEN BEGIN
          BookTransRec."Transaction Status" := BookTransRec."Transaction Status"::Issued;
          BookTransRec."Entry Type" := BookTransRec."Entry Type"::Issue;
          BookTransRec.MODIFY;
          MESSAGE(Text005);
        END ELSE
          ERROR(Text006);
      END;
      // Stop 01.VIGNESH
    END;

    PROCEDURE "Book Return"@1102155001("EntryNo."@1102155000 : Integer);
    BEGIN
      // Start 07.VIGNESH
      BookTransRec.GET("EntryNo.");
      BookTransRec.TESTFIELD("Actual Date of Return");
      IF ((BookTransRec."Fine Amount" = 0) OR ((BookTransRec."Fine Amount" <> 0 ) AND BookTransRec.Invoiced)) THEN BEGIN
        AccessionRec.GET(BookTransRec."Book No.",BookTransRec."Accession No.");
        AccessionRec.Booked := FALSE;
        AccessionRec.MODIFY;
        BookTransRec."Transaction Status" := BookTransRec."Transaction Status"::Returned;
        BookTransRec.MODIFY;
        MESSAGE(Text007);
      END ELSE
        MESSAGE(Text008);
      // Stop 07.VIGNESH
    END;

    PROCEDURE "Book Creation"@1102155002(BookNo@1102155000 : Code[20]);
    BEGIN
      // Start 03.AJAX
      IF BookRec.GET(BookNo) THEN BEGIN
        LibrarySetup.RESET;
        LibrarySetup.GET;
        ItemRec."No." := BookRec."No.";
        ItemRec.Description := BookRec."Book Name";
        ItemRec."Base Unit of Measure" := LibrarySetup."Base Unit of Measure";
        ItemRec."Unit Price" := BookRec."Unit Cost";
        ItemRec.VALIDATE("Item Category Code",LibrarySetup."Item Category Code");
        ItemRec.INSERT;
        MESSAGE(Text009);
      END;
      // Stop 03.AJAX
    END;

    PROCEDURE "AccNo Creation"@1102155003(BookNo@1102155000 : Code[20];StartAccNo@1102159000 : Code[20];Qty@1102159001 : Integer;PurchDate@1000000000 : Date);
    BEGIN
      // Start 04.AJAX

      LibrarySetup.GET;

      ItemRec.RESET;
      //ItemRec.SETCURRENTKEY("No.","Item Category Code");
      ItemRec.SETRANGE("No.",BookNo);
      ItemRec.SETRANGE("Item Category Code",LibrarySetup."Item Category Code");
      IF ItemRec.FINDFIRST THEN BEGIN

        AccessionRec.INIT;
        //AccessionRec.SETCURRENTKEY("Book No.");
        //AccessionRec.SETRANGE("Book No.",BookNo);
        IF AccessionRec.FINDFIRST THEN
          FOR i := 1 TO Qty DO BEGIN
            IF i = 1 THEN
            BEGIN
              AccessionRec."Accession No." :=  StartAccNo;
               StartAccNo := AccessionRec."Accession No.";
            END ELSE
            BEGIN
              AccessionRec."Accession No." := INCSTR(StartAccNo);
              StartAccNo := AccessionRec."Accession No.";
            END;
            AccessionRec."Date of Purchase" := PurchDate;
            AccessionRec.VALIDATE("Book No.",BookNo);
            AccessionRec.INSERT;
          END;
      END;
      // Stop 04.AJAX
    END;

    PROCEDURE "Advance Book"@1102155004(BookingNo@1102155000 : Code[20]);
    BEGIN
      // Start 05.AJAX
      IF AdvBook.GET(BookingNo) THEN BEGIN
        AccessionRec.RESET;
        AccessionRec.SETRANGE("Book No.",AdvBook."Book No.");
        AccessionRec.SETRANGE("Advance Booked",FALSE);
        IF AccessionRec.FINDSET THEN BEGIN
          AccessionRec.Type := AdvBook.Type;
          AccessionRec."Booked By" := AdvBook."No.";
          AccessionRec."Advance Booked" := TRUE;
          AccessionRec.MODIFY;
          AdvBook.Booked := TRUE;
          AdvBook."Accession No." := AccessionRec."Accession No.";
          AdvBook.MODIFY;
          IF GUIALLOWED THEN
            MESSAGE(Text010);
        END;
      END;
      // Stop 05.AJAX
    END;

    PROCEDURE "Calculate Fine"@1102155005("getEntryNo."@1102155000 : Integer;getDate@1102155004 : Date) : Decimal;
    VAR
      BookTransaction@1102155001 : Record 71632;
      CountDays@1102155003 : Integer;
    BEGIN
      // Start 06.VIGNESH
      BookTransaction.GET("getEntryNo.");
      LibrarySetup.GET;

      IF getDate > BookTransaction."Date of Return" THEN
        CountDays := getDate - BookTransaction."Date of Return";
      // Calculating Fine amount for Students
      LibrarySetup.GET;
      IF BookTransaction.Type = BookTransaction.Type::Student THEN BEGIN
        IF LibrarySetup."Fine - Students" = 0 THEN
          ERROR(Text011);
        IF CountDays <> 0 THEN
          EXIT(LibrarySetup."Fine - Students" * CountDays)
        ELSE
          EXIT(0);
      END ELSE
        IF BookTransaction.Type = BookTransaction.Type::Staff THEN BEGIN
          IF LibrarySetup."Fine - Staffs" = 0 THEN
            ERROR(Text012);
          IF CountDays <> 0 THEN
            EXIT(LibrarySetup."Fine - Staffs" * CountDays)
          ELSE
            EXIT(0);
        END;
      // Stop 06.VIGNESH
    END;

    PROCEDURE "Pay Fine"@1102155006("getEntryNo."@1102155000 : Integer);
    VAR
      FeeManagement@1102155002 : Codeunit 71044;
      FeeManagementCOLLEGE@1102155003 : Codeunit 71357;
      BookTransaction@1102155005 : Record 71632;
      "LocalInvoiceNo."@1102155006 : Code[20];
      FeeSetup@1102155007 : Record 71072;
      GenJournalLine@1102155008 : Record 81;
      FeeSetupCollege@1102155009 : Record 71387;
    BEGIN
      // Start 07.VIGNESH
      BookTransaction.GET("getEntryNo.");
      IF (BookTransaction."Fine Amount" <> 0) AND (NOT BookTransaction.Invoiced) THEN BEGIN
        IF BookTransaction."Invoice No." <> '' THEN
          ERROR(Text013);
        LibrarySetup.GET;
        LibrarySetup.TESTFIELD("Fine Code");
      // Post Through Sales Order
        {
        EducationSetup.GET;
        IF EducationSetup.Company = EducationSetup.Company::School THEN BEGIN
          BookTransaction."Invoice No." :=
            FeeManagement."Post Sales"(BookTransaction."No.",LibrarySetup."Fine Code",BookTransaction."Fine Amount");
        END ELSE
          IF EducationSetup.Company = EducationSetup.Company::College THEN
            BookTransaction."Invoice No." := FeeManagementCOLLEGE."Post Sales"(BookTransaction."No.",LibrarySetup."Fine Code",
            BookTransaction."Fine Amount");
        IF BookTransaction."Invoice No." <> '' THEN
          BookTransaction.Invoiced := TRUE;
        BookTransaction.MODIFY;
        }
      // Post Through Journal Line
        EducationSetup.GET;
        IF EducationSetup.Company = EducationSetup.Company::School THEN BEGIN
          FeeManagement.FeeProcess(BookTransaction."No.",LibrarySetup."Fine Code",BookTransaction."Fine Amount");
          FeeSetup.GET;
          FeeSetup.TESTFIELD("Journal Template Name");
          FeeSetup.TESTFIELD("Journal Batch Name");
        END ELSE
          IF EducationSetup.Company = EducationSetup.Company::College THEN BEGIN
            FeeManagementCOLLEGE.FeeProcess(BookTransaction."No.",LibrarySetup."Fine Code",BookTransaction."Fine Amount");
            //Start 10.Ankesh
            FeeSetupCollege.GET;
            FeeSetupCollege.TESTFIELD("Journal Template Name");
            FeeSetupCollege.TESTFIELD("Journal Batch Name");
            // Stop 10.Ankesh
          END;
        GenJournalLine.RESET;
        GenJournalLine.SETRANGE("Journal Template Name",FeeSetup."Journal Template Name");
        GenJournalLine.SETRANGE("Journal Batch Name",FeeSetup."Journal Batch Name");
        IF GenJournalLine.FINDSET THEN BEGIN
          "LocalInvoiceNo." := GenJournalLine."Document No.";
          CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);
        END;
        IF "LocalInvoiceNo." <> '' THEN
          BookTransaction."Invoice No." := "LocalInvoiceNo.";
        BookTransaction.Invoiced := TRUE;
        BookTransaction.MODIFY;
        MESSAGE(Text014);
      END;
      // Stop 07.VIGNESH
    END;

    PROCEDURE "Book Renewal"@1102155007("EntryNo."@1102155000 : Integer);
    VAR
      BookTransaction@1102155001 : Record 71632;
      BookTransaction1@1102155002 : Record 71632;
      IntEligible@1102155005 : Integer;
      IntRenewal@1102155006 : Integer;
    BEGIN
      // Start 11.ABK
      BookTransaction.GET("EntryNo.");
      BEGIN
        IntEligible := 0;
        IntRenewal := 0;
        IF BookTransaction.Type = BookTransaction.Type::Student THEN
          IF StudentCOLLEGE.GET(BookTransaction."No.") THEN
            IF LibrarySetupCourseWise.GET(StudentCOLLEGE."Course Code") THEN
              IntEligible := LibrarySetupCourseWise."No. of Renewal - Students";
        IF IntEligible = 0 THEN
          ERROR(Text015);

        BookTransaction1.RESET;
        BookTransaction1.SETRANGE("No.",BookTransaction."No.");
        BookTransaction1.SETRANGE("Accession No.",BookTransaction."Accession No.");
        BookTransaction1.SETRANGE("Entry Type",BookTransaction1."Entry Type"::Renewal);
        IntRenewal := BookTransaction1.COUNT;
        IF IntRenewal >= IntEligible THEN
          ERROR(Text016);
      END;
      // Stop 11.ABK
      // Start 08. VANDHANA
      BookTransaction.GET("EntryNo.");
      BEGIN
        BookTransaction."Transaction Status" := BookTransaction."Transaction Status"::Returned;
        BookTransaction."Actual Date of Return" := WORKDATE;
        BookTransaction.MODIFY;
        BookTransaction1.INIT;
        BookTransaction1.Type := BookTransaction.Type;
        BookTransaction1."Entry Type" := BookTransaction1."Entry Type"::Renewal;
        BookTransaction1.VALIDATE("No.",BookTransaction."No.");
        BookTransaction1.Name := BookTransaction.Name;
        BookTransaction1."Accession No." := BookTransaction."Accession No.";
        BookTransaction1."Book No." := BookTransaction."Book No.";
        BookTransaction1."Book Name" := BookTransaction."Book Name";
        BookTransaction1."Date of Issue" := WORKDATE;
        BookTransaction1."User ID" := BookTransaction."User ID";
        BookTransaction1."Transaction Status" := BookTransaction1."Transaction Status"::Issued;
        BookTransaction1."Renewal Entry No." := BookTransaction."Entry No.";
        BookTransaction1.INSERT(TRUE);
        MESSAGE(Text017);
      END;
      // Stop 08. VANDHANA
    END;

    PROCEDURE "Book Availablity"@1102155008(BookNo@1102155000 : Code[20]) Ret : ARRAY [2] OF Boolean;
    VAR
      Book@1102155001 : Record 71630;
      BookAccession@1102155002 : Record 71631;
    BEGIN
    END;

    BEGIN
    {

      No   Date      Sign      Trigger          Description
      -----------------------------------------------------------------------------------------------
      01  18.09.2009  AJAX     Book Issue        Code to change the Status of Book as Issued
      02  19.09.2009  AJAX     Book Return       Code to change the Status of Book as Returned and check for fine if its returned
                                               after the due date.
      03  23.09.2009  AJAX     Book Creation     Code to create Book as Item
      04  25.09.2009  AJAX     AccNo Creation    Code to create AccNo for the Books Purchased
      05  26.09.2009  AJAX     Advance Book      Code to do Advance Booking for the Book
      07  13.10.09    VIGNESH  Calculate Fine()  Code added to calculate the Fine amount
      08  13.10.09    VIGNESH  Pay Fine()        Code added to pay the Fine
      08  16.10.2009  VANDHANA Book Renewal      Code to renewal the Book.
      09  22.02.10    GUNA     Book Issue        Code written to change the booked status in Book Accession.
      10  22.02.10    Ankesh   Pay Fine()        Code written to get the fee setup detail for college.
      11  12.03.10    ABK   Book Renewal()       Code added to check the maximum renewals.
    }
    END.
  }
}

OBJECT Codeunit 71680 Hostel
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RoomAllocation@1102155000 : Record 71682;
      HostelRooms@1102155001 : Record 71681;
      Student@1102155002 : Record 71046;
      StudentCOLLEGE@1102155003 : Record 71355;
      HostelRoomsLine@1102155004 : Record 71689;
      FeeManagement@1102155005 : Codeunit 71044;
      FeeManagementCOLLEGE@1102155006 : Codeunit 71357;
      HostelSetup@1102155007 : Record 71683;
      RoomType@1102155008 : Record 71688;
      FeeSetup@1102155009 : Record 71072;
      FeeSetupCOLLEGE@1102155010 : Record 71387;
      GenJournalLine@1102155011 : Record 81;
      RoomChange@1102155012 : Record 71690;
      MessChange@1102155013 : Record 71694;
      Text000@1102155014 : TextConst 'ENU=Student not Found';
      Text001@1102155015 : TextConst 'ENU=Room allocate for %1';
      Text002@1102155016 : TextConst 'ENU=%1 Vacated the Room Succesfully';
      Text003@1102155017 : TextConst 'ENU=You cannot regenrate already posted';
      Text004@1102155018 : TextConst 'ENU=" Fess is generated already"';
      Text005@1102155019 : TextConst 'ENU=Mess Fee is Not generated for Hostel %1';
      Text006@1102155020 : TextConst 'ENU=Fees Generated';
      Text007@1102155021 : TextConst 'ENU=Please enter the Total Expence for the Mess Location %1';
      Text008@1102155022 : TextConst 'ENU=Please Specify Total Expence';
      Text009@1102155023 : TextConst 'ENU=Please generate Hostel Fee for Hostel Code %1';
      Text010@1102155024 : TextConst 'ENU=Only for consumption total Amount can be calculated';
      Text011@1102155025 : TextConst 'ENU=Date Range Should be Filled';
      Text012@1102155026 : TextConst 'ENU=Consumption is not Entered yet';
      Text013@1102155027 : TextConst 'ENU=Consumption Amount updated';
      Text014@1102155028 : TextConst 'ENU=Electricity Consumption is not Entered yet';
      Text015@1102155029 : TextConst 'ENU=Electricity Consumption Amount updated';
      Text016@1102155030 : TextConst 'ENU=Already Room had been alloted for this Student %1';
      Text017@1102155033 : TextConst 'ENU=Already Room had been Vacated for this Student %1';
      Text018@1102155034 : TextConst 'ENU=You can not modified the same';
      Text019@1102155035 : TextConst 'ENU=%1 Room cahnged Succesfully';
      Text020@1102155036 : TextConst 'ENU=" Mess Change Update Completed"';
      Text021@1102155031 : TextConst 'ENU=Do you want to Delete & Update the Students';
      Text022@1102155032 : TextConst 'ENU=Do you want to Allot Room';
      Text023@1102155037 : TextConst 'ENU=Do you want to Change Mess';
      Text024@1102155038 : TextConst 'ENU=Do you want to Change Room';

    PROCEDURE "Room Allocation"@1102155000("HostelNo."@1102155000 : Code[20]);
    BEGIN
       // Start 01.KATHIR
      RoomAllocation.GET("HostelNo.");
      RoomAllocation.TESTFIELD("Student No.");
      RoomAllocation.TESTFIELD("Hostel No.");
      RoomAllocation.TESTFIELD("Room No");
      RoomAllocation.TESTFIELD(BedNo);
      RoomAllocation.RoomAlloted := TRUE;
      RoomAllocation.MODIFY;
      IF HostelRooms.GET(RoomAllocation."Hostel No.",RoomAllocation."Room No",RoomAllocation.BedNo) THEN BEGIN
        HostelRooms.Alloted := TRUE;
        HostelRooms.MODIFY;
      END;

      IF RoomAllocation.Company = RoomAllocation.Company::School THEN
        IF Student.GET(RoomAllocation."Student No.") THEN BEGIN
          Student."Room No." := RoomAllocation."Room No";
          Student."Hostel Code" := RoomAllocation."Hostel No.";
          Student."Hostel Alloted" := TRUE;
          Student.MODIFY;
        END ELSE
          ERROR(Text000);

      IF RoomAllocation.Company = RoomAllocation.Company::College THEN
        IF StudentCOLLEGE.GET(RoomAllocation."Student No.") THEN BEGIN
          StudentCOLLEGE."Room No." := RoomAllocation."Room No";
          StudentCOLLEGE."Hostel Code" := RoomAllocation."Hostel No.";
          StudentCOLLEGE."Hostel Alloted" := TRUE;
          StudentCOLLEGE.MODIFY;
        END ELSE
          ERROR(Text000);
      MESSAGE(Text001,RoomAllocation."Student Name");
       // Stop 01.KATHIR
    END;

    PROCEDURE "Vacate Room"@1102155002("HostelNo."@1102155000 : Code[20]);
    BEGIN
        // Start 02.KATHIR
      RoomAllocation.GET("HostelNo.");
      RoomAllocation.TESTFIELD("Student No.");
      RoomAllocation.TESTFIELD("Hostel No.");
      RoomAllocation.TESTFIELD("Room No");
      RoomAllocation.TESTFIELD(BedNo);
      IF RoomAllocation."Vacate Date" = 0D THEN
        RoomAllocation."Vacate Date" := TODAY;
      RoomAllocation.Vacated := TRUE;
      RoomAllocation.MODIFY;

      IF HostelRooms.GET(RoomAllocation."Hostel No.",RoomAllocation."Room No",RoomAllocation.BedNo) THEN BEGIN
        HostelRooms.Alloted := FALSE;
        HostelRooms.MODIFY;
      END;

      IF RoomAllocation.Company = RoomAllocation.Company::School THEN
        IF Student.GET(RoomAllocation."Student No.") THEN BEGIN
          Student."Room No." := '';
          Student."Hostel Code" := '';
          Student."Hostel Alloted" := FALSE;
          Student."Hostel Vacated" := TRUE;
          Student.MODIFY;
        END ELSE
          ERROR(Text000);

      IF RoomAllocation.Company = RoomAllocation.Company::College THEN
        IF StudentCOLLEGE.GET(RoomAllocation."Student No.") THEN BEGIN
          StudentCOLLEGE."Room No." := '';
          StudentCOLLEGE."Hostel Code" := '';
          StudentCOLLEGE."Hostel Alloted" := FALSE;
          StudentCOLLEGE."Hostel Vacated" := TRUE;
          StudentCOLLEGE.MODIFY;
        END ELSE
          ERROR(Text000);

      MESSAGE(Text002,RoomAllocation."Student Name");
      // Stop 02.KATHIR
    END;

    PROCEDURE GetStudents@1102155001("getBillNo."@1102155000 : Code[20]);
    VAR
      EducationSetup@1102155001 : Record 71884;
      HostelFee@1102155002 : Record 71684;
      HostelFeeLine@1102155005 : Record 71685;
      LocalLineNo@1102155006 : Integer;
    BEGIN
      // Start 03.VIGNESH

      EducationSetup.GET;
      HostelFee.GET("getBillNo.");

      IF HostelFee.Closed THEN
        ERROR(Text003);

      HostelFeeLine.RESET;
      HostelFeeLine.SETRANGE("Bill No.","getBillNo.");
      IF HostelFeeLine.FINDFIRST THEN
        IF CONFIRM(Text021,FALSE) THEN
          HostelFeeLine.DELETEALL
        ELSE
          EXIT;

      IF EducationSetup.Company = EducationSetup.Company::School THEN BEGIN
        LocalLineNo := 0;
        Student.RESET;
        Student.SETRANGE("Hostel Code",HostelFee."Hostel Code");
        Student.SETRANGE("Hostel Alloted",TRUE);
        IF Student.FINDSET THEN
          REPEAT
            LocalLineNo += 10000;
            HostelFeeLine.INIT;
            HostelFeeLine."Bill No." := HostelFee."Bill No.";
            HostelFeeLine."Line No." := LocalLineNo;
            HostelFeeLine."Hostel Code" := HostelFee."Hostel Code";
            HostelFeeLine."Student No." := Student."No.";
            HostelFeeLine."Total Days" := HostelFee."Billable Days";
            HostelFeeLine.INSERT;
          UNTIL Student.NEXT = 0;
      END;

      IF EducationSetup.Company = EducationSetup.Company::College THEN BEGIN
        StudentCOLLEGE.RESET;
        StudentCOLLEGE.SETRANGE("Hostel Code",HostelFee."Hostel Code");
        StudentCOLLEGE.SETRANGE("Hostel Alloted",TRUE);
        IF StudentCOLLEGE.FINDSET THEN
          REPEAT
            LocalLineNo += 10000;
            HostelFeeLine.INIT;
            HostelFeeLine."Bill No." := HostelFee."Bill No.";
            HostelFeeLine."Line No." := LocalLineNo;
            HostelFeeLine."Hostel Code" := HostelFee."Hostel Code";
            HostelFeeLine."Student No." := StudentCOLLEGE."No.";
            HostelFeeLine."Total Days" := HostelFee."Billable Days";
            HostelFeeLine."Days Present" := HostelFee."Billable Days";
            HostelFeeLine.INSERT;
          UNTIL StudentCOLLEGE.NEXT = 0;
      END;
      HostelFee.Update := TRUE;
      HostelFee.MODIFY;
      // Stop 03.VIGNESH
    END;

    PROCEDURE "Post Journal"@1102155003("getBillNo."@1102155000 : Code[20]);
    VAR
      HostelFeeLine@1102155001 : Record 71685;
      Hostel@1102155002 : Record 71680;
      EducationSetup@1102155006 : Record 71884;
      FeeManagenmentCOLLEGE@1102155010 : Codeunit 71357;
      HostelFee@1102155004 : Record 71684;
      MessTotalExpense@1102155005 : Record 71686;
    BEGIN
      // Start 04.VIGNESH
      HostelFee.GET("getBillNo.");
      Hostel.GET(HostelFee."Hostel Code");

      IF HostelFee.Closed THEN
        ERROR(Text004);

      HostelFeeLine.RESET;
      HostelFeeLine.SETRANGE("Bill No.","getBillNo.");
      HostelFeeLine.SETFILTER("Days Present",'<>%1',0);
      HostelFeeLine.SETRANGE("Fee Amount",0);
      IF HostelFeeLine.FINDFIRST THEN
        ERROR(Text005,Hostel.Code);

      HostelSetup.GET;
      HostelSetup.TESTFIELD("Hostel Fee Code");
      EducationSetup.GET;

      IF EducationSetup.Company = EducationSetup.Company::School THEN BEGIN
        FeeSetup.GET;
        FeeSetup.TESTFIELD("Journal Template Name");
        FeeSetup.TESTFIELD("Journal Batch Name");
      END;

      IF EducationSetup.Company = EducationSetup.Company::College THEN BEGIN
        FeeSetupCOLLEGE.GET;
        FeeSetupCOLLEGE.TESTFIELD("Journal Template Name");
        FeeSetupCOLLEGE.TESTFIELD("Journal Batch Name");
      END;

      HostelFeeLine.RESET;
      HostelFeeLine.SETRANGE("Bill No.","getBillNo.");
      IF HostelFeeLine.FINDSET THEN
        REPEAT
          IF (EducationSetup.Company = EducationSetup.Company::School) AND
             (HostelFeeLine."Fee Amount" <> 0)
          THEN
            FeeManagement.FeeProcess(HostelFeeLine."Student No.",HostelSetup."Hostel Fee Code",HostelFeeLine."Fee Amount");
          IF (EducationSetup.Company = EducationSetup.Company::College) AND
             (HostelFeeLine."Fee Amount" <> 0)
          THEN
            FeeManagenmentCOLLEGE.FeeProcess(HostelFeeLine."Student No.",HostelSetup."Hostel Fee Code",
              HostelFeeLine."Fee Amount");
        UNTIL HostelFeeLine.NEXT = 0;

      IF EducationSetup.Company = EducationSetup.Company::School THEN BEGIN
        GenJournalLine.RESET;
        GenJournalLine.SETRANGE("Journal Template Name",FeeSetup."Journal Template Name");
        GenJournalLine.SETRANGE("Journal Batch Name",FeeSetup."Journal Batch Name");
      END;

      IF EducationSetup.Company = EducationSetup.Company::College THEN BEGIN
        GenJournalLine.RESET;
        GenJournalLine.SETRANGE("Journal Template Name",FeeSetupCOLLEGE."Journal Template Name");
        GenJournalLine.SETRANGE("Journal Batch Name",FeeSetupCOLLEGE."Journal Batch Name");
      END;

      IF GenJournalLine.FINDSET THEN BEGIN
        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);
        MessTotalExpense.RESET;
        MessTotalExpense.SETRANGE("Mess Location",Hostel.Mess);
        MessTotalExpense.SETRANGE("From Date",HostelFee."Start Date");
        MessTotalExpense.SETRANGE("To Date",HostelFee."End Date");
        MessTotalExpense.SETRANGE(Closed,FALSE);
        MessTotalExpense.MODIFYALL(Closed,TRUE);
        HostelFee.Closed := TRUE;
        HostelFee.MODIFY;
        MESSAGE(Text006);
      END;
      // Stop 04.VIGNESH
    END;

    PROCEDURE "Calculate Mess Amount"@1102155004(getLocation@1102155000 : Code[20]);
    VAR
      Hostel@1102155001 : Record 71680;
      HostelFee@1102155002 : Record 71684;
      HostelFeeLine@1102155004 : Record 71685;
      MessTotalExpense@1102155005 : Record 71686;
      TotalExpense@1102155006 : Decimal;
      PerStudentAmount@1102155007 : Decimal;
      StartDate@1102155010 : Date;
      EndDate@1102155011 : Date;
      TotalPresent@1102155012 : Integer;
    BEGIN
      // Start 05.VIGNESH
      TotalExpense := 0;
      MessTotalExpense.RESET;
      MessTotalExpense.SETRANGE("Mess Location",getLocation);
      MessTotalExpense.SETRANGE(Closed,FALSE);
      IF MessTotalExpense.ISEMPTY THEN
        ERROR(Text007,getLocation)
      ELSE
        IF MessTotalExpense.FINDSET THEN
          REPEAT
            TotalExpense += MessTotalExpense."Total Amount";
            StartDate := MessTotalExpense."From Date";
            EndDate := MessTotalExpense."To Date";
          UNTIL MessTotalExpense.NEXT = 0;

      IF TotalExpense = 0 THEN
        ERROR(Text008);

      PerStudentAmount := 0;
      TotalPresent := 0;
      Hostel.RESET;
      Hostel.SETRANGE(Mess,getLocation);
      IF Hostel.FINDSET THEN
        REPEAT
          HostelFee.RESET;
          HostelFee.SETRANGE("Hostel Code",Hostel.Code);
          HostelFee.SETRANGE("Start Date",StartDate);
          HostelFee.SETRANGE("End Date",EndDate);
          HostelFee.SETRANGE(Update,TRUE);
          HostelFee.SETRANGE(Closed,FALSE);
          IF HostelFee.ISEMPTY THEN
            ERROR(Text009,Hostel.Code)
          ELSE
            IF HostelFee.FINDFIRST THEN BEGIN
              HostelFeeLine.RESET;
              HostelFeeLine.SETRANGE("Bill No.",HostelFee."Bill No.");
              IF HostelFeeLine.FINDSET THEN
                REPEAT
                  TotalPresent += HostelFeeLine."Days Present";
                UNTIL HostelFeeLine.NEXT = 0;
            END;
        UNTIL Hostel.NEXT = 0;

      IF TotalPresent <> 0 THEN
        PerStudentAmount := TotalExpense / TotalPresent ;

      Hostel.RESET;
      Hostel.SETRANGE(Mess,getLocation);
      IF Hostel.FINDSET THEN
        REPEAT
          HostelFee.RESET;
          HostelFee.SETRANGE("Hostel Code",Hostel.Code);
          HostelFee.SETRANGE("Start Date",StartDate);
          HostelFee.SETRANGE("End Date",EndDate);
          HostelFee.SETRANGE(Update,TRUE);
          HostelFee.SETRANGE(Closed,FALSE);
          IF HostelFee.FINDFIRST THEN BEGIN
            HostelFeeLine.RESET;
            HostelFeeLine.SETRANGE("Bill No.",HostelFee."Bill No.");
            IF HostelFeeLine.FINDSET THEN
              REPEAT
                IF HostelFeeLine."Days Present" <> 0 THEN
                  HostelFeeLine."Fee Amount" := PerStudentAmount * HostelFeeLine."Days Present";
                HostelFeeLine.MODIFY;
              UNTIL HostelFeeLine.NEXT = 0;
          END;
        UNTIL Hostel.NEXT = 0;
      // Stop 05.VIGNESH
    END;

    PROCEDURE "Calculate Consumption"@1102155005(getLocation@1102155000 : Code[20];getFromDate@1102155001 : Date;getToDate@1102155002 : Date;getCostCode@1102155007 : Code[20]);
    VAR
      ItemLedgerEntry@1102155003 : Record 32;
      ConsumptionAmount@1102155004 : Decimal;
      MessExpenseAmount@1102155006 : Record 71686;
      "G/LEntry"@1102155009 : Record 17;
      CostCode@1102155008 : Record 71687;
    BEGIN
      // Start 06.VIGNESH
      // Start 12.Ankesh
      CLEAR(ConsumptionAmount);
      HostelSetup.GET;
      HostelSetup.TESTFIELD("Consumption Code");
      HostelSetup.TESTFIELD("Electricity Expense Code");

      IF (getFromDate = 0D) OR (getToDate = 0D) THEN
        ERROR(Text011);

      IF getCostCode = HostelSetup."Consumption Code" THEN BEGIN
        ItemLedgerEntry.RESET;
        ItemLedgerEntry.SETCURRENTKEY("Entry Type","Location Code","Posting Date");
        ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::"Negative Adjmt.");
        ItemLedgerEntry.SETRANGE("Location Code",getLocation);
        ItemLedgerEntry.SETFILTER("Posting Date",'%1..%2',getFromDate,getToDate);
        IF ItemLedgerEntry.FINDSET THEN
          REPEAT
            ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
            ConsumptionAmount += ABS(ItemLedgerEntry."Cost Amount (Actual)");
          UNTIL ItemLedgerEntry.NEXT = 0;
        IF ConsumptionAmount = 0 THEN
          MESSAGE(Text012)
        ELSE BEGIN
          MessExpenseAmount.RESET;
          MessExpenseAmount.GET(getLocation,getFromDate,getToDate,getCostCode);
          MessExpenseAmount."Total Amount" := ConsumptionAmount;
          MessExpenseAmount.MODIFY;
          MESSAGE(Text013);
        END;
      END ELSE
        IF getCostCode = HostelSetup."Electricity Expense Code" THEN BEGIN
          "G/LEntry".RESET;
          IF CostCode.GET(getCostCode) THEN;
          "G/LEntry".SETRANGE("G/L Account No.",CostCode."G/L Account No.");
          "G/LEntry".SETRANGE("Location Code",getLocation);
          "G/LEntry".SETFILTER("Posting Date",'%1..%2',getFromDate,getToDate);
          IF "G/LEntry".FINDSET THEN
            REPEAT
              ConsumptionAmount += "G/LEntry".Amount;
            UNTIL "G/LEntry".NEXT = 0;

          IF ConsumptionAmount = 0 THEN
            MESSAGE(Text014)
          ELSE BEGIN
            MessExpenseAmount.RESET;
            MessExpenseAmount.GET(getLocation,getFromDate,getToDate,getCostCode);
            MessExpenseAmount."Total Amount" := ConsumptionAmount;
            MessExpenseAmount.MODIFY;
            MESSAGE(Text015);
          END;
        END;
       // Stop 12.Ankesh
      // Stop 06.VIGNESH
    END;

    PROCEDURE "AllotRoom No."@1102155007("GetNo."@1102155000 : Code[20]);
    BEGIN
      // Start 07.VIGNESH
      RoomAllocation.GET("GetNo.");
      RoomAllocation.TESTFIELD("Student No.");
      RoomAllocation.TESTFIELD("Hostel No.");
      RoomAllocation.TESTFIELD("Room No");
      RoomAllocation.TESTFIELD(BedNo);
      IF RoomAllocation.RoomAlloted OR
         (RoomAllocation."Room Status" = RoomAllocation."Room Status"::Occupied)
      THEN
        ERROR(Text016,RoomAllocation."Student No.");

      IF NOT CONFIRM(Text022,FALSE) THEN
        EXIT;

      HostelSetup.GET;
      HostelSetup.TESTFIELD("Hostel Fee Code");
      HostelSetup.TESTFIELD("Room Rent Charging");

      HostelRoomsLine.RESET;
      HostelRoomsLine.SETRANGE("Hostel Code",RoomAllocation."Hostel No.");
      HostelRoomsLine.SETRANGE("Room No.",RoomAllocation."Room No");
      HostelRoomsLine.SETFILTER("Total Vacant",'<>%1',0);
      IF HostelRoomsLine.FINDFIRST THEN BEGIN
        HostelRoomsLine.TESTFIELD("Per Student Rent");
        IF RoomAllocation.Company = RoomAllocation.Company::School THEN BEGIN
          IF Student.GET(RoomAllocation."Student No.") THEN BEGIN
            IF NOT Student."Hostel Alloted" THEN BEGIN
              Student."Room No." := RoomAllocation."Room No";
              Student."Hostel Code" := RoomAllocation."Hostel No.";
              Student."Room Type" := HostelRoomsLine."Room Type";
              Student.Mess := RoomAllocation."Mess Location";
              Student."Hostel Alloted" := TRUE;
              Student."Hostel Vacated" := FALSE;
              Student.MODIFY;
            END ELSE
              ERROR(Text016,RoomAllocation."Student No.");
          END ELSE
            ERROR(Text000);
        END ELSE
          IF RoomAllocation.Company = RoomAllocation.Company::College THEN BEGIN
            IF StudentCOLLEGE.GET(RoomAllocation."Student No.") THEN BEGIN
              IF StudentCOLLEGE."Hostel Alloted" THEN BEGIN
                StudentCOLLEGE."Room No." := RoomAllocation."Room No";
                StudentCOLLEGE."Hostel Code" := RoomAllocation."Hostel No.";
                StudentCOLLEGE."Room Type" := HostelRoomsLine."Room Type";
                StudentCOLLEGE.Mess := RoomAllocation."Mess Location";
                StudentCOLLEGE."Hostel Alloted" := TRUE;
                StudentCOLLEGE."Hostel Vacated" := FALSE;
                StudentCOLLEGE.MODIFY;
              END ELSE
                ERROR(Text016,RoomAllocation."Student No.");
            END ELSE
              ERROR(Text000);
          END;
        IF HostelRooms.GET(RoomAllocation."Hostel No.",RoomAllocation."Room No",RoomAllocation.BedNo) THEN BEGIN
          HostelRooms.Alloted := TRUE;
          HostelRooms.MODIFY;
        END;
        {
       // Start 11.Ankesh
        IF HostelSetup."Room Rent Charging" <> HostelSetup."Room Rent Charging"::" " THEN BEGIN
          GenJournalLine.RESET;
          IF RoomAllocation.Company = RoomAllocation.Company::School THEN BEGIN
            IF HostelSetup."Room Rent Charging" = HostelSetup."Room Rent Charging"::"Based on Roon Type" THEN BEGIN
              FeeManagement.FeeProcess(RoomAllocation."Student No.",HostelSetup."Hostel Fee Code",HostelRoomsLine."Per Student Rent");
            END ELSE
              IF HostelSetup."Room Rent Charging" = HostelSetup."Room Rent Charging"::"Flat Rate" THEN BEGIN
                HostelSetup.TESTFIELD("Room Rent");
                FeeManagement.FeeProcess(RoomAllocation."Student No.",HostelSetup."Hostel Fee Code",HostelSetup."Room Rent");
              END;

            FeeSetup.GET;
            FeeSetup.TESTFIELD("Journal Template Name");
            FeeSetup.TESTFIELD("Journal Batch Name");

            GenJournalLine.SETRANGE("Journal Template Name",FeeSetup."Journal Template Name");
            GenJournalLine.SETRANGE("Journal Batch Name",FeeSetup."Journal Batch Name");
          END ELSE
            IF RoomAllocation.Company = RoomAllocation.Company::College THEN BEGIN
              IF HostelSetup."Room Rent Charging" = HostelSetup."Room Rent Charging"::"Based on Roon Type" THEN BEGIN
                FeeManagementCOLLEGE.FeeProcess(RoomAllocation."Student No.",HostelSetup."Hostel Fee Code",
                  HostelRoomsLine."Per Student Rent");
              END ELSE
                IF HostelSetup."Room Rent Charging" = HostelSetup."Room Rent Charging"::"Flat Rate" THEN BEGIN
                  HostelSetup.TESTFIELD("Room Rent");
                  FeeManagementCOLLEGE.FeeProcess(RoomAllocation."Student No.",HostelSetup."Hostel Fee Code",
                    HostelSetup."Room Rent");
                END;
              FeeSetupCOLLEGE.GET;
              FeeSetupCOLLEGE.TESTFIELD("Journal Template Name");
              FeeSetupCOLLEGE.TESTFIELD("Journal Batch Name");
              GenJournalLine.SETRANGE("Journal Template Name",FeeSetupCOLLEGE."Journal Template Name");
              GenJournalLine.SETRANGE("Journal Batch Name",FeeSetupCOLLEGE."Journal Batch Name");
            END;
          IF GenJournalLine.FINDSET THEN
            CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);
        END;
        // Stop 11.Ankesh
         }
        HostelRoomsLine."Total Vacant" := HostelRoomsLine."Total Vacant" -1;
        RoomAllocation.RoomAlloted := TRUE;
        RoomAllocation."Room Status" := RoomAllocation."Room Status"::Occupied;
        RoomAllocation."Allocation Date" := TODAY;
        RoomAllocation."Vacate Date" := 0D;
        RoomAllocation.Vacated := FALSE;
        RoomAllocation.MODIFY;
        HostelRoomsLine.MODIFY;
        MESSAGE(Text001,RoomAllocation."Student Name");
       // Stop 01.KATHIR
      END;
      // Stop 07.VIGNESH
    END;

    PROCEDURE VacateRoom@1102155006("GetNo."@1102155000 : Code[20]) : Boolean;
    BEGIN
      // Start 08.VIGNESH
      RoomAllocation.GET("GetNo.");
      RoomAllocation.TESTFIELD("Student No.");
      RoomAllocation.TESTFIELD("Hostel No.");
      RoomAllocation.TESTFIELD("Room No");
      IF (NOT RoomAllocation.RoomAlloted) OR RoomAllocation.Vacated OR
         (RoomAllocation."Room Status" = RoomAllocation."Room Status"::Vacated)
      THEN
        ERROR(Text017,RoomAllocation."Student No.");

      HostelRoomsLine.RESET;
      HostelRoomsLine.SETRANGE("Hostel Code",RoomAllocation."Hostel No.");
      HostelRoomsLine.SETRANGE("Room No.",RoomAllocation."Room No");
      IF HostelRoomsLine.FINDFIRST THEN BEGIN
        IF RoomAllocation.Company = RoomAllocation.Company::School THEN BEGIN
          IF Student.GET(RoomAllocation."Student No.") THEN BEGIN
            IF Student."Hostel Alloted" THEN BEGIN
              Student."Room No." := '';
              Student."Hostel Code" := '';
              Student."Room Type" := '';
              Student.Mess := '';
              Student."Hostel Alloted" := FALSE;
              Student."Hostel Vacated" := TRUE;
              Student.MODIFY;
            END ELSE
              ERROR(Text017,RoomAllocation."Student No.");
          END ELSE
            ERROR(Text000);
        END ELSE
          IF RoomAllocation.Company = RoomAllocation.Company::College THEN BEGIN
            IF StudentCOLLEGE.GET(RoomAllocation."Student No.") THEN BEGIN
              IF StudentCOLLEGE."Hostel Alloted" THEN BEGIN
                StudentCOLLEGE."Room No." := '';
                StudentCOLLEGE."Hostel Code" := '';
                StudentCOLLEGE."Room Type" := '';
                StudentCOLLEGE.Mess := '';
                StudentCOLLEGE."Hostel Alloted" := FALSE;
                StudentCOLLEGE."Hostel Vacated" := TRUE;
                StudentCOLLEGE.MODIFY;
              END ELSE
                ERROR(Text017,RoomAllocation."Student No.");
            END ELSE
              ERROR(Text000);
          END;

        IF HostelRooms.GET(RoomAllocation."Hostel No.",RoomAllocation."Room No",RoomAllocation.BedNo) THEN BEGIN
          HostelRooms.Alloted := FALSE;
          HostelRooms.MODIFY;
        END;

        HostelRoomsLine."Total Vacant" := HostelRoomsLine."Total Vacant" + 1;
        RoomAllocation."Room No" := '';
        RoomAllocation."Hostel No." := '';
        RoomAllocation."Hostel Name" := '';
        RoomAllocation."Mess Location" := '';
        RoomAllocation.BedNo := '';
        RoomAllocation.RoomAlloted := FALSE;
        RoomAllocation."Room Status" := RoomAllocation."Room Status"::Vacated;
        RoomAllocation."Allocation Date" := 0D;
        RoomAllocation."Vacate Date" := TODAY;
        RoomAllocation.Vacated := TRUE;
        RoomAllocation.MODIFY;
        HostelRoomsLine.MODIFY;
        EXIT(TRUE);
      END;
      // Stop 08.VIGNESH
    END;

    PROCEDURE ChangeRoom@1102155008("GetNo."@1102155000 : Code[20]);
    BEGIN
      // Start 09.VIGNESH
      RoomChange.GET("GetNo.");
      RoomChange.TESTFIELD("Room Allocation No.");
      RoomChange.TESTFIELD("New Hostel Code");
      RoomChange.TESTFIELD("New Room No.");
      RoomChange.TESTFIELD("Academic Year");
      RoomChange.TESTFIELD("New Bed No.");
      IF RoomChange."Room Changed" THEN
        ERROR(Text018);
      IF NOT CONFIRM(Text024,FALSE) THEN
        EXIT;

      HostelSetup.GET;
      HostelSetup.TESTFIELD("Hostel Fee Code");

      IF VacateRoom(RoomChange."Room Allocation No.") THEN BEGIN
        IF RoomChange.Company = RoomChange.Company::School THEN BEGIN
          FeeManagement.FeeProcess(RoomChange."Student No.",HostelSetup."Hostel Fee Code",-HostelRoomsLine."Per Student Rent");
        END ELSE
          IF RoomChange.Company = RoomChange.Company::College THEN
            FeeManagementCOLLEGE.FeeProcess(RoomChange."Student No.",HostelSetup."Hostel Fee Code",- HostelRoomsLine."Per Student Rent")
            ;

        HostelRoomsLine.RESET;
        HostelRoomsLine.SETRANGE("Hostel Code",RoomChange."New Hostel Code");
        HostelRoomsLine.SETRANGE("Room No.",RoomChange."New Room No.");
        HostelRoomsLine.SETFILTER("Total Vacant",'<>%1',0);
        IF HostelRoomsLine.FINDFIRST THEN BEGIN
          HostelRoomsLine.TESTFIELD("Per Student Rent");
          IF RoomChange.Company = RoomChange.Company::School THEN BEGIN
            IF Student.GET(RoomChange."Student No.") THEN BEGIN
              IF Student."Hostel Alloted" THEN BEGIN
                Student."Room No." := RoomChange."New Room No.";
                Student."Hostel Code" := RoomChange."New Hostel Code";
                Student."Room Type" := HostelRoomsLine."Room Type";
                Student.Mess := RoomChange."New Mess Location";
                Student."Hostel Alloted" := TRUE;
                Student."Hostel Vacated" := FALSE;
                Student.MODIFY;
              END ELSE
                ERROR(Text016,RoomChange."Student No.");
            END ELSE
              ERROR(Text000);
          END ELSE
            IF RoomChange.Company = RoomChange.Company::College THEN BEGIN
              IF StudentCOLLEGE.GET(RoomChange."Student No.") THEN BEGIN
                IF NOT StudentCOLLEGE."Hostel Alloted" THEN BEGIN
                  StudentCOLLEGE."Room No." := RoomChange."New Room No.";
                  StudentCOLLEGE."Hostel Code" := RoomChange."New Hostel Code";
                  StudentCOLLEGE."Room Type" := HostelRoomsLine."Room Type";
                  StudentCOLLEGE.Mess := RoomChange."New Mess Location";
                  StudentCOLLEGE."Hostel Alloted" := TRUE;
                  StudentCOLLEGE."Hostel Vacated" := FALSE;
                  StudentCOLLEGE.MODIFY;
                END ELSE
                  ERROR(Text016,RoomChange."Student No.");
              END ELSE
                ERROR(Text000);
            END;

          IF RoomChange.Company = RoomChange.Company::School THEN
            FeeManagement.FeeProcess(RoomChange."Student No.",HostelSetup."Hostel Fee Code",HostelRoomsLine."Per Student Rent")
          ELSE
            IF RoomChange.Company = RoomChange.Company::College THEN
              FeeManagementCOLLEGE.FeeProcess(RoomChange."Student No.",HostelSetup."Hostel Fee Code",HostelRoomsLine."Per Student Rent")
              ;

          GenJournalLine.RESET;
          IF RoomChange.Company = RoomChange.Company::School THEN BEGIN
            FeeSetup.GET;
            FeeSetup.TESTFIELD("Journal Template Name");
            FeeSetup.TESTFIELD("Journal Batch Name");
            GenJournalLine.SETRANGE("Journal Template Name",FeeSetup."Journal Template Name");
            GenJournalLine.SETRANGE("Journal Batch Name",FeeSetup."Journal Batch Name");
          END ELSE
            IF RoomChange.Company = RoomChange.Company::College THEN BEGIN
              FeeSetupCOLLEGE.GET;
              FeeSetupCOLLEGE.TESTFIELD("Journal Template Name");
              FeeSetupCOLLEGE.TESTFIELD("Journal Batch Name");
              GenJournalLine.SETRANGE("Journal Template Name",FeeSetupCOLLEGE."Journal Template Name");
              GenJournalLine.SETRANGE("Journal Batch Name",FeeSetupCOLLEGE."Journal Batch Name");
            END;

          IF GenJournalLine.FINDSET THEN
            CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);

          HostelRoomsLine."Total Vacant" := HostelRoomsLine."Total Vacant" - 1;
          RoomAllocation.GET(RoomChange."Room Allocation No.");
          RoomAllocation."Room No" := RoomChange."New Room No.";
          RoomAllocation."Hostel No." := RoomChange."New Hostel Code";
          RoomAllocation."Hostel Name" := RoomChange."New Hostel Name";
          RoomAllocation.BedNo := RoomChange."New Bed No.";
          RoomAllocation."Mess Location" := RoomChange."New Mess Location";
          RoomAllocation.RoomAlloted := TRUE;
          RoomAllocation."Room Status" := RoomAllocation."Room Status"::Occupied;
          RoomAllocation."Allocation Date" := TODAY;
          RoomAllocation."Vacate Date" := 0D;
          RoomAllocation.Vacated := FALSE;
          RoomChange."Room Change Date" := TODAY;
          RoomChange."Room Changed" := TRUE;
          RoomChange.MODIFY;
          RoomAllocation.MODIFY;
          HostelRoomsLine.MODIFY;
          MESSAGE(Text019,RoomChange."Student Name");
        END;
      END;
      // Start 09.VIGNESH
    END;

    PROCEDURE ChangeMess@1102155009();
    BEGIN
      // Start 10.VIGNESH
      IF NOT CONFIRM(Text023,FALSE) THEN
        EXIT;
      MessChange.RESET;
      MessChange.SETRANGE(Approval,TRUE);
      IF MessChange.FINDFIRST THEN
        REPEAT
          IF MessChange."Required Mess" <> '' THEN BEGIN
            StudentCOLLEGE.GET(MessChange."Student No.");
            StudentCOLLEGE.Mess := MessChange."Required Mess";
            StudentCOLLEGE.MODIFY;
          END;
        UNTIL MessChange.NEXT = 0;
      MESSAGE(Text020);
      // Stop 10.VIGNESH
    END;

    BEGIN
    {
        No   Date      Sign     Trigger            Description
      -----------------------------------------------------------------------------------------------
        01   08/10/09  KATHIR  Room Allocation()        Function added to Allot Room for a student
        02   08/10/09  KATHIR  Vacate Room()            Function added for a student for Vacate Room
        03   13/10/09 VIGNESH  GetStudents()            Function addted to get the hostel students
        04   13/10/09 VIGNESH  Post Journal()           Function Added to Post the Hostel Fees
        05   14/10/09 VIGNESH  Calculate Mess Amount()  Function Added for Mess Fees
        06   14/10/19 VIGNESH Calculate Consumption()   Function added to calulate the consumption
        07   14/12/09 VIGNESH AllotRoom No. -VIT()      Function added to allot Hoste Room No. for a Student
        08   14/12/09 VIGNESH VacateRoom - VIT()        Function added to vacate the student from hostel
        09   14/12/09 VIGNESH ChangeRoom -VIT()         Function Added to change the Hostel Rooms
        10   14/12/09 VIGNESH ChangeMess - VIT()        Function added to change the mess
        11   24/03/10 Ankesh  AllotRoom No. -VIT()      Code commented to unavoid invoicing while alloting room
        12   24/03/10 Ankesh  Calculate Consumption()   Code Modified to calculate for mess and electricity consumption.
    }
    END.
  }
}

OBJECT Codeunit 71850 Stores & Stationeries
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=11:25:27;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Student@1102155000 : Record 71046;
      BulkHeader@1102155001 : Record 71850;
      BulkIssues@1102155002 : Record 71852;
      BulkLine@1102155003 : Record 71851;
      SalesHead@1102155004 : Record 36;
      SalesLine@1102155005 : Record 37;
      SalesPost@1102155006 : Codeunit 80;
      StoresSetup@1102155007 : Record 71854;
      EducationSetup@1102155008 : Record 71884;
      BulkStationeryHeader@1102155009 : Record 71855;
      BulkStationeryLine@1102155010 : Record 71856;
      StudentCOLLEGE@1102155011 : Record 71355;
      "SetLineNo."@1102155012 : Integer;
      Text000@1102155013 : TextConst 'ENU=Please select the items';
      Text001@1102155014 : TextConst 'ENU=Nothing to post';
      BulkLine2@1102155015 : Record 71851;
      Student2@1102155016 : Record 71046;

    PROCEDURE "Line Post"@1102155000("IssueNo."@1102155000 : Code[20]);
    BEGIN
      // Start 01.KATHIR
      BulkHeader.GET("IssueNo.");
      BulkLine2.SETRANGE(BulkLine2."Document No.","IssueNo.");
      IF BulkLine2.FINDSET THEN BEGIN
        IF CONFIRM('Do u want to delete the exisitng \ line and update with the new !!!')  THEN
          BulkLine2.DELETEALL;
      END;

      IF NOT BulkHeader."Dormitory Wise" THEN BEGIN
        BulkHeader.TESTFIELD("Indent No");
        BulkHeader.TESTFIELD("Issue Date");
        BulkHeader.TESTFIELD(BulkHeader."Class Code");
        BulkIssues.RESET;
        BulkIssues.SETRANGE("Document No.","IssueNo.");
        IF BulkIssues.FINDSET THEN
          REPEAT
            BulkIssues.TESTFIELD(Quantity);
            Student.RESET;
            Student.SETCURRENTKEY("Class Code");
            Student.SETRANGE(Student."Class Code",BulkHeader."Class Code");
            Student.SETRANGE("Student Status",Student."Student Status"::Student);
            IF Student.FINDSET THEN
              REPEAT
                "Insert Issue Line"("IssueNo.",BulkHeader."Issue Date",Student."No.",Student.Name,
                  BulkIssues."Item No",BulkIssues.Quantity);
              UNTIL Student.NEXT = 0;
          UNTIL BulkIssues.NEXT = 0
        ELSE
          ERROR(Text000);
      END ELSE BEGIN
        BulkIssues.RESET;
        BulkIssues.SETRANGE(BulkIssues."Document No.","IssueNo.");
        IF BulkIssues.FINDSET THEN
        REPEAT
          BulkIssues.TESTFIELD(BulkIssues.Quantity);
          Student.RESET;
          Student.SETRANGE(Student."Hostel Code",BulkHeader.Dormitory);
          Student.SETRANGE(Student."Student Status",Student."Student Status"::Student);
          IF Student.FINDSET THEN
          REPEAT
            "Insert Issue Line"("IssueNo.",BulkHeader."Issue Date",Student."No.",Student.Name,
                              BulkIssues."Item No",BulkIssues.Quantity);
          UNTIL Student.NEXT=0;
        UNTIL BulkIssues.NEXT=0
        ELSE
          ERROR('Please Select Items');
      END;

      // Stop 01.KATHIR
    END;

    PROCEDURE "Post Items"@1102155001("IssueNo."@1102155000 : Code[20]);
    BEGIN
      // Start 02.KATHIR
      BulkLine.RESET;
      BulkHeader.GET("IssueNo.");
      BulkHeader.TESTFIELD(BulkHeader.Location);
      StoresSetup.GET;
      StoresSetup.TESTFIELD("Fee Code");
      BulkLine.SETRANGE("Document No.","IssueNo.");
      IF BulkLine.ISEMPTY THEN
        ERROR(Text001);
      IF BulkLine.FINDSET THEN
        REPEAT
          SalesHead.INIT;
          SalesHead."Document Type" := SalesHead."Document Type"::Order;
          SalesHead."No." := '';
          SalesHead."Document Date" := TODAY;
          SalesHead."Posting Date" := BulkLine."Issue Date";
          SalesHead.VALIDATE("Sell-to Customer No.",BulkLine."Student No.");
          SalesHead."External Document No." := BulkLine."Document No.";
          SalesHead."Due Date" := TODAY;
          SalesHead."Order Date" := BulkLine."Issue Date";
          SalesHead."Fee Code" := StoresSetup."Fee Code";
          SalesHead.Ship := TRUE;
          SalesHead.Invoice := TRUE;
          SalesHead."Type of Fees":=SalesHead."Type of Fees"::Others;

          IF Student.GET(BulkLine."Student No.") THEN
            SalesHead."Class Code" := Student."Class Code";
       //Commented By ARAVIND 11/11/10
        {
          IF NOT BulkHeader."Charge All" THEN
            IF Student2.GET(BulkLine."Student No.") THEN
              IF  Student2."New Student" = TRUE  THEN
                IF Student2."Staff Child" = FALSE THEN
                  IF ((Student2."Student Status" = 4) OR (Student2."Student Status" = 1)) THEN BEGIN
                    SalesHead."Free Supply":=TRUE;
                    SalesHead.VALIDATE(SalesHead."Free Supply");
                   END;
         }
       //Commented By ARAVIND 11/11/10

      //ARAVIND
          IF BulkHeader."Free Supply" THEN  BEGIN
            SalesHead."Free Supply":=TRUE;
            SalesHead.VALIDATE(SalesHead."Free Supply");
          END;
      //ARAVIND


          {
          // Start 04.GUNA
          IF BulkHeader."Charge All" THEN
            SalesHead."Free Supply" := TRUE;
          // Stop 04.GUNA
          }
          BulkLine.CALCFIELDS(Location);
          SalesHead.INSERT(TRUE);
          IF BulkLine.Location <> '' THEN BEGIN
            SalesHead.VALIDATE("Location Code",BulkLine.Location);
            SalesHead.MODIFY;
          END;
          SalesLine.INIT;
          SalesLine."Document Type" := SalesHead."Document Type";
          SalesLine."Document No." := SalesHead."No.";
          SalesLine."Line No." := SalesLine."Line No." + 10000;
          SalesLine.VALIDATE("Sell-to Customer No.",SalesHead."Sell-to Customer No.");
          SalesLine.Type := SalesLine.Type::Item;
          SalesLine.VALIDATE("No.",BulkLine."Item No");
          SalesLine.Description := BulkLine.Description;
          SalesLine.Quantity := BulkLine.Quantity;
          SalesLine.VALIDATE(Quantity,BulkLine.Quantity);
          SalesLine."Unit of Measure" := BulkLine.UOM;
          SalesLine."Unit Price" := BulkLine."Unit Price";
          SalesLine."Line Amount" := BulkLine."Line Amount";
          SalesLine.INSERT(TRUE);
          SalesPost.RUN(SalesHead);
        UNTIL BulkLine.NEXT = 0;
      IF BulkHeader.GET("IssueNo.") THEN BEGIN
        BulkHeader.Posted := TRUE;
        BulkHeader.MODIFY;
      END;
      // Stop 02.KATHIR
    END;

    PROCEDURE "Insert Issue Line"@1102155002("IssNo."@1102155000 : Code[20];IssDate@1102155001 : Date;"StudNo."@1102155002 : Code[20];Name@1102155003 : Text[100];"ItmNo."@1102155004 : Code[20];Qty@1102155005 : Integer);
    BEGIN
      // Start 03.KATHIR
      BulkLine."Document No." := "IssNo.";
      BulkLine."Issue Date" := IssDate;
      BulkLine."Line No." += 10000;
      BulkLine."Serial No" += 1;
      BulkLine."Student No." := "StudNo.";
      BulkLine."Student Name" := Name;
      BulkLine.Type := BulkLine.Type::Item;
      BulkLine."Item No" := "ItmNo.";
      BulkLine.VALIDATE("Item No");
      BulkLine.Quantity := Qty;
      BulkLine."Line Amount" := BulkHeader.Quantity * BulkLine."Unit Price";
      BulkLine.VALIDATE(Quantity);
      BulkLine.INSERT;
      // Stop 03.KATHIR
    END;

    PROCEDURE "Bulk Stationery Line Post"@1102155003("IssueNo."@1102155000 : Code[20]);
    BEGIN
      // Start 05.VIGNESH
      "SetLineNo." := 0;
      BulkStationeryHeader.GET("IssueNo.");
      BulkStationeryHeader.TESTFIELD("Indent No");
      BulkStationeryHeader.TESTFIELD("Issue Date");
      BulkStationeryHeader.TESTFIELD(Course);
      BulkStationeryHeader.TESTFIELD(Semester);
      BulkStationeryHeader.TESTFIELD("Academic Year");
      BulkIssues.RESET;
      BulkIssues.SETRANGE("Document No.","IssueNo.");
      IF BulkIssues.FINDSET THEN
        REPEAT
          BulkIssues.TESTFIELD(Quantity);
          StudentCOLLEGE.RESET;
          StudentCOLLEGE.SETCURRENTKEY("Course Code",Semester,"Academic Year");
          StudentCOLLEGE.SETRANGE("Course Code",BulkStationeryHeader.Course);
          StudentCOLLEGE.SETRANGE(Semester,BulkStationeryHeader.Semester);
          StudentCOLLEGE.SETRANGE("Academic Year",BulkStationeryHeader."Academic Year");
          StudentCOLLEGE.SETRANGE(Section,BulkStationeryHeader.Section);
          StudentCOLLEGE.SETRANGE("Student Status",StudentCOLLEGE."Student Status"::Student);
          IF StudentCOLLEGE.FINDSET THEN
            REPEAT
              "SetLineNo." := "SetLineNo." + 10000;
              "Insert Bulk Stationery Line"(BulkStationeryHeader."No.",BulkStationeryHeader."Issue Date",
                StudentCOLLEGE."No.",StudentCOLLEGE."Student Name",BulkIssues."Item No",BulkIssues.Quantity,"SetLineNo.");
            UNTIL StudentCOLLEGE.NEXT = 0;
        UNTIL BulkIssues.NEXT = 0
      ELSE
        ERROR(Text000);
      // Stop 05.VIGNESH
    END;

    PROCEDURE "Insert Bulk Stationery Line"@1102155011("getIssueNo."@1102155000 : Code[20];getIssueDate@1102155001 : Date;"getStudentNo."@1102155002 : Code[20];getName@1102155003 : Text[100];"getItemNo."@1102155004 : Code[20];getQuantity@1102155005 : Integer;"getLineNo."@1102155006 : Integer);
    BEGIN
      // Start 06.VIGNESH
      BulkStationeryLine.INIT;
      BulkStationeryLine."Document No." := "getIssueNo.";
      BulkStationeryLine."Line No." := "getLineNo.";
      BulkStationeryLine."Student No." := "getStudentNo.";
      BulkStationeryLine."Student Name" := getName;
      BulkStationeryLine.Type := BulkStationeryLine.Type::Item;
      BulkStationeryLine."Item No" := "getItemNo.";
      BulkStationeryLine.VALIDATE("Item No");
      BulkStationeryLine.Quantity := getQuantity;
      BulkStationeryLine."Line Amount" := BulkStationeryLine.Quantity * BulkStationeryLine."Unit Price";
      BulkStationeryLine.VALIDATE(Quantity);
      BulkStationeryLine.INSERT;
      // Stop 06.VIGNESH
    END;

    PROCEDURE "Post Bulk Stationery Items"@1102155026("IssueNo."@1102155000 : Code[20]);
    BEGIN
      // Start 02.VIGENSH
      BulkStationeryLine.RESET;
      BulkStationeryHeader.GET("IssueNo.");

      StoresSetup.GET;
      StoresSetup.TESTFIELD("Fee Code");
      BulkStationeryLine.SETRANGE("Document No.","IssueNo.");
      IF BulkStationeryLine.ISEMPTY THEN
        ERROR(Text001);
      IF BulkStationeryLine.FINDSET THEN
        REPEAT
          SalesHead.INIT;
          SalesHead."Document Type" := SalesHead."Document Type"::Order;
          SalesHead."No." := '';
          SalesHead."Document Date" := TODAY;
          SalesHead."Posting Date" := BulkStationeryLine."Issue Date";
          SalesHead.VALIDATE("Sell-to Customer No.",BulkStationeryLine."Student No.");
          SalesHead."External Document No." := BulkStationeryLine."Document No.";
          SalesHead."Due Date" := TODAY;
          SalesHead."Order Date" := BulkStationeryLine."Issue Date";
          SalesHead."Fee Code" := StoresSetup."Fee Code";
          SalesHead.Ship := TRUE;
          SalesHead.Invoice := TRUE;
          // Start 04.GUNA
          IF BulkStationeryHeader."Free Supply" THEN
            SalesHead."Free Supply" := TRUE;
          // Stop 04.GUNA

          BulkStationeryLine.CALCFIELDS(Location);
          SalesHead.INSERT(TRUE);
          IF BulkStationeryLine.Location <> '' THEN BEGIN
            SalesHead.VALIDATE("Location Code",BulkStationeryLine.Location);
            SalesHead.MODIFY;
          END;
          SalesLine.INIT;
          SalesLine."Document Type" := SalesHead."Document Type";
          SalesLine."Document No." := SalesHead."No.";
          SalesLine."Line No." := SalesLine."Line No." + 10000;
          SalesLine.VALIDATE("Sell-to Customer No.",SalesHead."Sell-to Customer No.");
          SalesLine.Type := SalesLine.Type::Item;
          SalesLine.VALIDATE("No.",BulkStationeryLine."Item No");
          SalesLine.Description := BulkStationeryLine.Description;
          SalesLine.Quantity := BulkStationeryLine.Quantity;
          SalesLine.VALIDATE(Quantity,BulkStationeryLine.Quantity);
          SalesLine."Unit of Measure" := BulkStationeryLine.UOM;
          SalesLine."Unit Price" := BulkStationeryLine."Unit Price";
          SalesLine."Line Amount" := BulkStationeryLine."Line Amount";
          SalesLine.INSERT(TRUE);
          SalesPost.RUN(SalesHead);
        UNTIL BulkStationeryLine.NEXT = 0;

      IF BulkStationeryHeader.GET("IssueNo.") THEN BEGIN
        BulkStationeryHeader.Posted := TRUE;
        BulkStationeryHeader.MODIFY;
      END;
      // Stop 02.VIGNESH
    END;

    BEGIN
    {
        No   Date      Sign     Trigger                     Description
      -----------------------------------------------------------------------------------------------
       01   13/10/09  KATHIR    Line Post()               Function added to Get the students and Insert Items for repective students
       02   13/10/09  KATHIR    Post Items()              Function added to Create Sales Order and Post
       03   21/10/09  KATHIR    Insert Issue Line()       Function added to get Insert in to Line
       04   16.11.09  GUNA      Post Items()              To include free supply
    }
    END.
  }
}

OBJECT Codeunit 71880 Education Vertical
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EduSetup@1102155000 : Record 71884;
      Text001@1102155001 : TextConst 'ENU=Do you want to receive this Application %1?';
      RecApplication@1102155002 : Record 71002;
      Academics@1102155003 : Codeunit 71040;
      AcademicsCOLLEGE@1102155004 : Codeunit 71350;
      Text000@1102155005 : TextConst 'ENU=Academic Year Already Closed';
      Text002@1102155006 : TextConst 'ENU=Academic Year Has Been Assigned';
      Text003@1102155007 : TextConst 'ENU=Do you want to Close the academic Year ?';
      Text004@1102155008 : TextConst 'ENU=Do you want to Assign the academic Year ?';
      Ret@1000000000 : Code[20];

    PROCEDURE GetAcademicYear@1102155000() : Code[10];
    BEGIN
      // Start 01.Kathir
      EduSetup.GET;
      EduSetup.TESTFIELD("Academic Year");
      EXIT(EduSetup."Academic Year")
      // Stop 01.Kathir
    END;

    PROCEDURE GetAdmissionYear@1102155001() : Code[10];
    VAR
      Admission@1102155000 : Record 71000;
    BEGIN
      // Start 02.Kathir
      Admission.GET;
      Admission.TESTFIELD("Admission Year");
      EXIT(Admission."Admission Year");
      // Stop 02.Kathir
    END;

    PROCEDURE GetAdmissionYearCOLLEGE@1102155002() : Code[10];
    VAR
      AdmissionSetup@1102155000 : Record 71270;
    BEGIN
      // Start 04.VIGNESH
      AdmissionSetup.GET;
      AdmissionSetup.TESTFIELD("Admission Year");
      EXIT(AdmissionSetup."Admission Year");
      // Stop 04.VIGNESH
    END;

    PROCEDURE RankGeneration@1102155004("getFirstNo."@1102155003 : Code[20];"getLastNo."@1102155005 : Code[20]);
    VAR
      RankGeneration@1102155000 : Record 71894;
      RankGeneration1@1102155001 : Record 71894;
      SetRank@1102155004 : Integer;
      Countrank@1102155006 : Integer;
    BEGIN
      // Start 03.VIGNESH
      SetRank := 1;
      RankGeneration.RESET;
      RankGeneration.SETRANGE("Entry No.","getFirstNo.","getLastNo.");
      RankGeneration.MODIFYALL(Rank,0);

      RankGeneration.RESET;
      RankGeneration.SETCURRENTKEY(Average);
      RankGeneration.SETRANGE("Entry No.","getFirstNo.","getLastNo.");
      RankGeneration.ASCENDING(FALSE);
      IF RankGeneration.FINDFIRST THEN
        REPEAT
          RankGeneration1.RESET;
          RankGeneration1.SETRANGE("Entry No.","getFirstNo.","getLastNo.");
          RankGeneration1.SETRANGE(Average,RankGeneration.Average);
          RankGeneration1.SETRANGE(Rank,0);
          Countrank := RankGeneration1.COUNT ;
          RankGeneration1.MODIFYALL(Rank,SetRank);
          IF Countrank <> 0 THEN
            SetRank := Countrank + SetRank;
        UNTIL RankGeneration.NEXT = 0;
      // Stop 03.VIGNESH
    END;

    PROCEDURE CloseAcademicYear@1102155003(AcaYear@1102155001 : Code[10]);
    VAR
      AcademicYear@1102155000 : Record 71904;
    BEGIN
      // Start 05.ABK
      IF CONFIRM(Text003) THEN BEGIN
        AcademicYear.GET(AcaYear);
        AcademicYear.Closed := TRUE;
        AcademicYear.MODIFY;
      END;
      // Stop 05.ABK
    END;

    PROCEDURE AssignAcademicYear@1102155005(AcademicCode@1102155001 : Code[20]);
    VAR
      AcademicYear@1102155000 : Record 71904;
      EducationSetup@1102155002 : Record 71884;
    BEGIN
      // Start 06.ABK
      AcademicYear.GET(AcademicCode);
      IF AcademicYear.Closed THEN
        ERROR(Text000);

      IF CONFIRM(Text004) THEN BEGIN
        EducationSetup.GET;
        EducationSetup.TESTFIELD(Company);
        EducationSetup."Academic Year" := AcademicYear.Code;
        EducationSetup."Start Date" := AcademicYear."Start Date";
        EducationSetup."End Date" := AcademicYear."End Date";
        EducationSetup.MODIFY;
        MESSAGE(Text002);
      END;
      // Stop 06.ABK
    END;

    PROCEDURE CopyGrades@1102155006();
    BEGIN
      EduSetup.GET;
      EduSetup.TESTFIELD(Company);
      IF EduSetup.Company = EduSetup.Company::School THEN
        Academics."Copy Grades"
      ELSE
        IF EduSetup.Company = EduSetup.Company::College THEN
          AcademicsCOLLEGE.CopyGrades;
    END;

    PROCEDURE GetClassCode@1000000000(StudentNo@1000000000 : Code[20];AcademicYear@1000000001 : Code[20]) ret : Code[20];
    VAR
      PromotionHistory@1000000002 : Record 71060;
    BEGIN
      PromotionHistory.RESET;
      PromotionHistory.SETRANGE(PromotionHistory."Student No.",StudentNo);
      PromotionHistory.SETRANGE(PromotionHistory."Academic Year",AcademicYear);
      IF PromotionHistory.FINDFIRST THEN
        EXIT(PromotionHistory."Class Code");
    END;

    BEGIN
    {
         No     Date         Sign          Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01     18/09/09     KATHIR      GetAcademicYear()         Function added to get academic year
        02     25.09.09     VIGNESH     GetAdmissionYearCOLLEGE() Function Added to get admission Year for College
        03     03.10.09     VIGNESH     RankSelection()           Function added to create Rank Generation
        04     03/10/09     VIGNESH     GetAdmissionYear()        Function added to get admission year
        05     30/12/09       ABK       CloseAdmissionYear()      Function added to close the previous admission year
        06     03/10/09       ABK       AssignAdmissionYear()     Function added to assign the current admission year
        07     03/10/09       ABK       GetCBCSBatch()            Function added to get the current CBCS Batch
    }
    END.
  }
}

OBJECT Codeunit 71883 Common List
{
  OBJECT-PROPERTIES
  {
    Date=12-04-18;
    Time=19:22:58;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EduSetup@1102155000 : Record 71884;

    PROCEDURE GetClass@1102155000() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155000 : Integer;
      Class@1102155001 : Record 71041;
    BEGIN
      // Start 01.GUNA
      i := 1;
      Class.SETCURRENTKEY(Sequence);
      IF Class.FINDSET THEN
        REPEAT
          Ret[i] := Class.Code;
          Ret[i] += ',' + Class.Description;
          i := i + 1;
        UNTIL Class.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 01.GUNA
    END;

    PROCEDURE GetCurriculum@1102155009() Ret : ARRAY [10] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Curriculum@1102155000 : Record 71042;
    BEGIN
      // Start 02.GUNA
      i := 1;
      IF Curriculum.FINDSET THEN
        REPEAT
          Ret[i] := Curriculum.Code;
          Ret[i] += ',' + Curriculum.Description;
          i := i + 1;
        UNTIL Curriculum.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 02.GUNA
    END;

    PROCEDURE GetCitizenship@1102155014() Ret : ARRAY [50] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Citizenship@1102155000 : Record 71881;
    BEGIN
      // Start 03.GUNA
      i := 1;
      IF Citizenship.FINDSET THEN
        REPEAT
          Ret[i] := Citizenship.Code;
          Ret[i] += ',' + Citizenship.Description;
          i := i + 1;
        UNTIL Citizenship.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 03.GUNA
    END;

    PROCEDURE GetMedium@1102155015() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Medium@1102155000 : Record 71880;
    BEGIN
      // Start 04.GUNA
      i := 1;
      IF Medium.FINDSET THEN
        REPEAT
          Ret[i] := Medium.Code;
          Ret[i] += ',' + Medium.Description;
          i := i + 1;
        UNTIL Medium.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 04.GUNA
    END;

    PROCEDURE GetEnquirySource@1102155016() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      EnquirySource@1102155000 : Record 71883;
    BEGIN
      // Start 05.GUNA
      i := 1;
      IF EnquirySource.FINDSET THEN
        REPEAT
          Ret[i] := EnquirySource.Code;
          Ret[i] += ',' + EnquirySource.Description;
          i := i + 1;
        UNTIL EnquirySource.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 05.GUNA
    END;

    PROCEDURE GetPostcode@1102155018() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Postcode@1102155000 : Record 225;
    BEGIN
      // Start 06.GUNA
      i := 1;
      IF Postcode.FINDSET THEN
        REPEAT
          Ret[i] := Postcode.Code;
          Ret[i] += ',' + Postcode.City;
          i := i + 1;
        UNTIL Postcode.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 06.GUNA
    END;

    PROCEDURE GetState@1102155019() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      State@1102155000 : Record 13762;
    BEGIN
      // Start 07.GUNA
      i := 1;
      IF State.FINDSET THEN
        REPEAT
          Ret[i] := State.Code;
          Ret[i] += ',' + State.Description;

          i := i + 1;
        UNTIL State.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 07.GUNA
    END;

    PROCEDURE GetCountry@1102155020() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Country@1102155000 : Record 9;
    BEGIN
      // Start 08.GUNA
      i := 1;
      IF Country.FINDSET THEN
        REPEAT
          Ret[i] := Country.Code;
          Ret[i] += ',' + Country.Name;
          i := i + 1;
        UNTIL Country.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 08.GUNA
    END;

    PROCEDURE GetEnquiryType@1102155031() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      EnquiryType@1102155000 : Record 71882;
    BEGIN
      // Start 09.GUNA
      i := 1;
      IF EnquiryType.FINDSET THEN
        REPEAT
          Ret[i] := EnquiryType.Code;
          Ret[i] += ',' + EnquiryType.Description;
          i := i + 1;
        UNTIL EnquiryType.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 09.GUNA
    END;

    PROCEDURE GetRelatives@1102155036() Ret : ARRAY [15] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Relative@1102155000 : Record 5204;
    BEGIN
      // Start 10.GUNA
      i := 1;
      IF Relative.FINDSET THEN
        REPEAT
          Ret[i] := Relative.Code;
          Ret[i] += ',' + Relative.Description;
          i := i + 1;
        UNTIL Relative.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 10.GUNA
    END;

    PROCEDURE GetPaymentMethod@1102155001() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      PaymentMethod@1102155000 : Record 289;
    BEGIN
      // Start 11.GUNA
      i := 1;
      IF PaymentMethod.FINDSET THEN
        REPEAT
          Ret[i] := PaymentMethod.Code;
          Ret[i] += ',' + PaymentMethod.Description;
          i := i + 1;
        UNTIL PaymentMethod.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 11.GUNA
    END;

    PROCEDURE GetAcademicYear@1102155003() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      AcademicYear@1102155000 : Record 71904;
    BEGIN
      // Start 12.GUNA
      i := 1;
      IF AcademicYear.FINDSET THEN
        REPEAT
          Ret[i] := AcademicYear.Code;
          Ret[i] += ',' + AcademicYear.Description;
          i := i + 1;
        UNTIL AcademicYear.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 12.GUNA
    END;

    PROCEDURE GetExamCode@1102155005() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      ExamCode@1102155000 : Record 71903;
    BEGIN
      // Start 13.GUNA
      i := 1;
      ExamCode.SETCURRENTKEY("Exam Order");
      IF ExamCode.FINDSET THEN
        REPEAT
          Ret[i] := ExamCode.Code;
          Ret[i] += ',' + ExamCode.Description;
          i := i + 1;
        UNTIL ExamCode.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 13.GUNA
    END;

    PROCEDURE GetEvaluationMethod@1102155008() Ret : ARRAY [15] OF Text[100];
    VAR
      i@1102155001 : Integer;
      EvaluationMethod@1102155000 : Record 71007;
    BEGIN
      // Start 14.GUNA
      i := 1;
      IF EvaluationMethod.FINDSET THEN
        REPEAT
          Ret[i] := EvaluationMethod.Code;
          Ret[i] += ',' + EvaluationMethod.Description;
          i := i + 1;
        UNTIL EvaluationMethod.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 14.GUNA
    END;

    PROCEDURE GetCommunity@1102155011() Ret : ARRAY [10] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Community@1102155000 : Record 71890;
    BEGIN
      // Start 15.GUNA
      i := 1;
      IF Community.FINDSET THEN
        REPEAT
          Ret[i] := Community.Code;
          Ret[i] += ',' + Community.Description;
          i := i + 1;
        UNTIL Community.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 15.GUNA
    END;

    PROCEDURE GetMotherTongue@1102155013() Ret : ARRAY [50] OF Text[100];
    VAR
      i@1102155001 : Integer;
      MotherTongue@1102155000 : Record 71891;
    BEGIN
      // Start 16.GUNA
      i := 1;
      IF MotherTongue.FINDSET THEN
        REPEAT
          Ret[i] := MotherTongue.Code;
          Ret[i] += ',' + MotherTongue.Description;
          i := i + 1;
        UNTIL MotherTongue.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 16.GUNA
    END;

    PROCEDURE GetQuota@1102155021() Ret : ARRAY [10] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Quota@1102155000 : Record 71885;
    BEGIN
      // Start 17.GUNA
      i := 1;
      IF Quota.FINDSET THEN
        REPEAT
          Ret[i] := Quota.Code;
          Ret[i] += ',' + Quota.Description;
          i := i + 1;
        UNTIL Quota.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 17.GUNA
    END;

    PROCEDURE GetFeeClassification@1102155024() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      FeeClassification@1102155000 : Record 71907;
    BEGIN
      // Start 18.GUNA
      i := 1;
      IF FeeClassification.FINDSET THEN
        REPEAT
          Ret[i] := FeeClassification.Code;
          Ret[i] += ',' + FeeClassification.Description;
          i := i + 1;
        UNTIL FeeClassification.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 18.GUNA
    END;

    PROCEDURE GetBookCategory@1102155028() Ret : ARRAY [50] OF Text[100];
    VAR
      i@1102155001 : Integer;
      BookCategory@1102155000 : Record 71634;
    BEGIN
      // Start 19.GUNA
      i := 1;
      IF BookCategory.FINDSET THEN
        REPEAT
          Ret[i] := BookCategory.Code;
          Ret[i] += ',' + BookCategory.Description;
          i := i + 1;
        UNTIL BookCategory.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 19.GUNA
    END;

    PROCEDURE GetLanguage@1102155002() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Language@1102155000 : Record 8;
    BEGIN
      // Start 20.GUNA
      i := 1;
      IF Language.FINDSET THEN
        REPEAT
          Ret[i] := Language.Code;
          Ret[i] += ',' + Language.Name;
          i := i + 1;
        UNTIL Language.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 20.GUNA
    END;

    PROCEDURE GetSection@1102155007() Ret : ARRAY [10] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Section@1102155000 : Record 71902;
    BEGIN
      // Start 21.GUNA
      i := 1;
      IF Section.FINDSET THEN
        REPEAT
          Ret[i] := Section.Code;
          Ret[i] += ',' + Section.Description;
          i := i + 1;
        UNTIL Section.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 21.GUNA
    END;

    PROCEDURE GetGrade@1102155012() Ret : ARRAY [10] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Grade@1102155000 : Record 71889;
    BEGIN
      // Start 22.GUNA
      i := 1;
      IF Grade.FINDSET THEN
        REPEAT
          Ret[i] := Grade.Code;
          Ret[i] += ',' + Grade.Description;
          i := i + 1;
        UNTIL Grade.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 22.GUNA
    END;

    PROCEDURE GetLocation@1102155023() Ret : ARRAY [50] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Location@1102155000 : Record 14;
    BEGIN
      // Start 23.GUNA
      i := 1;
      IF Location.FINDSET THEN
        REPEAT
          Ret[i] := Location.Code;
          Ret[i] += ',' + Location.Name;
          i := i + 1;
        UNTIL Location.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 23.GUNA
    END;

    PROCEDURE GetFeeComponent@1102155027() Ret : ARRAY [20] OF Text[100];
    VAR
      i@1102155001 : Integer;
      FeeComponents@1102155000 : Record 71905;
    BEGIN
      // Start 24.GUNA
      i := 1;
      IF FeeComponents.FINDSET THEN
        REPEAT
          Ret[i] := FeeComponents.Code;
          Ret[i] += ',' + FeeComponents.Description;
          i := i + 1;
        UNTIL FeeComponents.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 24.GUNA
    END;

    PROCEDURE GetClassGroup@1102155032() Ret : ARRAY [20] OF Text[100];
    VAR
      i@1102155001 : Integer;
      ClassGroup@1102155000 : Record 71045;
    BEGIN
      // Start 25.GUNA
      i := 1;
      IF ClassGroup.FINDSET THEN
        REPEAT
          Ret[i] := ClassGroup.Code;
          Ret[i] += ',' + ClassGroup.Description;
          i := i + 1;
        UNTIL ClassGroup.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 25.GUNA
    END;

    PROCEDURE GetFeeType@1102155004() Ret : ARRAY [25] OF Text[100];
    VAR
      i@1102155001 : Integer;
      FeeType@1102155000 : Record 71906;
    BEGIN
      // Start 26.GUNA
      i := 1;
      IF FeeType.FINDSET THEN
        REPEAT
          Ret[i] := FeeType.Code;
          Ret[i] += ',' + FeeType.Description;
          i := i + 1;
        UNTIL FeeType.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 26.GUNA
    END;

    PROCEDURE GetClassSection@1102155006() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      ClassSection@1102155000 : Record 71015;
    BEGIN
      // Start 27.GUNA
      i := 1;
      IF ClassSection.FINDSET THEN
        REPEAT
          Ret[i] := ClassSection.Class;
          Ret[i] += ',' + ClassSection.Section;
          Ret[i] += ClassSection.Curriculum;
          i := i + 1;
        UNTIL ClassSection.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 27.GUNA
    END;

    PROCEDURE GetKeyStages@1102155022() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      KeyStages@1102155000 : Record 71044;
    BEGIN
      // Start 28.GUNA
      i := 1;
      IF KeyStages.FINDSET THEN
        REPEAT
          Ret[i] := KeyStages."Divison Code";
          Ret[i] += ',' + KeyStages.Code;
          i := i + 1;
        UNTIL KeyStages.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 28.GUNA
    END;

    PROCEDURE GetSubject@1102155029() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Subject@1102155000 : Record 71004;
    BEGIN
      // Start 29.GUNA
      i := 1;
      IF Subject.FINDSET THEN
        REPEAT
          Ret[i] := Subject.Code;
          Ret[i] += ',' +Subject.Description;
          i := i + 1;
        UNTIL Subject.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 29.GUNA
    END;

    PROCEDURE GetChapter@1102155010() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      ChapterMaster@1102155000 : Record 71901;
    BEGIN
      // Start 30.GUNA
      i := 1;
      IF ChapterMaster.FINDSET THEN
        REPEAT
          Ret[i] := ChapterMaster.Code;
          Ret[i] += ',' + ChapterMaster.Description;
          i := i + 1;
        UNTIL ChapterMaster.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 30.GUNA
    END;

    PROCEDURE GetCurrentYear@1102155017() Ret : Text[50];
    VAR
      EducationSetup@1102155000 : Record 71884;
    BEGIN
      // Start 31.GUNA
      EducationSetup.GET;
      Ret := EducationSetup."Academic Year";
      Ret += ';' + FORMAT(EducationSetup."Start Date") + ';' + FORMAT(EducationSetup."End Date");
      // Stop 31.GUNA
    END;

    PROCEDURE GetCourse@1102155026() Ret : ARRAY [50] OF Text[100];
    VAR
      Course@1102155000 : Record 71351;
      i@1102155001 : Integer;
    BEGIN
      // Start 32.GUNA
      i := 1;
      IF Course.FINDSET THEN
        REPEAT
          Ret[i] := Course.Code;
          Ret[i] += ',' + Course.Description;
          i := i + 1;
        UNTIL Course.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 32.GUNA
    END;

    PROCEDURE GetUniversity@1102155033() Ret : ARRAY [20] OF Text[100];
    VAR
      University@1102155000 : Record 71280;
      i@1102155001 : Integer;
    BEGIN
      // Start 33.GUNA
      i := 1;
      IF University.FINDSET THEN
        REPEAT
          Ret[i] := University.Code;
          Ret[i] += ',' + University.Description;
          i := i + 1;
        UNTIL University.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 33.GUNA
    END;

    PROCEDURE GetPrequalification@1102155037() Ret : ARRAY [50] OF Text[100];
    VAR
      Prequalification@1102155000 : Record 71276;
      i@1102155001 : Integer;
    BEGIN
      // Start 34.GUNA
      i := 1;
      IF Prequalification.FINDSET THEN
        REPEAT
          Ret[i] := Prequalification.Code;
          Ret[i] += ',' + Prequalification.Description;
          i := i + 1;
        UNTIL Prequalification.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 34.GUNA
    END;

    PROCEDURE GetSemester@1102155040() Ret : ARRAY [10] OF Text[100];
    VAR
      Semester@1102155000 : Record 71354;
      i@1102155001 : Integer;
    BEGIN
      // Start 35.GUNA
      i := 1;
      IF Semester.FINDSET THEN
        REPEAT
          Ret[i] := Semester.Code;
          Ret[i] += ',' + Semester.Description;
          i := i + 1;
        UNTIL Semester.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 35.GUNA
    END;

    PROCEDURE GetReligion@1102155043() Ret : ARRAY [20] OF Text[100];
    VAR
      Religion@1102155000 : Record 71886;
      i@1102155001 : Integer;
    BEGIN
      // Start 36.GUNA
      i := 1;
      IF Religion.FINDSET THEN
        REPEAT
          Ret[i] := Religion.Code;
          Ret[i] += ',' + Religion.Description;
          i := i + 1;
        UNTIL Religion.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 36.GUNA
    END;

    PROCEDURE GetCaste@1102155045() Ret : ARRAY [100] OF Text[100];
    VAR
      Caste@1102155000 : Record 71887;
      i@1102155001 : Integer;
    BEGIN
      // Start 37.GUNA
      i := 1;
      IF Caste.FINDSET THEN
        REPEAT
          Ret[i] := Caste.Code;
          Ret[i] += ',' + Caste.Description;
          i := i + 1;
        UNTIL Caste.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 37.GUNA
    END;

    PROCEDURE GetSubjectType@1102155030() Ret : ARRAY [10] OF Text[100];
    VAR
      SubjectType@1102155000 : Record 71360;
      i@1102155001 : Integer;
    BEGIN
      // Start 38.GUNA
      i := 1;
      IF SubjectType.FINDSET THEN
        REPEAT
          Ret[i] := SubjectType.Code;
          Ret[i] += ',' + SubjectType.Description;
          i := i + 1;
        UNTIL SubjectType.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 38.GUNA
    END;

    PROCEDURE GetExam@1102155034() Ret : ARRAY [50] OF Text[100];
    VAR
      ExamMethods@1102155000 : Record 71903;
      i@1102155001 : Integer;
    BEGIN
      // Start 39.GUNA
      i := 1;
      IF ExamMethods.FINDSET THEN
        REPEAT
          Ret[i] := ExamMethods.Code;
          Ret[i] += ',' + ExamMethods.Description;
          i := i + 1;
        UNTIL ExamMethods.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 39.GUNA
    END;

    PROCEDURE CheckPostcode@1102155035(Postcode@1102155001 : Code[10];City@1102155002 : Text[30]) Ret : Boolean;
    VAR
      PostCode1@1102155000 : Record 225;
    BEGIN
      // Start 40.GUNA
      IF NOT PostCode1.GET(Postcode,City) THEN BEGIN
        PostCode1.Code := Postcode;
        PostCode1.City := City;
        PostCode1.INSERT;
        Ret := TRUE;
      END;
      // Stop 40.GUNA
    END;

    PROCEDURE UpdateTimeTable@1102155025(EntryNo@1102155000 : Integer;AttendanceNo@1102155001 : Code[20]) Ret : Boolean;
    VAR
      TimeTableLedger@1102155002 : Record 71517;
      "TimeTable-School"@1102155003 : Record 71155;
    BEGIN
      // Start 41.GUNA
      EduSetup.GET;
      IF EduSetup.Company = EduSetup.Company::College THEN BEGIN
        IF TimeTableLedger.GET(EntryNo) THEN BEGIN
          TimeTableLedger.VALIDATE(TimeTableLedger."Attendance Code",AttendanceNo);
          IF TimeTableLedger.MODIFY THEN
            EXIT(TRUE);
        END;
      END ELSE
        IF EduSetup.Company = EduSetup.Company::School THEN
          IF "TimeTable-School".GET(EntryNo) THEN BEGIN
            "TimeTable-School".VALIDATE("TimeTable-School"."Attendance Code",AttendanceNo);
            IF "TimeTable-School".MODIFY THEN
              EXIT(TRUE);
          END;
      // Stop 41.GUNA
    END;

    PROCEDURE UpdateTimeTableMark@1102155038(EntryNo@1102155001 : Integer;MarkNo@1102155000 : Code[20]) Ret : Boolean;
    VAR
      TimeTableLedger@1102155002 : Record 71517;
    BEGIN
      // Start 42.GUNA
      IF TimeTableLedger.GET(EntryNo) THEN BEGIN
        TimeTableLedger."Internal Exam Code" := MarkNo;
        IF TimeTableLedger.MODIFY THEN
          EXIT(TRUE);
      END;
      // Stop 42.GUNA
    END;

    PROCEDURE GetBookAvail@1102155039(UserID@1102155003 : Code[20];BookNo@1102155000 : Code[20]) Ret : ARRAY [3] OF Boolean;
    VAR
      Book@1102155001 : Record 71630;
      Accession@1102155002 : Record 71631;
      Accession1@1102155004 : Record 71631;
    BEGIN
      // Start 43.GUNA
      IF Book.GET(BookNo) THEN BEGIN
        Accession.RESET;
        Accession.SETRANGE("Book No.",BookNo);
        Accession.SETRANGE("Advance Booked",TRUE);
        Accession.SETRANGE("Booked By",UserID);
        IF NOT Accession.FINDFIRST THEN BEGIN
          Ret[1] := TRUE;
          Book.CALCFIELDS("Available Count");
          IF Book."Available Count" > 0 THEN
            Ret[2] := TRUE;
          Accession1.RESET;
          Accession1.SETRANGE("Book No.",BookNo);
          Accession1.SETRANGE("Advance Booked",FALSE);
          IF Accession1.FINDSET THEN
            Ret[3] := TRUE;
        END;
      END;
      // Stop 43.GUNA
    END;

    PROCEDURE GetInternalMax@1102155041(Course@1102155000 : Code[20];Semester@1102155001 : Code[10];Section@1102155002 : Code[10];AcademicYear@1102155003 : Code[10];Subject@1102155004 : Code[20];ExamCode@1102155005 : Code[20]) Ret : Decimal;
    VAR
      CourseSubjExamMethod@1102155006 : Record 71384;
    BEGIN
      // Start 44.GUNA
      CourseSubjExamMethod.RESET;
      CourseSubjExamMethod.SETCURRENTKEY(Course,Semester,Section,"Academic year","Subject Code","Exam Method");
      CourseSubjExamMethod.SETRANGE(Course,Course);
      CourseSubjExamMethod.SETRANGE(Semester,Semester);
      CourseSubjExamMethod.SETRANGE(Section,Section);
      CourseSubjExamMethod.SETRANGE("Academic year",AcademicYear);
      CourseSubjExamMethod.SETRANGE("Subject Code",Subject);
      CourseSubjExamMethod.SETRANGE("Exam Method",ExamCode);
      IF CourseSubjExamMethod.FINDFIRST THEN
        Ret := CourseSubjExamMethod.Maximum;
      // Stop 44.GUNA
    END;

    PROCEDURE GetMyStudents@1102155042(FacultyCode@1102155000 : Code[20]) Ret : Text[100];
    VAR
      FacultySubjects@1102155011 : Record 71515;
      Student@1102155010 : Record 71355;
      StudentSubjects@1102155009 : Record 71359;
      EduSetup1@1102155008 : Record 71884;
      XMLFile@1102155004 : File;
      FLName@1102155002 : Text[250];
      StudentTemp@1102155001 : TEMPORARY Record 71355;
      Addtext@1102155012 : Text[250];
      TestStream@1102155005 : OutStream;
      StudentXML@1102155006 : XMLport 51000;
      CollStud@1102155007 : Record 71355;
    BEGIN
      // Start 01.VIGNESH
      StudentTemp.RESET;
      StudentTemp.DELETEALL;

      EduSetup1.GET;
      EduSetup1.TESTFIELD("XML File Path");
      // Stop 01.VIGNESH
      EduSetup1.GET;
      FacultySubjects.RESET;
      FacultySubjects.SETRANGE("Faculty Code",FacultyCode);
      IF FacultySubjects.FINDSET(FALSE,FALSE) THEN
        REPEAT
          StudentSubjects.RESET;
          StudentSubjects.SETRANGE(Course,FacultySubjects."Course Code");
          StudentSubjects.SETRANGE(Semester,FacultySubjects."Semester Code");
          StudentSubjects.SETRANGE(Section,FacultySubjects."Section Code");
          StudentSubjects.SETRANGE("Subject Code",FacultySubjects."Subject Code");
          IF StudentSubjects.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF Student.GET(StudentSubjects."Student No.") THEN
                Student.MARK(TRUE);
            UNTIL StudentSubjects.NEXT = 0;
        UNTIL FacultySubjects.NEXT = 0;

      Student.MARKEDONLY(TRUE);
      FLName := EduSetup1."XML File Path" + FacultyCode + '-MyStudents.xml';

      IF FILE.EXISTS(FLName) THEN
        FILE.ERASE(FLName);

      XMLFile.CREATE(FLName);
      XMLFile.CREATEOUTSTREAM(TestStream);
      IF Student.FINDSET THEN
        XMLPORT.EXPORT(51000,TestStream,Student)
      ELSE
        XMLPORT.EXPORT(51000,TestStream,Student);
      XMLFile.CLOSE;
      Ret := FacultyCode + '-MyStudents.xml';
    END;

    PROCEDURE AddLinks@1102155044(TableID@1102155000 : Integer;Key@1102155004 : Text[100];FileLink@1102155001 : Text[250]) Ret : Boolean;
    VAR
      ReordLink@1102155002 : Record 2000000068;
      RecRef@1102155003 : RecordRef;
      RecId@1102155005 : RecordID;
    BEGIN
      RecRef.OPEN(TableID);
      EVALUATE(RecId,FORMAT(TableID) + ': ' + FORMAT(Key));
      RecRef.GET(RecId);
      RecRef.ADDLINK(FileLink);
      RecRef.MODIFY;
    END;

    PROCEDURE GetLinks@1102155047(TableID@1102155001 : Integer;Key@1102155000 : Text[100]) Ret : ARRAY [50] OF Text[1024];
    VAR
      ReordLink@1102155004 : Record 2000000068;
      RecRef@1102155003 : RecordRef;
      RecId@1102155002 : RecordID;
      i@1102155005 : Integer;
    BEGIN
      i := 1;
      EVALUATE(RecId,FORMAT(TableID) + ': ' + FORMAT(Key));
      ReordLink.RESET;
      ReordLink.SETRANGE("Record ID",RecId);
      IF ReordLink.FINDSET THEN
        REPEAT
          Ret[i] := ReordLink.URL1;
          i += 1;
        UNTIL ReordLink.NEXT = 0
      ELSE
        Ret[i] := '#EOF';
    END;

    PROCEDURE DelLinks@1102155046(TableID@1102155002 : Integer;Key@1102155001 : Text[100];FileLink@1102155000 : Text[250]) Ret : Boolean;
    VAR
      ReordLink@1102155005 : Record 2000000068;
      RecRef@1102155004 : RecordRef;
      RecId@1102155003 : RecordID;
    BEGIN
      EVALUATE(RecId,FORMAT(TableID) + ': ' + FORMAT(Key));
      ReordLink.RESET;
      ReordLink.SETRANGE("Record ID",RecId);
      ReordLink.SETRANGE(URL1,FileLink);
      IF ReordLink.FINDFIRST THEN BEGIN
        ReordLink.DELETE;
        Ret := TRUE;
      END;
    END;

    PROCEDURE GetFaculty@1102155048(Course@1102155000 : Code[20];Semester@1102155001 : Code[10];Section@1102155002 : Code[10];Subject@1102155003 : Code[20];VAR FacultyName@1102155004 : Text[100]) Ret : Code[20];
    VAR
      FacultySubject@1102155005 : Record 71515;
    BEGIN
      EduSetup.GET;
      FacultySubject.RESET;
      FacultySubject.SETCURRENTKEY("Course Code","Semester Code","Section Code","Subject Code","Academic Year");
      FacultySubject.SETRANGE("Course Code",Course);
      FacultySubject.SETRANGE("Semester Code",Semester);
      FacultySubject.SETRANGE("Section Code",Section);
      FacultySubject.SETRANGE("Subject Code",Subject);
      FacultySubject.SETRANGE("Academic Year",EduSetup."Academic Year");
      IF FacultySubject.FINDFIRST THEN BEGIN
        Ret := FacultySubject."Faculty Code";
        FacultyName := FacultySubject."Faculty Name";
      END;
    END;

    PROCEDURE GetSeverity@1102155049() Ret : ARRAY [50] OF Text[100];
    VAR
      SeverityRec@1102155000 : Record 71915;
      i@1102155001 : Integer;
    BEGIN
      // Start 01.GUNA
      i := 1;
      IF SeverityRec.FINDSET THEN
        REPEAT
          Ret[i] := SeverityRec.Code;
          Ret[i] += ',' + SeverityRec.Description;
          i := i + 1;
        UNTIL SeverityRec.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 01.GUNA
    END;

    PROCEDURE GetAction@1102155050() Ret : ARRAY [50] OF Text[100];
    VAR
      ActionTaken@1102155000 : Record 71917;
      i@1102155001 : Integer;
    BEGIN
      // Start 01.GUNA
      i := 1;
      IF ActionTaken.FINDSET THEN
        REPEAT
          Ret[i] := ActionTaken.Code;
          Ret[i] += ',' + ActionTaken.Description;
          i := i + 1;
        UNTIL ActionTaken.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 01.GUNA
    END;

    PROCEDURE GetYearList@1102155051() Ret : ARRAY [6] OF Code[10];
    VAR
      AcademicYear@1102155000 : Record 71904;
      i@1102155001 : Integer;
    BEGIN
      AcademicYear.ASCENDING(FALSE);
      i := 1;
      IF AcademicYear.FINDFIRST THEN
        REPEAT
          Ret[i] := AcademicYear.Code;
          i := i + 1;
        UNTIL AcademicYear.NEXT = 0;
      Ret[i] := '#EOF';
    END;

    PROCEDURE GetMaxMark@1102155052(Class@1102155001 : Code[20];Curriculum@1102155002 : Code[20];AcademicYear@1102155003 : Code[10];Subject@1102155004 : Code[20]) Ret : Decimal;
    VAR
      ClassSubjects@1102155000 : Record 71048;
    BEGIN
      ClassSubjects.RESET;
      ClassSubjects.SETCURRENTKEY(Class,Curriculum,"Academic Year",Subject);
      ClassSubjects.SETRANGE(Class,Class);
      ClassSubjects.SETRANGE(Curriculum,Curriculum);
      ClassSubjects.SETRANGE("Academic Year",AcademicYear);
      ClassSubjects.SETRANGE(Subject,Subject);
      IF ClassSubjects.FINDFIRST THEN
        EXIT(ClassSubjects."Maximum Mark");
    END;

    PROCEDURE GetStudDivision@1102155053() Ret : ARRAY [100] OF Code[70];
    VAR
      StudentDivision@1102155001 : Record 71076;
      i@1102155000 : Integer;
    BEGIN
      // Start 01.GUNA
      i := 1;
      IF StudentDivision.FINDSET THEN
        REPEAT
          Ret[i] := StudentDivision.Code;
          Ret[i] += ',' + StudentDivision.Description;
          i := i + 1;
        UNTIL StudentDivision.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 01.GUNA
    END;

    PROCEDURE CheckClassTeacher@1102155054(EmpCode@1102155000 : Code[20]) Emp : Code[20];
    VAR
      ClassSec@1102155001 : Record 71015;
    BEGIN
      CLEAR(Emp);
      EduSetup.GET;
      ClassSec.RESET;
      ClassSec.SETRANGE(ClassSec."Academic Year",EduSetup."Academic Year");
      ClassSec.SETRANGE(ClassSec."Class Teacher",EmpCode);
      IF ClassSec.FINDFIRST THEN BEGIN
        Emp := ClassSec."Class Code";
        EXIT(Emp );
      END ELSE BEGIN
        Emp := '#EOF';
        EXIT(Emp);
      END
    END;

    PROCEDURE GetUnit@1102155059() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155000 : Integer;
      "Unit Master"@1102155001 : Record 71900;
    BEGIN
      // Start 30.GUNA
      i:=1;
      IF "Unit Master".FINDSET THEN
      REPEAT
        Ret[i]:="Unit Master".Code;
        Ret[i]+= ','+"Unit Master".Description;
        i:=i+1;
      UNTIL "Unit Master".NEXT=0;
      Ret[i]:='#EOF';
      // Stop 30.GUNA
    END;

    PROCEDURE ChangePassword@1102155055(UserSession@1102155000 : Code[20];OldPwd@1102155001 : Text[30];NewPwd@1102155002 : Text[30]) Flag : Boolean;
    VAR
      Portalrec@1102155003 : Record 71895;
    BEGIN
      Flag := FALSE;
      Portalrec.RESET;
      IF Portalrec.GET(UserSession) THEN BEGIN
        IF Portalrec.Password = OldPwd THEN BEGIN
          Portalrec.Password := NewPwd;
          IF Portalrec.MODIFY THEN BEGIN
            Flag := TRUE;
            EXIT(Flag);
          END ELSE
            EXIT(Flag);
        END ELSE
        EXIT(Flag);
      END ELSE
        EXIT(Flag);
    END;

    PROCEDURE SuperMark@1102155056(SuperCode@1102155000 : Code[20]) Ret : Boolean;
    VAR
      AcaSetup@1102155001 : Record 71040;
    BEGIN
      AcaSetup.RESET;
      IF AcaSetup.GET THEN BEGIN
        IF AcaSetup."Mark Super User" = SuperCode THEN BEGIN
          Ret := TRUE;
          EXIT(Ret)
        END ELSE
          EXIT(Ret);
      END ELSE
        EXIT(Ret);
    END;

    PROCEDURE GetClassCode@1102155057() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      ClassSection@1102155000 : Record 71015;
    BEGIN
      // Start 27.GUNA
      i := 1;
      IF ClassSection.FINDSET THEN
        REPEAT
          Ret[i] := ClassSection."Class Code";
          Ret[i] += ',' +ClassSection."Class Code";
        //  Ret[i] += ',' + ClassSection.Section;
          i := i + 1;
        UNTIL ClassSection.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 27.GUNA
    END;

    PROCEDURE GetClassSectionAscTT@1102155060() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102155001 : Integer;
      ClassSection@1102155000 : Record 71015;
    BEGIN
      // Start 27.GUNA
      i := 1;
      EduSetup.GET;
      ClassSection.RESET;
      ClassSection.SETRANGE(ClassSection."Academic Year",EduSetup."Academic Year");
      IF ClassSection.FINDSET THEN
        REPEAT
          Ret[i] := ClassSection."Class Code";
          Ret[i] += ',' +ClassSection.Class;
          Ret[i] += ',' + ClassSection.Section;
          i := i + 1;
        UNTIL ClassSection.NEXT = 0;
      Ret[i] := '#EOF';

      // Stop 27.GUNA
    END;

    PROCEDURE GetPassMark@1102159000(Class@1102155001 : Code[20];Curriculum@1102155002 : Code[20];AcademicYear@1102155003 : Code[10];Subject@1102155004 : Code[20]) Ret : Decimal;
    VAR
      ClassSubjects@1102155000 : Record 71048;
    BEGIN
      ClassSubjects.RESET;
      ClassSubjects.SETCURRENTKEY(Class,Curriculum,"Academic Year",Subject);
      ClassSubjects.SETRANGE(Class,Class);
      ClassSubjects.SETRANGE(Curriculum,Curriculum);
      ClassSubjects.SETRANGE("Academic Year",AcademicYear);
      ClassSubjects.SETRANGE(Subject,Subject);
      IF ClassSubjects.FINDFIRST THEN
        EXIT(ClassSubjects."Pass Mark");
    END;

    PROCEDURE GetEmpAscTT@1102159001() Ret : ARRAY [500] OF Text[100];
    VAR
      i@1102155001 : Integer;
      Emp@1102155000 : Record 71091;
    BEGIN
      // Start 27.GUNA
      i := 1;
      EduSetup.GET;
      Emp.RESET;
      //Emp.SETRANGE(Emp.Status,Emp.Status::Active);
      Emp.SETFILTER(Emp."Employee Category",'%1|%2',
                    Emp."Employee Category"::"Staff Permanent" ,Emp."Employee Category"::"Staff Temporary" );
      IF Emp.FINDSET THEN
        REPEAT
          Ret[i] := Emp."Employee No." ;
          Ret[i] += ',' + Emp.Name;
         // Ret[i] += ',' +Emp."Last Name";
          i := i + 1;
        UNTIL Emp.NEXT = 0;
      Ret[i] := '#EOF';
      // Stop 27.GUNA
    END;

    PROCEDURE GetEvents@1102159002() Ret : ARRAY [100] OF Text[100];
    VAR
      i@1102159000 : Integer;
      EventMaster@1102159001 : Record 71090;
    BEGIN
      i:=1;
      IF EventMaster.FINDSET THEN
      REPEAT
        Ret[i] := EventMaster.Code;
        Ret[i]+= ','+ EventMaster.Description;
        Ret[i]+= ','+ FORMAT(EventMaster.IsSportsAndGames);
        i:=i+1;
      UNTIL EventMaster.NEXT=0;
      Ret[i]:='#EOF';
    END;

    PROCEDURE CheckStateName@1000000000(StateName@1000000000 : Text[50]) StateCode : Text[10];
    BEGIN
    END;

    PROCEDURE CreatePayment@1000000001(StudentNo@1000000000 : Code[20];Amt@1000000001 : Decimal;PayRef@1000000002 : Text[30];Postingdate@1000000007 : Date) DocNo : Code[20];
    VAR
      GenJnlLine@1000000003 : Record 81;
      FeeSetup@1000000004 : Record 71072;
      LineNo@1000000005 : Integer;
      GenJnlBatch@1000000006 : Record 232;
      NoSeriesMgt@1000000008 : Codeunit 396;
    BEGIN
      FeeSetup.GET;
      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Journal Template Name",FeeSetup."Fee Receipt Template");
      GenJnlLine.SETRANGE("Journal Batch Name",FeeSetup."Fee Receipt Batch");
      IF GenJnlLine.FINDLAST THEN
        LineNo := GenJnlLine."Line No.";

      GenJnlBatch.GET(FeeSetup."Fee Receipt Template",FeeSetup."Fee Receipt Batch");

      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := FeeSetup."Fee Receipt Template";
      GenJnlLine."Journal Batch Name" :=  FeeSetup."Fee Receipt Batch";
      GenJnlLine."Line No." := LineNo + 10000;
      GenJnlLine."Posting Date" := Postingdate;
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
      GenJnlLine."Document No." := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",GenJnlLine."Posting Date",TRUE);
      GenJnlLine."Cheque No." := PayRef;
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
      GenJnlLine.VALIDATE("Account No.",StudentNo);
      GenJnlLine.VALIDATE(Amount,-Amt);
      GenJnlLine."Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      GenJnlLine.VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      GenJnlLine.INSERT;
      EXIT(GenJnlLine."Document No.");
    END;

    PROCEDURE GetCoCurricularActivities@1000000002() Ret : ARRAY [100] OF Text[150];
    VAR
      CoCurricularActivities@1000000000 : Record 71892;
      i@1000000001 : Integer;
    BEGIN
      // Co-curricular activities list by Sameer
      i:=1;
      IF CoCurricularActivities.FINDSET THEN
      REPEAT
        Ret[i] := CoCurricularActivities.Code;
        Ret[i]+= ','+ CoCurricularActivities.Description;
        i:=i+1;
      UNTIL CoCurricularActivities.NEXT=0;
      Ret[i]:='#EOF';
    END;

    BEGIN
    {
         No     Date       Sign          Trigger                     Description
      -----------------------------------------------------------------------------------------------
        01    02.11.09     GUNA       GetClass()            To return all class master values to .NET
        02    02.11.09     GUNA       GetCurriculum()       To return all CURRICULUM master values to .NET
        03    02.11.09     GUNA       GetCitizenship()      To return all CITIZENSHIP master values to .NET
        04    02.11.09     GUNA       GetMedium()           To return all MEDIUM master values to .NET
        05    02.11.09     GUNA       GetEnquirySource()    To return all ENQUIRY SOURCE master values to .NET
        06    02.11.09     GUNA       GetPostcode()         To return all POSTCODE master values to .NET
    }
    END.
  }
}

OBJECT Codeunit 71884 Education Calendar
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=EDU3.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE "Generate Calendar"@1102155000(EduCode@1102155006 : Code[20];AcaYear@1102155008 : Code[20]);
    VAR
      Date1@1102155005 : Record 2000000007;
      EduCalendarEntry@1102155004 : Record 71922;
      EduCalendarOffDaySetup@1102155003 : Record 71923;
      IntDay@1102155002 : Integer;
      PeriodHeader@1102155001 : Record 71510;
      EduCalendarHolidaySetup@1102155000 : Record 71924;
      EduCalendar@1102155007 : Record 71921;
    BEGIN
      EduCalendar.GET(EduCode);
      EduCalendarEntry.RESET;
      EduCalendarEntry.SETRANGE(EduCalendarEntry.Code,EduCode);
      IF EduCalendarEntry.FINDFIRST THEN BEGIN
        EduCalendarEntry.MODIFYALL("Off Day",FALSE);
        EduCalendarEntry.MODIFYALL(Holiday,FALSE);
        EduCalendarEntry.MODIFYALL("Description-1",'');
      END;

      Date1.RESET;
      Date1.SETFILTER("Period Type",'%1',Date1."Period Type"::Date);
      Date1.SETFILTER("Period Start",'%1..%2',EduCalendar."Start Date",EduCalendar."End Date");
      IF Date1.FINDFIRST THEN
        REPEAT
          EduCalendarEntry.SETFILTER(Code,'%1',EduCalendar.Code);
          EduCalendarEntry.SETFILTER(Date,'%1',Date1."Period Start");
          IF NOT EduCalendarEntry.FINDFIRST THEN BEGIN
            EduCalendarEntry.Code := EduCalendar.Code;
            EduCalendarEntry.Date := Date1."Period Start";
            EduCalendarEntry.Day := Date1."Period No.";
            EduCalendarEntry."Day Order" := 0;
            EduCalendarEntry.INSERT;
          END;
        UNTIL Date1.NEXT = 0;

      EduCalendarOffDaySetup.RESET;
      EduCalendarOffDaySetup.SETFILTER(Code,'%1',EduCalendar.Code);
      IF EduCalendarOffDaySetup.FINDFIRST THEN
        REPEAT
          EduCalendarEntry.RESET;
          EduCalendarEntry.SETFILTER(Code,'%1',EduCalendarOffDaySetup.Code);
          EduCalendarEntry.SETFILTER(Day,'%1',EduCalendarOffDaySetup.WeekDay);
          IF EduCalendarEntry.FINDFIRST THEN
            REPEAT
              EduCalendarEntry."Off Day" := TRUE;
              EduCalendarEntry.MODIFY;
            UNTIL EduCalendarEntry.NEXT = 0;
        UNTIL EduCalendarOffDaySetup.NEXT = 0;

      EduCalendarHolidaySetup.RESET;
      EduCalendarHolidaySetup.SETRANGE(Code,EduCalendar.Code);
      IF EduCalendarHolidaySetup.FINDFIRST THEN
        REPEAT
          EduCalendarEntry.RESET;
          EduCalendarEntry.SETRANGE(Code,EduCalendarHolidaySetup.Code);
          EduCalendarEntry.SETRANGE(Date,EduCalendarHolidaySetup."Holiday Date");
          IF EduCalendarEntry.FINDFIRST THEN
            REPEAT
              EduCalendarEntry.Holiday := TRUE;
              EduCalendarEntry."Description-1" := EduCalendarHolidaySetup.Description;
              EduCalendarEntry.MODIFY;
            UNTIL EduCalendarEntry.NEXT = 0;
        UNTIL EduCalendarHolidaySetup.NEXT = 0
    END;

    PROCEDURE AssignDayorder@1102155001();
    VAR
      PeriodHeader@1102155001 : Record 71510;
      EduCalendarEntry@1102155002 : Record 71922;
      IntDay@1102155003 : Integer;
    BEGIN
      PeriodHeader.FINDFIRST;
      IntDay := 1;
      EduCalendarEntry.RESET;
      EduCalendarEntry.SETRANGE("Off Day",FALSE);
      EduCalendarEntry.SETRANGE(Holiday,FALSE);
      IF EduCalendarEntry.FINDFIRST THEN
        REPEAT
          IF IntDay = PeriodHeader."Working Days Per Week" + 1 THEN
            IntDay := 1;
          EduCalendarEntry."Day Order" := IntDay;
          EduCalendarEntry.MODIFY;
          IntDay += 1;
        UNTIL EduCalendarEntry.NEXT = 0;
    END;

    BEGIN
    {
         No     Date         Sign          Trigger                     Description
      ------------------------------------------------------------------------------------------------------------------------------------
        01     29.12.09     ABK        GenerateCalender()          Function to generate the education calender based on edu setup.
    }
    END.
  }
}

OBJECT Codeunit 72000 Calendar Creation
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            HRPayrollSetup.GET(USERID);

            PayrollYear.RESET;
            PayrollYear.SETRANGE("Location Code",HRPayrollSetup."Location Code");
            PayrollYear.SETRANGE("Salary Plan Code",HRPayrollSetup."Salary Plan Code");
            PayrollYear.SETRANGE("Year Code",HRPayrollSetup."Salary Year Code");
            PayrollYear.SETRANGE("Year Type", PayrollYear."Year Type"::"Salary Year");
            PayrollYear.SETRANGE(Closed, FALSE);
            PayrollYear.SETRANGE(Created, TRUE);
            IF PayrollYear.FINDFIRST THEN BEGIN
              MESSAGE('Calendar Year \\Start Date => %1 \\End Date => %2',PayrollYear."Year Start Date",PayrollYear."Year End Date");

              IF NOT CONFIRM('Do you want Create Calendar for the Year',FALSE) THEN
                EXIT;

              StartDateTime := CURRENTDATETIME;
              "Create Calendar Year"(PayrollYear);
              "Weekly Off Updation"(PayrollYear);
              "Hoilday Updation"(PayrollYear);

              EndDateTime := CURRENTDATETIME;
              ElaspedTime := EndDateTime - StartDateTime;
              MESSAGE('Calendar Year Creation Completed \\ Starting Date & Time => %1 \\ Ending Date & Time => %2 \\ Time Elasped => %3',
              StartDateTime, EndDateTime, ElaspedTime);
              PayrollYear.Created := TRUE;
              PayrollYear.MODIFY;
            END ELSE
              ERROR('Calendar Year Already Generated..!!');
          END;

  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000001 : Record 72051;
      PayrollYear@1000000000 : Record 72054;
      CUGeneralFunctions@1000000008 : Codeunit 72008;
      EndDateTime@1000000006 : DateTime;
      StartDateTime@1000000007 : DateTime;
      ElaspedTime@1000000004 : Duration;

    LOCAL PROCEDURE "Create Calendar Year"@1000000000(PayrollYear@1000000008 : Record 72054) Status : Boolean;
    VAR
      Calendar@1000000006 : Record 72058;
      Date@1000000005 : Record 2000000007;
      RecordCnt@1000000000 : Integer;
    BEGIN
      CLEAR(RecordCnt);

      Calendar.RESET;
      Calendar.SETRANGE("Location Code",PayrollYear."Location Code");
      Calendar.SETRANGE("Salary Plan Code",PayrollYear."Salary Plan Code");
      Calendar.SETRANGE("Calendar Year",PayrollYear."Year Code");
      RecordCnt := Calendar.COUNT;

      IF RecordCnt > 0 THEN
        Calendar.DELETEALL;

      CUGeneralFunctions.OpenWindow('Calender Year Creation\\','Progress');

      Date.RESET;
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETRANGE("Period Start",PayrollYear."Year Start Date",PayrollYear."Year End Date");
      RecordCnt := Date.COUNT;
      IF Date.FINDFIRST THEN
        REPEAT
          Calendar.INIT;
          Calendar."Location Code" := PayrollYear."Location Code";
          Calendar."Salary Plan Code" := PayrollYear."Salary Plan Code";
          Calendar."Calendar Year" := PayrollYear."Year Code";
          Calendar.Date := Date."Period Start";
          Calendar.Description := Date."Period Name";
          Calendar."Day No." := Date."Period No.";
          Calendar."Week No." := ROUND((DATE2DMY(Calendar.Date,1) / 7),1,'>');
          IF Calendar.INSERT THEN;

          CUGeneralFunctions.UpdateWindow(FORMAT(Calendar.Date),RecordCnt);

        UNTIL Date.NEXT = 0;

      CUGeneralFunctions.CloseWindow;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "Weekly Off Updation"@1000000001(PayrollYear@1000000002 : Record 72054) Status : Boolean;
    VAR
      WeeklyOff@1000000005 : Record 72056;
      Calendar@1000000006 : Record 72058;
    BEGIN
      WeeklyOff.RESET;
      WeeklyOff.SETRANGE("Location Code",PayrollYear."Location Code");
      WeeklyOff.SETRANGE("Salary Plan Code", PayrollYear."Salary Plan Code");
      WeeklyOff.SETRANGE("Calendar Year",PayrollYear."Year Code");
      IF WeeklyOff.FINDFIRST THEN
        REPEAT
          IF WeeklyOff."Week Wise (Weekly Off)" = WeeklyOff."Week Wise (Weekly Off)"::"All Week" THEN BEGIN
            Calendar.RESET;
            Calendar.SETRANGE("Location Code",WeeklyOff."Location Code");
            Calendar.SETRANGE("Salary Plan Code", WeeklyOff."Salary Plan Code");
            Calendar.SETRANGE("Calendar Year",WeeklyOff."Calendar Year");
            Calendar.SETRANGE("Day No.",WeeklyOff."Day No.");
            IF Calendar.FINDFIRST THEN
              REPEAT
                Calendar.WeeklyOff := TRUE;
                Calendar."First Half (Weekly Off)" := WeeklyOff."First Half (Weekly Off)";
                Calendar."Second Half (Weekly Off)" := WeeklyOff."Second Half (Weekly Off)";
                Calendar."Non-Working Days" := TRUE;
                Calendar.MODIFY;
              UNTIL Calendar.NEXT = 0;
          END;

          IF WeeklyOff."Week Wise (Weekly Off)" <> WeeklyOff."Week Wise (Weekly Off)"::"All Week" THEN BEGIN
            Calendar.RESET;
            Calendar.SETRANGE("Location Code",WeeklyOff."Location Code");
            Calendar.SETRANGE("Salary Plan Code",WeeklyOff."Salary Plan Code");
            Calendar.SETRANGE("Calendar Year",WeeklyOff."Calendar Year");
            Calendar.SETRANGE("Day No.",WeeklyOff."Day No.");
            Calendar.SETRANGE("Week No.",WeeklyOff."Week Wise (Weekly Off)");
            IF Calendar.FINDFIRST THEN
              REPEAT
                Calendar.WeeklyOff := TRUE;
                Calendar."First Half (Weekly Off)" := WeeklyOff."First Half (Weekly Off)";
                Calendar."Second Half (Weekly Off)" := WeeklyOff."Second Half (Weekly Off)";
                Calendar."Non-Working Days" := TRUE;
                Calendar.MODIFY;
              UNTIL Calendar.NEXT = 0;
          END;
        UNTIL WeeklyOff.NEXT = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "Hoilday Updation"@1000000002(PayrollYear@1000000000 : Record 72054) Status : Boolean;
    VAR
      Hoildays@1000000002 : Record 72057;
      Calendar@1000000003 : Record 72058;
    BEGIN
      Calendar.RESET;
      Calendar.SETRANGE("Location Code",PayrollYear."Location Code");
      Calendar.SETRANGE("Salary Plan Code",PayrollYear."Salary Plan Code");
      Calendar.SETRANGE("Calendar Year",PayrollYear."Year Code");
      IF Calendar.FINDFIRST THEN
        REPEAT
          IF Hoildays.GET(Calendar.Date,PayrollYear."Location Code",
             PayrollYear."Salary Plan Code",PayrollYear."Year Code")
          THEN BEGIN
            Calendar.Description := Hoildays."Holiday Name" + ' - ' + Calendar.Description;
            Calendar.Holiday := TRUE;
            Calendar."First Half (Holiday)" := Hoildays."First Half (Holiday)";
            Calendar."Second Half (Holiday)" := Hoildays."Second Half (Holiday)";
            Calendar."Non-Working Days" := TRUE;
            Calendar."OT Applicable for the Day" := Hoildays."OT Applicable for the Day";
            Calendar.MODIFY;
          END;
        UNTIL Calendar.NEXT = 0;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 72001 Attendance Creation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            HRPayrollSetup.GET(USERID);

            PayrollYear.RESET;
            PayrollYear.SETRANGE("Location Code",HRPayrollSetup."Location Code");
            PayrollYear.SETRANGE("Salary Plan Code",HRPayrollSetup."Salary Plan Code");
            PayrollYear.SETRANGE("Year Code",HRPayrollSetup."Salary Year Code");
            PayrollYear.SETRANGE("Year Type",PayrollYear."Year Type"::"Salary Year");
            PayrollYear.SETRANGE(Closed,FALSE);
            PayrollYear.SETRANGE(Created,TRUE);
            IF PayrollYear.FINDFIRST THEN BEGIN
              MESSAGE('Daily Attendance Creation \\Start Date => %1 \\End Date => %2',
                PayrollYear."Year Start Date",PayrollYear."Year End Date");

              IF NOT CONFIRM('Do you want Create Daily Attendance for the Leave Year',FALSE) THEN
                EXIT;

              StartDateTime := CURRENTDATETIME;
              "Create Daily Attendance"(PayrollYear);
              EndDateTime := CURRENTDATETIME;
              ElaspedTime := EndDateTime - StartDateTime;

              MESSAGE('Daily Attendance Creation Completed \\ Starting Date & Time => %1 \\ Ending Date & Time => %2 \\ Time Elasped => %3',
                StartDateTime, EndDateTime, ElaspedTime);

              PayrollYear.Created := TRUE;
              PayrollYear.MODIFY;
            END ELSE
              ERROR('Daily Attendance Already Generated..!!');
          END;

  }
  CODE
  {
    VAR
      HRPayrollSetup@1000000008 : Record 72051;
      LocationHRPayrollSetup@1000000009 : Record 72052;
      PayrollYear@1000000000 : Record 72054;
      Employee@1102155001 : Record 5200;
      CUGeneralFunctions@1102155000 : Codeunit 72008;
      DateCheck@1000000001 : Date;
      EndDateTime@1000000006 : DateTime;
      StartDateTime@1000000007 : DateTime;
      ElaspedTime@1000000004 : Duration;

    PROCEDURE "Create Daily Attendance"@1000000004(PayrollYear@1000000000 : Record 72054) Status : Boolean;
    VAR
      Employee@1000000005 : Record 5200;
      PayrollYear1@1000000001 : Record 72054;
      PayrollMonthYear@1000000011 : Record 72055;
      Calendar@1000000006 : Record 72058;
      Shift@1000000009 : Record 72059;
      DailyAttendance@1000000008 : Record 72080;
      RecordCount@1000000002 : Integer;
    BEGIN
      Employee.RESET;
      Employee.SETRANGE("Salary Plan Code",PayrollYear."Salary Plan Code");
      Employee.SETRANGE("Location Code",PayrollYear."Location Code");
      Employee.SETRANGE(Status,Employee.Status::Active);
      Employee.SETRANGE("Attendance Generated",FALSE);
      IF Employee.FINDFIRST THEN BEGIN
        CUGeneralFunctions.OpenWindow('Daily Attedance Creation\\','Progress');
        RecordCount := Employee.COUNT;
        REPEAT
          "Mantory Field Checkup"(Employee."No.");
          Calendar.RESET;
          Calendar.SETRANGE("Location Code", PayrollYear."Location Code");
          Calendar.SETRANGE("Salary Plan Code",PayrollYear."Salary Plan Code");
          Calendar.SETRANGE(Date,PayrollYear."Year Start Date",PayrollYear."Year End Date");
          IF Calendar.FINDFIRST THEN
            REPEAT
              DailyAttendance.INIT;
              DailyAttendance."Location Code" := Employee."Location Code";
              DailyAttendance."Salary Plan Code" := Employee."Salary Plan Code";
              DailyAttendance."Employee No" := Employee."No.";
              DailyAttendance.Name := Employee."First Name" + ' ' + Employee.Initials;
              DailyAttendance."Attendance Date" := Calendar.Date;
              DailyAttendance."Day No." := Calendar."Day No.";
              DailyAttendance."Week No" := DATE2DWY(Calendar.Date,2);
              DailyAttendance.Month := DATE2DMY(Calendar.Date,2);
              DailyAttendance.Year := DATE2DMY(Calendar.Date,3);
              DailyAttendance."Employee Category" := Employee."Employee Category";
              DailyAttendance."Weekly Off Status" := Calendar.WeeklyOff;
              DailyAttendance."Holiday Status" := Calendar.Holiday;
              DailyAttendance."Non Working Day" := Calendar."Non-Working Days";

                 PayrollYear1.RESET;
                 PayrollYear1.SETRANGE("Location Code",    Employee."Location Code");
                 PayrollYear1.SETRANGE("Salary Plan Code", Employee."Salary Plan Code");
                 PayrollYear1.SETRANGE("Year Type",        PayrollYear1."Year Type"::"Leave Year");
                 PayrollYear1.SETRANGE(Closed,             FALSE);
                 IF PayrollYear1.FIND('-') THEN
                    DailyAttendance."Leave Year Code" := PayrollYear1."Year Code";

              PayrollYear.RESET;
              PayrollYear.SETRANGE("Location Code",Employee."Location Code");
              PayrollYear.SETRANGE("Salary Plan Code",Employee."Salary Plan Code");
              PayrollYear.SETRANGE("Year Type",PayrollYear."Year Type"::"Leave Year");
              PayrollYear.SETRANGE(Closed,FALSE);
              IF PayrollYear.FINDFIRST THEN
                DailyAttendance."Leave Year Code" := PayrollYear."Year Code";

              PayrollMonthYear.RESET;
              PayrollMonthYear.SETRANGE("Location Code",Employee."Location Code");
              PayrollMonthYear.SETRANGE("Salary Plan Code",Employee."Salary Plan Code");
              PayrollMonthYear.SETRANGE("Salary Start Date",DailyAttendance."Attendance Date");
              IF PayrollMonthYear.FINDFIRST THEN
                DailyAttendance."Salary Cyclic Code" := PayrollMonthYear."Salary Cyclic Code"
              ELSE
                DateCheck := PayrollMonthYear."Salary End Date";

              IF DailyAttendance."Attendance Date" <= DateCheck THEN
                DailyAttendance."Salary Cyclic Code" := PayrollMonthYear."Salary Cyclic Code";

              HRPayrollSetup.GET(USERID);
              LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

              IF NOT Calendar."Non-Working Days" THEN
                DailyAttendance."OT Approved Hrs" := LocationHRPayrollSetup."Over Time Max Minutes";

              IF NOT Calendar."Non-Working Days" THEN BEGIN
                 Shift.GET(Employee."Working Shift Code",Employee."Location Code",Employee."Salary Plan Code");
                  DailyAttendance."Shift Code" := Shift.Code;

                  IF LocationHRPayrollSetup."Default Attendance Type" = LocationHRPayrollSetup."Default Attendance Type"::" "
                  THEN BEGIN
                    DailyAttendance."In Time" := 0T;
                    DailyAttendance."Out Time" := 0T;
                  END
                  ELSE BEGIN
                    DailyAttendance."In Time" := Shift."First Half Starting Time";
                    DailyAttendance."Out Time" := Shift."Second Half Ending Time";
                  END;
                  DailyAttendance."Actual Time In" := Shift."First Half Starting Time";
                  DailyAttendance."Actual Time Out" := Shift."Second Half Ending Time";
                  DailyAttendance."Total Break Hours" := Shift."Break Total Hours";
                  DailyAttendance."First Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
                  DailyAttendance."Second Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
                  DailyAttendance."Actual Hrs" := LocationHRPayrollSetup."No of Hours Per Day";
                END;

                 IF ( Calendar."Non-Working Days" ) AND ( Calendar."First Half (Weekly Off)" = FALSE ) THEN
                    IF Shift.GET(Employee."Working Shift Code",Employee."Location Code",Employee."Salary Plan Code") THEN
                       BEGIN
                         DailyAttendance."Shift Code" := Shift.Code;
                      IF LocationHRPayrollSetup."Default Attendance Type" = LocationHRPayrollSetup."Default Attendance Type"::" "
                         THEN BEGIN
                              DailyAttendance."In Time"  := 0T;
                              DailyAttendance."Out Time" := 0T;
                            END
                         ELSE BEGIN
                              DailyAttendance."In Time"  := Shift."First Half Starting Time";
                              DailyAttendance."Out Time" := Shift."Second Half Ending Time";
                            END;
                         DailyAttendance."Actual Time In"  := Shift."First Half Starting Time";
                         DailyAttendance."Actual Time Out" := Shift."First Half Ending Time";
                         DailyAttendance."First Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
                         DailyAttendance."Actual Hrs"                 := LocationHRPayrollSetup."No of Hours in Half Day";
                  END;

              IF Calendar."First Half (Holiday)" THEN BEGIN
                DailyAttendance."In Time" := 0T;
                DailyAttendance."Out Time" := 0T;
                DailyAttendance."First Half Attendance Type" := DailyAttendance."First Half Attendance Type"::Holiday;
              END;

              IF Calendar."Second Half (Holiday)" THEN BEGIN
                DailyAttendance."In Time" := 0T;
                DailyAttendance."Out Time" := 0T;
                DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::Holiday;
              END;

              IF Calendar."First Half (Weekly Off)" THEN
                DailyAttendance."First Half Attendance Type" := DailyAttendance."First Half Attendance Type"::"Weekly Off";

              IF Calendar."Second Half (Weekly Off)" THEN
                DailyAttendance."Second Half Attendance Type" := DailyAttendance."First Half Attendance Type"::"Weekly Off";

      //----------- Not Joined Updating for Newly Joined Peoples.

              IF DailyAttendance."Attendance Date" < Employee."Employment Date" THEN BEGIN
                DailyAttendance."In Time" := 0T;
                DailyAttendance."Out Time" := 0T;
                DailyAttendance."First Half Attendance Type" := DailyAttendance."First Half Attendance Type"::"Not Joined";
                DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Not Joined";
                DailyAttendance."Non Working Day" := TRUE;
              END;
      //------------
                 IF ( Calendar."First Half (Weekly Off)" ) OR ( Calendar."Second Half (Weekly Off)" ) THEN
                      DailyAttendance."Weekly Off Status" := TRUE;

                 IF ( Calendar."First Half (Holiday)" ) OR ( Calendar."Second Half (Holiday)" ) THEN
                      DailyAttendance."Holiday Status" := TRUE;

                 IF ( DailyAttendance."Weekly Off Status" ) OR (DailyAttendance."Holiday Status") THEN
                      DailyAttendance."Non Working Day" := TRUE;

              DailyAttendance.VALIDATE("In Time");
              DailyAttendance.VALIDATE("Out Time");
              DailyAttendance.VALIDATE("First Half Attendance Type");
              DailyAttendance.VALIDATE("Second Half Attendance Type");

              IF DailyAttendance.INSERT THEN;

            UNTIL Calendar.NEXT = 0;

          "Create Monthly Attendance"(Employee,PayrollYear);

          Employee."Attendance Generated" := TRUE;

          IF Employee.MODIFY THEN;

          CUGeneralFunctions.UpdateWindow(Employee."No.",RecordCount);

        UNTIL Employee.NEXT = 0;
        CUGeneralFunctions.CloseWindow;
      END ELSE
        ERROR('No Records found..!!');
    END;

    LOCAL PROCEDURE "Create Monthly Attendance"@1000000003(Employee@1000000005 : Record 5200;PayrollYear@1000000001 : Record 72054);
    VAR
      PayrollMonthYear@1000000007 : Record 72055;
      MonthlyAttendance@1000000003 : Record 72082;
    BEGIN
      PayrollMonthYear.RESET;
      PayrollMonthYear.SETRANGE("Location Code",Employee."Location Code");
      PayrollMonthYear.SETRANGE("Salary Plan Code",Employee."Salary Plan Code");
      PayrollMonthYear.SETRANGE("Salary Year Code",PayrollYear."Year Code");
      IF PayrollMonthYear.FINDFIRST THEN
        REPEAT
          MonthlyAttendance.INIT;
          MonthlyAttendance."Location Code" := PayrollYear."Location Code";
          MonthlyAttendance."Salary Plan Code" := PayrollYear."Salary Plan Code";
          MonthlyAttendance."Salary Cycle Code" := PayrollMonthYear."Salary Cyclic Code";
          MonthlyAttendance.Year := PayrollMonthYear."Salary Year";
          MonthlyAttendance.Month := PayrollMonthYear."Salary Month";
          MonthlyAttendance."Payroll Start Date" := PayrollMonthYear."Salary Start Date";
          MonthlyAttendance."Payroll End Date" := PayrollMonthYear."Salary End Date";
          MonthlyAttendance."Employee No" := Employee."No.";
          MonthlyAttendance.Name := Employee."First Name" + ' ' + Employee.Initials;
          MonthlyAttendance."Employee Category" := Employee."Employee Category";
          IF MonthlyAttendance.INSERT THEN;
        UNTIL PayrollMonthYear.NEXT = 0;
    END;

    LOCAL PROCEDURE "Mantory Field Checkup"@1000000000(EmployeeNo@1000000001 : Code[20]);
    VAR
      Employee@1000000000 : Record 5200;
    BEGIN
      IF Employee.GET(EmployeeNo) THEN BEGIN
        Employee.TESTFIELD("Location Code");
        Employee.TESTFIELD("Salary Plan Code");
        Employee.TESTFIELD("No.");
        Employee.TESTFIELD("First Name");
      //  Employee.TESTFIELD(Initials);
        Employee.TESTFIELD("Employment Date");
        Employee.TESTFIELD("Working Shift Code");
      //  Employee.TESTFIELD("Birth Date");
        Employee.TESTFIELD("Employee Category");
      //  Employee.TESTFIELD("Division Code");
      //  Employee.TESTFIELD("Department Code");
      //  Employee.TESTFIELD("Section Code");
      //  Employee.TESTFIELD("Emp Posting Group");
      //  Employee.TESTFIELD("Pay Bus. Posting Group");
      END;
    END;

    PROCEDURE UpdateBlankTime@1102159000(LocationCode@1102159001 : Code[20];SalaryPlanCode@1102159002 : Code[20];SalaryCylicCode@1102159003 : Code[20];EmployeeNo@1102159004 : Code[20];StartDate@1102159005 : Date;EndDate@1102159006 : Date;EmployeeCategory@1102159007 : ' ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary');
    VAR
      DailyAttendance@1102159000 : Record 72080;
      RecordCount@1102159008 : Integer;
    BEGIN
      IF EmployeeNo = 'ALL' THEN
        CUGeneralFunctions.OpenWindow('Daily Attendance Update Blank Time\\','Progress');

      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      DailyAttendance.SETRANGE("Salary Cyclic Code",SalaryCylicCode);
      IF EmployeeNo <> 'ALL' THEN
        DailyAttendance.SETRANGE("Employee No",EmployeeNo);
      DailyAttendance.SETRANGE("Attendance Date",StartDate,EndDate);
      //DailyAttendance.SETRANGE("Employee Category", EmployeeCategory);
      DailyAttendance.SETRANGE("Attendance Verified",FALSE);
      DailyAttendance.SETRANGE("Manual Entry",FALSE);
      RecordCount := DailyAttendance.COUNT;
      IF DailyAttendance.FINDFIRST THEN
        REPEAT
          DailyAttendance."In Time" := 0T;
          DailyAttendance."Out Time" := 0T;
          DailyAttendance."Total Permission In Mins" := 0;
          DailyAttendance."Total OT In Mins" := 0;
          DailyAttendance."Late Coming Hours" := 0;
          DailyAttendance."Early Going Hours" := 0;
          DailyAttendance."Early OT Hours" := 0;
          DailyAttendance."Late OT Hours" := 0;
          DailyAttendance."Manual Entry" := FALSE;
           IF Employee.GET(DailyAttendance."Employee No") THEN
           IF DailyAttendance."Attendance Date" < Employee."Employment Date" THEN BEGIN
              DailyAttendance."In Time"  := 0T;
              DailyAttendance."Out Time" := 0T;
              DailyAttendance."Weekly Off Status" := FALSE;
              DailyAttendance."Holiday Status" := FALSE;
              DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Not Joined";
              DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Not Joined";
              DailyAttendance."Non Working Day" := TRUE;
           END;

           DailyAttendance.VALIDATE("First Half Attendance Type");
           DailyAttendance.VALIDATE("Second Half Attendance Type");
           DailyAttendance.VALIDATE("In Time");
           DailyAttendance.VALIDATE("Out Time");
           DailyAttendance.MODIFY;

          IF EmployeeNo = 'ALL' THEN
            CUGeneralFunctions.UpdateWindow(DailyAttendance."Employee No",RecordCount);

        UNTIL DailyAttendance.NEXT = 0;

      IF EmployeeNo = 'ALL' THEN
        CUGeneralFunctions.CloseWindow;
    END;

    PROCEDURE UpdateDefaultTime@1102159001(LocationCode@1102159008 : Code[20];SalaryPlanCode@1102159007 : Code[20];SalaryCylicCode@1102159006 : Code[20];EmployeeNo@1102159005 : Code[20];StartDate@1102159004 : Date;EndDate@1102159003 : Date;EmployeeCategory@1102159002 : ' ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary');
    VAR
      Shift@1102159001 : Record 72059;
      DailyAttendance@1102159000 : Record 72080;
      RecordCount@1102159009 : Integer;
    BEGIN
      CUGeneralFunctions.OpenWindow('Daily Attedance Update Default Time\\','Progress');

      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");
      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      DailyAttendance.SETRANGE("Salary Cyclic Code",SalaryCylicCode);
      IF EmployeeNo <> 'ALL' THEN
        DailyAttendance.SETRANGE("Employee No",EmployeeNo);
      DailyAttendance.SETRANGE("Attendance Date",StartDate,EndDate);
      DailyAttendance.SETRANGE("Employee Category",EmployeeCategory);
      DailyAttendance.SETRANGE("Attendance Verified",FALSE);
      DailyAttendance.SETRANGE("Manual Entry",FALSE);
      RecordCount := DailyAttendance.COUNT;
      IF DailyAttendance.FINDFIRST THEN
        REPEAT
          IF DailyAttendance."Shift Code" <> '' THEN BEGIN
            Shift.GET(DailyAttendance."Shift Code",LocationCode,SalaryPlanCode);
            DailyAttendance."Shift Code" := Shift.Code;
            DailyAttendance."In Time" := Shift."First Half Starting Time";
            DailyAttendance."Out Time" := Shift."Second Half Ending Time";
            DailyAttendance."Actual Time In" := Shift."First Half Starting Time";
            DailyAttendance."Actual Time Out" := Shift."Second Half Ending Time";
            DailyAttendance."Total Break Hours" := Shift."Break Total Hours";
            DailyAttendance."First Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
            DailyAttendance."Second Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
            DailyAttendance."Actual Hrs" := LocationHRPayrollSetup."No of Hours Per Day";
            IF DailyAttendance."Holiday Status" THEN BEGIN
               DailyAttendance."In Time" := 0T;
               DailyAttendance."Out Time" := 0T;
              END;
           END;

           IF Employee.GET(DailyAttendance."Employee No") THEN
           IF DailyAttendance."Attendance Date" < Employee."Employment Date" THEN BEGIN
              DailyAttendance."In Time"  := 0T;
              DailyAttendance."Out Time" := 0T;
              DailyAttendance."Weekly Off Status" := FALSE;
              DailyAttendance."Holiday Status" := FALSE;
              DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Not Joined";
              DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Not Joined";
              DailyAttendance."Non Working Day" := TRUE;
           END;

           DailyAttendance.VALIDATE("First Half Attendance Type");
           DailyAttendance.VALIDATE("Second Half Attendance Type");
           DailyAttendance.VALIDATE("In Time");
           DailyAttendance.VALIDATE("Out Time");
           DailyAttendance.MODIFY;
           CUGeneralFunctions.UpdateWindow(DailyAttendance."Employee No",RecordCount);
         UNTIL DailyAttendance.NEXT = 0;
      CUGeneralFunctions.CloseWindow();
    END;

    PROCEDURE UpdateShiftTime@1102159002(LocationCode@1102159007 : Code[20];SalaryPlanCode@1102159006 : Code[20];SalaryCylicCode@1102159005 : Code[20];EmployeeNo@1102159004 : Code[20];StartDate@1102159003 : Date;EndDate@1102159002 : Date;ShiftCode@1102159008 : Code[20];EmployeeCategory@1102159009 : ' ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary');
    VAR
      Shift@1102159000 : Record 72059;
      DailyAttendance@1102159001 : Record 72080;
      RecordCount@1102159010 : Integer;
    BEGIN
      CUGeneralFunctions.OpenWindow('Daily Attedance Update Shift Time\\','Progress');
      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      DailyAttendance.SETRANGE("Salary Cyclic Code",SalaryCylicCode);
      IF EmployeeNo <> 'ALL' THEN
        DailyAttendance.SETRANGE("Employee No",EmployeeNo);
      DailyAttendance.SETRANGE("Attendance Date",StartDate,EndDate);
      DailyAttendance.SETRANGE("Employee Category",EmployeeCategory);
      DailyAttendance.SETFILTER(Present, '=%1',1);
      DailyAttendance.SETRANGE("Manual Entry",FALSE);
      RecordCount := DailyAttendance.COUNT;
      IF DailyAttendance.FINDFIRST THEN
        Shift.GET(ShiftCode,LocationCode,SalaryPlanCode);
      REPEAT
        IF DailyAttendance."Shift Code" <> '' THEN BEGIN
          DailyAttendance."Shift Code" := Shift.Code;
          DailyAttendance."In Time" := Shift."First Half Starting Time";
          DailyAttendance."Out Time" := Shift."Second Half Ending Time";
          DailyAttendance."Actual Time In" := Shift."First Half Starting Time";
          DailyAttendance."Actual Time Out" := Shift."Second Half Ending Time";
          DailyAttendance."Total Break Hours" := Shift."Break Total Hours";
          DailyAttendance."First Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
          DailyAttendance."Second Half Attendance Type" := LocationHRPayrollSetup."Default Attendance Type";
          DailyAttendance."Actual Hrs" := LocationHRPayrollSetup."No of Hours Per Day";
          IF DailyAttendance."Holiday Status" THEN BEGIN
            DailyAttendance."In Time" := 0T;
            DailyAttendance."Out Time" := 0T;
          END;
         IF Employee.GET(DailyAttendance."Employee No") THEN
           IF DailyAttendance."Attendance Date" < Employee."Employment Date" THEN BEGIN
              DailyAttendance."In Time"  := 0T;
              DailyAttendance."Out Time" := 0T;
              DailyAttendance."Weekly Off Status" := FALSE;
              DailyAttendance."Holiday Status" := FALSE;
              DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Not Joined";
              DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Not Joined";
              DailyAttendance."Non Working Day" := TRUE;
           END;

           DailyAttendance.VALIDATE("First Half Attendance Type");
           DailyAttendance.VALIDATE("Second Half Attendance Type");
           DailyAttendance.VALIDATE("In Time");
           DailyAttendance.VALIDATE("Out Time");
           DailyAttendance.MODIFY;
           CUGeneralFunctions.UpdateWindow(DailyAttendance."Employee No",RecordCount);
          END;
      UNTIL DailyAttendance.NEXT = 0;
      CUGeneralFunctions.CloseWindow;
    END;

    PROCEDURE "Validate Attendance Time"@1102159005(LocationCode@1102159007 : Code[20];SalaryPlanCode@1102159006 : Code[20];SalaryCylicCode@1102159005 : Code[20];EmployeeNo@1102159004 : Code[20];StartDate@1102159003 : Date;EndDate@1102159002 : Date;EmployeeCategory@1102159009 : ' ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary');
    VAR
      DailyAttendance@1102159001 : Record 72080;
      RecordCount@1102159010 : Integer;
    BEGIN
      CUGeneralFunctions.OpenWindow('Update First Half Second Half Type\\','Progress');

      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      DailyAttendance.SETRANGE("Salary Cyclic Code",SalaryCylicCode);
      IF EmployeeNo <> 'ALL' THEN
        DailyAttendance.SETRANGE("Employee No",EmployeeNo);
      DailyAttendance.SETRANGE("Attendance Date",StartDate,EndDate);
      DailyAttendance.SETRANGE("Employee Category",EmployeeCategory);
      RecordCount := DailyAttendance.COUNT;
      IF DailyAttendance.FINDFIRST THEN
        REPEAT
           IF Employee.GET(DailyAttendance."Employee No") THEN
           IF DailyAttendance."Attendance Date" < Employee."Employment Date" THEN BEGIN
              DailyAttendance."In Time"  := 0T;
              DailyAttendance."Out Time" := 0T;
              DailyAttendance."Weekly Off Status" := FALSE;
              DailyAttendance."Holiday Status" := FALSE;
              DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Not Joined";
              DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Not Joined";
              DailyAttendance."Non Working Day" := TRUE;
           END;
           DailyAttendance.VALIDATE("First Half Attendance Type");
           DailyAttendance.VALIDATE("Second Half Attendance Type");
           DailyAttendance.VALIDATE("In Time");
           DailyAttendance.VALIDATE("Out Time");
           DailyAttendance.MODIFY;
           CUGeneralFunctions.UpdateWindow(DailyAttendance."Employee No",RecordCount);
       UNTIL DailyAttendance.NEXT = 0;

      CUGeneralFunctions.CloseWindow;
    END;

    PROCEDURE UpdateEmployeeShiftTime@1102159006(LocationCode@1102159007 : Code[20];SalaryPlanCode@1102159006 : Code[20];SalaryCylicCode@1102159005 : Code[20];EmployeeNo@1102159004 : Code[20];StartDate@1102159003 : Date;EndDate@1102159002 : Date;ShiftCode@1102159008 : Code[20];EmployeeCategory@1102159009 : ' ,Staff Permanent,Staff Temporary,Class IV Permanent,Class IV Temporary');
    VAR
      DailyAttendance@1102159001 : Record 72080;
      Shift@1102159000 : Record 72059;
      RecordCount@1102159010 : Integer;
    BEGIN
      CUGeneralFunctions.OpenWindow('Daily Attedance Update Shift Time\\','Progress');
      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      DailyAttendance.SETRANGE("Salary Cyclic Code",SalaryCylicCode);
      IF (EmployeeNo <> 'ALL') THEN
         DailyAttendance.SETRANGE("Employee No",       EmployeeNo);
      DailyAttendance.SETRANGE("Attendance Date",   StartDate,EndDate);
      DailyAttendance.SETRANGE("Employee Category", EmployeeCategory);
      RecordCount := DailyAttendance.COUNT;
      IF DailyAttendance.FIND('-') THEN
         REPEAT

           DailyAttendance."Shift Code" := ShiftCode;
           Shift.GET(DailyAttendance."Shift Code",LocationCode,SalaryPlanCode);
           IF DailyAttendance."Non Working Day" = FALSE THEN BEGIN
              DailyAttendance."Actual Time In"  := Shift."First Half Starting Time";
              DailyAttendance."Actual Time Out" := Shift."Second Half Ending Time";
              DailyAttendance."Total Break Hours"  := Shift."Break Total Hours";
           END;

           IF DailyAttendance."Non Working Day" THEN BEGIN
              DailyAttendance."Shift Code" := '';
           END;

           IF Employee.GET(DailyAttendance."Employee No") THEN
           IF DailyAttendance."Attendance Date" < Employee."Employment Date" THEN BEGIN
              DailyAttendance."In Time"  := 0T;
              DailyAttendance."Out Time" := 0T;
              DailyAttendance."Weekly Off Status" := FALSE;
              DailyAttendance."Holiday Status" := FALSE;
              DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Not Joined";
              DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Not Joined";
              DailyAttendance."Non Working Day" := TRUE;
           END;

           DailyAttendance.VALIDATE("First Half Attendance Type");
           DailyAttendance.VALIDATE("Second Half Attendance Type");
           DailyAttendance.VALIDATE("In Time");
           DailyAttendance.VALIDATE("Out Time");
           DailyAttendance.MODIFY;

           CUGeneralFunctions.UpdateWindow(DailyAttendance."Employee No",RecordCount);

       UNTIL DailyAttendance.NEXT = 0;
      CUGeneralFunctions.CloseWindow();
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72002 Salary Process
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF NOT CONFIRM('Do U Want (Payroll for the Year)',FALSE) THEN
              EXIT;
          END;

  }
  CODE
  {
    VAR
      Employee@1000000009 : Record 5200;
      CUGeneralFunctions@1102159000 : Codeunit 72008;
      LocationCode@1000000000 : Code[20];
      SalaryPlanCode@1000000013 : Code[20];
      SalaryCyclicCode@1000000012 : Code[20];
      PayStartDate@1000000011 : Date;
      PayEndDate@1000000010 : Date;
      TotalDaysinAMonth@1000000014 : Decimal;
      BaseTotalAmount@1102159001 : Decimal;
      ActualBaseTotalAmount@1000000001 : Decimal;
      PayableBaseTotalAmount@1000000002 : Decimal;
      TotalPayableDays@1102159002 : Decimal;
      TotalLOPDays@1102155001 : Decimal;
      FalseLastEffectiveDate@1102159003 : Date;
      NegativePay@1102155000 : Boolean;

    PROCEDURE "Process Monthly Salary"@1000000000(LLocationCode@1000000014 : Code[20];LSalaryPlanCode@1000000013 : Code[20];LSalaryCyclicCode@1000000012 : Code[20];LPayStartDate@1000000011 : Date;LPayEndDate@1000000010 : Date;LEmployeeNo@1000000000 : Code[20];LEmployeeType@1102159000 : ' ,Staff Permanent,Staff Temporary,Worker Permanent,Worker Temporary') LVStatus : Boolean;
    VAR
      DialogWindow@1000000004 : Dialog;
      CurrentRecord@1000000003 : Integer;
      RecordCount@1000000002 : Integer;
      RecordCnt@1000000007 : Integer;
    BEGIN
      CUGeneralFunctions.OpenWindow('Salary Process..\\','Progress');

      LocationCode := LLocationCode;
      SalaryPlanCode := LSalaryPlanCode;
      SalaryCyclicCode := LSalaryCyclicCode;
      PayStartDate := LPayStartDate;
      PayEndDate := LPayEndDate;
      TotalDaysinAMonth := (PayEndDate - PayStartDate) + 1;

      Employee.RESET;
      IF LEmployeeNo = 'ALL' THEN BEGIN
        Employee.SETRANGE("Location Code",LocationCode);
        Employee.SETRANGE("Salary Plan Code",SalaryPlanCode);
        IF LEmployeeType <> LEmployeeType::" " THEN
          Employee.SETRANGE("Employee Category",LEmployeeType);
      END ELSE
        BEGIN
          Employee.SETRANGE("Location Code",LocationCode);
          Employee.SETRANGE("Salary Plan Code",SalaryPlanCode);
          Employee.SETRANGE("No.",LEmployeeNo);
        END;

      IF Employee.FINDFIRST THEN BEGIN
        RecordCnt := Employee.COUNT;
        REPEAT

          IF NOT "Checking for Posted Employee" (Employee."No.") THEN
            IF Employee.Status = Employee.Status::Inactive THEN
              "Delete Current Employee"(Employee."No.")
            ELSE BEGIN
              "Delete Current Employee"(Employee."No.");
              "Weekly Off Creation"(Employee."No.");
              "Weekly Off / Holiday Cut"(Employee."No.");
              "Get Total Payable Days"(Employee."No.");
              "Get Last Effective Date"(Employee."No.");
      //      "Read Gross/Daily Pay Elements"(Employee."No.");
              "Read Employee Pay Elements"(Employee."No.");
              "Read Pay Loan Details"(Employee."No.");
              "Read Pay Emp Misc Deductions"(Employee."No.");
              "Update Pay Elements"(Employee."No.");
              "Layoff Calculation"(Employee."No.");
              "Credit Days Calculation"(Employee."No.");
              "Attendance Bonus Calculation" (Employee."No.");
              "Extra Wages Calculation"(Employee."No.");
              "OT Calculation"(Employee."No.");
              "PF Calculation"(Employee."No.");
              "ESI Calculation"(Employee."No.");
              "PT Calculation"(Employee."No.");
              "LIC Calculation"(Employee."No.");
              "Medical Reimbu Calculation"(Employee."No.");
              "Net Amount Calculation"(Employee."No.");
              IF NegativePay THEN
                "Net Amount Calculation"(Employee."No.");
              "First Second Amt Calculation"(Employee."No.");
              "Update Processed Flag"(Employee."No.");
              CUGeneralFunctions.UpdateWindow(Employee."No.",RecordCnt);
            END;
        UNTIL Employee.NEXT = 0;
      END;
      CUGeneralFunctions.CloseWindow;
    END;

    PROCEDURE "Read Employee Pay Elements"@1000000002(LEmployeeNo@1000000001 : Code[20]);
    VAR
      EmployeePayElements@1000000000 : Record 72078;
      ProcessedSalary@1000000004 : Record 72090;
    BEGIN
      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code",LocationCode);
      EmployeePayElements.SETRANGE("Salary Plan Code",SalaryPlanCode);
      EmployeePayElements.SETRANGE("Employee No",LEmployeeNo);
      EmployeePayElements.SETRANGE("Effective Date",FalseLastEffectiveDate);
      EmployeePayElements.SETRANGE("Excluded In Pay Slip", FALSE);
      IF EmployeePayElements.FINDFIRST THEN
        REPEAT
          CLEAR(ProcessedSalary);
          ProcessedSalary."Employee No" := LEmployeeNo;
          ProcessedSalary."Pay Element Code" := EmployeePayElements."Pay Element Code";
          ProcessedSalary."Paid Category" := 0;
          ProcessedSalary."Pay Type" := EmployeePayElements."Pay Type";
          ProcessedSalary."Fixed / Percent" := EmployeePayElements."Fixed/Percent";
          ProcessedSalary."Percentage (%)" := EmployeePayElements."Percent (%)";
          ProcessedSalary."Actual Amount" := EmployeePayElements.Amount;
          IF ProcessedSalary."Percentage (%)" > 0 THEN
            ProcessedSalary."Actual Amount" := ProcessedSalary."Percentage (%)";
          "Insert Pay Processed Salary"(ProcessedSalary);
        UNTIL EmployeePayElements.NEXT = 0;
    END;

    PROCEDURE "Read Pay Loan Details"@1000000003(LEmployeeNo@1000000000 : Code[20]);
    VAR
      ProcessedSalary@1000000002 : Record 72090;
      EmployeeLoan@1000000003 : Record 72087;
      EmployeeLoanDetails@1000000004 : Record 72088;
      EmployeeLoans@1102155000 : Record 72120;
    BEGIN
      EmployeeLoan.RESET;
      EmployeeLoan.SETRANGE("Location Code",LocationCode);
      EmployeeLoan.SETRANGE("Salary Plan Code",SalaryPlanCode);
      EmployeeLoan.SETRANGE("Employee No",LEmployeeNo);
      EmployeeLoan.SETRANGE("No Deduction Request", FALSE);
      IF EmployeeLoan.FINDFIRST THEN BEGIN
        EmployeeLoanDetails.RESET;
        EmployeeLoanDetails.SETRANGE("Location Code",LocationCode);
        EmployeeLoanDetails.SETRANGE("Salary Plan Code",SalaryPlanCode);
        EmployeeLoanDetails.SETRANGE("Employee No",LEmployeeNo);
        EmployeeLoanDetails.SETRANGE("Salary Process Date",PayEndDate);
        IF EmployeeLoanDetails.FINDFIRST THEN
          REPEAT
            CLEAR(ProcessedSalary);
            ProcessedSalary."Employee No" := LEmployeeNo;
            ProcessedSalary."Pay Element Code" := EmployeeLoanDetails."Loan Code";
            ProcessedSalary."Paid Category" := 0;
            ProcessedSalary."Pay Type" := 1;
            ProcessedSalary."Actual Amount" := EmployeeLoanDetails."EMI Amount";
            "Insert Pay Processed Salary"(ProcessedSalary);
          UNTIL EmployeeLoanDetails.NEXT = 0;
      END;
      {
      EmployeeLoans.RESET;
      EmployeeLoans.SETRANGE("Location Code",LocationCode);
      EmployeeLoans.SETRANGE("Salary Plan Code",SalaryPlanCode);
      EmployeeLoans.SETRANGE("Employee No",LEmployeeNo);
      EmployeeLoans.SETRANGE("No Deduction Request",FALSE);
      EmployeeLoans.SETRANGE(Completed,FALSE);
      IF EmployeeLoans.FINDFIRST THEN
        REPEAT
          EmployeeLoans.ValidateBalanceAmount;
          IF EmployeeLoans."Loan Balance Amount" > 0 THEN BEGIN
            IF EmployeeLoans."Deduction Amount" > EmployeeLoans."Loan Balance Amount" THEN
              EmployeeLoans."Deduction Amount" := EmployeeLoans."Loan Balance Amount";
            ProcessedSalary."Employee No" := LEmployeeNo;
            ProcessedSalary."Pay Element Code" := EmployeeLoans."Loan Code";
            ProcessedSalary."Paid Category" := 0;
            ProcessedSalary."Pay Type" := 1;
            ProcessedSalary."Actual Amount" += EmployeeLoans."Deduction Amount";
            ProcessedSalary."Loan Id" := EmployeeLoans."Loan Id";
            IF ProcessedSalary."Actual Amount" > 0 THEN
              "Insert Pay Processed Salary"(ProcessedSalary);
          END;

          IF EmployeeLoans."Loan Balance Amount" <= 0 THEN BEGIN
            EmployeeLoans.Completed := TRUE;
            EmployeeLoans.MODIFY;
          END;
        UNTIL EmployeeLoans.NEXT = 0;
      }
    END;

    PROCEDURE "Read Pay Emp Misc Deductions"@1000000004(LEmployeeNo@1000000004 : Code[20]);
    VAR
      MiscAddDeductions@1000000002 : Record 72089;
      ProcessedSalary@1000000003 : Record 72090;
    BEGIN
      MiscAddDeductions.RESET;
      MiscAddDeductions.SETRANGE("Location Code",LocationCode);
      MiscAddDeductions.SETRANGE("Salary Plan Code",SalaryPlanCode);
      MiscAddDeductions.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MiscAddDeductions.SETRANGE("Employee No",LEmployeeNo);
      IF MiscAddDeductions.FINDFIRST THEN
        REPEAT
          CLEAR(ProcessedSalary);
          ProcessedSalary."Employee No" := LEmployeeNo;
          ProcessedSalary."Pay Element Code" := MiscAddDeductions."Pay Element Code";
          ProcessedSalary."Paid Category" := MiscAddDeductions."Paid Category";
          ProcessedSalary."Pay Type" := MiscAddDeductions."Pay Type";
          ProcessedSalary."Actual Amount" := MiscAddDeductions.Amount;
          "Insert Pay Processed Salary"(ProcessedSalary);
        UNTIL MiscAddDeductions.NEXT = 0;
    END;

    PROCEDURE "Insert Pay Processed Salary"@1000000001(ProcessedSalary@1000000005 : Record 72090);
    VAR
      LProcessedSalary@1000000004 : Record 72090;
    BEGIN
      ProcessedSalary."Location Code" := LocationCode;
      ProcessedSalary."Salary Plan Code" := SalaryPlanCode;
      ProcessedSalary."Salary Cycle Code" := SalaryCyclicCode;
      ProcessedSalary."Payroll Start Date" := PayStartDate;
      ProcessedSalary."Payroll End Date" := PayEndDate;
      ProcessedSalary.Year := DATE2DMY(PayEndDate,3);
      ProcessedSalary.Month := DATE2DMY(PayEndDate,2);
      ProcessedSalary."Total Days in a Month" := TotalDaysinAMonth;
      ProcessedSalary."Employee Category" := Employee."Employee Category";
      ProcessedSalary."Salary Processed" := TRUE;

      IF ProcessedSalary."Pay Element Code" <> '' THEN
        IF ProcessedSalary."Actual Amount" > 0 THEN BEGIN
          LProcessedSalary.INIT;
          ProcessedSalary."Actual Amount" := "General Rounding Off"(ProcessedSalary."Actual Amount");
          ProcessedSalary."Payable Amount" := "General Rounding Off"(ProcessedSalary."Payable Amount");
          LProcessedSalary := ProcessedSalary;
          IF LProcessedSalary.INSERT THEN;
        END;
    END;

    PROCEDURE "Update Pay Elements"@1000000005(LEmployeeNo@1000000005 : Code[20]);
    VAR
      HRPayrollSetup@1000000001 : Record 72051;
      LocationHRPayrollSetup@1000000002 : Record 72052;
      ProcessedSalary@1000000000 : Record 72090;
      PayElements@1000000003 : Record 72060;
      MonthlyAttendance@1000000004 : Record 72082;
      TempNoDays@1102155000 : Decimal;
    BEGIN
      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",LEmployeeNo);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
      //-- Updating of Pay Elements.

          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
            ProcessedSalary."Paid Category" := PayElements."Paid Category";
            ProcessedSalary."Pay Type" := PayElements."Pay Type";
            ProcessedSalary."Fixed / Percent" := PayElements."Fixed/Percent";
            ProcessedSalary."Amount Calculation Type" := PayElements."Amount Calculation Type";
            ProcessedSalary."Base Pay Elements" := PayElements."Base Pay Elements";
            ProcessedSalary."Included In Pay Slip" := PayElements."Included In Pay Slip";
            ProcessedSalary."Sorting Order" := PayElements."Sorting Order";
            ProcessedSalary."Payment Type" := PayElements."Payment Type";
      //      ProcessedSalary."Paid Days" := TotalPayableDays;

      // - Judes Manual Lop Days Calculation.
            ProcessedSalary."Paid Days" := (TotalPayableDays - TotalLOPDays);

            IF ProcessedSalary."Total Days in a Month" = ProcessedSalary."Paid Days" THEN
              ProcessedSalary."Payable Amount" := ProcessedSalary."Actual Amount";

            IF ProcessedSalary."Total Days in a Month" <> ProcessedSalary."Paid Days" THEN BEGIN
              ProcessedSalary."Payable Amount" :=
              ((ProcessedSalary."Actual Amount" /
              ProcessedSalary."Total Days in a Month") *
              ProcessedSalary."Paid Days");

              IF ProcessedSalary."Amount Calculation Type" = ProcessedSalary."Amount Calculation Type"::"Full Amount" THEN
                ProcessedSalary."Payable Amount" := ProcessedSalary."Actual Amount";

             ProcessedSalary."Actual Amount" := "General Rounding Off"(ProcessedSalary."Actual Amount");
             ProcessedSalary."Payable Amount" := "General Rounding Off"(ProcessedSalary."Payable Amount");
            END;
            ProcessedSalary.MODIFY;

        UNTIL ProcessedSalary.NEXT = 0;

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",LEmployeeNo);
      ProcessedSalary.SETFILTER("Fixed / Percent", '%1', ProcessedSalary."Fixed / Percent"::Percent);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
          "Calculate Percentage"(LEmployeeNo,ProcessedSalary."Base Pay Elements");
          ProcessedSalary."Actual Amount" := ActualBaseTotalAmount * ProcessedSalary."Percentage (%)" / 100;
          ProcessedSalary."Actual Amount" := "General Rounding Off"(ProcessedSalary."Actual Amount");
          ProcessedSalary."Payable Amount" := PayableBaseTotalAmount * ProcessedSalary."Percentage (%)" / 100;
          ProcessedSalary."Payable Amount" := "General Rounding Off"(ProcessedSalary."Payable Amount");
          ProcessedSalary.MODIFY;
        UNTIL ProcessedSalary.NEXT = 0;
    END;

    PROCEDURE "Calculate Percentage"@1000000011(LEmployeeNo@1000000003 : Code[20];LBasePayElement@1000000000 : Text[250]);
    VAR
      ProcessedSalary@1000000002 : Record 72090;
      PayElements@1000000001 : Record 72060;
    BEGIN
      CLEAR(ActualBaseTotalAmount);
      CLEAR(PayableBaseTotalAmount);
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",LEmployeeNo);
      ProcessedSalary.SETFILTER("Pay Element Code", LBasePayElement);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
          ActualBaseTotalAmount += ProcessedSalary."Actual Amount";
          PayableBaseTotalAmount += ProcessedSalary."Payable Amount";
        UNTIL ProcessedSalary.NEXT = 0;
    END;

    PROCEDURE "Net Amount Calculation"@1000000006(LEmployeeNo@1000000005 : Code[20]);
    VAR
      MonthlyAttendance@1000000000 : Record 72082;
      HRPayrollSetup@1000000004 : Record 72051;
      LocationHRPayrollSetup@1000000002 : Record 72052;
      RoundingType@1000000001 : Code[1];
    BEGIN
      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Employee No",LEmployeeNo);
      MonthlyAttendance.SETRANGE("Payroll End Date",PayEndDate);
      IF MonthlyAttendance.FINDFIRST THEN BEGIN
        IF Employee.GET(MonthlyAttendance."Employee No") THEN BEGIN
          MonthlyAttendance."Pay Method" := Employee."Payment Method";
          MonthlyAttendance.Blocked := Employee.Blocked;
          MonthlyAttendance."Stop Payment" := Employee."Stop Payment";

          IF Employee."Payment Method" = Employee."Payment Method"::Cash THEN BEGIN
            MonthlyAttendance."Account Type" := MonthlyAttendance."Account Type"::"G/L Account";
            MonthlyAttendance."Account No." := LocationHRPayrollSetup."Cash Account GL Code";
            MonthlyAttendance."Pay Method" := Employee."Payment Method"::Cash;
          END;

          IF Employee."Payment Method" IN [Employee."Payment Method"::Cheque,
             Employee."Payment Method"::"Bank Transfer"]
          THEN BEGIN
            MonthlyAttendance."Account Type" := MonthlyAttendance."Account Type"::"Bank Account";
            MonthlyAttendance."Account No." := LocationHRPayrollSetup."Bank Account GL Code";
            MonthlyAttendance."Pay Method" := Employee."Payment Method"::"Bank Transfer";
          END;
        END;

        MonthlyAttendance.CALCFIELDS("Actual Gross Amount");
        MonthlyAttendance.CALCFIELDS("Actual Reimburesment Amount");
        MonthlyAttendance.CALCFIELDS("Actual Deduction Amount");
        MonthlyAttendance.CALCFIELDS("Payable Gross Amount");
        MonthlyAttendance.CALCFIELDS("Payable Reimburesment Amount");
        MonthlyAttendance.CALCFIELDS("Payable Deduction Amount");

        MonthlyAttendance."Actual Net Amount" :=
          (MonthlyAttendance."Actual Gross Amount" +
           MonthlyAttendance."Actual Reimburesment Amount" -
           MonthlyAttendance."Actual Deduction Amount");

        MonthlyAttendance."Payable Net Amount" :=
        (MonthlyAttendance."Payable Gross Amount" +
           MonthlyAttendance."Payable Reimburesment Amount" -
           MonthlyAttendance."Payable Deduction Amount");

        NegativePay := FALSE;
        IF MonthlyAttendance."Payable Net Amount" < 0 THEN BEGIN
          MonthlyAttendance."Payable Net Amount" := 0;
          MonthlyAttendance."Negative Pay" := TRUE;
          "Negative Pay Checking"(LEmployeeNo);
          NegativePay := TRUE;
        END;
      //--------------- HR Setup Rounding Off ------------------
        IF LocationHRPayrollSetup."Net Salary Rounding Type" = LocationHRPayrollSetup."Net Salary Rounding Type"::Nearest THEN
          RoundingType := '=';
        IF LocationHRPayrollSetup."Net Salary Rounding Type" = LocationHRPayrollSetup."Net Salary Rounding Type"::Up THEN
          RoundingType := '>';
        IF LocationHRPayrollSetup."Net Salary Rounding Type" = LocationHRPayrollSetup."Net Salary Rounding Type"::Down THEN
          RoundingType := '<';

        MonthlyAttendance."Payable Net Amount" :=
          "Rounding Off"(MonthlyAttendance."Payable Net Amount",
          LocationHRPayrollSetup."Net Salary Rounding Amount",RoundingType);
        MonthlyAttendance.MODIFY;
      END;
    END;

    PROCEDURE "Layoff Calculation"@1102159001(LEmployeeNo@1000000000 : Code[20]);
    VAR
      LocationHRPayrollSetup@1000000006 : Record 72052;
      PayElements@1000000002 : Record 72060;
      ProcessedSalary@1000000001 : Record 72090;
      MonthlyAttendance@1000000007 : Record 72082;
      LayoffDaysGrossEarnings@1102159002 : Decimal;
      LayoffDaysAmount@1102159001 : Decimal;
      TotalLayoffDays@1102159000 : Decimal;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
        IF NOT Employee."Layoff Applicable" THEN
          EXIT;

      IF NOT PayElements.GET('LAYOFF',LocationCode,SalaryPlanCode) THEN
        ERROR('%1','LAYOFF Pay Element not Defined in the Pay Element Card');

      CLEAR(LayoffDaysAmount);
      CLEAR(LayoffDaysGrossEarnings);
      CLEAR(TotalLayoffDays);
      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",LEmployeeNo);
      IF MonthlyAttendance.FINDFIRST THEN BEGIN
        MonthlyAttendance.CALCFIELDS("Lay Off");
        IF MonthlyAttendance."Lay Off" <> 0 THEN
          TotalLayoffDays := MonthlyAttendance."Lay Off" / 2;
      END;

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
          IF PayElements."Eligible for Layoff" THEN
            LayoffDaysGrossEarnings += ProcessedSalary."Actual Amount";
        UNTIL ProcessedSalary.NEXT = 0;
      IF LayoffDaysGrossEarnings > 0 THEN BEGIN
        LayoffDaysAmount := ((LayoffDaysGrossEarnings / TotalDaysinAMonth) *
            TotalLayoffDays);
        LayoffDaysAmount := ROUND(LayoffDaysAmount,1,'=');
        LayoffDaysGrossEarnings := "General Rounding Off"(LayoffDaysGrossEarnings);
      END;

      PayElements.GET('LAYOFF',LocationCode,SalaryPlanCode);
      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No" := LEmployeeNo;
      ProcessedSalary."Pay Element Code" := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category" := PayElements."Paid Category";
      ProcessedSalary."Pay Type" := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent" := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order" := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements" := '';
      ProcessedSalary."PF / ESI / PT Gross Earnings" := LayoffDaysGrossEarnings;
      ProcessedSalary."Paid Days" := MonthlyAttendance."Lay Off";
      ProcessedSalary."Actual Amount" := LayoffDaysAmount;
      ProcessedSalary."Payable Amount" := LayoffDaysAmount;
      ProcessedSalary."Payment Type" := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "Credit Days Calculation"@1000000017(LEmployeeNo@1000000000 : Code[20]);
    VAR
      LocationHRPayrollSetup@1000000006 : Record 72052;
      PayElements@1000000002 : Record 72060;
      ProcessedSalary@1000000001 : Record 72090;
      CreditDaysGrossEarnings@1102159002 : Decimal;
      CreditDaysAmount@1102159001 : Decimal;
      CreditDays@1102159000 : Decimal;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
        IF NOT Employee."Credit Days Applicable" THEN
          EXIT;

      IF NOT PayElements.GET('CREDIT DAYS',LocationCode,SalaryPlanCode) THEN
        ERROR('%1','CREDIT DAYS Pay Element not Defined in the Pay Element Card');

      CLEAR(CreditDaysAmount);
      CLEAR(CreditDaysGrossEarnings);
      CLEAR(CreditDays);
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
          IF PayElements."Eligible for Credit Days" THEN
            CreditDaysGrossEarnings += ProcessedSalary."Actual Amount";
        UNTIL ProcessedSalary.NEXT = 0;

      LocationHRPayrollSetup.GET(LocationCode);

      IF ProcessedSalary."Paid Days" > LocationHRPayrollSetup."Minimum Attendance Credit Days" THEN BEGIN
        CreditDays := LocationHRPayrollSetup."Eligible Days for Credit Days";
        CreditDaysAmount := ((CreditDaysGrossEarnings / ProcessedSalary."Total Days in a Month") *
          LocationHRPayrollSetup."Eligible Days for Credit Days");

        CreditDaysAmount := ROUND(CreditDaysAmount,1,'=');
      END;

      CreditDaysGrossEarnings := "General Rounding Off"(CreditDaysGrossEarnings);

      PayElements.GET('CREDIT DAYS',LocationCode,SalaryPlanCode);

      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No" := LEmployeeNo;
      ProcessedSalary."Pay Element Code" := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category" := PayElements."Paid Category";
      ProcessedSalary."Pay Type" := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent" := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order" := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements" := '';
      ProcessedSalary."PF / ESI / PT Gross Earnings" := CreditDaysGrossEarnings;
      ProcessedSalary."Paid Days" := CreditDays;
      ProcessedSalary."Actual Amount" := CreditDaysAmount;
      ProcessedSalary."Payable Amount" := CreditDaysAmount;
      ProcessedSalary."Payment Type" := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "Attendance Bonus Calculation"@1000000018(LEmployeeNo@1000000000 : Code[20]);
    VAR
      HRPayrollSetup@1000000005 : Record 72051;
      LocationHRPayrollSetup@1000000003 : Record 72052;
      PayElements@1000000002 : Record 72060;
      ProcessedSalary@1000000001 : Record 72090;
      AttendanceBonusAmount@1000000008 : Decimal;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
        IF NOT Employee."Attendance Bonus Applicable" THEN
          EXIT;

      IF NOT PayElements.GET('ATTE BONUS',LocationCode,SalaryPlanCode) THEN
        ERROR('%1','ATTE BONUS Pay Element not Defined in the Pay Element Card');

      CLEAR(AttendanceBonusAmount);

      IF TotalDaysinAMonth = TotalPayableDays THEN
        AttendanceBonusAmount := Employee."Attendance Bonus Amount";

      PayElements.GET('ATTE BONUS',LocationCode,SalaryPlanCode);
      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No" := LEmployeeNo;
      ProcessedSalary."Pay Element Code" := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category" := PayElements."Paid Category";
      ProcessedSalary."Pay Type" := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent" := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order" := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements" := '';
      ProcessedSalary."Paid Days" := TotalPayableDays;
      ProcessedSalary."Actual Amount" := AttendanceBonusAmount;
      ProcessedSalary."Payable Amount" := AttendanceBonusAmount;
      ProcessedSalary."PF / ESI / PT Gross Earnings" := 0;
      ProcessedSalary."Payment Type" := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "PF Calculation"@1000000007(LEmployeeNo@1000000018 : Code[20]);
    VAR
      PayElements@1000000003 : Record 72060;
      PFSetup@1000000004 : Record 72064;
      ProcessedSalary@1000000006 : Record 72090;
      HRPayrollSetup@1000000017 : Record 72051;
      MonthlyAttendance@1102159000 : Record 72082;
      LastEffectiveDate@1000000005 : Date;
      PFGrossEarnings@1000000008 : Decimal;
      EPSGrossEarnings@1000000009 : Decimal;
      EmployeeVPFAmount@1000000010 : Decimal;
      EmployeePFAmount@1000000011 : Decimal;
      EmployerPFAmount@1000000012 : Decimal;
      EmployerEPSAmount@1000000013 : Decimal;
      PFAdminChargesAmount@1000000014 : Decimal;
      PFEDLIAmount@1000000015 : Decimal;
      PFRIFAAmount@1000000016 : Decimal;
      RoundingType@1000000007 : Text[2];
      EPFAmount@1102159001 : Decimal;
    BEGIN
      //------ PF Calculation
      //------ Effective Date / PF Gross Salary Limit / EPS Gross Salary Limit
      //------ Employee PF % / Employee VPF % / Employer PF % Employer EPS %
      //------ PF Admin Charges % / PF EDLI % / PF RIFA % / PF Rounding Amount

      IF NOT Employee."PF Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('PF',LocationCode,SalaryPlanCode) THEN
        ERROR('%1','PF Pay Element not Defined in the Pay Element Card');

      IF Employee."VPF Applicable" THEN
        IF NOT PayElements.GET('VPF',LocationCode,SalaryPlanCode) THEN
          ERROR('%1','VPF Pay Element not Defined in the Pay Element Card');

      CLEAR(PFGrossEarnings);
      CLEAR(EPSGrossEarnings);
      PFSetup.RESET;
      PFSetup.SETRANGE("Location Code", LocationCode);
      PFSetup.SETRANGE("Salary Plan Code", SalaryPlanCode);
      PFSetup.SETFILTER("Effective Date", '<=%1', PayEndDate);
      IF NOT PFSetup.FINDLAST THEN
        MESSAGE('%1','PF Setup Records not found');

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No", LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
          IF PayElements."Eligible for PF" THEN
            PFGrossEarnings += ProcessedSalary."Payable Amount";
        UNTIL ProcessedSalary.NEXT = 0;

      PFGrossEarnings := "General Rounding Off"(PFGrossEarnings);
      EPSGrossEarnings := "General Rounding Off"(PFGrossEarnings);

      IF PFSetup."PF Rounding Type" = PFSetup."PF Rounding Type"::Nearest THEN
        RoundingType := '=';
      IF PFSetup."PF Rounding Type" = PFSetup."PF Rounding Type"::Up THEN
        RoundingType := '>';
      IF PFSetup."PF Rounding Type" = PFSetup."PF Rounding Type"::Down THEN
        RoundingType := '<';

      //---------------------------------------------------------------------------------------------------//

      //----- PF Employee Contribution /  PF Employer Contribution / Pension Amount -----///

      IF Employee."VPF Applicable" THEN
        PFSetup."Employee VPF ( Employee) %" := Employee."Employee VPF ( Employee) %";

      IF PFGrossEarnings <= PFSetup."PF Gross Salary Limit" THEN BEGIN
        EmployeeVPFAmount := (PFGrossEarnings * PFSetup."Employee VPF ( Employee) %") / 100;
        EmployeePFAmount := (PFGrossEarnings * PFSetup."Employee PF (Employee) %") / 100;
      END
      ELSE BEGIN
        EmployeeVPFAmount := (PFGrossEarnings * PFSetup."Employee VPF ( Employee) %") / 100;
        EmployeePFAmount := (PFGrossEarnings * PFSetup."Employee PF (Employee) %") / 100;
      END;

      IF EPSGrossEarnings <= PFSetup."EPS Gross Salary Limit" THEN BEGIN
        EPFAmount := ((EPSGrossEarnings * PFSetup."Employee PF (Employee) %") / 100);
        EPFAmount := "Rounding Off"(EPFAmount, PFSetup."PF Rounding Amount",RoundingType);
        EmployerPFAmount := EPSGrossEarnings * (PFSetup."Employer PF (Company) %" / 100);
        EmployerPFAmount := "Rounding Off"(EmployerPFAmount, PFSetup."PF Rounding Amount",RoundingType);
        EmployerEPSAmount := EPFAmount - EmployerPFAmount;
      END
      ELSE BEGIN
        EPSGrossEarnings := PFSetup."EPS Gross Salary Limit";
        EPFAmount := ((EPSGrossEarnings * PFSetup."Employee PF (Employee) %") / 100);
        EPFAmount := "Rounding Off"(EPFAmount, PFSetup."PF Rounding Amount",RoundingType);
        EmployerPFAmount := (EPSGrossEarnings * ( PFSetup."Employer PF (Company) %" / 100));
        EmployerPFAmount := "Rounding Off"(EmployerPFAmount, PFSetup."PF Rounding Amount",RoundingType);
        EmployerEPSAmount := (EPFAmount - EmployerPFAmount);
      END;

      //- New Modification on /14/07/11

      EmployerPFAmount := (EmployeePFAmount - EmployerEPSAmount);

      //--------------------------PF Admin Charges-----------------------------------------//
      PFAdminChargesAmount := (PFGrossEarnings * PFSetup."PF Admin Charges %") / 100;
      //--------------------------EDLI Charges---------------------------------------------//
      PFEDLIAmount := (PFGrossEarnings * PFSetup."PF EDLI %") / 100;
      //--------------------------RIFA Charges---------------------------------------------//
      PFRIFAAmount := (PFGrossEarnings * PFSetup."PF RIFA %") / 100;
      //-----------------------------------------------------------------------------------//

      EmployeeVPFAmount := "Rounding Off"(EmployeeVPFAmount,PFSetup."PF Rounding Amount",RoundingType);
      EmployeePFAmount := "Rounding Off"(EmployeePFAmount, PFSetup."PF Rounding Amount",RoundingType);
      EmployerEPSAmount := "Rounding Off"(EmployerEPSAmount,PFSetup."PF Rounding Amount",RoundingType);
      EmployerPFAmount := "Rounding Off"(EmployerPFAmount, PFSetup."PF Rounding Amount",RoundingType);

      PFAdminChargesAmount := "Rounding Off"(PFAdminChargesAmount,PFSetup."PF Rounding Amount",RoundingType);
      PFEDLIAmount := "Rounding Off"(PFEDLIAmount, PFSetup."PF Rounding Amount",RoundingType);
      PFRIFAAmount := "Rounding Off"(PFRIFAAmount, PFSetup."PF Rounding Amount",RoundingType);

      PayElements.GET('PF',LocationCode,SalaryPlanCode);
      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No"        := LEmployeeNo;
      ProcessedSalary."Pay Element Code"   := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category"      := PayElements."Paid Category";
      ProcessedSalary."Pay Type"           := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent"    := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order"      := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements"  := '';
      ProcessedSalary."Paid Days"          := TotalPayableDays;
      ProcessedSalary."Actual Amount"      := EmployeePFAmount;
      ProcessedSalary."Payable Amount"     := EmployeePFAmount;
      ProcessedSalary."PF / ESI / PT Gross Earnings" := PFGrossEarnings;
      ProcessedSalary."EPS Gross Earnings" := EPSGrossEarnings;
      ProcessedSalary."Employee VPF Amount" := EmployeeVPFAmount;
      ProcessedSalary."Employee PF / ESI Amount" := EmployeePFAmount;
      ProcessedSalary."Employer PF / ESI Amount" := EmployerPFAmount;
      ProcessedSalary."Employer EPS Amount"      := EmployerEPSAmount;
      ProcessedSalary."PF Admin Charges Amount"  := PFAdminChargesAmount;
      ProcessedSalary."PF EDLI Amount" := PFEDLIAmount;
      ProcessedSalary."PF RIFA Amount" := PFRIFAAmount;
      ProcessedSalary."Payment Type"   := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);

      PayElements.GET('VPF',LocationCode,SalaryPlanCode);

      CLEAR(ProcessedSalary);

      ProcessedSalary."Employee No" := LEmployeeNo;
      ProcessedSalary."Pay Element Code" := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category" := PayElements."Paid Category";
      ProcessedSalary."Pay Type" := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent" := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order" := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements" := '';
      ProcessedSalary."Paid Days" := TotalPayableDays;
      ProcessedSalary."Actual Amount" := EmployeeVPFAmount;
      ProcessedSalary."Payable Amount" := EmployeeVPFAmount;;
      ProcessedSalary."PF / ESI / PT Gross Earnings" := PFGrossEarnings;
      ProcessedSalary."EPS Gross Earnings" := PFGrossEarnings;
      ProcessedSalary."Employee VPF Amount" := EmployeeVPFAmount;
      ProcessedSalary."Payment Type" := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "ESI Calculation"@1000000008(LEmployeeNo@1000000003 : Code[20]);
    VAR
      HRPayrollSetup@1102159004 : Record 72051;
      PayElements@1102159003 : Record 72060;
      ESISetup@1102159002 : Record 72063;
      Employee@1102159001 : Record 5200;
      ProcessedSalary@1102159000 : Record 72090;
      LastEffectiveDate@1000000012 : Date;
      ESIGrossEarnings@1000000011 : Decimal;
      ESIEarningsLimits@1000000000 : Decimal;
      EmployeeESIAmount@1000000008 : Decimal;
      EmployerESIAmount@1000000007 : Decimal;
      RoundingType@1000000002 : Text[2];
      FixedESIGrossEarnings@1102159005 : Decimal;
      NonFixedESIGrossEarnings@1102159006 : Decimal;
      FEmployeeESIAmount@1102159009 : Decimal;
      FEmployerESIAmount@1102159008 : Decimal;
      NFEmployeeESIAmount@1102159010 : Decimal;
      NFEmployerESIAmount@1102159007 : Decimal;
    BEGIN
      //------ ESI Calculation
      //------ Effective Date / ESI Gross Salary Limit
      //------ Employee ESI % / Employer ESI %

      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."ESI Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('ESI',LocationCode,SalaryPlanCode) THEN
         ERROR('%1', 'ESI Pay Element not Defined in the Pay Element Card');

      CLEAR(ESIGrossEarnings); CLEAR(ESIEarningsLimits); CLEAR(FixedESIGrossEarnings);
      CLEAR(NonFixedESIGrossEarnings);

      ESISetup.RESET;
      ESISetup.SETRANGE("Location Code",    LocationCode);
      ESISetup.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ESISetup.SETFILTER("Effective Date", '<=%1',PayEndDate);
      IF NOT ESISetup.FIND('+') THEN
         MESSAGE('%1', 'ESI Setup Records not found');

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",  SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",       LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",          ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FIND('-') THEN BEGIN
      REPEAT
           PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);

           IF PayElements."Eligible for ESI Earnings" THEN
              ESIGrossEarnings += ProcessedSalary."Payable Amount";

      //-- New Modification For Ramjee - On - 11/07/2009.

           IF PayElements."Eligible for ESI Limit Amount" THEN
              ESIEarningsLimits += ProcessedSalary."Actual Amount";

      //-- New Modification for HTC- on - 25/12/2009.

           IF PayElements."Eligible for ESI Earnings" THEN BEGIN
              IF PayElements."Fixed Pay Element" THEN
                 FixedESIGrossEarnings += ProcessedSalary."Payable Amount";
           END;

           IF PayElements."Eligible for ESI Earnings" THEN BEGIN
              IF PayElements."Fixed Pay Element" = FALSE THEN
                 NonFixedESIGrossEarnings += ProcessedSalary."Payable Amount";
           END;

      UNTIL ProcessedSalary.NEXT = 0;
      END;

      ESIGrossEarnings := "General Rounding Off"(ESIGrossEarnings);

      IF ESISetup."ESI Rounding Type" = ESISetup."ESI Rounding Type"::Nearest THEN
         RoundingType := '=';
      IF ESISetup."ESI Rounding Type" = ESISetup."ESI Rounding Type"::Up THEN
         RoundingType := '>';
      IF ESISetup."ESI Rounding Type" = ESISetup."ESI Rounding Type"::Down THEN
         RoundingType := '<';

      FixedESIGrossEarnings := "General Rounding Off"(FixedESIGrossEarnings);
      NonFixedESIGrossEarnings := "General Rounding Off"(NonFixedESIGrossEarnings);

      IF ESIEarningsLimits <= ESISetup."ESI Gross Salary Amount" THEN BEGIN
           FEmployeeESIAmount := (FixedESIGrossEarnings * ESISetup."ESI % ( Employee )" / 100);
           FEmployerESIAmount := (FixedESIGrossEarnings * ESISetup."ESI % ( Company )"  / 100);
           FEmployeeESIAmount := "Rounding Off"(FEmployeeESIAmount, ESISetup."ESI Rounding Amount",RoundingType);
           FEmployerESIAmount := "Rounding Off"(FEmployerESIAmount, ESISetup."ESI Rounding Amount",RoundingType);
           NFEmployeeESIAmount := (NonFixedESIGrossEarnings * ESISetup."ESI % ( Employee )" / 100);
           NFEmployerESIAmount := (NonFixedESIGrossEarnings * ESISetup."ESI % ( Company )"  / 100);
           NFEmployeeESIAmount := "Rounding Off"(NFEmployeeESIAmount, ESISetup."ESI Rounding Amount",RoundingType);
           NFEmployerESIAmount := "Rounding Off"(NFEmployerESIAmount, ESISetup."ESI Rounding Amount",RoundingType);

           EmployeeESIAmount := FEmployeeESIAmount + NFEmployeeESIAmount;
           EmployerESIAmount := FEmployerESIAmount + NFEmployerESIAmount;

         END
      ELSE BEGIN
           EmployeeESIAmount := 0;
           EmployerESIAmount := 0;
      END;

      PayElements.GET('ESI',LocationCode,SalaryPlanCode);

      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No"      := LEmployeeNo;
      ProcessedSalary."Pay Element Code" := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category"    := PayElements."Paid Category";
      ProcessedSalary."Pay Type"         := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent"  := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order" := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements" := '';
      ProcessedSalary."Paid Days" := TotalPayableDays;
      ProcessedSalary."Actual Amount" := EmployeeESIAmount;
      ProcessedSalary."Payable Amount" := EmployeeESIAmount;
      ProcessedSalary."PF / ESI / PT Gross Earnings" := ESIGrossEarnings;
      ProcessedSalary."Employee PF / ESI Amount" := EmployeeESIAmount;
      ProcessedSalary."Employer PF / ESI Amount" := EmployerESIAmount;
      ProcessedSalary."Payment Type" := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "PT Calculation"@1000000009(LEmployeeNo@1000000003 : Code[20]);
    VAR
      Employee@1000000011 : Record 5200;
      PayElements@1000000010 : Record 72060;
      ProfessionalTaxHeader@1000000009 : Record 72065;
      ProfessionalTaxLine@1000000000 : Record 72066;
      ProcessedSalary@1000000008 : Record 72090;
      HRPayrollSetup@1000000007 : Record 72051;
      LastEffectiveDate@1000000006 : Date;
      PTGrossEarnings@1000000005 : Decimal;
      EmployeePTAmount@1000000004 : Decimal;
      RoundingType@1000000002 : Text[2];
    BEGIN
      //------ PT Calculation
      //------ Effective Date / PT Gross Salary Limit

      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."PT Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('PT',LocationCode,SalaryPlanCode) THEN
         ERROR('%1', 'PT Pay Element not Defined in the Pay Element Card');

      CLEAR(PTGrossEarnings);

      ProfessionalTaxHeader.RESET;
      ProfessionalTaxHeader.SETRANGE("Location Code",    LocationCode);
      ProfessionalTaxHeader.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ProfessionalTaxHeader.SETRANGE("Branch Code",      Employee."PT Branch Code");
      ProfessionalTaxHeader.SETFILTER("Effective Date", '<=%1',PayEndDate);
      IF NOT ProfessionalTaxHeader.FINDFIRST THEN ;
      //   MESSAGE('%1', 'Professional Tax Header Records not found');

      ProfessionalTaxLine.RESET;
      ProfessionalTaxLine.SETRANGE("Location Code",    LocationCode);
      ProfessionalTaxLine.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ProfessionalTaxLine.SETRANGE("Branch Code",      Employee."PT Branch Code");
      ProfessionalTaxLine.SETFILTER("Effective Date", '<=%1',PayEndDate);
      IF NOT ProfessionalTaxLine.FINDFIRST THEN;
      //   MESSAGE('%1', 'Professional Tax Line Records not found');

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",  SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",       LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",          ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FIND('-') THEN BEGIN
      REPEAT
           PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);

           IF PayElements."Eligible for PT" THEN
              PTGrossEarnings += ProcessedSalary."Payable Amount";
      UNTIL ProcessedSalary.NEXT = 0;
      END;

      PTGrossEarnings := "General Rounding Off"(PTGrossEarnings);

      ProfessionalTaxLine.RESET;
      ProfessionalTaxLine.SETRANGE("Location Code",    LocationCode);
      ProfessionalTaxLine.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ProfessionalTaxLine.SETRANGE("Branch Code",      Employee."PT Branch Code");
      ProfessionalTaxLine.SETFILTER("Effective Date", '<=%1',PayEndDate);
      IF ProfessionalTaxLine.FIND('-') THEN BEGIN
        REPEAT
          IF (ProfessionalTaxLine."Income From" <= PTGrossEarnings ) AND
             (ProfessionalTaxLine."Income To"   >= PTGrossEarnings ) THEN BEGIN
              EmployeePTAmount  := ProfessionalTaxLine."Tax Amount";
          END;

        UNTIL ProfessionalTaxLine.NEXT = 0;
      END;

      PayElements.GET('PT',LocationCode,SalaryPlanCode);
      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No"        := LEmployeeNo;
      ProcessedSalary."Pay Element Code"   := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category"      := PayElements."Paid Category";
      ProcessedSalary."Pay Type"           := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent"    := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order"      := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements"  := '';
      ProcessedSalary."Paid Days" := TotalPayableDays;
      ProcessedSalary."Actual Amount"  := EmployeePTAmount;
      ProcessedSalary."Payable Amount" := EmployeePTAmount;
      ProcessedSalary."PF / ESI / PT Gross Earnings" := PTGrossEarnings;
      ProcessedSalary."Payment Type"       := PayElements."Payment Type";
      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "LIC Calculation"@1000000015(LEmployeeNo@1000000000 : Code[20]);
    VAR
      PayElements@1000000009 : Record 72060;
      LICHeader@1000000008 : Record 72070;
      ProcessedSalary@1000000006 : Record 72090;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."Insurance Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('LIC',LocationCode,SalaryPlanCode) THEN
         ERROR('%1', 'LIC Pay Element not Defined in the Pay Element Card');

      PayElements.GET('LIC',LocationCode,SalaryPlanCode);

      LICHeader.RESET;
      LICHeader.SETRANGE("Location Code",    LocationCode);
      LICHeader.SETRANGE("Salary Plan Code", SalaryPlanCode);
      LICHeader.SETRANGE("Pay Element Code", PayElements."Pay Element Code");
      LICHeader.SETRANGE("Employee No.",     LEmployeeNo);
      LICHeader.SETRANGE(Blocked,            FALSE);
      IF LICHeader.FIND('-') THEN BEGIN

         LICHeader.CALCFIELDS("Total Premium Amount");

         CLEAR(ProcessedSalary);
         ProcessedSalary."Employee No"        := LEmployeeNo;
         ProcessedSalary."Pay Element Code"   := PayElements."Pay Element Code";
         ProcessedSalary."Paid Category"      := PayElements."Paid Category";
         ProcessedSalary."Pay Type"           := PayElements."Pay Type";
         ProcessedSalary."Fixed / Percent"    := PayElements."Fixed/Percent";
         ProcessedSalary."Sorting Order"      := PayElements."Sorting Order";
         ProcessedSalary."Base Pay Elements"  := '';
         ProcessedSalary."Paid Days" := TotalPayableDays;
         ProcessedSalary."Actual Amount"   := LICHeader."Total Premium Amount";
         ProcessedSalary."Payable Amount"  := LICHeader."Total Premium Amount";
         ProcessedSalary."Payment Type"       := PayElements."Payment Type";

         "Insert Pay Processed Salary"(ProcessedSalary);
      END;
    END;

    PROCEDURE "Medical Reimbu Calculation"@1000000021(LEmployeeNo@1000000000 : Code[20]);
    VAR
      PayElements@1000000004 : Record 72060;
      MedicalReimbuHeader@1000000003 : Record 72072;
      MedicalReimbuLine@1000000001 : Record 72073;
      ProcessedSalary@1000000002 : Record 72090;
      TotalBillAmount@1000000005 : Decimal;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."Medical Reimbu. Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('MED REIMB',LocationCode,SalaryPlanCode) THEN
         ERROR('%1', 'MED REIMB Pay Element not Defined in the Pay Element Card');

      PayElements.GET('MED REIMB',LocationCode,SalaryPlanCode);

      MedicalReimbuHeader.RESET;
      MedicalReimbuHeader.SETRANGE("Location Code",    LocationCode);
      MedicalReimbuHeader.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MedicalReimbuHeader.SETRANGE("Pay Element Code", PayElements."Pay Element Code");
      MedicalReimbuHeader.SETRANGE("Employee No.",     LEmployeeNo);
      MedicalReimbuHeader.SETRANGE(Blocked,            FALSE);
      IF NOT MedicalReimbuHeader.FIND('-') THEN
         EXIT;

      CLEAR(TotalBillAmount);

      MedicalReimbuLine.RESET;
      MedicalReimbuLine.SETRANGE("Location Code",    LocationCode);
      MedicalReimbuLine.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MedicalReimbuLine.SETRANGE("Pay Element Code", PayElements."Pay Element Code");
      MedicalReimbuLine.SETRANGE("Employee No.",     LEmployeeNo);
      MedicalReimbuLine.SETRANGE("Reimburesment Date", PayStartDate,PayEndDate);
      MedicalReimbuLine.SETRANGE(Blocked,            FALSE);
      IF MedicalReimbuLine.FIND('-') THEN BEGIN
         REPEAT
            TotalBillAmount += MedicalReimbuLine."Bill Amount";
         UNTIL MedicalReimbuLine.NEXT = 0;

         CLEAR(ProcessedSalary);
         ProcessedSalary."Employee No"       := LEmployeeNo;
         ProcessedSalary."Pay Element Code"  := PayElements."Pay Element Code";
         ProcessedSalary."Paid Category"     := PayElements."Paid Category";
         ProcessedSalary."Pay Type"          := PayElements."Pay Type";
         ProcessedSalary."Fixed / Percent"   := PayElements."Fixed/Percent";
         ProcessedSalary."Sorting Order"     := PayElements."Sorting Order";
         ProcessedSalary."Base Pay Elements" := '';
         ProcessedSalary."Paid Days" := TotalPayableDays;
         ProcessedSalary."Actual Amount"     := TotalBillAmount;
         ProcessedSalary."Payable Amount"    := TotalBillAmount;
         ProcessedSalary."Payment Type"      := PayElements."Payment Type";
         "Insert Pay Processed Salary"(ProcessedSalary);
      END;
    END;

    PROCEDURE "OT Calculation"@1000000010(LEmployeeNo@1000000013 : Code[20]);
    VAR
      Employee@1000000010 : Record 5200;
      PayElements@1000000009 : Record 72060;
      ProcessedSalary@1000000007 : Record 72090;
      MonthlyAttendance@1000000003 : Record 72082;
      HRPayrollSetup@1000000006 : Record 72051;
      LocationHRPayrollSetup@1000000000 : Record 72052;
      OTGrossEarnings@1000000004 : Decimal;
      RoundingType@1000000002 : Text[2];
      TotalOverTimeMins@1102155003 : Decimal;
      AmountPerHour@1102155002 : Decimal;
      EmployeeOTAmount@1102155001 : Decimal;
      TotalPermissionMins@1102155000 : Decimal;
    BEGIN
      //------ OT Calculation / OT Gross Salary Limit
      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."OT Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('OT',LocationCode,SalaryPlanCode) THEN
         ERROR('%1', 'OT Pay Element not Defined in the Pay Element Card');

      CLEAR(OTGrossEarnings); CLEAR(TotalOverTimeMins);
      CLEAR(AmountPerHour); CLEAR(EmployeeOTAmount); CLEAR(TotalPermissionMins);

      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",    LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      IF MonthlyAttendance.FIND('-') THEN BEGIN
         MonthlyAttendance.CALCFIELDS("Over Time In Mins");
         MonthlyAttendance.CALCFIELDS("Total Permission In Mins");
         TotalOverTimeMins := MonthlyAttendance."Over Time In Mins";
         IF TotalOverTimeMins < 0 THEN
            TotalOverTimeMins := 0;

         IF Employee."OT Type" = Employee."OT Type"::"Hourly Based" THEN
            MonthlyAttendance."Total Over Time Hours" := "Convert Mins To Hours"(TotalOverTimeMins)
         ELSE
            MonthlyAttendance."Total Over Time Hours" := TotalOverTimeMins;

         TotalOverTimeMins := MonthlyAttendance."Total Over Time Hours";

         MonthlyAttendance.MODIFY;
      END;

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",  SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",       LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",          ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FIND('-') THEN BEGIN
      REPEAT
           PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
           IF PayElements."Eligible for OT" THEN
              OTGrossEarnings += ProcessedSalary."Payable Amount";
      UNTIL ProcessedSalary.NEXT = 0;
      END;

      IF Employee."OT Type" = Employee."OT Type"::"Hourly Based" THEN BEGIN
         IF TotalOverTimeMins > 0 THEN BEGIN
            AmountPerHour := ((OTGrossEarnings / TotalPayableDays)/ LocationHRPayrollSetup."No of Hours Per Day");
            EmployeeOTAmount := ((TotalOverTimeMins * AmountPerHour) * Employee."Over Time Multiplier");
            EmployeeOTAmount := "General Rounding Off"(EmployeeOTAmount);
         END;
      END;

      IF Employee."OT Type" = Employee."OT Type"::"Per Daily Amount  " THEN BEGIN
         IF TotalOverTimeMins > 0 THEN
            EmployeeOTAmount := (TotalOverTimeMins * (OTGrossEarnings / TotalPayableDays));
      END;

      PayElements.GET('OT',LocationCode,SalaryPlanCode);
      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No"       := LEmployeeNo;
      ProcessedSalary."Pay Element Code"  := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category"     := PayElements."Paid Category";
      ProcessedSalary."Pay Type"          := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent"   := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order"     := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements" := '';
      ProcessedSalary."Paid Days"         := TotalOverTimeMins;
      ProcessedSalary."Actual Amount"     := EmployeeOTAmount;
      ProcessedSalary."Payable Amount"    := EmployeeOTAmount;
      ProcessedSalary."PF / ESI / PT Gross Earnings" := OTGrossEarnings;
      ProcessedSalary."Payment Type"      := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "Extra Wages Calculation"@1102159002(LEmployeeNo@1000000000 : Code[20]);
    VAR
      LocationHRPayrollSetup@1000000006 : Record 72052;
      PayElements@1000000002 : Record 72060;
      ProcessedSalary@1000000001 : Record 72090;
      MonthlyAttendance@1000000007 : Record 72082;
      ExtraWagesDaysGrossEarnings@1102159002 : Decimal;
      ExtraWagesDaysAmount@1102159001 : Decimal;
      TotalExtraWagesDays@1102159000 : Decimal;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."Extra Allowance Applicable" THEN
         EXIT;

      IF NOT PayElements.GET('EXTRA ALLOW',LocationCode,SalaryPlanCode) THEN
         ERROR('%1', 'EXTRA ALLOW Pay Element not Defined in the Pay Element Card');

      CLEAR(ExtraWagesDaysAmount); CLEAR(ExtraWagesDaysGrossEarnings); CLEAR(TotalExtraWagesDays);

      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",    LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      IF MonthlyAttendance.FIND('-') THEN BEGIN
         MonthlyAttendance.CALCFIELDS("Over Time In Mins");
         TotalExtraWagesDays := MonthlyAttendance."Over Time In Mins";
      END;

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",  SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",       LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",          ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FIND('-') THEN BEGIN
         REPEAT
          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
          IF PayElements."Eligible for Extra Allowances" THEN
             ExtraWagesDaysGrossEarnings += ProcessedSalary."Actual Amount";
         UNTIL ProcessedSalary.NEXT = 0;
      END;

      PayElements.GET('EXTRA ALLOW',LocationCode,SalaryPlanCode);

      ExtraWagesDaysAmount := ((ExtraWagesDaysGrossEarnings / TotalPayableDays ) *
                                  TotalExtraWagesDays);

      ExtraWagesDaysGrossEarnings := "General Rounding Off"(ExtraWagesDaysGrossEarnings);

      CLEAR(ProcessedSalary);
      ProcessedSalary."Employee No"        := LEmployeeNo;
      ProcessedSalary."Pay Element Code"   := PayElements."Pay Element Code";
      ProcessedSalary."Paid Category"      := PayElements."Paid Category";
      ProcessedSalary."Pay Type"           := PayElements."Pay Type";
      ProcessedSalary."Fixed / Percent"    := PayElements."Fixed/Percent";
      ProcessedSalary."Sorting Order"      := PayElements."Sorting Order";
      ProcessedSalary."Base Pay Elements"  := '';
      ProcessedSalary."PF / ESI / PT Gross Earnings" := ExtraWagesDaysGrossEarnings;
      ProcessedSalary."Total Days in a Month" := PayElements."No of Day for DA";
      ProcessedSalary."Paid Days"          := TotalExtraWagesDays;
      ProcessedSalary."Actual Amount"      := ExtraWagesDaysAmount;
      ProcessedSalary."Payable Amount"     := ExtraWagesDaysAmount;
      ProcessedSalary."Payment Type"       := PayElements."Payment Type";

      "Insert Pay Processed Salary"(ProcessedSalary);
    END;

    PROCEDURE "Rounding Off"@1000000014(GrossAmount@1000000000 : Decimal;RoundingAmount@1000000001 : Decimal;RoundingType@1000000002 : Text[2]) : Decimal;
    VAR
      TotalAmountRounded@1000000005 : Decimal;
    BEGIN

      IF RoundingAmount > 0 THEN
            TotalAmountRounded := ROUND(GrossAmount,RoundingAmount,RoundingType)
      ELSE
         TotalAmountRounded := GrossAmount;

      EXIT(TotalAmountRounded);
    END;

    PROCEDURE "General Rounding Off"@1000000012(GrossAmount@1000000002 : Decimal) : Decimal;
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
      LocationHRPayrollSetup@1000000004 : Record 72052;
      RoundingType@1000000001 : Text[2];
      TotalAmountRounded@1000000003 : Decimal;
    BEGIN
      HRPayrollSetup.GET(USERID);

      IF LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code") THEN;

      IF LocationHRPayrollSetup."General Rounding Type" = LocationHRPayrollSetup."General Rounding Type"::Nearest THEN
         RoundingType := '=';
      IF LocationHRPayrollSetup."General Rounding Type" = LocationHRPayrollSetup."General Rounding Type"::Up  THEN
         RoundingType := '>';
      IF LocationHRPayrollSetup."General Rounding Type" = LocationHRPayrollSetup."General Rounding Type"::Down THEN
         RoundingType := '<';

      IF ( LocationHRPayrollSetup."General Rounding Amount" > 0 ) THEN
           TotalAmountRounded := ROUND(GrossAmount,LocationHRPayrollSetup."General Rounding Amount",RoundingType)
      ELSE
           TotalAmountRounded := GrossAmount;

      EXIT(TotalAmountRounded);
    END;

    PROCEDURE "Update Processed Flag"@1000000013(LEmployeeNo@1000000002 : Code[20]);
    VAR
      MonthlyAttendance@1000000009 : Record 72082;
    BEGIN
      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",    LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      IF MonthlyAttendance.FIND('-') THEN
      BEGIN
            MonthlyAttendance."Salary Processed" := TRUE;
            MonthlyAttendance.MODIFY;
      END;
    END;

    PROCEDURE "Checking for Posted Employee"@1000000020(LEmployeeNo@1000000003 : Code[20]) : Boolean;
    VAR
      MonthlyAttendance@1000000002 : Record 72082;
    BEGIN
      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",    LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      MonthlyAttendance.SETRANGE(Posted, TRUE);
      IF MonthlyAttendance.FIND('-') THEN
         EXIT(TRUE)
      ELSE
         EXIT(FALSE);
    END;

    PROCEDURE "Delete Current Employee"@1000000016(LEmployeeNo@1000000004 : Code[20]);
    VAR
      ProcessedSalary@1000000001 : Record 72090;
      MonthlyAttendance@1000000000 : Record 72082;
    BEGIN
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Employee No",      LEmployeeNo);
      ProcessedSalary.SETRANGE("Payroll End Date", PayEndDate);
      IF ProcessedSalary.FIND('-') THEN
         ProcessedSalary.DELETEALL;

      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",    LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      IF MonthlyAttendance.FIND('-') THEN BEGIN
          MonthlyAttendance.MODIFYALL("Actual Net Amount",0);
          MonthlyAttendance.MODIFYALL("Payable Net Amount",0);
          MonthlyAttendance.MODIFYALL("First Net Amount",0);
          MonthlyAttendance.MODIFYALL("Second Net Amount",0);
          MonthlyAttendance.MODIFYALL("Over Time In Mins",0);
          MonthlyAttendance.MODIFYALL("Total Permission In Mins",0);
          MonthlyAttendance.MODIFYALL("Negative Pay", FALSE);
         END
    END;

    PROCEDURE "First Second Amt Calculation"@1102155001(LEmployeeNo@1000000004 : Code[20]);
    VAR
      ProcessedSalary@1000000001 : Record 72090;
      MonthlyAttendance@1000000000 : Record 72082;
      PayElements@1102155000 : Record 72060;
      FirstPaymentAmount@1102155001 : Decimal;
      SecondPaymentAmount@1102155002 : Decimal;
    BEGIN
      CLEAR(FirstPaymentAmount); CLEAR(SecondPaymentAmount);

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",  SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",       LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",          ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FIND('-') THEN BEGIN
         REPEAT
            PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
            IF ProcessedSalary."Payment Type" = ProcessedSalary."Payment Type"::"First Payment" THEN
               FirstPaymentAmount += ProcessedSalary."Payable Amount";
         UNTIL ProcessedSalary.NEXT = 0;
      END;

      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",    LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      IF MonthlyAttendance.FIND('-') THEN BEGIN
         MonthlyAttendance.CALCFIELDS("Payable Deduction Amount");
         MonthlyAttendance."First Net Amount" := (FirstPaymentAmount - MonthlyAttendance."Payable Deduction Amount");
         MonthlyAttendance."Second Net Amount" := (MonthlyAttendance."Payable Net Amount" - MonthlyAttendance."First Net Amount");
         IF MonthlyAttendance."First Net Amount" < 0 THEN
            MonthlyAttendance."First Net Amount" := 0;

         IF MonthlyAttendance."Second Net Amount" < 0 THEN
            MonthlyAttendance."Second Net Amount" := 0;

         MonthlyAttendance.MODIFY;
      END
    END;

    PROCEDURE "Read Gross/Daily Pay Elements"@1000000019(LEmployeeNo@1000000001 : Code[20]);
    VAR
      HRPayrollSetup@1102159001 : Record 72051;
      LocationHRPayrollSetup@1102159000 : Record 72052;
      PayrollMonthYear@1000000009 : Record 72055;
      PayElements@1000000003 : Record 72060;
      EmployeePayElements@1000000000 : Record 72078;
      MonthlyAttendance@1000000008 : Record 72082;
      ProcessedSalary@1000000004 : Record 72090;
      LastEffectiveDate@1000000002 : Date;
      TotalMonthlySalary@1000000005 : Decimal;
      TotalPayableDays@1000000007 : Decimal;
      PerDaySalary@1000000010 : Decimal;
      TotalGrossAmount@1000000011 : Decimal;
      VDAAmount@1000000012 : Decimal;
      BasicAmount@1000000013 : Decimal;
    BEGIN
      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      CLEAR(TotalMonthlySalary); CLEAR(PerDaySalary);
      CLEAR(TotalGrossAmount);   CLEAR(BasicAmount);        CLEAR(VDAAmount);

      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code",    LocationCode);
      EmployeePayElements.SETRANGE("Salary Plan Code", SalaryPlanCode);
      EmployeePayElements.SETRANGE("Employee No",      LEmployeeNo);
      EmployeePayElements.SETFILTER("Effective Date", '<=%1', PayEndDate);
      EmployeePayElements.SETRANGE("Excluded In Pay Slip", TRUE);
      IF EmployeePayElements.FIND('+') THEN
         LastEffectiveDate := EmployeePayElements."Effective Date";

      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code",    LocationCode);
      EmployeePayElements.SETRANGE("Salary Plan Code", SalaryPlanCode);
      EmployeePayElements.SETRANGE("Employee No",      LEmployeeNo);
      EmployeePayElements.SETRANGE("Effective Date",   LastEffectiveDate);
      EmployeePayElements.SETRANGE("Excluded In Pay Slip", TRUE);
      IF EmployeePayElements.FIND('-') THEN
      REPEAT

           PayElements.GET(EmployeePayElements."Pay Element Code",LocationCode,SalaryPlanCode);

           PayrollMonthYear.RESET;
           PayrollMonthYear.SETRANGE("Location Code",      LocationCode);
           PayrollMonthYear.SETRANGE("Salary Plan Code",   SalaryPlanCode);
           PayrollMonthYear.SETRANGE("Salary Cyclic Code", SalaryCyclicCode);
           IF PayrollMonthYear.FIND('-') THEN;

           IF PayElements."Gross Amount Pay Elements" THEN BEGIN
              TotalMonthlySalary := EmployeePayElements.Amount;
              PerDaySalary     := ROUND((TotalMonthlySalary / TotalDaysinAMonth),0.01,'=');
              VDAAmount   := (TotalDaysinAMonth * PayrollMonthYear."Staff VDA Amount");
              BasicAmount := (TotalMonthlySalary - VDAAmount);
           END;

           IF PayElements."Daily Wages Pay Elements" THEN BEGIN
              PerDaySalary     := EmployeePayElements.Amount;
              TotalGrossAmount := (TotalDaysinAMonth * PerDaySalary);
              VDAAmount   := (TotalDaysinAMonth * PayrollMonthYear."Workmen VDA Amount");
              BasicAmount := (TotalGrossAmount - VDAAmount);
           END;

           Employee.GET(LEmployeeNo);

           IF Employee."Employee Category" IN [Employee."Employee Category"::"Staff Temporary",
                                           Employee."Employee Category"::"Class IV Temporary"] THEN BEGIN
              BasicAmount := ( TotalDaysinAMonth * PerDaySalary);
              VDAAmount := 0;
           END;

           CLEAR(ProcessedSalary);
           ProcessedSalary."Employee No"      := LEmployeeNo;
           ProcessedSalary."Pay Element Code" := 'BASIC';
           ProcessedSalary."Paid Category"    := PayElements."Paid Category";
           ProcessedSalary."Pay Type"         := EmployeePayElements."Pay Type";
           ProcessedSalary."Fixed / Percent"  := EmployeePayElements."Fixed/Percent";
           ProcessedSalary."Percentage (%)"   := EmployeePayElements."Percent (%)";
           ProcessedSalary."Actual Amount"    := BasicAmount;
           ProcessedSalary."Payable Amount"   := BasicAmount;
           "Insert Pay Processed Salary"(ProcessedSalary);

           CLEAR(ProcessedSalary);
           ProcessedSalary."Employee No"      := LEmployeeNo;
           ProcessedSalary."Pay Element Code" := 'DA';
           ProcessedSalary."Paid Category"    := PayElements."Paid Category";
           ProcessedSalary."Pay Type"         := EmployeePayElements."Pay Type";
           ProcessedSalary."Fixed / Percent"  := EmployeePayElements."Fixed/Percent";
           ProcessedSalary."Percentage (%)"   := EmployeePayElements."Percent (%)";
           ProcessedSalary."Actual Amount"    := VDAAmount;
           ProcessedSalary."Payable Amount"   := VDAAmount;
           "Insert Pay Processed Salary"(ProcessedSalary);

      UNTIL EmployeePayElements.NEXT = 0;
    END;

    PROCEDURE "Weekly Off Creation"@1000000024(LEmployeeNo@1000000000 : Code[20]);
    VAR
      HRPayrollSetup@1000000008 : Record 72051;
      LocationHRPayrollSetup@1000000009 : Record 72052;
      DailyAttendance@1000000004 : Record 72080;
      MonthlyAttendance@1000000007 : Record 72082;
      TotalDaysWorked@1000000005 : Decimal;
      CheckFlag@1000000001 : Boolean;
      StartWeek@1102155001 : Integer;
      EndWeek@1102155000 : Integer;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."Weekly Off Cut" THEN
         EXIT;

      HRPayrollSetup.GET(USERID);
      IF LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code") THEN;

      CLEAR(TotalDaysWorked); CLEAR(CheckFlag);
      CLEAR(StartWeek); CLEAR(EndWeek);

      StartWeek := DATE2DWY(PayStartDate,2);
      EndWeek := DATE2DWY(PayEndDate,2);

      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",    LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      DailyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      DailyAttendance.SETRANGE("Week No",          StartWeek,EndWeek);
      IF DailyAttendance.FIND('-') THEN BEGIN
         REPEAT
         IF DailyAttendance."Lay Off" = 1 THEN
            DailyAttendance."Lay Off" := 1;

         TotalDaysWorked += (DailyAttendance.Present + DailyAttendance.Holiday
                           + DailyAttendance."Lay Off");

         IF TotalDaysWorked >= LocationHRPayrollSetup."Weekly Off Full Days Limit" THEN BEGIN
            IF DailyAttendance."Weekly Off Status" THEN BEGIN
               DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Weekly Off";
               DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::"Weekly Off";
               CheckFlag := TRUE;
             END;
         END;

         IF (TotalDaysWorked < LocationHRPayrollSetup."Weekly Off Full Days Limit") THEN BEGIN
            IF DailyAttendance."Weekly Off Status" THEN BEGIN
               DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::Absent;
               DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::Absent;
               CheckFlag := TRUE;
             END;
         END;

        IF LocationHRPayrollSetup."Weekly Off Half Days Limit" <> 0 THEN BEGIN
          IF ( TotalDaysWorked = LocationHRPayrollSetup."Weekly Off Half Days Limit" ) THEN BEGIN
            IF DailyAttendance."Weekly Off Status" THEN BEGIN
               DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::"Weekly Off";
               DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::Absent;
               CheckFlag := TRUE;
             END;
          END;
         END;

         IF CheckFlag THEN BEGIN
            DailyAttendance.VALIDATE("First Half Attendance Type");
            DailyAttendance.VALIDATE("Second Half Attendance Type");
            DailyAttendance.MODIFY;
            TotalDaysWorked := 0;
            CheckFlag := FALSE;
         END;

         IF DailyAttendance."Weekly Off Status" THEN BEGIN
            TotalDaysWorked := 0;
         END;

         UNTIL DailyAttendance.NEXT = 0;
      END;

        MonthlyAttendance.RESET;
        MonthlyAttendance.SETRANGE("Location Code",     LocationCode);
        MonthlyAttendance.SETRANGE("Salary Plan Code",  SalaryPlanCode);
        MonthlyAttendance.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
        MonthlyAttendance.SETRANGE("Employee No",       LEmployeeNo);
        IF MonthlyAttendance.FIND('-') THEN BEGIN
           MonthlyAttendance.CALCFIELDS(Present);
           IF MonthlyAttendance.Present = 0 THEN BEGIN
              DailyAttendance.RESET;
              DailyAttendance.SETRANGE("Location Code",    LocationCode);
              DailyAttendance.SETRANGE("Salary Plan Code",  SalaryPlanCode);
              DailyAttendance.SETRANGE("Salary Cyclic Code",SalaryCyclicCode);
              DailyAttendance.SETRANGE("Employee No",      LEmployeeNo);
              DailyAttendance.SETFILTER("Payable Days",    '<>%1',0);
              IF DailyAttendance.FIND('-') THEN BEGIN
                 REPEAT
                  DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::Absent;
                  DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::Absent;
                  DailyAttendance.VALIDATE("First Half Attendance Type");
                  DailyAttendance.VALIDATE("Second Half Attendance Type");
                  DailyAttendance.MODIFY;
                 UNTIL DailyAttendance.NEXT = 0;
              END;
            END;
        END;
    END;

    PROCEDURE "Weekly Off / Holiday Cut"@1102159000(LEmployeeNo@1000000000 : Code[20]);
    VAR
      HRPayrollSetup@1000000008 : Record 72051;
      LocationHRPayrollSetup@1000000009 : Record 72052;
      RVDate@1000000003 : Record 2000000007;
      DailyAttendance@1000000004 : Record 72080;
      MonthlyAttendance@1000000007 : Record 72082;
      TotalDaysWorked@1000000005 : Decimal;
      CheckFlag@1000000001 : Boolean;
      AttendanceStartDate@1000000002 : Date;
      AttendanceEndDate@1000000006 : Date;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
         IF NOT Employee."Weekly Off / Holiday Cut" THEN
         EXIT;

      DailyAttendance.RESET;
      DailyAttendance.SETRANGE("Location Code",    LocationCode);
      DailyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      DailyAttendance.SETRANGE("Employee No",      LEmployeeNo);
      DailyAttendance.SETRANGE("Attendance Date",  PayStartDate,PayEndDate);
      DailyAttendance.SETRANGE("Non Working Day",  TRUE);
      IF DailyAttendance.FIND('-') THEN BEGIN
         REPEAT
            DailyAttendance."First Half Attendance Type"  := DailyAttendance."First Half Attendance Type"::Absent;
            DailyAttendance."Second Half Attendance Type" := DailyAttendance."Second Half Attendance Type"::Absent;
            DailyAttendance.VALIDATE("First Half Attendance Type");
            DailyAttendance.VALIDATE("Second Half Attendance Type");
            DailyAttendance.MODIFY;
         UNTIL DailyAttendance.NEXT = 0;
      END;
    END;

    PROCEDURE "Negative Pay Checking"@1102159006(LEmployeeNo@1000000004 : Code[20]);
    VAR
      ProcessedSalary@1000000001 : Record 72090;
      TotalGrossAmount@1102155001 : Decimal;
      TotalDedeAmount@1102155002 : Decimal;
      TotalNetAmount@1102159000 : Decimal;
    BEGIN
      CLEAR(TotalGrossAmount); CLEAR(TotalDedeAmount); CLEAR(TotalNetAmount);

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",  SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",       LEmployeeNo);
      IF ProcessedSalary.FIND('-') THEN BEGIN
         REPEAT
          IF ProcessedSalary."Pay Type" = ProcessedSalary."Pay Type"::Addition THEN
             TotalGrossAmount += ProcessedSalary."Payable Amount";

          IF ( ProcessedSalary."Pay Type" = ProcessedSalary."Pay Type"::Deduction )     AND
             ( ProcessedSalary."Amount Calculation Type" = ProcessedSalary."Amount Calculation Type"::"Full Amount" ) THEN
               TotalDedeAmount += ProcessedSalary."Payable Amount";
         UNTIL ProcessedSalary.NEXT = 0;
         TotalNetAmount := (TotalGrossAmount - TotalDedeAmount);
      END;

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",           LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",        SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",       SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",             LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",                ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Amount Calculation Type", ProcessedSalary."Amount Calculation Type"::"Full Amount");
      IF ProcessedSalary.FIND('-') THEN BEGIN
         REPEAT
           IF ProcessedSalary."Payable Amount" > TotalNetAmount THEN BEGIN
              ProcessedSalary."Payable Amount" := 0;
              ProcessedSalary.MODIFY;
           END;
         UNTIL ProcessedSalary.NEXT = 0;
      END;
    END;

    PROCEDURE "Convert Mins To Hours"@1000000023(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours); CLEAR(DecimalPart); CLEAR(IntegerPart);

      DecimalPart := (TotalHrsMins MOD 60);
      IntegerPart := (TotalHrsMins - DecimalPart);
      IntegerPart := (IntegerPart / 60);
      ConvertHours := (IntegerPart + (DecimalPart / 100));

      EXIT(ConvertHours);
    END;

    PROCEDURE "Convert Hours To Mins"@1000000022(TotalHrsMins@1000000000 : Decimal) : Decimal;
    VAR
      ConvertHours@1000000001 : Decimal;
      DecimalPart@1000000002 : Decimal;
      IntegerPart@1000000003 : Integer;
    BEGIN
      CLEAR(ConvertHours); CLEAR(DecimalPart); CLEAR(IntegerPart);

      ConvertHours := TotalHrsMins * 100;
      DecimalPart  := ConvertHours MOD 100;
      DecimalPart  := (DecimalPart / 100);
      IntegerPart  := (TotalHrsMins - DecimalPart);
      ConvertHours := (IntegerPart * 60) + (DecimalPart * 100);

      EXIT(ConvertHours);
    END;

    PROCEDURE "Get Total Payable Days"@1102159003(LEmployeeNo@1102159000 : Code[20]);
    VAR
      MonthlyAttendance@1102159001 : Record 72082;
    BEGIN
      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code", LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code", SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Salary Cycle Code",SalaryCyclicCode);
      MonthlyAttendance.SETRANGE("Employee No", LEmployeeNo);
      IF MonthlyAttendance.FINDFIRST THEN BEGIN
        MonthlyAttendance.CALCFIELDS("Total Payable Days");
        TotalPayableDays := MonthlyAttendance."Total Payable Days";
        TotalLOPDays := MonthlyAttendance."Manual LOP Days";
      END;
    END;

    PROCEDURE "Get Last Effective Date"@1102159004(LEmployeeNo@1102159001 : Code[20]);
    VAR
      EmployeePayElements@1102159000 : Record 72078;
    BEGIN
      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code", LocationCode);
      EmployeePayElements.SETRANGE("Salary Plan Code", SalaryPlanCode);
      EmployeePayElements.SETRANGE("Employee No", LEmployeeNo);
      EmployeePayElements.SETFILTER("Effective Date", '<=%1', PayEndDate);
      EmployeePayElements.SETRANGE("Excluded In Pay Slip", FALSE);
      IF EmployeePayElements.FINDLAST THEN
        FalseLastEffectiveDate := EmployeePayElements."Effective Date";
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72003 Loan Calculation
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EmployeeLoanDetails@1000000001 : Record 72088;
      PaymentDate@1000000002 : Date;

    PROCEDURE LoanInstallments@1000000000(EmployeeLoan@1000000000 : Record 72087);
    BEGIN
      IF EmployeeLoan."Loan Type" = 0 THEN
        MESSAGE('Select any one of the Loan Type in Option')
      ELSE BEGIN
        IF EmployeeLoan."Loan Type" = EmployeeLoan."Loan Type"::"Interest Free" THEN
          InterestFree(EmployeeLoan);
        IF EmployeeLoan."Loan Type" = EmployeeLoan."Loan Type"::"Flat Rate" THEN
          FlatRate(EmployeeLoan);
        IF EmployeeLoan."Loan Type" = EmployeeLoan."Loan Type"::"Dimnishing Rate" THEN
          DimnishingRate(EmployeeLoan);
      END;
    END;

    PROCEDURE InterestFree@1000000001(EmployeeLoan@1000000000 : Record 72087);
    VAR
      Employee@1000000003 : Record 5200;
      I@1000000002 : Integer;
    BEGIN
      EmployeeLoan.TESTFIELD("No of Installment");

      PaymentDate := CALCDATE('CM',EmployeeLoan."Loan Starting Date");

      IF EmployeeLoan."Loan Type" = EmployeeLoan."Loan Type"::"Interest Free" THEN BEGIN
        FOR I := 1 TO EmployeeLoan."No of Installment" DO BEGIN
          EmployeeLoanDetails.INIT;
          EmployeeLoanDetails.LoanId := EmployeeLoan."Loan Id";
          EmployeeLoanDetails."Location Code" := EmployeeLoan."Location Code";
          EmployeeLoanDetails."Salary Plan Code" := EmployeeLoan."Salary Plan Code";
          EmployeeLoanDetails."Employee No" := EmployeeLoan."Employee No";
          EmployeeLoanDetails."Line No." += 10000;
          EmployeeLoanDetails."Loan Deduction Interval" := EmployeeLoan."Loan Date Interval";
          EmployeeLoanDetails."Loan Amount" := EmployeeLoan."Total Loan Amount";
          EmployeeLoanDetails."Loan Code" := EmployeeLoan."Loan Code";
          EmployeeLoanDetails."Salary Process Date" := PaymentDate;
          EmployeeLoanDetails."EMI Amount" := ROUND((EmployeeLoan."Total Loan Amount" / EmployeeLoan."No of Installment"),0.01,'=');
          EmployeeLoanDetails.Principal := ROUND((EmployeeLoan."Total Loan Amount" / EmployeeLoan."No of Installment"),0.01,'=');
          EmployeeLoanDetails."Balance Amount" := EmployeeLoan."Total Loan Amount";

          IF Employee.GET(EmployeeLoan."Employee No") THEN
            EmployeeLoanDetails.Name := Employee."First Name";

          IF EmployeeLoanDetails.INSERT THEN;

          PaymentDate := CALCDATE('1M',PaymentDate);
          PaymentDate := CALCDATE('CM',PaymentDate);
        END;

        EmployeeLoan."Installment Amount" := ROUND((EmployeeLoan."Total Loan Amount" / EmployeeLoan."No of Installment"),0.01,'=');
        EmployeeLoan."Loan Balance Amount" := EmployeeLoan."Total Loan Amount";
        EmployeeLoan.MODIFY;
        MESSAGE('Create a Installment Successfully');

      END;
    END;

    PROCEDURE FlatRate@1000000002(EmployeeLoan@1000000000 : Record 72087);
    VAR
      EmployeeLoanDetail@1000000008 : Record 72088;
      Employee@1000000009 : Record 5200;
      Principal@1000000006 : Decimal;
      InterestAmount@1000000005 : Decimal;
      MonthlyInterest@1000000004 : Decimal;
      IntRateperMonth@1000000003 : Decimal;
      EMIAmount@1000000002 : Decimal;
      I@1000000001 : Integer;
    BEGIN
      EmployeeLoan.TESTFIELD("No of Installment");

      IntRateperMonth := EmployeeLoan."Rate of Interest" / 12;
      MonthlyInterest := ROUND((EmployeeLoan."Total Loan Amount" * IntRateperMonth) / 100,0.01);
      InterestAmount := ROUND((MonthlyInterest * EmployeeLoan."No of Installment"),0.01);
      PaymentDate := CALCDATE('CM',EmployeeLoan."Loan Starting Date");
      EMIAmount :=
        ROUND(((EmployeeLoan."Total Loan Amount" + InterestAmount) /
          EmployeeLoan."No of Installment"),0.01);

      IF EmployeeLoan."Loan Type" = EmployeeLoan."Loan Type"::"Flat Rate" THEN BEGIN
        FOR I := 1 TO EmployeeLoan."No of Installment" DO BEGIN
          EmployeeLoanDetails.INIT;
          EmployeeLoanDetails."Location Code" := EmployeeLoan."Location Code";
          EmployeeLoanDetails."Salary Plan Code" := EmployeeLoan."Salary Plan Code";
          EmployeeLoanDetails."Employee No" := EmployeeLoan."Employee No";
          EmployeeLoanDetail.LoanId := EmployeeLoan."Loan Id";
          EmployeeLoanDetails."Line No." += 10000;
          EmployeeLoanDetails."Salary Process Date" := PaymentDate;
          EmployeeLoanDetails."Loan Code" := EmployeeLoan."Loan Code";
          EmployeeLoanDetails."Loan Amount" := EmployeeLoan."Total Loan Amount";
          EmployeeLoanDetails."EMI Amount" := EMIAmount;
          EmployeeLoanDetails.Interest := MonthlyInterest;
          EmployeeLoanDetails.Principal := EMIAmount - MonthlyInterest;
          EmployeeLoanDetails."Balance Amount" := EmployeeLoan."Total Loan Amount" +
            (MonthlyInterest * EmployeeLoan."No of Installment");

          IF Employee.GET(EmployeeLoan."Employee No") THEN
            EmployeeLoanDetails.Name := Employee."First Name";

          IF EmployeeLoanDetails.INSERT THEN;

          PaymentDate := CALCDATE('1M',PaymentDate);
          PaymentDate := CALCDATE('CM',PaymentDate);
        END;

        IF EmployeeLoan."Rate of Interest" <> 0 THEN BEGIN
          EmployeeLoan."Installment Amount" := EMIAmount;
          EmployeeLoan."Loan Balance Amount" := EmployeeLoan."Total Loan Amount" +
             (MonthlyInterest * EmployeeLoan."No of Installment");
          EmployeeLoan."Total Interest Amount" := MonthlyInterest * EmployeeLoan."No of Installment";
        END ELSE
          EmployeeLoan."Installment Amount" :=
              ROUND((EmployeeLoan."Total Loan Amount" /
            EmployeeLoan."No of Installment"),1,'=');
        EmployeeLoan.MODIFY;

        MESSAGE('Create a Installment Successfully');
      END;
    END;

    PROCEDURE DimnishingRate@1000000003(EmployeeLoan@1000000000 : Record 72087);
    VAR
      Employee@1000000001 : Record 5200;
      Principal@1000000007 : Decimal;
      InterestAmount@1000000006 : Decimal;
      MonthlyInterest@1000000005 : Decimal;
      IntRateperMonth@1000000004 : Decimal;
      EMIAmount@1000000003 : Decimal;
      EMICalculation1@1000000008 : Decimal;
      EMICalculation2@1000000009 : Decimal;
      Balance@1000000010 : Decimal;
      BufferDate@1000000012 : Date;
      I@1000000002 : Integer;
      J@1000000011 : Integer;
    BEGIN
      EmployeeLoan.TESTFIELD("No of Installment");

      PaymentDate := CALCDATE('CM',EmployeeLoan."Loan Starting Date");
      IntRateperMonth := (1200 + EmployeeLoan."Rate of Interest") / 1200;
      EMICalculation1 := EmployeeLoan."Total Loan Amount" * POWER(IntRateperMonth,EmployeeLoan."No of Installment");

      FOR I := 0 TO (EmployeeLoan."No of Installment" - 1) DO
        EMICalculation2 += POWER(IntRateperMonth,I);
      EMIAmount := ROUND((EMICalculation1 / EMICalculation2),0.01,'=');
      Balance := EmployeeLoan."Total Loan Amount";
      FOR J := 1 TO EmployeeLoan."No of Installment" DO BEGIN
        BufferDate := PaymentDate;
        EmployeeLoanDetails.INIT;
        EmployeeLoanDetails."Location Code" := EmployeeLoan."Location Code";
        EmployeeLoanDetails."Salary Plan Code" := EmployeeLoan."Salary Plan Code";
        EmployeeLoanDetails."Employee No" := EmployeeLoan."Employee No";
        EmployeeLoanDetails."Line No." += 10000;
        EmployeeLoanDetails."Loan Code" := EmployeeLoan."Loan Code";
        EmployeeLoanDetails."Salary Process Date" := PaymentDate;
        EmployeeLoanDetails.Name := EmployeeLoan.Name;
        EmployeeLoanDetails."Loan Amount" := EmployeeLoan."Total Loan Amount";
        EmployeeLoanDetails."EMI Amount" := EMIAmount;
        EmployeeLoanDetails.Interest := (Balance * EmployeeLoan."Rate of Interest") / 1200;
        EmployeeLoanDetails.Principal := EMIAmount - EmployeeLoanDetails.Interest;
        EmployeeLoanDetails."Balance Amount" := Balance;
        Balance := Balance - EmployeeLoanDetails.Principal;
        IF EmployeeLoanDetails.INSERT THEN;

        PaymentDate := CALCDATE('1M',PaymentDate);
        PaymentDate := CALCDATE('CM',PaymentDate);

      END;

      EmployeeLoan."Installment Amount" := EmployeeLoanDetails."EMI Amount";
      EmployeeLoan.MODIFY;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72004 Leave Creation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            HRPayrollSetup.GET(USERID);

            LocationCode := HRPayrollSetup."Location Code";
            SalaryPlanCode := HRPayrollSetup."Salary Plan Code";
            YearCode := HRPayrollSetup."Salary Year Code";

            PayrollYear.RESET;
            PayrollYear.SETRANGE("Location Code", LocationCode);
            PayrollYear.SETRANGE("Salary Plan Code", SalaryPlanCode);
            PayrollYear.SETRANGE("Year Code", YearCode);
            PayrollYear.SETRANGE("Year Type", PayrollYear."Year Type"::"Leave Year");
            PayrollYear.SETRANGE(Closed, FALSE);

            IF PayrollYear.COUNT > 1 THEN
               ERROR('Closed the Last Leave Year and proceed..!!');

            IF PayrollYear.FIND('-') THEN BEGIN
               MESSAGE('Leave Year \\Start Date => %1 \\End Date => %2' ,PayrollYear."Year Start Date",PayrollYear."Year End Date");

               IF NOT CONFIRM('Do you want Leave Records for the Year',FALSE) THEN
                  EXIT;

               StartDateTime := CURRENTDATETIME;

               Employee1.RESET;
               Employee1.SETRANGE("Location Code", LocationCode);
               Employee1.SETRANGE("Salary Plan Code", SalaryPlanCode);
               Employee1.SETRANGE(Status, Employee1.Status::Active);
               Employee1.SETRANGE("Leave Generated", FALSE);
               IF Employee1.FINDFIRST THEN BEGIN
                  REPEAT

                    "Create Leave Entitlement"(PayrollYear);
                    "Leave Balance Update"();

                  UNTIL Employee1.NEXT = 0;
               END;

               EndDateTime := CURRENTDATETIME;
               ElaspedTime := EndDateTime - StartDateTime;

               MESSAGE('Leave Records Creation Completed \\ Starting Date & Time => %1 \\ Ending Date & Time => %2 \\ Time Elasped => %3',
                        StartDateTime, EndDateTime, ElaspedTime);

               PayrollYear.Created := TRUE;
               PayrollYear.MODIFY;
            END
            ELSE
               ERROR('Leave Records Already Generated..!!');
          END;

  }
  CODE
  {
    VAR
      Win001@1000000005 : TextConst 'ENU="Table Name :  #1######################## \\ Processing Date :  #2########\\ Status => @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@"';
      HRPayrollSetup@1000000008 : Record 72051;
      PayrollYear@1000000000 : Record 72054;
      EmployeeLeaveAttachment@1000000001 : Record 72079;
      Employee1@1102155000 : Record 5200;
      CUGeneralFunctions@1000000012 : Codeunit 72008;
      StartDateTime@1000000007 : DateTime;
      EndDateTime@1000000006 : DateTime;
      ElaspedTime@1000000004 : Duration;
      ProcessStartDate@1000000003 : Date;
      ProcessEndDate@1000000002 : Date;
      LocationCode@1000000009 : Code[20];
      SalaryPlanCode@1000000010 : Code[20];
      YearCode@1000000011 : Code[20];

    PROCEDURE "Create Leave Entitlement"@1000000000(PayrollYear@1000000006 : Record 72054) Status : Boolean;
    VAR
      DialogWindow@1000000004 : Dialog;
      CurrentRecord@1000000003 : Integer;
      RecordCount@1000000002 : Integer;
      RecordCnt@1000000007 : Integer;
      LeaveMaster@1000000005 : Record 72069;
      LeaveEntitlement@1000000001 : Record 72084;
      Employee@1000000000 : Record 5200;
    BEGIN
      EmployeeLeaveAttachment.RESET;
      EmployeeLeaveAttachment.SETRANGE("Location Code", LocationCode);
      EmployeeLeaveAttachment.SETRANGE("Salary Plan Code", SalaryPlanCode);
      EmployeeLeaveAttachment.SETRANGE("Employee No", Employee1."No.");
      IF NOT EmployeeLeaveAttachment.FIND('-') THEN
         EXIT;

      EmployeeLeaveAttachment.RESET;
      EmployeeLeaveAttachment.SETRANGE("Location Code", LocationCode);
      EmployeeLeaveAttachment.SETRANGE("Salary Plan Code", SalaryPlanCode);
      EmployeeLeaveAttachment.SETRANGE("Employee No", Employee1."No.");
      IF EmployeeLeaveAttachment.FIND('-') THEN
         RecordCount := EmployeeLeaveAttachment.COUNT;
         CUGeneralFunctions.OpenWindow('Leave Records Creation\\','Progress');
         REPEAT
             IF LeaveMaster.GET(EmployeeLeaveAttachment."Leave Code",LocationCode,SalaryPlanCode) THEN
                LeaveMaster.TESTFIELD("Credit Interval Regular");

             LeaveEntitlement.INIT;
             LeaveEntitlement."Location Code" := LocationCode;
             LeaveEntitlement."Salary Plan Code" := SalaryPlanCode;
             LeaveEntitlement."Leave Year Code" := PayrollYear."Year Code";
             LeaveEntitlement."Employee No" := Employee1."No.";
             LeaveEntitlement.Name := Employee1."First Name";
             LeaveEntitlement.Probationary := Employee1.Probationary;
             LeaveEntitlement."Leave Code" := LeaveMaster."Leave Code";

             IF LeaveEntitlement.INSERT THEN;

             "Create Leave Credited"(PayrollYear,LeaveMaster,Employee);

             Employee1."Leave Generated" := TRUE;
             Employee1.MODIFY;

             CUGeneralFunctions.UpdateWindow(Employee1."No.",RecordCount);

         UNTIL EmployeeLeaveAttachment.NEXT = 0;

      MESSAGE('Leave Record Created Successfully');

      CUGeneralFunctions.CloseWindow();

      Status := TRUE;
    END;

    PROCEDURE "Create Leave Credited"@1000000001(PayrollYear@1000000002 : Record 72054;LeaveMaster@1000000000 : Record 72069;Employee@1000000003 : Record 5200);
    VAR
      LeaveCredited@1000000001 : Record 72085;
      LeaveCredited1@1000000004 : Record 72085;
    BEGIN
      REPEAT
           LeaveCredited1.SETRANGE("Location Code",   LocationCode);
           LeaveCredited1.SETRANGE("Salary Plan Code",SalaryPlanCode);
           LeaveCredited1.SETRANGE("Employee No",     Employee1."No.");
           LeaveCredited1.SETRANGE("Leave Code",      LeaveMaster."Leave Code");
           LeaveCredited1.SETRANGE("Leave Year Code", PayrollYear."Year Code");
           IF LeaveCredited1.FIND('-') THEN
              LeaveCredited1.DELETEALL;

           LeaveCredited.INIT;
           LeaveCredited."Location Code"    := LocationCode;
           LeaveCredited."Salary Plan Code" := SalaryPlanCode;
           LeaveCredited."Employee No"      := Employee1."No.";
           LeaveCredited."Leave Code"       := LeaveMaster."Leave Code";
           LeaveCredited."Leave Year Code"  := PayrollYear."Year Code";
           LeaveCredited."Leave Start Date" := PayrollYear."Year Start Date";

           IF Employee1.Probationary = FALSE THEN
              LeaveCredited."Leave End Date"   := CALCDATE(FORMAT(LeaveMaster."Credit Interval Prob.")+'-1D',
                                                  LeaveCredited."Leave Start Date");

           IF Employee1.Probationary = TRUE THEN
              LeaveCredited."Leave End Date"   := CALCDATE(FORMAT(LeaveMaster."Credit Interval Regular")+'-1D',
                                                  LeaveCredited."Leave Start Date");
           IF Employee1.Probationary = FALSE THEN
              LeaveCredited."No. of Leaves"  := LeaveMaster."Total Leaves in a Year Regular"
           ELSE
              LeaveCredited."No. of Leaves"  := LeaveMaster."Total Leaves in a Year Prob.";

           IF LeaveMaster."Create Leave Balance" THEN BEGIN
             IF LeaveCredited."Leave Start Date" < Employee1."Employment Date" THEN
                LeaveCredited."No. of Leaves"  := 0;
           END;

           IF LeaveCredited.INSERT THEN;

           PayrollYear."Year Start Date" := CALCDATE(LeaveMaster."Credit Interval Regular",PayrollYear."Year Start Date");

      UNTIL PayrollYear."Year Start Date" >= PayrollYear."Year End Date";
    END;

    PROCEDURE "Leave Balance Update"@1102155000();
    VAR
      LeaveEntitlement1@1102155000 : Record 72084;
    BEGIN
      LeaveEntitlement1.RESET;
      LeaveEntitlement1.SETRANGE("Location Code", LocationCode);
      LeaveEntitlement1.SETRANGE("Salary Plan Code", SalaryPlanCode);
      LeaveEntitlement1.SETRANGE("Leave Year Code", YearCode);
      LeaveEntitlement1.SETRANGE("Employee No", Employee1."No.");
      IF LeaveEntitlement1.FINDFIRST THEN BEGIN
         REPEAT
           LeaveEntitlement1.VALIDATE("Leave Opening Balance");
           LeaveEntitlement1.MODIFY;
         UNTIL LeaveEntitlement1.NEXT = 0;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72005 Salary Posting
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Pay Element - %1 is not found in Payelement Master';
      Text002@1000000003 : TextConst 'ENU=General Posting Group is not defined for Business Posting Group %1 %2';
      Text003@1000000004 : TextConst 'ENU=Business Posting %1 is not defined in Business Posting Group Master';
      HRPayrollSetup@1000000013 : Record 72051;
      LocationHRPayrollSetup@1000000018 : Record 72052;
      PayElements@1000000008 : Record 72060;
      Employee@1000000006 : Record 5200;
      PayrollBusinessPostingGroup@1000000007 : Record 72074;
      PayrollProductPostingGroup@1000000009 : Record 72075;
      PayrollGeneralPostingSetup@1000000005 : Record 72076;
      Text004@1000000010 : TextConst 'ENU="G/L Account Not defined in Payroll General Posting %1 %2 "';
      PayrollEmployeePostingGroup@1000000011 : Record 72077;
      GenJournalLine@1000000012 : Record 81;
      PayDate@1000000014 : Date;
      BusinessPosting@1000000002 : Code[20];
      ProductPosting@1000000001 : Code[20];
      LocationCode@1000000015 : Code[20];
      SalaryPlanCode@1000000016 : Code[20];
      SalaryCyclicCode@1000000017 : Code[20];

    PROCEDURE Posting@1000000000(MonthlyAttendance@1000000000 : Record 72082);
    VAR
      ProcessedSalary@1000000001 : Record 72090;
      "AccountNo."@1000000002 : Code[20];
      AcctType@1000000003 : 'G/L Account,Bank Account';
    BEGIN
      Employee.GET(MonthlyAttendance."Employee No");
      Employee.TESTFIELD("Pay Bus. Posting Group");
      Employee.TESTFIELD("Emp Posting Group");

      LocationCode := MonthlyAttendance."Location Code";
      SalaryPlanCode := MonthlyAttendance."Salary Plan Code";
      SalaryCyclicCode := MonthlyAttendance."Salary Cycle Code";

      BusinessPosting := Employee."Pay Bus. Posting Group";

      HRPayrollSetup.GET(USERID);
      LocationHRPayrollSetup.GET(HRPayrollSetup."Location Code");

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE(Loan, FALSE);
      IF ProcessedSalary.FINDSET THEN
        REPEAT
          CASE ProcessedSalary."Pay Type" OF

            ProcessedSalary."Pay Type"::Addition,ProcessedSalary."Pay Type"::Reimbursement :
              IF NOT PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode) THEN
                ERROR(Text001,ProcessedSalary."Pay Element Code")
              ELSE BEGIN
                PayElements.TESTFIELD("Pay Prod. Posting Group");
                IF NOT PayrollBusinessPostingGroup.GET(Employee."Pay Bus. Posting Group",LocationCode,SalaryPlanCode) THEN
                  ERROR(Text003,Employee."Pay Bus. Posting Group")
                ELSE
                  IF NOT PayrollGeneralPostingSetup.GET(PayrollBusinessPostingGroup.Code,
                      PayElements."Pay Prod. Posting Group",
                      LocationCode,SalaryPlanCode)
                  THEN
                    ERROR(Text002,PayrollBusinessPostingGroup.Code,PayElements."Pay Prod. Posting Group");
              END;

            ProcessedSalary."Pay Type"::Deduction :
              IF (ProcessedSalary."Pay Element Code" <> 'PF') AND (ProcessedSalary."Pay Element Code" <> 'ESI') AND
                 (ProcessedSalary."Pay Element Code" <> 'TDS') AND (ProcessedSalary."Pay Element Code" <> 'PT')
              THEN
                IF NOT PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode) THEN
                  ERROR(Text001,ProcessedSalary."Pay Element Code")
                ELSE BEGIN
                  PayElements.TESTFIELD("Pay Prod. Posting Group");
                  IF NOT PayrollBusinessPostingGroup.GET(Employee."Pay Bus. Posting Group",LocationCode,SalaryPlanCode) THEN
                    ERROR(Text003,Employee."Pay Bus. Posting Group")
                  ELSE BEGIN
                    IF NOT PayrollGeneralPostingSetup.GET(PayrollBusinessPostingGroup.Code,
                       PayElements."Pay Prod. Posting Group",
                       LocationCode,SalaryPlanCode) THEN
                      ERROR(Text002,PayrollBusinessPostingGroup.Code,PayElements."Pay Prod. Posting Group");
                  END;
                END;
          END;
        UNTIL ProcessedSalary.NEXT = 0;

      // Finding the Debit Account & Credit Accounts for Additions & Deductions
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code", SalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE(Loan, FALSE);
      IF ProcessedSalary.FINDSET THEN
        REPEAT
          CASE ProcessedSalary."Pay Type" OF
            ProcessedSalary."Pay Type"::Addition,ProcessedSalary."Pay Type"::Reimbursement :
              BEGIN
                PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
                PayrollProductPostingGroup.GET(PayElements."Pay Prod. Posting Group",LocationCode,SalaryPlanCode);

                ProductPosting := PayrollProductPostingGroup.Code;
                PayrollGeneralPostingSetup.GET(BusinessPosting,ProductPosting,LocationCode,SalaryPlanCode);

                IF PayrollGeneralPostingSetup."G/L Code" = '' THEN
                  ERROR(Text004,PayrollGeneralPostingSetup."Pay Bus.Posting Group",
                  PayrollGeneralPostingSetup."Pay Prod. Posting Group");
                ProcessedSalary."Account No." := PayrollGeneralPostingSetup."G/L Code";
                ProcessedSalary.MODIFY;

                InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",
                  MonthlyAttendance."Journal Batch Name",MonthlyAttendance."Posted Document No",
                  MonthlyAttendance."Posted Date",PayrollGeneralPostingSetup."G/L Code",AcctType,ProcessedSalary."Payable Amount");
              END;

            ProcessedSalary."Pay Type"::Deduction :
              IF (ProcessedSalary."Pay Element Code" <> 'PF') AND (ProcessedSalary."Pay Element Code" <> 'ESI')
                 AND (ProcessedSalary."Pay Element Code" <> 'TDS') AND
                 (ProcessedSalary."Pay Element Code" <> 'PT') AND
                 (ProcessedSalary."Pay Element Code" <> 'LOAN')
              THEN BEGIN
                PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
                PayrollProductPostingGroup.GET(PayElements."Pay Prod. Posting Group",LocationCode,SalaryPlanCode);
                ProductPosting := PayrollProductPostingGroup.Code;
                PayrollGeneralPostingSetup.GET(BusinessPosting,ProductPosting,LocationCode,SalaryPlanCode);
                IF PayrollGeneralPostingSetup."G/L Code" = '' THEN
                  ERROR(Text004,PayrollGeneralPostingSetup."Pay Bus.Posting Group",
                    PayrollGeneralPostingSetup."Pay Prod. Posting Group");
                ProcessedSalary."Account No." := PayrollGeneralPostingSetup."G/L Code";
                ProcessedSalary.MODIFY;
                InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",
                MonthlyAttendance."Journal Batch Name",MonthlyAttendance."Posted Document No",
                MonthlyAttendance."Posted Date",PayrollGeneralPostingSetup."G/L Code",AcctType,
                  -ProcessedSalary."Payable Amount");
              END;
          END;
        UNTIL ProcessedSalary.NEXT = 0;

      // EMPLOYER ESI CONTRIBUTION

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Element Code", 'ESI');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        LocationHRPayrollSetup.TESTFIELD("Employer ESI GL Code");
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",LocationHRPayrollSetup."Employer ESI GL Code",AcctType,
        ProcessedSalary."Employer PF / ESI Amount");
      END;

      // EMPLOYER EPS CONTRIBUTION
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'PF');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        LocationHRPayrollSetup.TESTFIELD("Employer EPS GL Code");
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",LocationHRPayrollSetup."Employer EPS GL Code",AcctType,
        ProcessedSalary."Employer EPS Amount");
      END;

      // EMPLOYER PF CONTRIBUTION,PF ADMIN CHARGES , ELDI CHARGES, RIFA CHARGES
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'PF');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
      // EMPLOYER PF
        LocationHRPayrollSetup.TESTFIELD("Employer PF GL Code");
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",LocationHRPayrollSetup."Employer PF GL Code",AcctType,
        ProcessedSalary."Employer PF / ESI Amount");

      // PF ADMIN CHARGES

        LocationHRPayrollSetup.TESTFIELD("PF Admin Charges GL Code");
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",LocationHRPayrollSetup."PF Admin Charges GL Code",
          AcctType,
        ProcessedSalary."PF Admin Charges Amount");

      // ELDI CHARGES
        LocationHRPayrollSetup.TESTFIELD("EDLI Charges GLCode");
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",LocationHRPayrollSetup."EDLI Charges GLCode",AcctType,
        ProcessedSalary."PF EDLI Amount");

      // RIFA CHARGES
        LocationHRPayrollSetup.TESTFIELD("RIFA Charges GL Code");
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",LocationHRPayrollSetup."RIFA Charges GL Code",AcctType,
        ProcessedSalary."PF RIFA Amount");
      END;

      Deductions(MonthlyAttendance);
    END;

    PROCEDURE InitGenJnlLine@1000000005(VAR ProcessedSalary@1000000000 : Record 72090;JournalTemplate@1000000007 : Code[20];JournalBatch@1000000006 : Code[20];"DocumentNo."@1000000005 : Code[20];PostingDate@1000000004 : Date;"AccountNo."@1000000003 : Code[20];AccountType@1000000002 : 'G/L Account,Bank Account';Amount@1000000001 : Decimal);
    VAR
      GenJnlPostLine@1000000008 : Codeunit 12;
      JnlDim@1000000009 : Record 356;
    BEGIN
      IF Amount <> 0 THEN BEGIN
        PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
        GenJournalLine.INIT;
        GenJournalLine."Journal Template Name" := JournalTemplate;
        GenJournalLine."Journal Batch Name" := JournalBatch;
        GenJournalLine."Line No." += 10000;
        GenJournalLine."Account Type" := AccountType;
        GenJournalLine.VALIDATE("Account No.","AccountNo.");
        GenJournalLine."Posting Date" := PostingDate;
        GenJournalLine."Document No." := "DocumentNo.";
        GenJournalLine.Description := ProcessedSalary."Employee No" + '+' + PayElements.Description + '+' + SalaryCyclicCode;
        GenJournalLine."Bal. Account Type" := AccountType;
        GenJournalLine.VALIDATE(Amount,Amount);
        GenJournalLine."Source Code" := 'GENJNL';
        GenJournalLine."Employee No." := ProcessedSalary."Employee No";
        GenJournalLine.INSERT;
      END;
    END;

    PROCEDURE Deductions@1000000020(MonthlyAttendance@1000000000 : Record 72082);
    VAR
      ProcessedSalary@1000000001 : Record 72090;
      Additions@1000000002 : Decimal;
      Deductions@1000000003 : Decimal;
      AccountType@1000000004 : 'G/L Account';
    BEGIN
      PayrollEmployeePostingGroup.GET(Employee."Emp Posting Group",LocationCode,SalaryPlanCode);

      // PF Account
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'PF');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PF Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."PF Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."PF Payable A/c", AccountType,-(ProcessedSalary."Employee PF / ESI Amount" +
          ProcessedSalary."Employer PF / ESI Amount"));
      END;

      // EPS Account
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'PF');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("EPS Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."EPS Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
         MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."EPS Payable A/c", AccountType,- ProcessedSalary."Employer EPS Amount");
      END;

      // PT PAYABLE ACCOUNT
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'PT');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PT Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."PT Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."PT Payable A/c", AccountType,- ProcessedSalary."Payable Amount");
      END;

      // ESI Account
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'ESI');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("ESI Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."ESI Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."ESI Payable A/c",AccountType,- (ProcessedSalary."Employee PF / ESI Amount" +
          ProcessedSalary."Employer PF / ESI Amount"));
      END;

      // TDS Account
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'TDS');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("TDS Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."TDS Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."TDS Payable A/c",AccountType,-ProcessedSalary."Payable Amount");
      END;

      // BONUS Account
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'BONUS');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("Bonus Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."Bonus Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."Bonus Payable A/c",AccountType,- ProcessedSalary."Payable Amount");
      END;

      // LOAN Account
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'LOAN');
      IF ProcessedSalary.FINDSET THEN
        REPEAT
          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
          PayElements.TESTFIELD("GL Code");
          ProcessedSalary."Account No." := PayElements."GL Code";
          ProcessedSalary.MODIFY;
          InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
            MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
            PayElements."GL Code",AccountType,-ProcessedSalary."Payable Amount");
        UNTIL ProcessedSalary.NEXT = 0;

      // Salary Payable Account
      Additions := 0;
      Deductions := 0;
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      IF ProcessedSalary.FINDSET THEN
        REPEAT
          CASE ProcessedSalary."Pay Type" OF
            ProcessedSalary."Pay Type"::Addition,ProcessedSalary."Pay Type"::Reimbursement :

              IF ProcessedSalary."Payment Type" IN [ProcessedSalary."Payment Type"::"Full Payment",
                 ProcessedSalary."Payment Type"::"First Payment"]
              THEN
                Additions := Additions + ProcessedSalary."Payable Amount";
            ProcessedSalary."Pay Type"::Deduction :
              Deductions := Deductions + ProcessedSalary."Payable Amount";
          END;
        UNTIL ProcessedSalary.NEXT = 0;

      InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
        PayrollEmployeePostingGroup."Salary Payable1 A/c",
        AccountType,-(Additions-Deductions));

      Additions := 0;
      Deductions := 0;

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      IF ProcessedSalary.FINDSET THEN
        REPEAT
          CASE ProcessedSalary."Pay Type" OF
            ProcessedSalary."Pay Type"::Addition,ProcessedSalary."Pay Type"::Reimbursement :

              IF ProcessedSalary."Payment Type" = ProcessedSalary."Payment Type"::"Second Payment" THEN
                Additions := Additions + ProcessedSalary."Payable Amount";
          END;
        UNTIL ProcessedSalary.NEXT = 0;

      InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
        MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
        PayrollEmployeePostingGroup."Salary Payable2 A/c",
        AccountType, - Additions);

      // PF ADMIN CHARGES , ELDI CHARGES, RIFA CHARGES

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code", MonthlyAttendance."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code", MonthlyAttendance."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", MonthlyAttendance."Salary Cycle Code");
      ProcessedSalary.SETRANGE("Employee No", MonthlyAttendance."Employee No");
      ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Deduction);
      ProcessedSalary.SETRANGE("Pay Element Code", 'PF');
      IF ProcessedSalary.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PF Admin Charge Payable A/c");
      //  ProcessedSalary."Account No.":=EmpPostingSetup."PF Admin Charge Payable A/c";
      //  ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
         MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
         PayrollEmployeePostingGroup."PF Admin Charge Payable A/c",AccountType,
        -ProcessedSalary."PF Admin Charges Amount");

        PayrollEmployeePostingGroup.TESTFIELD("EDLI Payable A/c");
      //  ProcessedSalary."Account No.":=EmpPostingSetup."EDLI Payable A/c";
      //  ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."EDLI Payable A/c",AccountType,
         - ProcessedSalary."PF EDLI Amount");

        PayrollEmployeePostingGroup.TESTFIELD("RIFA Payable A/c");
        ProcessedSalary."Account No." := PayrollEmployeePostingGroup."RIFA Payable A/c";
        ProcessedSalary.MODIFY;
        InitGenJnlLine(ProcessedSalary,MonthlyAttendance."Journal Template Name",MonthlyAttendance."Journal Batch Name",
          MonthlyAttendance."Posted Document No",MonthlyAttendance."Posted Date",
          PayrollEmployeePostingGroup."RIFA Payable A/c",AccountType,
        - ProcessedSalary."PF RIFA Amount");
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72006 Pay Revision
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE "Process Monthly Salary"@1000000000(PayRevisionID@1000000002 : Code[20];EffectiveDate@1000000000 : Date;EmployeeNo@1000000001 : Code[20];NewEffectiveDate@1000000003 : Date) Status : Boolean;
    VAR
      Employee@1000000005 : Record 5200;
    BEGIN
      Employee.RESET;
      Employee.SETRANGE(Status, Employee.Status::Active);
      IF Employee.FINDFIRST THEN
        REPEAT
          "Read Pay Employee Elements"(PayRevisionID,TODAY, Employee."No.",NewEffectiveDate);
        UNTIL Employee.NEXT = 0;
    END;

    PROCEDURE "Read Pay Employee Elements"@1000000002(PayRevisionID@1000000006 : Code[20];LPayrollDate@1000000003 : Date;LEmployeeNo@1000000001 : Code[20];NewEffectiveDate@1000000007 : Date);
    VAR
      Employee@1000000005 : Record 5200;
      EmployeePayElements@1000000000 : Record 72078;
      RevisionLine@1000000004 : Record 72092;
      LastEffectiveDate@1000000002 : Date;
    BEGIN
      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE ("Employee No", LEmployeeNo);
      IF EmployeePayElements.FINDLAST THEN
        LastEffectiveDate := EmployeePayElements."Effective Date";

      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Employee No",LEmployeeNo);
      EmployeePayElements.SETRANGE("Effective Date",LastEffectiveDate);
      IF EmployeePayElements.FINDFIRST THEN
        REPEAT
          RevisionLine."Pay Revision Id" := PayRevisionID;
          RevisionLine."Location Code" := EmployeePayElements."Location Code";
          RevisionLine."Salary Plan Code" := EmployeePayElements."Salary Plan Code";
          RevisionLine."Last Effective Date" := EmployeePayElements."Effective Date";
          RevisionLine."Pay Element Code" := EmployeePayElements."Pay Element Code";
          RevisionLine.Description := EmployeePayElements.Description;
          RevisionLine."Employee No" := EmployeePayElements."Employee No";
          RevisionLine."Pay Type" := EmployeePayElements."Pay Type";
          IF Employee.GET(RevisionLine."Employee No") THEN BEGIN
            RevisionLine.Name := Employee."First Name" + ' ' + Employee.Initials;
            RevisionLine."Old Grade Code" := Employee."Grade Code";
          END;

          RevisionLine."Fixed/Percent" := EmployeePayElements."Fixed/Percent";
          RevisionLine."Amount Calculation Type" := EmployeePayElements."Amount Calculation Type";
          RevisionLine."Base Pay Elements" := EmployeePayElements."Base Pay Elements";
          RevisionLine."Last Drawn Amount" := EmployeePayElements.Amount;
          RevisionLine."Last Drawn Percent (%)" := EmployeePayElements."Percent (%)";
          RevisionLine."Sorting Order" := EmployeePayElements."Sorting Order";
          RevisionLine."New Effective Date" := NewEffectiveDate;
          RevisionLine."Excluded In Pay Slip" := EmployeePayElements."Excluded In Pay Slip";
          RevisionLine."Employee Category" := Employee."Employee Category";
          IF NOT RevisionLine.INSERT THEN ;

        UNTIL EmployeePayElements.NEXT = 0;
    END;

    PROCEDURE "Process VDA Revision"@1102159001(PayRevisionID@1000000002 : Code[20];EffectiveDate@1000000000 : Date;EmployeeNo@1000000001 : Code[20];NewEffectiveDate@1000000003 : Date;VDAMaxRange@1102159000 : Decimal) Status : Boolean;
    VAR
      Employee@1000000005 : Record 5200;
    BEGIN
      Employee.RESET;
      Employee.SETRANGE("Employee Category", Employee."Employee Category"::"Class IV Permanent");
      Employee.SETRANGE(Status, Employee.Status::Active);
      IF Employee.FINDFIRST THEN
        REPEAT
          "Read Daily Wages Elements"(PayRevisionID,TODAY, Employee."No.",NewEffectiveDate,VDAMaxRange);
        UNTIL Employee.NEXT = 0;
    END;

    PROCEDURE "Read Daily Wages Elements"@1102159000(PayRevisionID@1000000006 : Code[20];LPayrollDate@1000000003 : Date;LEmployeeNo@1000000001 : Code[20];NewEffectiveDate@1000000007 : Date;VDAMaxRange@1102159000 : Decimal);
    VAR
      Employee@1000000005 : Record 5200;
      EmployeePayElements@1000000000 : Record 72078;
      RevisionLine@1000000004 : Record 72092;
      LastEffectiveDate@1000000002 : Date;
    BEGIN
      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE ("Employee No", LEmployeeNo);
      IF EmployeePayElements.FINDLAST THEN
        LastEffectiveDate := EmployeePayElements."Effective Date";

      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Employee No",LEmployeeNo);
      EmployeePayElements.SETRANGE("Effective Date", LastEffectiveDate);
      EmployeePayElements.SETFILTER(Amount,'<=%1',VDAMaxRange);
      IF EmployeePayElements.FINDFIRST THEN
        REPEAT
          RevisionLine."Pay Revision Id" := PayRevisionID;
          RevisionLine."Location Code" := EmployeePayElements."Location Code";
          RevisionLine."Salary Plan Code" := EmployeePayElements."Salary Plan Code";
          RevisionLine."Last Effective Date" := EmployeePayElements."Effective Date";
          RevisionLine."Pay Element Code" := EmployeePayElements."Pay Element Code";
          RevisionLine.Description := EmployeePayElements.Description;
          RevisionLine."Employee No" := EmployeePayElements."Employee No";
          RevisionLine."Pay Type" := EmployeePayElements."Pay Type";

          IF Employee.GET(RevisionLine."Employee No") THEN BEGIN
            RevisionLine.Name := Employee."First Name" + ' ' + Employee.Initials;
            RevisionLine."Old Grade Code" := Employee."Grade Code";
          END;

          RevisionLine."Fixed/Percent" := EmployeePayElements."Fixed/Percent";
          RevisionLine."Amount Calculation Type" := EmployeePayElements."Amount Calculation Type";
          RevisionLine."Base Pay Elements" := EmployeePayElements."Base Pay Elements";
          RevisionLine."Last Drawn Amount" := EmployeePayElements.Amount;
          RevisionLine."Last Drawn Percent (%)" := EmployeePayElements."Percent (%)";
          RevisionLine."Sorting Order" := EmployeePayElements."Sorting Order";
          RevisionLine."New Effective Date" := NewEffectiveDate;
          RevisionLine."Excluded In Pay Slip" := EmployeePayElements."Excluded In Pay Slip";
          RevisionLine."Employee Category" := Employee."Employee Category";

          IF NOT RevisionLine.INSERT THEN;

        UNTIL EmployeePayElements.NEXT = 0;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72007 Payroll Data Creation
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            "Pay HR Pay Setup";
            "Pay Year";
            "Pay Shift Master";
            "Pay Weekly Off";
            "Pay Holiday";
            "Pay Grade";
            "Pay Elements";
            "Pay ESI Setup";
            "Pay PF Setup";
            "Pay PT Setup";
            "Pay Leave Setup";
            "Pay Business Posting Group";
            "Pay Product Posting Group";
            "Pay General Posting Group";
            "Pay Employee Posting Group";

            MESSAGE('%1', 'System Defined Data is Created..');
          END;

  }
  CODE
  {

    PROCEDURE "Pay HR Pay Setup"@1000000000();
    VAR
      HRPayrollSetup@1000000000 : Record 72051;
    BEGIN
      WITH HRPayrollSetup DO  BEGIN

      INIT;
      "Location Code" := 'HO';
      "Location Name" := 'Head Office';
      IF NOT INSERT THEN;

      END;
    END;

    PROCEDURE "Pay Year"@1000000013();
    VAR
      PayrollYear@1000000000 : Record 72054;
    BEGIN
      WITH PayrollYear DO  BEGIN

         INIT;
         "Year Code"       := '2008-2008';
         "Year Type"       := "Year Type"::"Salary Year";
         "Year Start Date" := 010108D;
         "Year End Date"   := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2008';
         "Year Type"        := "Year Type"::"PF Year";
         "Year Start Date"  := 010108D;
         "Year End Date"    := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2008';
         "Year Type"        := "Year Type"::"ESI Year";
         "Year Start Date"  := 010108D;
         "Year End Date"    := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2008';
         "Year Type"        := "Year Type"::"Income Tax Year";
         "Year Start Date"  := 010108D;
         "Year End Date"    := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2008';
         "Year Type"        := "Year Type"::"Bonus Year";
         "Year Start Date"  := 010108D;
         "Year End Date"    := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2008';
         "Year Type"        := "Year Type"::"Leave Year";
         "Year Start Date"  := 010108D;
         "Year End Date"    := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2008';
         "Year Type"        := "Year Type"::"6";
         "Year Start Date"  := 010108D;
         "Year End Date"    := 311208D;
         IF NOT INSERT THEN;

         INIT;
         "Year Code"        := '2008-2009';
         "Year Type"        := "Year Type"::"7";
         "Year Start Date"  := 040108D;
         "Year End Date"    := 030109D;
         IF NOT INSERT THEN;

      END;
    END;

    PROCEDURE "Pay Shift Master"@1000000006();
    VAR
      Shift@1000000000 : Record 72059;
    BEGIN
      WITH Shift DO  BEGIN

         INIT;
         Code         := 'GEN';
         Description  := 'General Shift';
         "First Half Starting Time"  := 090000T;
         "First Half Ending Time"    := 130000T;
         "Second Half Starting Time" := 140000T;
         "Second Half Ending Time"   := 180000T;
         "Break Start Time"          := 130000T;
         "Break End Time"            := 140000T;
         VALIDATE("First Half Starting Time");
         VALIDATE("First Half Ending Time");
         VALIDATE("Second Half Starting Time");
         VALIDATE("Second Half Ending Time");
         VALIDATE("Break Start Time");
         VALIDATE("Break End Time");

         IF NOT INSERT THEN;

         INIT;
         Code         := 'I';
         Description  := 'First Shift';
         "First Half Starting Time"  := 070000T;
         "First Half Ending Time"    := 110000T;
         "Second Half Starting Time" := 110000T;
         "Second Half Ending Time"   := 150000T;
         "Break Start Time"          := 0T;
         "Break End Time"            := 0T;
         VALIDATE("First Half Starting Time");
         VALIDATE("First Half Ending Time");
         VALIDATE("Second Half Starting Time");
         VALIDATE("Second Half Ending Time");
         VALIDATE("Break Start Time");
         VALIDATE("Break End Time");

         IF NOT INSERT THEN;

         INIT;
         Code         := 'II';
         Description  := 'Second Shift';
         "First Half Starting Time"  := 150000T;
         "First Half Ending Time"    := 190000T;
         "Second Half Starting Time" := 190000T;
         "Second Half Ending Time"   := 230000T;
         "Break Start Time"          := 0T;
         "Break End Time"            := 0T;
         VALIDATE("First Half Starting Time");
         VALIDATE("First Half Ending Time");
         VALIDATE("Second Half Starting Time");
         VALIDATE("Second Half Ending Time");
         VALIDATE("Break Start Time");
         VALIDATE("Break End Time");

         IF NOT INSERT THEN;

         INIT;
         Code         := 'III';
         Description  := 'Third Shift';
         "First Half Starting Time"  := 230000T;
         "First Half Ending Time"    := 030000T;
         "Second Half Starting Time" := 030000T;
         "Second Half Ending Time"   := 070000T;
         "Break Start Time"          := 0T;
         "Break End Time"            := 0T;
         VALIDATE("First Half Starting Time");
         VALIDATE("First Half Ending Time");
         VALIDATE("Second Half Starting Time");
         VALIDATE("Second Half Ending Time");
         VALIDATE("Break Start Time");
         VALIDATE("Break End Time");

         IF NOT INSERT THEN;
      END;
    END;

    PROCEDURE "Pay Weekly Off"@1000000001();
    VAR
      WeekOff@1000000000 : Record 72056;
    BEGIN
      WITH WeekOff DO  BEGIN
        INIT;
        "Calendar Year"             := '2008-2009';
        "Day No."                   := 6;
        Day                         := Day::Saturday;
        "Week Wise (Weekly Off)"    := "Week Wise (Weekly Off)"::"All Week";
        "First Half (Weekly Off)"   := FALSE;
        "Second Half (Weekly Off)"  := TRUE;
        "Non Working Days"          := TRUE;
        IF INSERT THEN;

        INIT;
        "Calendar Year"             := '2008-2009';
        "Day No."                   := 7;
        Day                         := Day::Sunday;
        "Week Wise (Weekly Off)"    := "Week Wise (Weekly Off)"::"All Week";
        "First Half (Weekly Off)"   := TRUE;
        "Second Half (Weekly Off)"  := TRUE;
        "Non Working Days"          := TRUE;
        IF INSERT THEN;
      END;
    END;

    PROCEDURE "Pay Holiday"@1000000002();
    VAR
      Holidays@1000000000 : Record 72057;
    BEGIN
      WITH Holidays DO  BEGIN
        INIT;
        "Calendar Year"         := '2008-2009';
        "Holiday Date"          := CALCDATE('CM',DMY2DATE(26,1,DATE2DMY(TODAY,3)));
        "Holiday Name"          := 'Republic Day';
        "First Half (Holiday)"  := TRUE;
        "Second Half (Holiday)" := TRUE;
        "Non Working Days"      := TRUE;
        IF INSERT THEN;

        "Calendar Year"         := '2008-2009';
        "Holiday Date"          := CALCDATE('CM',DMY2DATE(6,4,DATE2DMY(TODAY,3)));
        "Holiday Name"          := 'Good Friday';
        "First Half (Holiday)"  := TRUE;
        "Second Half (Holiday)" := TRUE;
        "Non Working Days"      := TRUE;
        IF INSERT THEN;

        "Calendar Year"         := '2008-2009';
        "Holiday Date"          := CALCDATE('CM',DMY2DATE(14,4,DATE2DMY(TODAY,3)));
        "Holiday Name"          := 'Tamil New Year';
        "First Half (Holiday)"  := TRUE;
        "Second Half (Holiday)" := TRUE;
        "Non Working Days"      := TRUE;
        IF INSERT THEN;

        "Calendar Year"         := '2008-2009';
        "Holiday Date"          := CALCDATE('CM',DMY2DATE(15,8,DATE2DMY(TODAY,3)));
        "Holiday Name"          := 'Independance Day';
        "First Half (Holiday)"  := TRUE;
        "Second Half (Holiday)" := TRUE;
        "Non Working Days"      := TRUE;
        IF INSERT THEN;

        "Calendar Year"         := '2008-2009';
        "Holiday Date"          := CALCDATE('CM',DMY2DATE(9,11,DATE2DMY(TODAY,3)));
        "Holiday Name"          := 'Deepavali';
        "First Half (Holiday)"  := TRUE;
        "Second Half (Holiday)" := TRUE;
        "Non Working Days"      := TRUE;
        IF INSERT THEN;

        "Calendar Year"         := '2008-2009';
        "Holiday Date"          := CALCDATE('CM',DMY2DATE(28,12,DATE2DMY(TODAY,3)));
        "Holiday Name"          := 'Christmas';
        "First Half (Holiday)"  := TRUE;
        "Second Half (Holiday)" := TRUE;
        "Non Working Days"      := TRUE;
        IF INSERT THEN;
      END;
    END;

    PROCEDURE "Pay Grade"@1000000007();
    VAR
      Grade@1000000000 : Record 72061;
    BEGIN
      WITH Grade DO  BEGIN

        INIT;
        "Grade Code" := 'JR MGR';
        "Grade Name" := 'JR Manager';
        IF NOT INSERT THEN;

        INIT;
        "Grade Code" := 'MGR';
        "Grade Name" := 'Manager';
        IF NOT INSERT THEN;

        INIT;
        "Grade Code" := 'SR MGR';
        "Grade Name" := 'SR Manager';

        IF NOT INSERT THEN;
      END;
    END;

    PROCEDURE "Pay Elements"@1000000015();
    VAR
      PayElements@1000000000 : Record 72060;
    BEGIN
      WITH PayElements DO  BEGIN

        INIT;
        "Pay Element Code"              := 'BASIC';
        Description                     := 'Basic';
        "Pay Slip Printing Caption"     := 'BASIC';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Base Pay Elements"             := '';
        "Base Amount ( For % )"         := 0;
        Amount                        := 0;
        "Sorting Order"                 := 10;
        "Regular Element"               := TRUE;
        "Variable Element"              := FALSE;
        "Eligible for ESI Earnings"              := TRUE;
        "Eligible for PF"               := TRUE;
        "Eligible for PT"               := TRUE;
        "Eligible for OT"               := TRUE;
        "Eligible for Bonus"            := TRUE;
        "Eligible for Leave Encashment" := TRUE;
        "Eligible for Gratuity"         := TRUE;
        "Eligible for Income Tax"       := TRUE;
        "Included In Pay Slip"          := TRUE;
        "Excluded In Pay Slip"                 := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'DA';
        Description                     := 'Dearness Allowence';
        "Pay Slip Printing Caption"     := 'DA';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Percent;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Base Pay Elements"             := 'BASIC';
        "Base Amount ( For % )"         := 0;
        Amount                        := 0;
        "Sorting Order"                 := 20;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'ALLOWANCE';
        Description                     := 'Allowance';
        "Pay Slip Printing Caption"     := 'ALLOWANCE';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 30;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'OT';
        Description                     := 'Over Time';
        "Pay Slip Printing Caption"     := 'OT';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Base Pay Elements"             := '';
        "Base Amount ( For % )"         := 0;
        "Sorting Order"                 := 40;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'MISC-EARN-01';
        Description                     := 'Misc Earnings-01';
        "Pay Slip Printing Caption"     := 'MISC EARN-01';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Sorting Order"                 := 50;
        "Regular Element"               := FALSE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'MISC-EARN-02';
        Description                     := 'Misc Earnings-02';
        "Pay Slip Printing Caption"     := 'MISC EARN-02';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Sorting Order"                 := 60;
        "Regular Element"               := FALSE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'BONUS';
        Description                     := 'Bonus Allowance';
        "Pay Slip Printing Caption"     := 'BONUS';
        "Paid Category"                 := "Paid Category"::Yearly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 100;
        "Regular Element"               := TRUE;
        "All Grade"                     := FALSE;
        "Predefined Code"               := FALSE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'GRATUITY';
        Description                     := 'Gratuity';
        "Pay Slip Printing Caption"     := 'GRATUITY';
        "Paid Category"                 := "Paid Category"::Yearly;
        "Pay Type"                      := "Pay Type"::Addition;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 110;
        "Regular Element"               := TRUE;
        "All Grade"                     := FALSE;
        "Predefined Code"               := FALSE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'LTA';
        Description                     := 'Leave Travel Allowance';
        "Pay Slip Printing Caption"     := 'LTA';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Reimbursement;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 200;
        "Regular Element"               := TRUE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'MEDICAL REIM';
        Description                     := 'Medical Reimbursement';
        "Pay Slip Printing Caption"     := 'MEDICAL REIM';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Reimbursement;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 210;
        "Regular Element"               := TRUE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'ESI';
        Description                     := 'Employee State Insurance';
        "Pay Slip Printing Caption"     := 'ESI';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 300;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'PF';
        Description                     := 'Provident Fund';
        "Pay Slip Printing Caption"     := 'PF';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 310;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'PT';
        Description                     := 'Professional Tax';
        "Pay Slip Printing Caption"     := 'PT';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 320;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'TDS';
        Description                     := 'Tax Deducted at Source';
        "Pay Slip Printing Caption"     := 'TDS';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 330;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'LIC';
        Description                     := 'LIC';
        "Pay Slip Printing Caption"     := 'LIC';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Pay Day";
        "Sorting Order"                 := 340;
        "Regular Element"               := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'CANTEEN';
        Description                     := 'Canteen Deductions';
        "Pay Slip Printing Caption"     := 'CANTEEN';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Sorting Order"                 := 400;
        "Regular Element"               := FALSE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'MISC-DEDU-01';
        Description                     := 'Misc Deduction-01';
        "Pay Slip Printing Caption"     := 'MISC DEDU-01';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Sorting Order"                 := 410;
        "Regular Element"               := FALSE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'MISC-DEDU-02';
        Description                     := 'Misc Deduction-02';
        "Pay Slip Printing Caption"     := 'MISC DEDU-02';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Sorting Order"                 := 420;
        "Regular Element"               := FALSE;
        "Variable Element"              := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := TRUE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'HLOAN';
        Description                     := 'Housing Loan';
        "Pay Slip Printing Caption"     := 'HLOAN';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Base Pay Elements"             := '';
        "Base Amount ( For % )"         := 0;
        Amount                        := 50000.0;
        "Sorting Order"                 := 500;
        "Loan Element"                  := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := FALSE;
        IF NOT INSERT THEN;

        INIT;
        "Pay Element Code"              := 'VLOAN';
        Description                     := 'Vechicle Loan';
        "Pay Slip Printing Caption"     := 'VEC LOAN';
        "Paid Category"                 := "Paid Category"::Monthly;
        "Pay Type"                      := "Pay Type"::Deduction;
        "Fixed/Percent"                 := "Fixed/Percent"::Fixed;
        "Amount Calculation Type"       := "Amount Calculation Type"::"Full Amount";
        "Base Pay Elements"             := '';
        "Base Amount ( For % )"         := 0;
        Amount                        := 25000.0;
        "Sorting Order"                 := 510;
        "Loan Element"                  := TRUE;
        "All Grade"                     := TRUE;
        "Predefined Code"               := FALSE;
        IF NOT INSERT THEN;
      END;
    END;

    PROCEDURE "Pay ESI Setup"@1000000003();
    VAR
      ESISetup@1000000000 : Record 72063;
    BEGIN
      WITH ESISetup DO  BEGIN

        INIT;
        "Effective Date"          := 010108D;
        "ESI Gross Salary Amount" := 10000;
        "ESI % ( Employee )"      := 4.75;
        "ESI % ( Company )"       := 1.75;
        "ESI Rounding Amount"     := 0.5;
        "ESI Rounding Type"       := "ESI Rounding Type"::Nearest;
        IF NOT INSERT THEN;

      END
    END;

    PROCEDURE "Pay PF Setup"@1000000004();
    VAR
      PFSetup@1000000000 : Record 72064;
    BEGIN
      WITH PFSetup DO  BEGIN

        INIT;
        "Effective Date"              := 010108D;
        "PF Gross Salary Limit"       := 6500;
        "EPS Gross Salary Limit"      := 6500;
        "Employee PF (Employee) %"    := 12.0;
        "Employer PF (Company) %"     := 3.67;
        "Employer EPS ( Company) %"   := 8.33;
        "Employee VPF ( Employee) %"  := 12.0;
        "PF Admin Charges %"          := 1.1;
        "PF EDLI %"                   := 0.5;
        "PF RIFA %"                   := 0.01;
        "PF Rounding Amount"          := 1.0;
        "PF Rounding Type"            := "PF Rounding Type"::Nearest;

        IF NOT INSERT THEN;

      END
    END;

    PROCEDURE "Pay PT Setup"@1000000005();
    VAR
      PTSetup@1000000000 : Record 72065;
    BEGIN
      WITH PTSetup DO  BEGIN
        INIT;
        "Effective Date"                  := 010108D;
        "Branch Code"                   := 'TN';
        "Branch Name"                   := 'Tamil Nadu';
        IF NOT INSERT THEN;
      END
    END;

    PROCEDURE "Pay Leave Setup"@1000000008();
    VAR
      LeaveMaster@1000000000 : Record 72069;
      LVCode@1000000001 : Code[4];
    BEGIN
      LVCode := '1M';
      {
      WITH  LeaveMaster DO  BEGIN

        INIT;
        "Leave Code"                      := 'CL';
        Description                       := 'Casual Leave';
        Regular                           := TRUE;
        EVALUATE("Leave in a Credit Int. Regular", LVCode);
        Probationary                      := TRUE;
        "Credit Interval Prob."           := 12;
        "Leave in a Credit Int. Prob."                      := TRUE;
        "Maximum Encash Leave"               := "Maximum Encash Leave"::"0";
        EVALUATE("Carry Forward",LVCode);
        "Paid Leave"    := 0.5;
        "UnPaid Leave"        := 1;
        "Create Leave Balance"        := 6;
        "First Half Daily Attendance"                    := FALSE;
        "Second Half Daily Attendance"            := 0;
        "Maximum Encash Leave"            := 0;
        "All Grade"                       := TRUE;
        "Carry Forward"                   := FALSE;
        "Applicable Date"                 := TODAY;

        VALIDATE(Probationary);
        VALIDATE("Paid Leave");


        IF NOT INSERT THEN;

      END;
      }
    END;

    PROCEDURE "Pay Business Posting Group"@1000000009();
    VAR
      PayrollBusinessPostingGroup@1000000000 : Record 72074;
    BEGIN
      WITH  PayrollBusinessPostingGroup DO  BEGIN

         INIT;
         Code                  := 'EMP';
         Description           := 'Employee';

         IF NOT INSERT THEN;
      END;
    END;

    PROCEDURE "Pay Product Posting Group"@1000000010();
    VAR
      PayrollProductPostingGroup@1000000000 : Record 72075;
    BEGIN
      WITH PayrollProductPostingGroup DO  BEGIN

         INIT;
         Code                   := 'BASIC';
         Description            := 'Basic';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'DA';
         Description            := 'Dearness Allowance';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'ALLOWANCE';
         Description            := 'Allowance';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'OT';
         Description            := 'Over Time';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'BONUS';
         Description            := 'Bonus';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'GRATUITY';
         Description            := 'Gratuity';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'LTA';
         Description            := 'Leave Travel Allowance';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'MEDICAL REIM';
         Description            := 'Medical Reimburesment';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'ESI';
         Description            := 'Employee State Insurance Corp.';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'PF';
         Description            := 'Provident Fund';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'PT';
         Description            := 'Professional Tax';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'TDS';
         Description            := 'Tax Deducted at Source';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'LIC';
         Description            := 'Life Insurance Co. Deduction';
         IF NOT INSERT THEN;

         INIT;
         Code                   := 'CANTEEN';
         Description            := 'Canteen Deduction';
         IF NOT INSERT THEN;

      END;
    END;

    PROCEDURE "Pay General Posting Group"@1000000011();
    VAR
      PayrollGeneralPostingSetup@1000000000 : Record 72076;
    BEGIN
      WITH PayrollGeneralPostingSetup DO  BEGIN

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'BASIC';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'DA';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'ALLOWANCE';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'OT';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'BONUS';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'GRATUITY';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'LTA';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'MEDICAL REIM';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'ESI';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'PF';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'PT';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'TDS';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'LIC';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

         INIT;
         "Pay Bus.Posting Group"    := 'EMP';
         "Pay Prod. Posting Group"  := 'CANTEEN';
         "G/L Code"                 := '8720';

        IF NOT INSERT THEN;

      END;
    END;

    PROCEDURE "Pay Employee Posting Group"@1000000012();
    VAR
      PayrollEmployeePostingGroup@1000000000 : Record 72077;
    BEGIN
      WITH PayrollEmployeePostingGroup DO  BEGIN

         INIT;
         Code                          := 'STAFF';
         Description                   := 'Staff';
         "Salary Payable1 A/c"          := '8720';
         "ESI Payable A/c"             := '8720';
         "PF Payable A/c"              := '8720';
         "EPS Payable A/c"             := '8720';
         "PF Admin Charge Payable A/c" := '8720';
         "EDLI Payable A/c"            := '8720';
         "RIFA Payable A/c"            := '8720';
         "PT Payable A/c"              := '8720';
         "TDS Payable A/c"             := '8720';
         "Bonus Payable A/c"           := '8720';
         "Arrear Salary Payable A/c"   := '8720';
         "Loan Refundable A/c"         := '8720';

        IF NOT INSERT THEN;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72008 General Functions
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProgressWindow@1000000004 : Dialog;
      Counter@1000000003 : Integer;
      CounterOK@1000000002 : Integer;
      NoofRecordsNew@1000000001 : Integer;
      Indentation@1000000000 : Integer;

    PROCEDURE OpenWindow@1000000017(TextMessage1@1000000001 : Text[50];TextMessage2@1000000002 : Text[50]);
    BEGIN
      Counter := 0;
      CounterOK := 0;
      Indentation := STRLEN(TextMessage2);

      IF STRLEN('Employee No') > Indentation THEN
        Indentation := STRLEN('Employee No');

      IF STRLEN('Record No') > Indentation THEN
        Indentation := STRLEN('Record No');

      ProgressWindow.OPEN(
        TextMessage1 +
        PADSTR(TextMessage2,Indentation) + ' @1@@@@@@@@@@@@@@@@@@@@\' +
        PADSTR('Employee No',Indentation) + ' #2######\' +
        PADSTR('Record No',Indentation) + ' #3######');
    END;

    PROCEDURE UpdateWindow@1000000018(LEmployeeNo@1000000000 : Code[20];NoofRecordsNew@1000000001 : Integer);
    BEGIN
      Counter := Counter + 1;
      IF NoofRecordsNew > 0 THEN BEGIN
        ProgressWindow.UPDATE(1,ROUND(Counter / NoofRecordsNew * 10000,1));
        ProgressWindow.UPDATE(2,LEmployeeNo);
        ProgressWindow.UPDATE(3,Counter);
      END;
    END;

    PROCEDURE CloseWindow@1000000019();
    BEGIN
      ProgressWindow.CLOSE;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72009 Income Tax Creation / Posting
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CUGeneralFunctions@1000000000 : Codeunit 72008;
      IncomeTaxHeader@1102159004 : Record 72067;
      IncomeTaxLine@1102159001 : Record 72068;
      ProjectedMonth@1000000001 : Integer;
      GrossEarningSalary@1000000007 : Decimal;
      LocationCode@1102159000 : Code[20];
      SalaryPlanCode@1102159002 : Code[20];
      AssessmentYear@1102159003 : Code[20];
      EmployeeNo@1102155000 : Code[20];
      LastMonthGrossSalary@1102159005 : Decimal;
      TotalBasicDAAmount@1102155002 : Decimal;
      TotalHRAAmount@1102155001 : Decimal;
      TotalRentPaid@1102155003 : Decimal;
      CalcHRAAmount@1102155004 : Decimal;
      TaxGender@1102155005 : 'Male,Female,Sr.Citizen';

    PROCEDURE "Create Income Tax Records"@1000000000(LocationCode@1000000000 : Code[20];SalaryPlanCode@1000000001 : Code[20];AssessmentYear@1000000002 : Code[20]);
    VAR
      IncomeTax@1000000003 : Record 72101;
      Employee@1000000005 : Record 5200;
      RecordCount@1000000004 : Integer;
      CurrentRecord@1000000006 : Integer;
    BEGIN
      IF NOT CONFIRM('Do U Want ( Create / Add New Employee ) to Income Tax file ',FALSE) THEN
        EXIT;

      IF AssessmentYear <> '' THEN BEGIN

        Employee.RESET;
        Employee.SETRANGE("Location Code",LocationCode);
        Employee.SETRANGE("Salary Plan Code",SalaryPlanCode);
      //Employee.SETRANGE(Status,Employee.Status::Active);
        IF Employee.FINDFIRST THEN BEGIN
          RecordCount := Employee.COUNT;
          CUGeneralFunctions.OpenWindow('Income Tax Creation\\','Progress');

          REPEAT
            IncomeTax.INIT;
            IncomeTax."Location Code" := LocationCode;
            IncomeTax."Salary Plan Code" := SalaryPlanCode;
            IncomeTax."Assessment Year" := AssessmentYear;
            IncomeTax."Employee No" := Employee."No.";
            IncomeTax.Name := Employee."First Name" + ' ' + Employee.Initials;
            IncomeTax.Designation := Employee."Designation Name";
            IncomeTax."P.A.N.No" := Employee."PAN No";
            IncomeTax.Sex := Employee.Gender;

            CUGeneralFunctions.UpdateWindow(IncomeTax."Employee No", RecordCount);

            IF IncomeTax.INSERT THEN;

          UNTIL Employee.NEXT = 0;
        END;
        CUGeneralFunctions.CloseWindow;
        MESSAGE('Process Completed..');
      END
    END;

    PROCEDURE "Income Tax Zero Updation"@1000000001(LocationCode@1000000002 : Code[20];SalaryPlanCode@1000000001 : Code[20];AssessmentYear@1000000000 : Code[20]);
    VAR
      PayrollYear@1102159001 : Record 72054;
      PayrollMonthYear@1102159000 : Record 72055;
      IncomeTax@1000000003 : Record 72101;
      RecordCount@1000000004 : Integer;
      IncomeTaxRecRef@1000000005 : RecordRef;
      IncomeTaxFieldRef@1000000006 : FieldRef;
      I@1000000007 : Integer;
    BEGIN
      IF NOT CONFIRM('Do U Want Initialize All Fields',FALSE) THEN
        EXIT;

      IncomeTax.RESET;
      IncomeTax.SETRANGE("Location Code",LocationCode);
      IncomeTax.SETRANGE("Salary Plan Code",SalaryPlanCode);
      IncomeTax.SETRANGE("Assessment Year",AssessmentYear);
      IncomeTax.SETRANGE(Verified,FALSE);
      IF IncomeTax.FINDFIRST THEN BEGIN
        RecordCount := IncomeTax.COUNT;
        CUGeneralFunctions.OpenWindow('Income Tax Creation\\','Progress');
        REPEAT
          IncomeTaxRecRef.GETTABLE(IncomeTax);
          FOR I := 14 TO IncomeTaxRecRef.FIELDCOUNT - 1 DO BEGIN
            IncomeTaxFieldRef := IncomeTaxRecRef.FIELD(I);
            IncomeTaxFieldRef.VALUE := 0;
            IncomeTaxRecRef.MODIFY;
          END;

          CUGeneralFunctions.UpdateWindow(IncomeTax."Employee No",RecordCount);
        UNTIL IncomeTax.NEXT = 0;

        PayrollYear.RESET;
        PayrollYear.SETRANGE("Location Code",LocationCode);
        PayrollYear.SETRANGE("Salary Plan Code",SalaryPlanCode);
        PayrollYear.SETRANGE("Year Code",AssessmentYear);
        IF PayrollYear.FINDFIRST THEN BEGIN
          PayrollMonthYear.RESET;
          PayrollMonthYear.SETRANGE("Location Code",LocationCode);
          PayrollMonthYear.SETRANGE("Salary Plan Code",SalaryPlanCode);
          PayrollMonthYear.SETRANGE("Salary Start Date", PayrollYear."Year Start Date",PayrollYear."Year End Date");
          IF PayrollMonthYear.FINDFIRST THEN
            PayrollMonthYear.MODIFYALL("Income Tax Salary Posted", FALSE);
        END;

        CUGeneralFunctions.CloseWindow;
        MESSAGE('Zero Updated..!!');
      END;
    END;

    PROCEDURE "Pay Elements Updation"@1000000002(LocationCode@1000000011 : Code[20];SalaryPlanCode@1000000010 : Code[20];AssessmentYear@1000000009 : Code[20];SalaryYearCode@1000000017 : Code[20];SalaryCycleCode@1000000012 : Code[20];UpdateFlag@1000000001 : Boolean;LProjectionMonth@1102155000 : Integer);
    VAR
      IncomeTax@1000000000 : Record 72101;
      PayrollMonthYear@1000000008 : Record 72055;
      RecordCount@1000000002 : Integer;
      PayElements@1000000015 : Record 72060;
    BEGIN
      IF NOT UpdateFlag THEN
        ERROR('Please Tick the Update Monthly Salary (Yes/No) & Select the Salary Cyclic Code');

      IF NOT CONFIRM('Do U Want Run Salary Updation Process',FALSE) THEN
        EXIT;

      PayrollMonthYear.RESET;
      PayrollMonthYear.SETRANGE("Location Code",LocationCode);
      PayrollMonthYear.SETRANGE("Salary Plan Code",SalaryPlanCode);
      PayrollMonthYear.SETRANGE("Salary Year Code",SalaryYearCode);
      PayrollMonthYear.SETRANGE("Salary Cyclic Code", SalaryCycleCode);
      PayrollMonthYear.SETRANGE("Income Tax Salary Posted",TRUE);
      IF PayrollMonthYear.FINDFIRST THEN
        ERROR('Salary Already Process for this period');

      RecordCount := 0;
      //GrossEarningSalary  := 0; PFAmount := 0; LICAmount := 0;
      //IncomeTaxPaidAmount := 0; ProfessionalTaxAmount := 0;

      ProjectedMonth := LProjectionMonth;

      IncomeTax.RESET;
      IncomeTax.SETRANGE("Location Code",LocationCode);
      IncomeTax.SETRANGE("Salary Plan Code",SalaryPlanCode);
      IncomeTax.SETRANGE("Assessment Year",AssessmentYear);
      IncomeTax.SETRANGE(Verified,FALSE);
      IF IncomeTax.FINDFIRST THEN BEGIN
        RecordCount := IncomeTax.COUNT;
        CUGeneralFunctions.OpenWindow('Income Tax Salary Updation\\','Progress');
        REPEAT
          IncomeTax."Salary Year" := SalaryYearCode;
          IncomeTax."Salary Cyclic Code" := SalaryCycleCode;

          LastMonthGrossSalary := 0;
          PayElements.RESET;
          PayElements.SETRANGE("Location Code",LocationCode);
          PayElements.SETRANGE("Salary Plan Code", SalaryPlanCode);
          IF PayElements.FINDFIRST THEN
            REPEAT
              "Processed Salary Checking"(PayElements,IncomeTax);
            UNTIL PayElements.NEXT = 0;
        UNTIL IncomeTax.NEXT = 0;  //  Income Tax Loop Ends Here.
      END;

      PayrollMonthYear.RESET;
      PayrollMonthYear.SETRANGE("Location Code", LocationCode);
      PayrollMonthYear.SETRANGE("Salary Plan Code", SalaryPlanCode);
      PayrollMonthYear.SETRANGE("Salary Year Code", SalaryYearCode);
      PayrollMonthYear.SETRANGE("Salary Cyclic Code", SalaryCycleCode);
      IF PayrollMonthYear.FINDFIRST THEN BEGIN
        PayrollMonthYear."Income Tax Salary Posted" := TRUE;
        PayrollMonthYear.MODIFY;
      END;

      CUGeneralFunctions.CloseWindow;

      //MESSAGE('         Total Gross Earnings => %1', ROUND(GrossEarningSalary),2);
      //MESSAGE('Total Professional Tax Amount => %1', ProfessionalTaxAmount);
      //MESSAGE('              Total PF Amount => %1', PFAmount);
      //MESSAGE('             Total LIC Amount => %1', LICAmount);
      //MESSAGE(' Total Income Tax Paid Amount => %1', IncomeTaxPaidAmount);

      MESSAGE('Updation Completed..!!');
    END;

    PROCEDURE "Processed Salary Checking"@1000000004(PayElements@1000000000 : Record 72060;VAR IncomeTax@1000000002 : Record 72101);
    VAR
      ProcessedSalary@1000000001 : Record 72090;
    BEGIN
      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",     PayElements."Location Code");
      ProcessedSalary.SETRANGE("Salary Plan Code",  PayElements."Salary Plan Code");
      ProcessedSalary.SETRANGE("Salary Cycle Code", IncomeTax."Salary Cyclic Code");
      ProcessedSalary.SETRANGE("Employee No",       IncomeTax."Employee No");
      ProcessedSalary.SETRANGE("Pay Element Code",  PayElements."Pay Element Code");
      IF ProcessedSalary.FIND('-') THEN

         REPEAT
            IF ProcessedSalary."Pay Type" = ProcessedSalary."Pay Type"::Addition THEN BEGIN

               IF PayElements."Eligible for Income Tax" THEN BEGIN
                    LastMonthGrossSalary                       += ProcessedSalary."Payable Amount";
                    IncomeTax."Last Month Gross Salary"        := LastMonthGrossSalary;
                    IncomeTax."Salary Gross Earning Actual"    += ProcessedSalary."Payable Amount";
                    IncomeTax."Salary Gross Earning Projected" := (LastMonthGrossSalary * ProjectedMonth);

               IF IncomeTax."Projection Not Required" THEN
                  IncomeTax."Salary Gross Earning Projected" := 0;

                IncomeTax."Salary Gross Earning Total"     := ( IncomeTax."Salary Gross Earning Actual" +
                                                                IncomeTax."Salary Gross Earning Projected" );
                GrossEarningSalary += ProcessedSalary."Payable Amount";
              END;
           END;

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-01" THEN
             IncomeTax.Bonus += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-02" THEN
             IncomeTax."Leave Salary" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-03" THEN
             IncomeTax."Arrears Amount" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-04" THEN
             IncomeTax."D.A Arrears - 1" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-05" THEN
             IncomeTax."D.A Arrears - 2" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-06" THEN
             IncomeTax."HRA Arrears" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-07" THEN
             IncomeTax."Hon Amount" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-08" THEN
             IncomeTax."Medical Reimburement" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-09" THEN
             IncomeTax."Previous Job Earnings" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-10" THEN
             IncomeTax.LTA += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-11" THEN
             IncomeTax."Perk-1" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-12" THEN
             IncomeTax."Perk-2" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-13" THEN
             IncomeTax."Other Earnings-1" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-14" THEN
             IncomeTax."Other Earnings-2" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-15" THEN
             IncomeTax.HRA += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-16" THEN
             IncomeTax."Conv.Allowance" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-17" THEN
             IncomeTax."Transport Conveyance" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-19" THEN
             IncomeTax."Food Plus Card Allow" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-20" THEN
             IncomeTax."Professional Tax" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-21" THEN
             IncomeTax."Entertainment Tax" += ABS(ProcessedSalary."Payable Amount");

      //     IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"E-22" THEN
      //        IncomeTax."Housing Loan Interest" += ABS(ProcessedSalary."Payable Amount");

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"D-01" THEN BEGIN
             IncomeTax."Actual - PF (Salary)" += ABS(ProcessedSalary."Payable Amount");
             IncomeTax."Proj - PF (Salary)" := ABS(ProcessedSalary."Payable Amount" * ProjectedMonth);
           END;

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"D-02" THEN BEGIN
             IncomeTax."Actual - LIC Premium (Salary)" += ABS(ProcessedSalary."Payable Amount");
             IncomeTax."Proj - LIC Premium (Salary)" := ABS(ProcessedSalary."Payable Amount" * ProjectedMonth);
           END;

           IF PayElements."Income Tax Link Code" = PayElements."Income Tax Link Code"::"D-03" THEN
             IncomeTax."Tax Paid" += ABS(ProcessedSalary."Payable Amount");

           IncomeTax."Remaining Month for Projection" := ProjectedMonth;

           "Insert Challan Details"(IncomeTax."Assessment Year",IncomeTax."Salary Year",ProcessedSalary);

           IncomeTax.MODIFY;

           CUGeneralFunctions.UpdateWindow(IncomeTax."Employee No",ProcessedSalary.COUNT);

         UNTIL ProcessedSalary.NEXT = 0;  // Processed Salary Ends Here.
    END;

    PROCEDURE "Insert Challan Details"@1000000003(AssessmentYear@1000000001 : Code[20];SalaryYear@1000000003 : Code[20];ProcessedSalary@1000000002 : Record 72090);
    VAR
      IncomeTaxChallanDetails@1000000000 : Record 72102;
      PayElements@1102159000 : Record 72060;
    BEGIN
      IncomeTaxChallanDetails.RESET;
      IncomeTaxChallanDetails.SETRANGE("Location Code", ProcessedSalary."Location Code");
      IncomeTaxChallanDetails.SETRANGE("Salary Plan Code",ProcessedSalary."Salary Plan Code");
      IncomeTaxChallanDetails.SETRANGE("Assessment Year", AssessmentYear);
      IncomeTaxChallanDetails.SETRANGE("Salary Cyclic Code",ProcessedSalary."Salary Cycle Code");
      IncomeTaxChallanDetails.SETRANGE("Employe No", ProcessedSalary."Employee No");

      IF NOT IncomeTaxChallanDetails.FINDFIRST THEN BEGIN
        IncomeTaxChallanDetails."Location Code" := ProcessedSalary."Location Code";
        IncomeTaxChallanDetails."Salary Plan Code" := ProcessedSalary."Salary Plan Code";
        IncomeTaxChallanDetails."Assessment Year" := AssessmentYear;
        IncomeTaxChallanDetails."Salary Year"       := SalaryYear;
        IncomeTaxChallanDetails."Salary Cyclic Code" := ProcessedSalary."Salary Cycle Code";
        IncomeTaxChallanDetails."Employe No"        := ProcessedSalary."Employee No";
        IncomeTaxChallanDetails."Salary Paid Date"  := ProcessedSalary."Payroll End Date";
        IncomeTaxChallanDetails."Challan Process Year" := DATE2DMY(IncomeTaxChallanDetails."Salary Paid Date",3);
        IncomeTaxChallanDetails."Challan Process Month" := DATE2DMY(IncomeTaxChallanDetails."Salary Paid Date",2);

         PayElements.GET(ProcessedSalary."Pay Element Code",ProcessedSalary."Location Code",ProcessedSalary."Salary Plan Code");
         IF PayElements."Eligible for Income Tax" THEN
           IF ProcessedSalary."Pay Type" = ProcessedSalary."Pay Type"::Addition THEN BEGIN
              IncomeTaxChallanDetails."Taxable Gross Salary" := ProcessedSalary."Payable Amount";
           END;

         IF ProcessedSalary."Pay Element Code" = 'IT' THEN BEGIN
            IncomeTaxChallanDetails."Challan Income Tax" :=  ABS(ProcessedSalary."Payable Amount");
            IncomeTaxChallanDetails.VALIDATE("Challan Income Tax", ABS(ProcessedSalary."Payable Amount"));
            IncomeTaxChallanDetails.VALIDATE("TDS/TCS Income Tax", ABS(ProcessedSalary."Payable Amount"));
            IncomeTaxChallanDetails."Total Deposit as Deductee" := ABS(ProcessedSalary."Payable Amount");
         END;
         IF IncomeTaxChallanDetails.INSERT THEN;
       END
      ELSE  BEGIN

         PayElements.GET(ProcessedSalary."Pay Element Code",ProcessedSalary."Location Code",ProcessedSalary."Salary Plan Code");

         IF PayElements."Eligible for Income Tax" THEN
           IF ProcessedSalary."Pay Type" = ProcessedSalary."Pay Type"::Addition THEN BEGIN
              IncomeTaxChallanDetails."Taxable Gross Salary" += ProcessedSalary."Payable Amount";
           END;

         IF ProcessedSalary."Pay Element Code" = 'IT' THEN BEGIN
            IncomeTaxChallanDetails."Challan Income Tax" :=  ABS(ProcessedSalary."Payable Amount");
            IncomeTaxChallanDetails.VALIDATE("Challan Income Tax", ABS(ProcessedSalary."Payable Amount"));
            IncomeTaxChallanDetails.VALIDATE("TDS/TCS Income Tax", ABS(ProcessedSalary."Payable Amount"));
            IncomeTaxChallanDetails."Total Deposit as Deductee" := ABS(ProcessedSalary."Payable Amount");
         END;
         IncomeTaxChallanDetails.MODIFY;
      END;
    END;

    PROCEDURE "Calculate Medical"@1102155002(LLocationCode@1102155003 : Code[20];LSalaryPlanCode@1102155002 : Code[20];LAssessmentYear@1102155001 : Code[20];LEmployeeNo@1102155000 : Code[20]);
    VAR
      IncomeTax@1102159000 : Record 72101;
      ITExemption@1102159001 : Record 72103;
    BEGIN
      //*******************GET IT EXEMPTIONS******************* START
      LocationCode := LLocationCode;
      SalaryPlanCode := LSalaryPlanCode;
      AssessmentYear := LAssessmentYear;

      "Get Income Tax Header";

      IncomeTax.RESET;
      IncomeTax.SETRANGE("Location Code",LocationCode);
      IncomeTax.SETRANGE("Salary Plan Code", SalaryPlanCode);
      IncomeTax.SETRANGE("Assessment Year",AssessmentYear);
      //IncomeTax.SETRANGE(IncomeTax."Employee No",EmployeeNo);
      IncomeTax.SETRANGE(Verified,FALSE);
      IF IncomeTax.FINDFIRST THEN
        REPEAT
          ITExemption.RESET;
          ITExemption.SETRANGE("Location Code",IncomeTax."Location Code");
          ITExemption.SETRANGE("Salary Plan Code",IncomeTax."Salary Plan Code");
          ITExemption.SETRANGE("Salary Year Code",IncomeTax."Assessment Year");
          ITExemption.SETRANGE("Employee No.",IncomeTax."Employee No");
          IF ITExemption.FINDFIRST THEN
            REPEAT
              IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::Insurance THEN
                IncomeTax."Actual - LIC Premium (Direct)" := ITExemption.Amount;

              IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::"Medical Bill" THEN
                IncomeTax."Medical Bill" := ITExemption.Amount;

              IncomeTaxHeader.TESTFIELD("Medical Claim Limit");

              IF IncomeTax."Medical Bill" > IncomeTaxHeader."Medical Claim Limit" THEN
                IncomeTax."Medical Bill" := IncomeTaxHeader."Medical Claim Limit";

             IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::"Loan Principle" THEN
                IncomeTax."Actual -Housing Loan Principal" := ITExemption.Amount;

             IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::"Loan Interest" THEN
                IncomeTax."Housing Loan Interest" := ITExemption.Amount;

             IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::Donation THEN
                IncomeTax."Actual - 80G (Donations)" := ITExemption.Amount;

      //       IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::"Rent Paid" THEN
      //          IncomeTax."Rent Received" := ITExemption.Amount;

             IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::"Rent Received" THEN
                IncomeTax."Rent Received" := ITExemption.Amount;

             IF ITExemption."Excemption Type" = ITExemption."Excemption Type"::"Transport Conveyance" THEN
                IncomeTax."Transport Conveyance" := ITExemption.Amount;

             IncomeTax.MODIFY;

            UNTIL ITExemption.NEXT = 0;
         UNTIL IncomeTax.NEXT = 0;

      //*******************GET IT EXEMPTIONS******************* STOP
    END;

    PROCEDURE "Get Income Tax Header"@1102155003();
    BEGIN
      IncomeTaxHeader.RESET;
      IncomeTaxHeader.SETRANGE("Location Code",    LocationCode);
      IncomeTaxHeader.SETRANGE("Salary Plan Code", SalaryPlanCode);
      IncomeTaxHeader.SETRANGE("Assessment Year",  AssessmentYear);
      IF NOT IncomeTaxHeader.FIND('-') THEN
         MESSAGE('Income Tax Setup not defined in Income Tax Header ..!!');

      IncomeTaxLine.RESET;
      IncomeTaxLine.SETRANGE("Location Code",    LocationCode);
      IncomeTaxLine.SETRANGE("Salary Plan Code", SalaryPlanCode);
      IncomeTaxLine.SETRANGE("Assessment Year",  AssessmentYear);
      IF NOT IncomeTaxLine.FIND('-') THEN
         MESSAGE('Income Tax Setup not defined in Income Tax Line ..!!');
    END;

    PROCEDURE "Calculate Income Tax"@1102159000(LLocationCode@1102159012 : Code[20];LSalaryPlanCode@1102159011 : Code[20];LAssessmentYear@1102159010 : Code[20];LEmployeeNo@1102159009 : Code[20]);
    VAR
      Employee@1102159008 : Record 5200;
      IncomeTax@1102159007 : Record 72101;
      Projection@1102159006 : Boolean;
      Proj80DedutionsTotalLimit@1102159005 : Decimal;
      Actu80DedutionsTotalLimit@1102159004 : Decimal;
      IncomeTo@1102159002 : Decimal;
      CondCheck@1102159001 : Boolean;
      DiffAmt@1102159000 : Decimal;
      IncomeTaxLine1@1102159013 : Record 72068;
      RecordCount@1102159014 : Integer;
    BEGIN
      //------------------------------//

      LocationCode   := LLocationCode;
      SalaryPlanCode := LSalaryPlanCode;
      AssessmentYear := LAssessmentYear;

      "Get Income Tax Header"();

      //----------------------- ------//
      // Initialize all the Variables
      IncomeTax.RESET;
      IncomeTax.SETRANGE("Location Code",    LLocationCode);
      IncomeTax.SETRANGE("Salary Plan Code", LSalaryPlanCode);
      IncomeTax.SETRANGE("Assessment Year",  LAssessmentYear);
      //IncomeTax.SETRANGE(Verified,           FALSE);

      IF LEmployeeNo <> 'ALL' THEN
         IncomeTax.SETRANGE("Employee No",      LEmployeeNo);

      RecordCount := IncomeTax.COUNT;
      CUGeneralFunctions.OpenWindow('Calculating Income Tax \\','Progress');

      IF IncomeTax.FIND('-') THEN BEGIN
      REPEAT

        WITH IncomeTax DO BEGIN

      //   "Calculate HRA New"(LocationCode,SalaryPlanCode,AssessmentYear,IncomeTax."Employee No");
      //   HRA :=  CalcHRAAmount;

         "Salary Gross Earning Total"     := 0; "Other Earnings Total"        := 0;
         "Exemptions Totals"              := 0; "Gross Salary Income"         := 0;
         "Gross Total Income"             := 0; "Actual - Total PF"           := 0;
         "Actual - Total LIC Premium"     := 0; "Actual - Total 80 Deduction" := 0;
         "Actual - Total 80A-Z Deduction" := 0; "Proj - Total PF"             := 0;
         "Proj - Total LIC Premium"       := 0; "Proj - Total 80 Deduction"   := 0;
         Proj80DedutionsTotalLimit        := 0; Actu80DedutionsTotalLimit     := 0;
         "Taxable Income"                 := 0; "Income Tax Amount"           := 0;
         "Surcharge Amount"               := 0; "Cess Amount"                 := 0;
         "Higher Edu Cess Amount"         := 0; "Total Tax Amount"            := 0;
         "Tax Balance"                    := 0; "Tax Per Month"               := 0;

      //--- Salary Earning Calculations

         "Salary Gross Earning Total" := "Salary Gross Earning Actual" + "Salary Gross Earning Projected";
         "Salary Gross Earning Total" := ROUND("Salary Gross Earning Total",1,'=');

      //--------------------------------//
      //--- Other Earning Calculations
      //--------------------------------//

         "Other Earnings Total" := ( Bonus            + "Leave Salary" + "Arrears Amount" + "D.A Arrears - 1" +
                                    "D.A Arrears - 2" + "HRA Arrears"  + "Hon Amount"     + "Medical Reimburement" +
                                    "Previous Job Earnings"            + "Perk-1"  +
                                    "Perk-2"          + "Other Earnings-1" + "Other Earnings-2" );

      //-------------------------------//

      //--- Exemptions Total Calculations

         IncomeTaxHeader.TESTFIELD("Max. Conveyance");
         IF ( "Conv.Allowance" > IncomeTaxHeader."Max. Conveyance") THEN BEGIN
              "Conv.Allowance" := IncomeTaxHeader."Max. Conveyance";
              MODIFY;
         END;

      //   "Exemptions Totals" := (HRA + "Transport Conveyance" + "Medical Bill") ;

         "Exemptions Totals" := (HRA + "Transport Conveyance") ;

      //------------------------------//

      //--- Gross Salary Income Calculations

         "Gross Salary Income" := ( "Salary Gross Earning Total" + "Other Earnings Total" - "Exemptions Totals") -
                                  ("Professional Tax" + "Entertainment Tax");

      //------------------------------//
      //--- Gross Total Income Calculations

         IncomeTaxHeader.TESTFIELD("Housing Loan Interest Limit");

         IF ( "Housing Loan Interest" > IncomeTaxHeader."Housing Loan Interest Limit" ) THEN BEGIN
              "Housing Loan Interest" := IncomeTaxHeader."Housing Loan Interest Limit";
         END;

         "Gross Total Income" := ( "Gross Salary Income" - ("Housing Loan Interest" - "Rent Received"));

      //--------------------------------//
      //--- Total 80 Deductions Total Calculations

         "Actual - Total PF"  :=  ("Actual - PF (Salary)" + "Actual - PF (Direct)");

         "Actual - Total LIC Premium" := ("Actual - LIC Premium (Salary)" + "Actual - LIC Premium (Direct)");

         "Actual - Total 80 Deduction" := "Actual - Total PF"              + "Actual - Total LIC Premium" +
                                          "Actual - NSC (Direct)"          + "Actual - NSC Interest"      +
                                          "Actual - ULIP"                  + "Actual - NSS Self"          +
                                          "Actual - Mutal Fund"            + "Actual -Housing Loan Principal" +
                                          "Actual -Infra Development Bond" + "Actual -Other 80 Deduction - 1" +
                                          "Actual -Other 80 Deduction - 2" ;

         "Actual - Total 80A-Z Deduction" := "Actual - 80CCC (Pension Fund)"  + "Actual - 80DD(Handicapped Dep)" +
                                             "Actual - 80D (Mediclaim)"       + "Actual - 80DDB(Medical Ex Spl)" +
                                             "Actual - 80G (Donations)"       + "Actual - 80U(Physically Handi)" +
                                             "Actu -  80E (Educational Loan)";

      //--------------------------------//

         "Proj - Total PF"  :=  ("Proj - PF (Salary)" + "Proj - PF (Direct)");

         "Proj - Total LIC Premium" := ("Proj - LIC Premium (Salary)" + "Proj - LIC Premium (Direct)");

         "Proj - Total 80 Deduction" := "Proj - Total PF"     + "Proj - Total LIC Premium" +
                                        "Proj - NSC (Direct)" + "Proj - NSC Interest"      +
                                        "Proj - ULIP"         + "Proj - NSS Self"          +
                                        "Proj - Mutal Fund"   + "Proj - Housing Loan Principal" +
                                        "Proj - Infra Development Bond" + "Proj - Other 80 Deduction - 1" +
                                        "Proj - Other 80 Deduction - 2" ;

         "Proj - Total 80A-Z Deduction" := "Proj - 80CCC (Pension Fund)"  + "Proj - 80DD(Handicapped Dep)" +
                                           "Proj - 80D (Mediclaim)"       + "Proj - 80DDB(Medical Ex Spl)" +
                                           "Proj - 80G (Donations)"       + "Proj - 80U(Physically Handi)" +
                                           "Proj -  80E (Educational Loan)";

      //-------------------------------//

         Proj80DedutionsTotalLimit  := ("Proj - Total 80 Deduction"   + "Proj - Total 80A-Z Deduction");
         Actu80DedutionsTotalLimit  := ("Actual - Total 80 Deduction" + "Actual - Total 80A-Z Deduction");

         IF ( "Actual - 80D (Mediclaim)" >  IncomeTaxHeader."Medical Claim Limit" ) THEN BEGIN
              Actu80DedutionsTotalLimit             -= "Actual - 80D (Mediclaim)";
              Actu80DedutionsTotalLimit             += IncomeTaxHeader."Medical Claim Limit";
              IncomeTaxHeader."Tax Deduction Limit" += IncomeTaxHeader."Medical Claim Limit";
         END;

         IF "Physically Handicapped" THEN BEGIN
            IF ("Actual - 80U(Physically Handi)" > IncomeTaxHeader."Physically Handicapped Limit" ) THEN BEGIN
                Actu80DedutionsTotalLimit             -= "Actual - 80U(Physically Handi)";
                Actu80DedutionsTotalLimit             += IncomeTaxHeader."Physically Handicapped Limit";
                IncomeTaxHeader."Tax Deduction Limit" += IncomeTaxHeader."Physically Handicapped Limit";
            END;
         END;

         IF ( "Proj - 80D (Mediclaim)" >  IncomeTaxHeader."Medical Claim Limit" ) THEN BEGIN
              Proj80DedutionsTotalLimit             -= "Proj - 80D (Mediclaim)";
              Proj80DedutionsTotalLimit             += IncomeTaxHeader."Medical Claim Limit";
              IncomeTaxHeader."Tax Deduction Limit" += IncomeTaxHeader."Medical Claim Limit";
         END;

         IF "Physically Handicapped" THEN BEGIN
            IF ("Proj - 80U(Physically Handi)" > IncomeTaxHeader."Physically Handicapped Limit" ) THEN BEGIN
               Proj80DedutionsTotalLimit             -= "Proj - 80U(Physically Handi)";
               Proj80DedutionsTotalLimit             += IncomeTaxHeader."Physically Handicapped Limit";
               IncomeTaxHeader."Tax Deduction Limit" += IncomeTaxHeader."Physically Handicapped Limit";
         END;
        END;

        IF ( Proj80DedutionsTotalLimit > IncomeTaxHeader."Tax Deduction Limit" ) THEN
             Proj80DedutionsTotalLimit := IncomeTaxHeader."Tax Deduction Limit";

      //-- Added Donation.
          IF ( Actu80DedutionsTotalLimit > IncomeTaxHeader."Tax Deduction Limit") THEN BEGIN
             Actu80DedutionsTotalLimit := IncomeTaxHeader."Tax Deduction Limit";
             Actu80DedutionsTotalLimit := Actu80DedutionsTotalLimit + "Actual - 80G (Donations)";
        END;

        IF Projection THEN
           "Taxable Income" := ("Gross Total Income" - Proj80DedutionsTotalLimit)
        ELSE
           "Taxable Income" := ("Gross Total Income" - Actu80DedutionsTotalLimit);

        IF "Taxable Income" < 0 THEN
           "Taxable Income" := 0;

      //-----------Male Tax Calculations. -------//

        Employee.GET(IncomeTax."Employee No");

        IF Employee.Gender = Employee.Gender::Male THEN BEGIN
           IncomeTax.Sex := IncomeTax.Sex::Male;
           TaxGender := TaxGender::Male;
        END;

        IF Employee.Gender = Employee.Gender::Female THEN BEGIN
           IncomeTax.Sex := IncomeTax.Sex::Female;
           TaxGender := TaxGender::Female;
        END;

        IF "Senior Citizen" THEN
           TaxGender := TaxGender::"Sr.Citizen";

        IncomeTo := 0; CondCheck := FALSE;

        IncomeTaxLine1.RESET;
        IncomeTaxLine1.SETRANGE("Location Code",   LLocationCode);
        IncomeTaxLine1.SETRANGE("Salary Plan Code",LSalaryPlanCode);
        IncomeTaxLine1.SETRANGE("Assessment Year", LAssessmentYear);
        IncomeTaxLine1.SETRANGE(IncomeTaxLine1.Gender,            TaxGender);
        IF IncomeTaxLine1.FINDFIRST THEN BEGIN
           REPEAT

           DiffAmt := 0;

           IF ("Taxable Income" >= IncomeTaxLine1."Income From" ) AND
              ("Taxable Income" <= IncomeTaxLine1."Income To" ) THEN BEGIN
              IncomeTaxLine1."Income To" := "Taxable Income";
              CondCheck := TRUE;
           END;

           DiffAmt := (IncomeTaxLine1."Income To" - IncomeTo);

      //     MESSAGE('From => %1 To => %2 Taxable Income => %3 Diff => %4',IncomeTaxLine1."Income From",
      //                                  IncomeTaxLine1."Income To","Taxable Income",DiffAmt );

           "Income Tax Amount" += (DiffAmt * IncomeTaxLine1."Tax %" / 100 );

           "Surcharge Amount" += ROUND((("Income Tax Amount" * IncomeTaxLine1."Surcharge %") / 100),1,'=');

           IncomeTo := IncomeTaxLine1."Income To";

           UNTIL (IncomeTaxLine1.NEXT = 0 ) OR CondCheck ;
          END;

          "Income Tax Amount" := ROUND("Income Tax Amount",1,'=');

      //-----------------------------------------//
      //-----------Cess Amount Calculations. ----//

          "Cess Amount" := ROUND(((("Income Tax Amount" + "Surcharge Amount" ) * IncomeTaxLine1."E-CESS %") / 100),1,'=');

      //-----------------------------------------//

      //-----------Higher Edu Cess Amount Calculations. ---//

          "Higher Edu Cess Amount" := ROUND((("Income Tax Amount" + "Surcharge Amount" ) * IncomeTaxLine1."SHE-CESS %" / 100),1,'=');

      //---------------------------------------------------//

      //-----------Total Tax Amount Calculations. ---------//

          "Total Tax Amount" := ( "Income Tax Amount" + "Surcharge Amount" + "Cess Amount" + "Higher Edu Cess Amount" );

      //--------------------------------------------------//

      //----------- Tax Balance Calculations. ------------//

          "Tax Balance"   := ("Total Tax Amount" - ("Tax Paid" + "Tax Refund"));

      //--------------------------------------------------//

      //----------- Tax Per Month Calculations. ----------//
          IF "Remaining Month for Projection" <> 0 THEN
             "Tax Per Month" := ROUND(("Tax Balance" / ("Remaining Month for Projection"+1)),1,'=');

      //--------------------------------------------------//
          IF ( "Salary Gross Earning Total" = 0 ) THEN BEGIN
               "Income Tax Amount"      := 0;
               "Cess Amount"            := 0;
               "Higher Edu Cess Amount" := 0;
               "Surcharge Amount"       := 0;
               "Total Tax Amount"       := 0;
               "Tax Balance"            := 0;
               "Tax Per Month"          := 0;
          END;
          MODIFY;
         END;

         CUGeneralFunctions.UpdateWindow(IncomeTax."Employee No",IncomeTax.COUNT);
      UNTIL IncomeTax.NEXT = 0;
      END;
      CUGeneralFunctions.CloseWindow;
    END;

    PROCEDURE "Calculate HRA New"@1102155004(LLocationCode@1102155003 : Code[20];LSalaryPlanCode@1102155002 : Code[20];LAssessmentYear@1102155001 : Code[20];LEmployeeNo@1102155000 : Code[20]);
    VAR
      PayrollYear@1102155004 : Record 72054;
      ProcessedSalary@1102155005 : Record 72090;
      IncomeTax1@1102155006 : Record 72101;
      Employee@1102155007 : Record 5200;
      ITExemption@1102155008 : Record 72103;
    BEGIN
      CLEAR(TotalBasicDAAmount);
      CLEAR(TotalHRAAmount);
      CLEAR(TotalRentPaid);
      CLEAR(CalcHRAAmount);

      LocationCode := LLocationCode;
      SalaryPlanCode := LSalaryPlanCode;
      AssessmentYear := LAssessmentYear;
      EmployeeNo := LEmployeeNo;

      "Get Income Tax Header";

      Employee.GET(EmployeeNo);

      PayrollYear.RESET;
      PayrollYear.SETRANGE("Location Code", LocationCode);
      PayrollYear.SETRANGE("Salary Plan Code", SalaryPlanCode);
      PayrollYear.SETRANGE("Year Code", AssessmentYear);
      PayrollYear.SETRANGE("Year Type", PayrollYear."Year Type"::"Income Tax Year");
      IF PayrollYear.FINDFIRST THEN BEGIN
        ProcessedSalary.RESET;
        ProcessedSalary.SETRANGE("Location Code", PayrollYear."Location Code");
        ProcessedSalary.SETRANGE("Salary Plan Code", PayrollYear."Salary Plan Code");
        ProcessedSalary.SETRANGE("Employee No", EmployeeNo);
        ProcessedSalary.SETRANGE("Payroll Start Date", PayrollYear."Year Start Date",PayrollYear."Year End Date");
        ProcessedSalary.SETRANGE("Pay Type", ProcessedSalary."Pay Type"::Addition);
        IF ProcessedSalary.FINDFIRST THEN
          REPEAT
            IF ProcessedSalary."Pay Element Code" IN ['BASIC','DA'] THEN
              TotalBasicDAAmount += ProcessedSalary."Payable Amount";

            IF ProcessedSalary."Pay Element Code" IN ['HRA'] THEN
              TotalHRAAmount += ProcessedSalary."Payable Amount";

          UNTIL ProcessedSalary.NEXT = 0;
      END;

      ITExemption.RESET;
      ITExemption.SETRANGE("Location Code", LocationCode);
      ITExemption.SETRANGE("Salary Plan Code", SalaryPlanCode);
      ITExemption.SETRANGE("Salary Year Code", AssessmentYear);
      ITExemption.SETRANGE("Employee No.", EmployeeNo);
      ITExemption.SETRANGE("Excemption Type", ITExemption."Excemption Type"::"Rent Paid");
      IF ITExemption.FINDFIRST THEN
        TotalRentPaid := ITExemption.Amount;

      TotalRentPaid := TotalRentPaid - (TotalBasicDAAmount * 10 / 100);

      IncomeTaxHeader.TESTFIELD("Metro %");
      IncomeTaxHeader.TESTFIELD("Non Metro %");

      IF Employee."Metro / Non Metro" = Employee."Metro / Non Metro"::Metro THEN
        TotalBasicDAAmount := (TotalBasicDAAmount * IncomeTaxHeader."Metro %") / 100;

      IF Employee."Metro / Non Metro" = Employee."Metro / Non Metro"::"Non Metro" THEN
        TotalBasicDAAmount := (TotalBasicDAAmount * IncomeTaxHeader."Non Metro %") / 100;

      CalcHRAAmount := TotalBasicDAAmount;
      IF CalcHRAAmount > TotalHRAAmount THEN
        CalcHRAAmount := TotalHRAAmount
      ELSE
        IF CalcHRAAmount > TotalRentPaid THEN
          CalcHRAAmount := TotalRentPaid;

      IF CalcHRAAmount < 0 THEN
        CalcHRAAmount := 0;
      {
      MESSAGE('%1', TotalBasicDAAmount);
      MESSAGE('%1', TotalHRAAmount);
      MESSAGE('%1', TotalRentPaid);
      MESSAGE('%1', CalcHRAAmount);
      }
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
    }
    END.
  }
}

OBJECT Codeunit 72010 Salary Group Posting
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Pay Element - %1 is not found in Payelement Master';
      Text002@1000000003 : TextConst 'ENU=General Posting Group is not defined for Business Posting Group %1 %2';
      Text003@1000000004 : TextConst 'ENU=Business Posting %1 is not defined in Business Posting Group Master';
      HRPayrollSetup@1000000013 : Record 72051;
      LocationHRPayrollSetup@1000000018 : Record 72052;
      PayElements@1000000008 : Record 72060;
      Employee@1000000006 : Record 5200;
      PayrollBusinessPostingGroup@1000000007 : Record 72074;
      PayrollProductPostingGroup@1000000009 : Record 72075;
      PayrollGeneralPostingSetup@1000000005 : Record 72076;
      Text004@1000000010 : TextConst 'ENU="G/L Account Not defined in Payroll General Posting %1 %2 "';
      PayrollEmployeePostingGroup@1000000011 : Record 72077;
      GenJournalLine@1000000012 : Record 81;
      PayDate@1000000014 : Date;
      PayBusinessPosting@1000000002 : Code[20];
      ProductPosting@1000000001 : Code[20];
      TotAddAmt@1102155000 : Decimal;
      TotDedAmt@1102155001 : Decimal;

    PROCEDURE Posting@1000000000(VAR GSalaryPosting@1102155002 : Record 72121);
    VAR
      SalaryPosting@1000000001 : Record 72121;
    BEGIN
      LocationHRPayrollSetup.GET(GSalaryPosting."Location Code");

      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      //SalaryPosting.SETRANGE(Loan,FALSE);
      IF SalaryPosting.FINDSET THEN
        REPEAT
          CASE SalaryPosting."Pay Type" OF
            SalaryPosting."Pay Type"::Addition, SalaryPosting."Pay Type"::Reimbursement :
              IF NOT PayElements.GET(SalaryPosting."Pay Element Code",
                   SalaryPosting."Location Code",
                   SalaryPosting."Salary Plan Code")
              THEN
                ERROR(Text001,SalaryPosting."Pay Element Code")
              ELSE BEGIN
                PayElements.TESTFIELD("Pay Prod. Posting Group");
                IF NOT PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                     SalaryPosting."Location Code",
                       SalaryPosting."Salary Plan Code")
                THEN
                  ERROR(Text003,SalaryPosting."Pay Bus. Posting Group")
                ELSE
                  IF NOT PayrollGeneralPostingSetup.GET(PayrollBusinessPostingGroup.Code,
                     PayElements."Pay Prod. Posting Group",
                       SalaryPosting."Location Code",
                         SalaryPosting."Salary Plan Code")
                  THEN
                    ERROR(Text002,PayrollBusinessPostingGroup.Code,PayElements."Pay Prod. Posting Group");
              END;

            SalaryPosting."Pay Type"::Deduction :
              IF (SalaryPosting."Pay Element Code" <> 'PF') AND (SalaryPosting."Pay Element Code" <> 'ESI') AND
                 (SalaryPosting."Pay Element Code" <> 'TDS') AND (SalaryPosting."Pay Element Code" <> 'PT')
              THEN
                IF NOT PayElements.GET(SalaryPosting."Pay Element Code",
                     SalaryPosting."Location Code",
                    SalaryPosting."Salary Plan Code")
                THEN
                  ERROR(Text001,SalaryPosting."Pay Element Code")
                ELSE BEGIN
                  PayElements.TESTFIELD("Pay Prod. Posting Group");
                  IF NOT PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                       SalaryPosting."Location Code",
                       SalaryPosting."Salary Plan Code")
                  THEN
                    ERROR(Text003,SalaryPosting."Pay Bus. Posting Group")
                  ELSE
                    IF NOT PayrollGeneralPostingSetup.GET(PayrollBusinessPostingGroup.Code,
                       PayElements."Pay Prod. Posting Group",
                       SalaryPosting."Location Code",
                       SalaryPosting."Salary Plan Code")
                    THEN
                      ERROR(Text002,PayrollBusinessPostingGroup.Code,PayElements."Pay Prod. Posting Group");
                END;
          END;
        UNTIL SalaryPosting.NEXT = 0;

      // Finding the Debit Account & Credit Accounts for Additions & Deductions

      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      //SalaryPosting.SETRANGE(Loan,FALSE);
      IF SalaryPosting.FINDSET THEN
        REPEAT
          CASE SalaryPosting."Pay Type" OF
            SalaryPosting."Pay Type"::Addition,SalaryPosting."Pay Type"::Reimbursement :
              BEGIN
                PayElements.GET(SalaryPosting."Pay Element Code",
                 SalaryPosting."Location Code",
                 SalaryPosting."Salary Plan Code");
                PayrollProductPostingGroup.GET(PayElements."Pay Prod. Posting Group",
                 SalaryPosting."Location Code",
                 SalaryPosting."Salary Plan Code");

                ProductPosting := PayrollProductPostingGroup.Code;

                PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                 SalaryPosting."Location Code",
                 SalaryPosting."Salary Plan Code");

                PayBusinessPosting := PayrollBusinessPostingGroup.Code;

                PayrollGeneralPostingSetup.GET(PayBusinessPosting, ProductPosting,
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                IF PayrollGeneralPostingSetup."G/L Code" = '' THEN
                  ERROR(Text004,PayrollGeneralPostingSetup."Pay Bus.Posting Group",
                  PayrollGeneralPostingSetup."Pay Prod. Posting Group");

                SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
                SalaryPosting."Account No." := PayrollGeneralPostingSetup."G/L Code";
                SalaryPosting.MODIFY;

                InitGenJnlLine(SalaryPosting, SalaryPosting."Payable Amount");
              END;

            SalaryPosting."Pay Type"::Deduction :
              IF (SalaryPosting."Pay Element Code" <> 'PF') AND
                 (SalaryPosting."Pay Element Code" <> 'ESI') AND
                 (SalaryPosting."Pay Element Code" <> 'TDS') AND
                 (SalaryPosting."Pay Element Code" <> 'PT') AND
                 (SalaryPosting."Pay Element Code" <> 'LOAN')
              THEN BEGIN
                PayElements.GET(SalaryPosting."Pay Element Code",
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                PayrollProductPostingGroup.GET(PayElements."Pay Prod. Posting Group",
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                ProductPosting := PayrollProductPostingGroup.Code;

                PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                PayBusinessPosting := PayrollBusinessPostingGroup.Code;

                PayrollGeneralPostingSetup.GET(PayBusinessPosting,ProductPosting,
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                IF PayrollGeneralPostingSetup."G/L Code" = '' THEN
                  ERROR(Text004,PayrollGeneralPostingSetup."Pay Bus.Posting Group",
                   PayrollGeneralPostingSetup."Pay Prod. Posting Group");

                SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
                SalaryPosting."Account No." := PayrollGeneralPostingSetup."G/L Code";
                SalaryPosting.MODIFY;
                InitGenJnlLine(SalaryPosting, -SalaryPosting."Payable Amount");
              END;
          END;
        UNTIL SalaryPosting.NEXT = 0;

      // EMPLOYER ESI CONTRIBUTION

      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      SalaryPosting.SETRANGE("Pay Type", SalaryPosting."Pay Type"::Deduction);
      SalaryPosting.SETRANGE("Pay Element Code",'ESI');
      IF SalaryPosting.FINDFIRST THEN BEGIN
        LocationHRPayrollSetup.TESTFIELD("Employer ESI GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."Employer ESI GL Code";
        SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
        SalaryPosting.MODIFY;
        InitGenJnlLine(SalaryPosting, SalaryPosting."Employer PF / ESI Amount");
      END;

      // EMPLOYER EPS CONTRIBUTION
      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      SalaryPosting.SETRANGE("Pay Type", SalaryPosting."Pay Type"::Deduction);
      SalaryPosting.SETRANGE("Pay Element Code",'PF');
      IF SalaryPosting.FINDFIRST THEN BEGIN
        LocationHRPayrollSetup.TESTFIELD("Employer EPS GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."Employer EPS GL Code";
        SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
        SalaryPosting.MODIFY;
        InitGenJnlLine(SalaryPosting, SalaryPosting."Employer EPS Amount");
      END;

      // EMPLOYER PF CONTRIBUTION,PF ADMIN CHARGES , ELDI CHARGES, RIFA CHARGES
      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      SalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF SalaryPosting.FINDFIRST THEN BEGIN
      // EMPLOYER PF
        LocationHRPayrollSetup.TESTFIELD("Employer PF GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."Employer PF GL Code";
        SalaryPosting."Pay Element Description" := 'PF PFC' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."Employer PF / ESI Amount");

      // PF ADMIN CHARGES
        LocationHRPayrollSetup.TESTFIELD("PF Admin Charges GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."PF Admin Charges GL Code";
        SalaryPosting."Pay Element Description" := 'PF Admin ' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."PF Admin Charges Amount");

      // ELDI CHARGES
        LocationHRPayrollSetup.TESTFIELD("EDLI Charges GLCode");
        SalaryPosting."Account No." := LocationHRPayrollSetup."EDLI Charges GLCode";
        SalaryPosting."Pay Element Description" := 'PF EDLI ' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."PF EDLI Amount");

      // RIFA CHARGES
        LocationHRPayrollSetup.TESTFIELD("RIFA Charges GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."RIFA Charges GL Code";
        SalaryPosting."Pay Element Description" := 'PF RIFA ' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."PF RIFA Amount");
      END;

      Deductions(GSalaryPosting);
    END;

    PROCEDURE InitGenJnlLine@1000000005(LSalaryPosting@1102155000 : Record 72121;Amount@1102155001 : Decimal);
    VAR
      JournalLineDimension@1000000009 : Record 356;
    BEGIN
      IF Amount <> 0 THEN BEGIN
        PayElements.GET(LSalaryPosting."Pay Element Code",LSalaryPosting."Location Code",LSalaryPosting."Salary Plan Code");
        GenJournalLine.INIT;
        GenJournalLine."Journal Template Name" := LSalaryPosting."Journal Template Name";
        GenJournalLine."Journal Batch Name" := LSalaryPosting."Journal Batch Name";
        GenJournalLine."Line No." += 10000;
        GenJournalLine."Account Type" := LSalaryPosting."Account Type";
        GenJournalLine.VALIDATE("Account No.", LSalaryPosting."Account No.");
        GenJournalLine."Posting Date" := LSalaryPosting."Salary Due Posted Date";
        GenJournalLine."Document No." := LSalaryPosting."Salary Due Document No";
        GenJournalLine.Description := LSalaryPosting."Branch Code" + ' - ' + LSalaryPosting."Pay Element Description";
        GenJournalLine."Bal. Account Type" := LSalaryPosting."Account Type";
        GenJournalLine.VALIDATE(Amount,Amount);
        GenJournalLine."Shortcut Dimension 1 Code" := LSalaryPosting."Branch Code";
        GenJournalLine."Source Code" := 'GENJNL';
        GenJournalLine.INSERT;

        JournalLineDimension.INIT;
        JournalLineDimension."Table ID" := DATABASE::"Gen. Journal Line";
        JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
        JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
        JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
        JournalLineDimension."Dimension Code" := 'BRANCH';
        JournalLineDimension."Dimension Value Code" := LSalaryPosting."Branch Code";
        JournalLineDimension.INSERT;
      END;
    END;

    PROCEDURE Deductions@1000000020(GSalaryPosting@1000000000 : Record 72121);
    VAR
      LSalaryPosting@1102155000 : Record 72121;
      Additions@1000000002 : Decimal;
      Deductions@1000000003 : Decimal;
      AccountType@1000000004 : 'G/L Account';
    BEGIN
      PayrollEmployeePostingGroup.GET(GSalaryPosting."Emp Posting Group",
        GSalaryPosting."Location Code",
        GSalaryPosting."Salary Plan Code");

      // PF Account

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PF Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."PF Payable A/c";
        InitGenJnlLine(LSalaryPosting,
        - (LSalaryPosting."Employee PF / ESI Amount" +
          LSalaryPosting."Employer PF / ESI Amount"));
      END;
      // EPS Account
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("EPS Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."EPS Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF EPS ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,-LSalaryPosting."Employer EPS Amount");
      END;

      // PT PAYABLE ACCOUNT
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PT');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PT Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."PT Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,-LSalaryPosting."Payable Amount");
      END;

      // ESI Account
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'ESI');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("ESI Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."ESI Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,
         - (LSalaryPosting."Employee PF / ESI Amount" +
           LSalaryPosting."Employer PF / ESI Amount"));
      END;
      // TDS Account
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code",'TDS');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("TDS Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."TDS Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."Payable Amount");
      END;

      // BONUS Account

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Addition);
      LSalaryPosting.SETRANGE("Pay Element Code", 'BONUS');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("Bonus Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."Bonus Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."Payable Amount");
      END;

      // LOAN Account

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'LOAN');
      IF LSalaryPosting.FINDSET THEN BEGIN
        PayElements.GET(LSalaryPosting."Pay Element Code",LSalaryPosting."Location Code",
          LSalaryPosting."Salary Plan Code");
        PayElements.TESTFIELD("GL Code");
        LSalaryPosting."Account No." := PayElements."GL Code";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."Payable Amount");
      END;

      // Salary Payable Account
      Additions := 0;
      Deductions := 0;

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code",GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code",GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code",GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code",GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry",GSalaryPosting."Salary Due Entry");
      IF LSalaryPosting.FINDSET THEN BEGIN
        REPEAT
          CASE LSalaryPosting."Pay Type" OF
            LSalaryPosting."Pay Type"::Addition,LSalaryPosting."Pay Type"::Reimbursement :
              Additions := Additions + LSalaryPosting."Payable Amount";

            LSalaryPosting."Pay Type"::Deduction :
              Deductions := Deductions + LSalaryPosting."Payable Amount";
          END;
        UNTIL LSalaryPosting.NEXT = 0;

        PayrollEmployeePostingGroup.TESTFIELD("Salary Payable1 A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."Salary Payable1 A/c";
        LSalaryPosting."Pay Element Description" := 'Net Amount ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,-(Additions-Deductions));
      END;

      // PF ADMIN CHARGES , ELDI CHARGES, RIFA CHARGES

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Branch Code", GSalaryPosting."Branch Code");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PF Admin Charge Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."PF Admin Charge Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF Admin ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."PF Admin Charges Amount");

        PayrollEmployeePostingGroup.TESTFIELD("EDLI Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."EDLI Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF EDLI ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."PF EDLI Amount");

        PayrollEmployeePostingGroup.TESTFIELD("RIFA Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."RIFA Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF RIFA ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."PF RIFA Amount");
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72011 Bonus Creation
{
  OBJECT-PROPERTIES
  {
    Date=30-07-14;
    Time=12:42:38;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CUGeneralFunctions@1000000000 : Codeunit 72008;
      BonusId@1000000007 : Code[20];
      LocationCode@1000000006 : Code[20];
      SalaryPlanCode@1000000005 : Code[20];
      BonusYear@1000000004 : Code[20];
      BonusStartDate@1000000003 : Date;
      BonusEndDate@1000000002 : Date;

    PROCEDURE "Create Bonus Records"@1000000000(LBonusId@1000000007 : Code[20];LEmployeeNo@1000000010 : Code[20]);
    VAR
      BonusHeader@1000000003 : Record 72116;
      Employee@1000000005 : Record 5200;
      RecordCount@1000000004 : Integer;
      CurrentRecord@1000000006 : Integer;
    BEGIN
      IF NOT CONFIRM('Do You Want Create Bonus',FALSE) THEN
        EXIT;

      BonusHeader.RESET;
      BonusHeader.SETRANGE("Bonus Id.",LBonusId);
      IF BonusHeader.FINDFIRST THEN BEGIN
        BonusId := BonusHeader."Bonus Id.";
        LocationCode := BonusHeader."Location Code";
        SalaryPlanCode := BonusHeader."Salary Plan Code";
        BonusYear := BonusHeader."Bonus Year";
        BonusStartDate := BonusHeader."Bonus Start Date";
        BonusEndDate := BonusHeader."Bonus End Date";
      END;

      CUGeneralFunctions.OpenWindow('Bonus Creation\\','Progress');

      Employee.RESET;
      IF LEmployeeNo <> 'ALL' THEN
        Employee.SETRANGE("No.", LEmployeeNo);

      Employee.SETRANGE("Location Code", LocationCode);
      Employee.SETRANGE("Salary Plan Code", SalaryPlanCode);
      Employee.SETRANGE(Status, Employee.Status::Active);
      Employee.SETRANGE("Bonus Applicable", TRUE);
      IF Employee.FINDFIRST THEN BEGIN
        RecordCount := Employee.COUNT;
        REPEAT
          CUGeneralFunctions.UpdateWindow (Employee."No.",RecordCount);
          "Delete Bonus Lines"(Employee."No.");
          "Insert Bonus Line Records"(Employee."No.");
          "Transfer Bonus to PayElements" (Employee."No.");
          "Transfer CL Amt to PayElements"(Employee."No.");
          "Transfer EL Amt to PayElements"(Employee."No.");
          "Bonus Calculation" (Employee."No.");
        UNTIL Employee.NEXT = 0;
      END;
      CUGeneralFunctions.CloseWindow;
      MESSAGE('Process Completed..');
    END;

    PROCEDURE "Insert Bonus Line Records"@1000000005(LEmployeeNo@1000000002 : Code[20]);
    VAR
      Employee@1000000000 : Record 5200;
      BonusHeader@1102155000 : Record 72116;
      BonusLine@1000000001 : Record 72117;
      PayElements@1102155001 : Record 72060;
    BEGIN
      IF NOT PayElements.GET('BONUS',LocationCode,SalaryPlanCode) THEN
        ERROR('%1','BONUS Pay Element not Defined in the Pay Element Card');

      Employee.GET(LEmployeeNo);
      BonusHeader.RESET;
      BonusHeader.SETRANGE("Bonus Id.", BonusId);
      IF BonusHeader.FINDFIRST THEN;

      BonusLine.INIT;
      BonusLine."Bonus Id." := BonusId;
      BonusLine."Location Code" := LocationCode;
      BonusLine."Salary Plan Code" := SalaryPlanCode;
      BonusLine."Bonus Year" := BonusYear;
      BonusLine."Employee No" := LEmployeeNo;
      BonusLine.Name := Employee."First Name" + ' ' + Employee.Initials;
      BonusLine."Pay Element Code" := 'BONUS';
      BonusLine."Service Year" := "Service Year Calculation"(LEmployeeNo);
      BonusLine."Bonus %" := BonusHeader."Bonus (%)";
      BonusLine."Ex-Gratia %" := BonusHeader."Ex-Gratia (%)";
      BonusLine."Select (Y/N)" := TRUE;
      BonusLine."Employee Category" := Employee."Employee Category";

      IF BonusLine.INSERT THEN;

      "Insert Bonus Dtl. Line Records"(LEmployeeNo);
    END;

    PROCEDURE "Insert Bonus Dtl. Line Records"@1000000006(LEmployeeNo@1000000000 : Code[20]);
    VAR
      Employee@1102159000 : Record 5200;
      MonthlyAttendance@1000000002 : Record 72082;
      BonusDetailedLine@1000000001 : Record 72118;
    BEGIN
      CLEAR(MonthlyAttendance);
      Employee.GET(LEmployeeNo);

      MonthlyAttendance.RESET;
      MonthlyAttendance.SETRANGE("Location Code",LocationCode);
      MonthlyAttendance.SETRANGE("Salary Plan Code",SalaryPlanCode);
      MonthlyAttendance.SETRANGE("Employee No",LEmployeeNo);
      MonthlyAttendance.SETRANGE("Payroll End Date",BonusStartDate,BonusEndDate);
      IF MonthlyAttendance.FINDFIRST THEN
        REPEAT
          MonthlyAttendance.CALCFIELDS("Total Payable Days");

          BonusDetailedLine.INIT;
          BonusDetailedLine."Bonus Id." := BonusId;
          BonusDetailedLine."Location Code" := LocationCode;
          BonusDetailedLine."Salary Plan Code" := SalaryPlanCode;
          BonusDetailedLine."Bonus Year" := BonusYear;
          BonusDetailedLine."Salary Cycle Code" := MonthlyAttendance."Salary Cycle Code";
          BonusDetailedLine."Employee No" := MonthlyAttendance."Employee No";
          BonusDetailedLine.Name := Employee."First Name" + ' ' + Employee.Initials;
          BonusDetailedLine."Days Worked" := MonthlyAttendance."Total Payable Days";
          BonusDetailedLine."Bonusable Earnings" :=
          "Bonuable Earning Calculation"(LEmployeeNo,
             MonthlyAttendance."Salary Cycle Code");
          BonusDetailedLine."Projection Not Required" := FALSE;
      //  BonusDetailedLine."Employee Category" := MonthlyAttendance."Employee Category";

          IF BonusDetailedLine.INSERT THEN ;

        UNTIL MonthlyAttendance.NEXT = 0;
    END;

    PROCEDURE "Service Year Calculation"@1000000003(LEmployeeNo@1000000000 : Code[20]) : Integer;
    VAR
      Employee@1000000001 : Record 5200;
      ServiceYear@1000000002 : Integer;
    BEGIN
      IF Employee.GET(LEmployeeNo) THEN
        ServiceYear := ROUND(((TODAY - Employee."Employment Date") / 365.2364),1,'=');

      EXIT(ServiceYear);
    END;

    PROCEDURE "Bonuable Earning Calculation"@1000000001(LEmployeeNo@1000000000 : Code[20];LSalaryCyclicCode@1000000004 : Code[20]) : Decimal;
    VAR
      ProcessedSalary@1000000001 : Record 72090;
      PayElements@1000000002 : Record 72060;
      BonusableEarnings@1000000003 : Decimal;
    BEGIN
      CLEAR(BonusableEarnings);

      ProcessedSalary.RESET;
      ProcessedSalary.SETRANGE("Location Code",LocationCode);
      ProcessedSalary.SETRANGE("Salary Plan Code",SalaryPlanCode);
      ProcessedSalary.SETRANGE("Salary Cycle Code",LSalaryCyclicCode);
      ProcessedSalary.SETRANGE("Employee No",LEmployeeNo);
      ProcessedSalary.SETRANGE("Pay Type",ProcessedSalary."Pay Type"::Addition);
      IF ProcessedSalary.FINDFIRST THEN
        REPEAT
          PayElements.GET(ProcessedSalary."Pay Element Code",LocationCode,SalaryPlanCode);
          IF PayElements."Eligible for Bonus" THEN
            BonusableEarnings += ProcessedSalary."Payable Amount";
        UNTIL ProcessedSalary.NEXT = 0;
      EXIT(BonusableEarnings);
    END;

    PROCEDURE "Transfer Bonus to PayElements"@1000000004(LEmployeeNo@1102155002 : Code[20]);
    VAR
      BonusLine@1102155001 : Record 72117;
      BonusMiscAddDeductions@1102155000 : Record 72119;
    BEGIN
      BonusLine.RESET;
      BonusLine.SETRANGE("Bonus Id.", BonusId);
      BonusLine.SETRANGE("Employee No", LEmployeeNo);
      IF BonusLine.FINDFIRST THEN
        REPEAT
          BonusLine.CALCFIELDS("Bonusable Earnings");
          BonusLine."Bonus Amt" := ROUND(((BonusLine."Bonusable Earnings" * BonusLine."Bonus %") / 100),0.01,'=');
          BonusLine."Ex-Gratia Amt" := ROUND(((BonusLine."Bonusable Earnings" * BonusLine."Ex-Gratia %") / 100),0.01,'=');
          BonusLine.MODIFY;

          BonusMiscAddDeductions.INIT;
          BonusMiscAddDeductions."Location Code" := LocationCode;
          BonusMiscAddDeductions."Salary Plan Code" := SalaryPlanCode;
          BonusMiscAddDeductions."Bonus ID." := BonusId;
          BonusMiscAddDeductions."Employee No." := BonusLine."Employee No";
          BonusMiscAddDeductions."Pay Element Code" := BonusLine."Pay Element Code";
          BonusMiscAddDeductions."Bonus Year Code" := BonusYear;
          BonusMiscAddDeductions."Bonus Start Date" := BonusStartDate;
          BonusMiscAddDeductions."Bonus End Date" := BonusEndDate;
          BonusMiscAddDeductions.Name := BonusLine.Name;
          BonusMiscAddDeductions."Paid Category" := BonusMiscAddDeductions."Paid Category"::Yearly;
          BonusMiscAddDeductions."Pay Type" := BonusMiscAddDeductions."Pay Type";
          BonusMiscAddDeductions.Amount := ROUND((BonusLine."Bonus Amt" + BonusLine."Ex-Gratia Amt"),1,'=');
          BonusMiscAddDeductions."Created Date" := TODAY;
          BonusMiscAddDeductions."User Id" := USERID;
          BonusMiscAddDeductions.Month := DATE2DMY(BonusEndDate,2);
          BonusMiscAddDeductions.Year := DATE2DMY(BonusEndDate,3);
          BonusMiscAddDeductions."System Generated" := TRUE;

          IF BonusLine."Service Year" < 1 THEN
            IF BonusLine."Service Month" < 3 THEN BEGIN
              BonusMiscAddDeductions.Amount := 0;
              BonusLine."Select (Y/N)" := FALSE;
            END;

          BonusLine.CALCFIELDS("Gross Bonus Amt");
          BonusLine.CALCFIELDS("Deduction Amt");

          BonusLine."Total Net Bonus Amt" := ROUND((BonusLine."Gross Bonus Amt" - BonusLine."Deduction Amt"),0.01,'=');
          BonusLine.MODIFY;

          IF BonusMiscAddDeductions.Amount > 0 THEN BEGIN
            BonusLine."Select (Y/N)" := TRUE;
            BonusMiscAddDeductions.INSERT;
          END;

        UNTIL BonusLine.NEXT = 0;
    END;

    PROCEDURE "Transfer CL Amt to PayElements"@1102159000(LEmployeeNo@1102155002 : Code[20]);
    VAR
      BonusHeader@1102159000 : Record 72116;
      BonusLine@1102155001 : Record 72117;
      BonusMiscAddDeductions@1102155000 : Record 72119;
      CLDays@1102159001 : Decimal;
      CLAmount@1102159002 : Decimal;
      PerDayWages@1102159003 : Decimal;
    BEGIN
      CLEAR(CLDays);
      CLEAR(CLAmount);
      BonusLine.RESET;
      BonusLine.SETRANGE("Bonus Id.", BonusId);
      BonusLine.SETRANGE("Employee No", LEmployeeNo);
      IF BonusLine.FINDFIRST THEN
        REPEAT
          BonusLine.CALCFIELDS("No of Days Worked");

          IF BonusLine."No of Days Worked" > 0 THEN
            BonusLine."No of Days Worked" := BonusLine."No of Days Worked" + 9;

          BonusHeader.RESET;
          BonusHeader.SETRANGE("Bonus Id.", BonusLine."Bonus Id.");
          IF BonusHeader.FINDFIRST THEN;

          IF BonusLine."Employee Category" IN [BonusLine."Employee Category"::"Staff Permanent",
             BonusLine."Employee Category"::"Staff Temporary"]
          THEN BEGIN
            IF BonusHeader."Staff Total CL Days" > 0 THEN
              CLDays := ROUND((BonusLine."No of Days Worked" / BonusHeader."Staff Total CL Days"),1,'=');
            IF CLDays >= 14 THEN
              CLDays := 14;
          END;

          IF BonusLine."Employee Category" IN [BonusLine."Employee Category"::"Worker Permanent",
             BonusLine."Employee Category"::"Worker Temporary"]
          THEN BEGIN
            IF BonusHeader."Worker Total CL Days" > 0 THEN
              CLDays := ROUND((BonusLine."No of Days Worked" / BonusHeader."Worker Total CL Days"),1,'=');
            IF CLDays >= 12 THEN
              CLDays := 12;
          END;

          CLAmount := ROUND((CLDays * "Read Per Day Salary"(LEmployeeNo)),1,'=');

          IF BonusLine."Service Year" <= 0 THEN
            CLAmount := 0;

          BonusMiscAddDeductions.INIT;
          BonusMiscAddDeductions."Location Code" := LocationCode;
          BonusMiscAddDeductions."Salary Plan Code" := SalaryPlanCode;
          BonusMiscAddDeductions."Bonus ID." := BonusId;
          BonusMiscAddDeductions."Employee No." := BonusLine."Employee No";
          BonusMiscAddDeductions."Pay Element Code" := 'CL AMOUNT';
          BonusMiscAddDeductions."Bonus Year Code" := BonusYear;
          BonusMiscAddDeductions."Bonus Start Date" := BonusStartDate;
          BonusMiscAddDeductions."Bonus End Date" := BonusEndDate;
          BonusMiscAddDeductions.Name := BonusLine.Name;
          BonusMiscAddDeductions."Paid Category" := BonusMiscAddDeductions."Paid Category"::Yearly;
          BonusMiscAddDeductions."Pay Type" := BonusMiscAddDeductions."Pay Type";
          BonusMiscAddDeductions.Amount := CLAmount;
          BonusMiscAddDeductions."Created Date" := TODAY;
          BonusMiscAddDeductions."User Id" := USERID;
          BonusMiscAddDeductions.Month := DATE2DMY(BonusEndDate,2);
          BonusMiscAddDeductions.Year := DATE2DMY(BonusEndDate,3);
          BonusMiscAddDeductions."CL / EL Paid Days" := CLDays;
          BonusMiscAddDeductions."System Generated" := TRUE;

          BonusLine.CALCFIELDS("Gross Bonus Amt");
          BonusLine.CALCFIELDS("Deduction Amt");
          BonusLine."Total Net Bonus Amt" := ROUND((BonusLine."Gross Bonus Amt" - BonusLine."Deduction Amt"),0.01,'=');
          BonusLine.MODIFY;

          IF BonusMiscAddDeductions.Amount > 0 THEN
            IF BonusMiscAddDeductions.INSERT THEN;

        UNTIL BonusLine.NEXT = 0;
    END;

    PROCEDURE "Transfer EL Amt to PayElements"@1102159001(LEmployeeNo@1102155002 : Code[20]);
    VAR
      BonusHeader@1102159000 : Record 72116;
      BonusLine@1102155001 : Record 72117;
      BonusMiscAddDeductions@1102155000 : Record 72119;
      ELDays@1102159001 : Decimal;
      ELAmount@1102159002 : Decimal;
      PerDayWages@1102159003 : Decimal;
    BEGIN
      CLEAR(ELDays);
      CLEAR(ELAmount);
      BonusLine.RESET;
      BonusLine.SETRANGE("Bonus Id.", BonusId);
      BonusLine.SETRANGE("Employee No", LEmployeeNo);
      IF BonusLine.FINDFIRST THEN
        REPEAT
          BonusLine.CALCFIELDS("No of Days Worked");
          IF BonusLine."No of Days Worked" > 0 THEN
            BonusLine."No of Days Worked" := BonusLine."No of Days Worked" + 9;

          BonusHeader.RESET;
          BonusHeader.SETRANGE("Bonus Id.", BonusLine."Bonus Id.");
          IF BonusHeader.FINDFIRST THEN;

          IF BonusLine."Employee Category" IN [BonusLine."Employee Category"::"Staff Permanent",
             BonusLine."Employee Category"::"Staff Temporary"]
          THEN BEGIN

            IF BonusHeader."Staff Total EL Days" > 0 THEN
              ELDays := ROUND((BonusLine."No of Days Worked" / BonusHeader."Staff Total EL Days"),1,'=');

            IF ELDays >= 15 THEN
              ELDays := 15;
          END;

          IF BonusLine."Employee Category" IN [BonusLine."Employee Category"::"Worker Permanent",
             BonusLine."Employee Category"::"Worker Temporary"]
          THEN BEGIN
            IF BonusHeader."Worker Total EL Days" > 0 THEN
              ELDays := ROUND((BonusLine."No of Days Worked" / BonusHeader."Worker Total EL Days"),1,'=');

            IF ELDays >= 15 THEN
              ELDays := 15;
          END;

          ELAmount := ROUND((ELDays * "Read Per Day Salary"(LEmployeeNo)),1,'=');

          IF BonusLine."Service Year" <= 0 THEN
            ELAmount := 0;

          BonusMiscAddDeductions."Location Code" := LocationCode;
          BonusMiscAddDeductions."Salary Plan Code" := SalaryPlanCode;
          BonusMiscAddDeductions."Bonus ID." := BonusId;
          BonusMiscAddDeductions."Employee No." := BonusLine."Employee No";
          BonusMiscAddDeductions."Pay Element Code" := 'EL AMOUNT';
          BonusMiscAddDeductions."Bonus Year Code" := BonusYear;
          BonusMiscAddDeductions."Bonus Start Date" := BonusStartDate;
          BonusMiscAddDeductions."Bonus End Date" := BonusEndDate;
          BonusMiscAddDeductions.Name := BonusLine.Name;
          BonusMiscAddDeductions."Paid Category" := BonusMiscAddDeductions."Paid Category"::Yearly;
          BonusMiscAddDeductions."Pay Type" := BonusMiscAddDeductions."Pay Type";
          BonusMiscAddDeductions.Amount := ELAmount;
          BonusMiscAddDeductions."Created Date" := TODAY;
          BonusMiscAddDeductions."User Id" := USERID;
          BonusMiscAddDeductions.Month := DATE2DMY(BonusEndDate,2);
          BonusMiscAddDeductions.Year := DATE2DMY(BonusEndDate,3);
          BonusMiscAddDeductions."CL / EL Paid Days" := ELDays;
          BonusMiscAddDeductions."System Generated" := TRUE;

          BonusLine.CALCFIELDS("Gross Bonus Amt");
          BonusLine.CALCFIELDS("Deduction Amt");
          BonusLine."Total Net Bonus Amt" := ROUND((BonusLine."Gross Bonus Amt" - BonusLine."Deduction Amt"),0.01,'=');
          BonusLine.MODIFY;

          IF BonusMiscAddDeductions.Amount > 0 THEN
            IF BonusMiscAddDeductions.INSERT THEN;

        UNTIL BonusLine.NEXT = 0;
    END;

    PROCEDURE "Bonus Calculation"@1102155000(LEmployeeNo@1102155000 : Code[20]);
    VAR
      BonusLine@1102155001 : Record 72117;
      BonusMiscAddDeductions@1102159000 : Record 72119;
    BEGIN
      BonusLine.RESET;
      BonusLine.SETRANGE("Bonus Id.", BonusId);
      BonusLine.SETRANGE("Employee No", LEmployeeNo);
      IF BonusLine.FINDFIRST THEN
        REPEAT
          BonusLine.CALCFIELDS("No of Days Worked");

          IF BonusLine."No of Days Worked" <= 0 THEN BEGIN
            BonusMiscAddDeductions.RESET;
            BonusMiscAddDeductions.SETRANGE("Location Code",BonusLine."Location Code");
            BonusMiscAddDeductions.SETRANGE("Salary Plan Code",BonusLine."Salary Plan Code");
            BonusMiscAddDeductions.SETRANGE("Bonus ID.",BonusLine."Bonus Id.");
            BonusMiscAddDeductions.SETRANGE("Employee No.", BonusLine."Employee No");
            BonusMiscAddDeductions.SETRANGE("System Generated", FALSE);
            IF BonusMiscAddDeductions.FINDFIRST THEN
              BonusMiscAddDeductions.DELETEALL;
          END;

          IF BonusLine."Employee Category" = BonusLine."Employee Category"::"Worker Temporary" THEN
            IF BonusLine."Service Year" <= 0 THEN BEGIN
              BonusMiscAddDeductions.RESET;
              BonusMiscAddDeductions.SETRANGE("Location Code",BonusLine."Location Code");
              BonusMiscAddDeductions.SETRANGE("Salary Plan Code",BonusLine."Salary Plan Code");
              BonusMiscAddDeductions.SETRANGE("Bonus ID.",BonusLine."Bonus Id.");
              BonusMiscAddDeductions.SETRANGE("Employee No.", BonusLine."Employee No");
              BonusMiscAddDeductions.SETRANGE("Pay Type", BonusMiscAddDeductions."Pay Type"::Addition);
              BonusMiscAddDeductions.SETRANGE("System Generated", FALSE);
              IF BonusMiscAddDeductions.FINDFIRST THEN
                BonusMiscAddDeductions.DELETEALL;
            END;
          BonusLine.CALCFIELDS("Gross Bonus Amt");
          BonusLine.CALCFIELDS("Deduction Amt");
          BonusLine."Total Net Bonus Amt" := ROUND((BonusLine."Gross Bonus Amt" - BonusLine."Deduction Amt"),0.01,'=');

          IF BonusLine."Total Net Bonus Amt" > 0 THEN
            BonusLine."Select (Y/N)" := TRUE
          ELSE
            BonusLine."Select (Y/N)" := FALSE;

          BonusLine.MODIFY;
        UNTIL BonusLine.NEXT = 0;
    END;

    PROCEDURE "Delete Bonus Lines"@1000000002(LEmployeeNo@1000000001 : Code[20]);
    VAR
      BonusLine@1000000000 : Record 72117;
      BonusDetailedLine@1102155000 : Record 72118;
      BonusMiscAddDeductions@1102155001 : Record 72119;
    BEGIN
      {
      BonusLine.RESET;
      BonusLine.SETRANGE("Bonus Id.",BonusId);
      BonusLine.SETRANGE("Employee No",LEmployeeNo);
      IF BonusLine.FINDFIRST THEN
        BonusLine.DELETEALL;

      BonusDetailedLine.RESET;
      BonusDetailedLine.SETRANGE("Bonus Id.",BonusId);
      BonusDetailedLine.SETRANGE("Employee No",LEmployeeNo);
      IF BonusDetailedLine.FINDFIRST THEN
        BonusDetailedLine.DELETEALL;
      }

      BonusMiscAddDeductions.RESET;
      BonusMiscAddDeductions.SETRANGE("Bonus ID.",BonusId);
      BonusMiscAddDeductions.SETRANGE("Employee No.",LEmployeeNo);
      BonusMiscAddDeductions.SETRANGE("System Generated",TRUE);
      IF BonusMiscAddDeductions.FINDFIRST THEN
        BonusMiscAddDeductions.DELETEALL;
    END;

    PROCEDURE "Read Per Day Salary"@1000000019(LEmployeeNo@1000000001 : Code[20]) : Decimal;
    VAR
      PayrollMonthYear@1000000009 : Record 72055;
      PayElements@1000000003 : Record 72060;
      EmployeePayElements@1000000000 : Record 72078;
      Employee@1102159000 : Record 5200;
      LastEffectiveDate@1000000002 : Date;
      TotalMonthlySalary@1000000005 : Decimal;
      PerDaySalary@1000000010 : Decimal;
      TotalDaysMonth@1000000014 : Integer;
    BEGIN
      CLEAR(TotalMonthlySalary);
      CLEAR(PerDaySalary);
      CLEAR(TotalDaysMonth);
      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code", LocationCode);
      EmployeePayElements.SETRANGE("Salary Plan Code",SalaryPlanCode);
      EmployeePayElements.SETRANGE("Employee No", LEmployeeNo);
      EmployeePayElements.SETFILTER("Effective Date", '<=%1', BonusEndDate);
      EmployeePayElements.SETRANGE("Pay Type", EmployeePayElements."Pay Type"::Addition);
      IF EmployeePayElements.FINDLAST THEN
        LastEffectiveDate := EmployeePayElements."Effective Date";

      EmployeePayElements.RESET;
      EmployeePayElements.SETRANGE("Location Code",LocationCode);
      EmployeePayElements.SETRANGE("Salary Plan Code",SalaryPlanCode);
      EmployeePayElements.SETRANGE("Employee No",LEmployeeNo);
      EmployeePayElements.SETRANGE("Effective Date",LastEffectiveDate);
      EmployeePayElements.SETRANGE("Pay Type",EmployeePayElements."Pay Type"::Addition);
      IF EmployeePayElements.FINDFIRST THEN
        REPEAT
          PayElements.GET(EmployeePayElements."Pay Element Code",LocationCode,SalaryPlanCode);
          TotalMonthlySalary += EmployeePayElements.Amount;
        UNTIL EmployeePayElements.NEXT = 0;

      Employee.GET(LEmployeeNo);

      {
      IF Employee."Calc. Based on Gross Amount" THEN BEGIN
      //  TotalDaysMonth := ((BonusEndDate - CALCDATE('-CM',BonusEndDate)+1));
        TotalDaysMonth := 30;
        PerDaySalary := ROUND((TotalMonthlySalary / TotalDaysMonth),0.01,'=');
      END;

      IF Employee."Calc. Based on Daily Wages" THEN
        PerDaySalary := TotalMonthlySalary;
      }

      EXIT(PerDaySalary);
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 72012 Salary Group Posting-1
{
  OBJECT-PROPERTIES
  {
    Date=31-07-14;
    Time=02:33:54;
    Modified=Yes;
    Version List=FRHRPR4.00.03.06;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Pay Element - %1 is not found in Payelement Master';
      Text002@1000000003 : TextConst 'ENU=General Posting Group is not defined for Business Posting Group %1 %2';
      Text003@1000000004 : TextConst 'ENU=Business Posting %1 is not defined in Business Posting Group Master';
      HRPayrollSetup@1000000013 : Record 72051;
      LocationHRPayrollSetup@1000000018 : Record 72052;
      PayElements@1000000008 : Record 72060;
      Employee@1000000006 : Record 5200;
      PayrollBusinessPostingGroup@1000000007 : Record 72074;
      PayrollProductPostingGroup@1000000009 : Record 72075;
      PayrollGeneralPostingSetup@1000000005 : Record 72076;
      Text004@1000000010 : TextConst 'ENU="G/L Account Not defined in Payroll General Posting %1 %2 "';
      PayrollEmployeePostingGroup@1000000011 : Record 72077;
      GenJournalLine@1000000012 : Record 81;
      PayDate@1000000014 : Date;
      PayBusinessPosting@1000000002 : Code[20];
      ProductPosting@1000000001 : Code[20];
      TotAddAmt@1102155000 : Decimal;
      TotDedAmt@1102155001 : Decimal;

    PROCEDURE Posting@1000000000(VAR GSalaryPosting@1102155002 : Record 72121);
    VAR
      SalaryPosting@1000000001 : Record 72121;
    BEGIN
      LocationHRPayrollSetup.GET(GSalaryPosting."Location Code");

      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      //SalaryPosting.SETRANGE(Loan,FALSE);
      IF SalaryPosting.FINDSET THEN
        REPEAT
          CASE SalaryPosting."Pay Type" OF
            SalaryPosting."Pay Type"::Addition, SalaryPosting."Pay Type"::Reimbursement :
              IF NOT PayElements.GET(SalaryPosting."Pay Element Code",
                   SalaryPosting."Location Code",
                   SalaryPosting."Salary Plan Code")
              THEN
                ERROR(Text001,SalaryPosting."Pay Element Code")
              ELSE BEGIN
                PayElements.TESTFIELD("Pay Prod. Posting Group");
                IF NOT PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                     SalaryPosting."Location Code",
                       SalaryPosting."Salary Plan Code")
                THEN
                  ERROR(Text003,SalaryPosting."Pay Bus. Posting Group")
                ELSE
                  IF NOT PayrollGeneralPostingSetup.GET(PayrollBusinessPostingGroup.Code,
                     PayElements."Pay Prod. Posting Group",
                       SalaryPosting."Location Code",
                         SalaryPosting."Salary Plan Code")
                  THEN
                    ERROR(Text002,PayrollBusinessPostingGroup.Code,PayElements."Pay Prod. Posting Group");
              END;

            SalaryPosting."Pay Type"::Deduction :
              IF (SalaryPosting."Pay Element Code" <> 'PF') AND (SalaryPosting."Pay Element Code" <> 'ESI') AND
                 (SalaryPosting."Pay Element Code" <> 'TDS') AND (SalaryPosting."Pay Element Code" <> 'PT')
              THEN
                IF NOT PayElements.GET(SalaryPosting."Pay Element Code",
                     SalaryPosting."Location Code",
                    SalaryPosting."Salary Plan Code")
                THEN
                  ERROR(Text001,SalaryPosting."Pay Element Code")
                ELSE BEGIN
                  PayElements.TESTFIELD("Pay Prod. Posting Group");
                  IF NOT PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                       SalaryPosting."Location Code",
                       SalaryPosting."Salary Plan Code")
                  THEN
                    ERROR(Text003,SalaryPosting."Pay Bus. Posting Group")
                  ELSE
                    IF NOT PayrollGeneralPostingSetup.GET(PayrollBusinessPostingGroup.Code,
                       PayElements."Pay Prod. Posting Group",
                       SalaryPosting."Location Code",
                       SalaryPosting."Salary Plan Code")
                    THEN
                      ERROR(Text002,PayrollBusinessPostingGroup.Code,PayElements."Pay Prod. Posting Group");
                END;
          END;
        UNTIL SalaryPosting.NEXT = 0;

      // Finding the Debit Account & Credit Accounts for Additions & Deductions

      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      //SalaryPosting.SETRANGE(Loan,FALSE);
      IF SalaryPosting.FINDSET THEN
        REPEAT
          CASE SalaryPosting."Pay Type" OF
            SalaryPosting."Pay Type"::Addition,SalaryPosting."Pay Type"::Reimbursement :
              BEGIN
                PayElements.GET(SalaryPosting."Pay Element Code",
                 SalaryPosting."Location Code",
                 SalaryPosting."Salary Plan Code");
                PayrollProductPostingGroup.GET(PayElements."Pay Prod. Posting Group",
                 SalaryPosting."Location Code",
                 SalaryPosting."Salary Plan Code");

                ProductPosting := PayrollProductPostingGroup.Code;

                PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                 SalaryPosting."Location Code",
                 SalaryPosting."Salary Plan Code");

                PayBusinessPosting := PayrollBusinessPostingGroup.Code;

                PayrollGeneralPostingSetup.GET(PayBusinessPosting, ProductPosting,
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                IF PayrollGeneralPostingSetup."G/L Code" = '' THEN
                  ERROR(Text004,PayrollGeneralPostingSetup."Pay Bus.Posting Group",
                  PayrollGeneralPostingSetup."Pay Prod. Posting Group");

                SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
                SalaryPosting."Account No." := PayrollGeneralPostingSetup."G/L Code";
                SalaryPosting.MODIFY;

                InitGenJnlLine(SalaryPosting, SalaryPosting."Payable Amount");
              END;

            SalaryPosting."Pay Type"::Deduction :
              IF (SalaryPosting."Pay Element Code" <> 'PF') AND
                 (SalaryPosting."Pay Element Code" <> 'ESI') AND
                 (SalaryPosting."Pay Element Code" <> 'TDS') AND
                 (SalaryPosting."Pay Element Code" <> 'PT') AND
                 (SalaryPosting."Pay Element Code" <> 'LOAN')
              THEN BEGIN
                PayElements.GET(SalaryPosting."Pay Element Code",
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                PayrollProductPostingGroup.GET(PayElements."Pay Prod. Posting Group",
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                ProductPosting := PayrollProductPostingGroup.Code;

                PayrollBusinessPostingGroup.GET(SalaryPosting."Pay Bus. Posting Group",
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                PayBusinessPosting := PayrollBusinessPostingGroup.Code;

                PayrollGeneralPostingSetup.GET(PayBusinessPosting,ProductPosting,
                  SalaryPosting."Location Code",
                  SalaryPosting."Salary Plan Code");

                IF PayrollGeneralPostingSetup."G/L Code" = '' THEN
                  ERROR(Text004,PayrollGeneralPostingSetup."Pay Bus.Posting Group",
                   PayrollGeneralPostingSetup."Pay Prod. Posting Group");

                SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
                SalaryPosting."Account No." := PayrollGeneralPostingSetup."G/L Code";
                SalaryPosting.MODIFY;
                InitGenJnlLine(SalaryPosting, -SalaryPosting."Payable Amount");
              END;
          END;
        UNTIL SalaryPosting.NEXT = 0;

      // EMPLOYER ESI CONTRIBUTION

      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      SalaryPosting.SETRANGE("Pay Type", SalaryPosting."Pay Type"::Deduction);
      SalaryPosting.SETRANGE("Pay Element Code",'ESI');
      IF SalaryPosting.FINDFIRST THEN BEGIN
        LocationHRPayrollSetup.TESTFIELD("Employer ESI GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."Employer ESI GL Code";
        SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
        SalaryPosting.MODIFY;
        InitGenJnlLine(SalaryPosting, SalaryPosting."Employer PF / ESI Amount");
      END;

      // EMPLOYER EPS CONTRIBUTION
      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      SalaryPosting.SETRANGE("Pay Type", SalaryPosting."Pay Type"::Deduction);
      SalaryPosting.SETRANGE("Pay Element Code",'PF');
      IF SalaryPosting.FINDFIRST THEN BEGIN
        LocationHRPayrollSetup.TESTFIELD("Employer EPS GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."Employer EPS GL Code";
        SalaryPosting."Pay Element Description" := SalaryPosting."Pay Element Code" + ' ' + SalaryPosting."Salary Cycle Code";
        SalaryPosting.MODIFY;
        InitGenJnlLine(SalaryPosting, SalaryPosting."Employer EPS Amount");
      END;

      // EMPLOYER PF CONTRIBUTION,PF ADMIN CHARGES , ELDI CHARGES, RIFA CHARGES
      SalaryPosting.RESET;
      SalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      SalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      SalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      SalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      SalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      SalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF SalaryPosting.FINDFIRST THEN BEGIN
      // EMPLOYER PF
        LocationHRPayrollSetup.TESTFIELD("Employer PF GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."Employer PF GL Code";
        SalaryPosting."Pay Element Description" := 'PF PFC' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."Employer PF / ESI Amount");

      // PF ADMIN CHARGES
        LocationHRPayrollSetup.TESTFIELD("PF Admin Charges GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."PF Admin Charges GL Code";
        SalaryPosting."Pay Element Description" := 'PF Admin ' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."PF Admin Charges Amount");

      // ELDI CHARGES
        LocationHRPayrollSetup.TESTFIELD("EDLI Charges GLCode");
        SalaryPosting."Account No." := LocationHRPayrollSetup."EDLI Charges GLCode";
        SalaryPosting."Pay Element Description" := 'PF EDLI ' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."PF EDLI Amount");

      // RIFA CHARGES
        LocationHRPayrollSetup.TESTFIELD("RIFA Charges GL Code");
        SalaryPosting."Account No." := LocationHRPayrollSetup."RIFA Charges GL Code";
        SalaryPosting."Pay Element Description" := 'PF RIFA ' + ' ' + SalaryPosting."Salary Cycle Code";
        InitGenJnlLine(SalaryPosting, SalaryPosting."PF RIFA Amount");
      END;

      Deductions(GSalaryPosting);
    END;

    PROCEDURE InitGenJnlLine@1000000005(LSalaryPosting@1102155000 : Record 72121;Amount@1102155001 : Decimal);
    VAR
      JournalLineDimension@1000000009 : Record 356;
    BEGIN
      IF Amount <> 0 THEN BEGIN
        PayElements.GET(LSalaryPosting."Pay Element Code",LSalaryPosting."Location Code",LSalaryPosting."Salary Plan Code");
        GenJournalLine.INIT;
        GenJournalLine."Journal Template Name" := LSalaryPosting."Journal Template Name";
        GenJournalLine."Journal Batch Name" := LSalaryPosting."Journal Batch Name";
        GenJournalLine."Line No." += 10000;
        GenJournalLine."Account Type" := LSalaryPosting."Account Type";
        GenJournalLine.VALIDATE("Account No.", LSalaryPosting."Account No.");
        GenJournalLine."Posting Date" := LSalaryPosting."Salary Due Posted Date";
        GenJournalLine."Document No." := LSalaryPosting."Salary Due Document No";
        GenJournalLine.Description := LSalaryPosting."Branch Code" + ' - ' + LSalaryPosting."Pay Element Description";
        GenJournalLine."Bal. Account Type" := LSalaryPosting."Account Type";
        GenJournalLine.VALIDATE(Amount,Amount);
      //  GenJournalLine."Shortcut Dimension 1 Code" := LSalaryPosting."Branch Code";
        GenJournalLine."Source Code" := 'GENJNL';
        GenJournalLine.INSERT;
      {
        JournalLineDimension.INIT;
        JournalLineDimension."Table ID" := DATABASE::"Gen. Journal Line";
        JournalLineDimension."Journal Template Name" := GenJournalLine."Journal Template Name";
        JournalLineDimension."Journal Batch Name" := GenJournalLine."Journal Batch Name";
        JournalLineDimension."Journal Line No." := GenJournalLine."Line No.";
        JournalLineDimension."Dimension Code" := 'BRANCH';
        JournalLineDimension."Dimension Value Code" := LSalaryPosting."Branch Code";
        JournalLineDimension.INSERT;
      }
      END;
    END;

    PROCEDURE Deductions@1000000020(GSalaryPosting@1000000000 : Record 72121);
    VAR
      LSalaryPosting@1102155000 : Record 72121;
      Additions@1000000002 : Decimal;
      Deductions@1000000003 : Decimal;
      AccountType@1000000004 : 'G/L Account';
    BEGIN
      PayrollEmployeePostingGroup.GET(GSalaryPosting."Emp Posting Group",
        GSalaryPosting."Location Code",
        GSalaryPosting."Salary Plan Code");

      // PF Account

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PF Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."PF Payable A/c";
        InitGenJnlLine(LSalaryPosting,
        - (LSalaryPosting."Employee PF / ESI Amount" +
          LSalaryPosting."Employer PF / ESI Amount"));
      END;
      // EPS Account
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("EPS Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."EPS Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF EPS ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,-LSalaryPosting."Employer EPS Amount");
      END;

      // PT PAYABLE ACCOUNT
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PT');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PT Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."PT Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,-LSalaryPosting."Payable Amount");
      END;

      // ESI Account
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'ESI');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("ESI Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."ESI Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,
         - (LSalaryPosting."Employee PF / ESI Amount" +
           LSalaryPosting."Employer PF / ESI Amount"));
      END;
      // TDS Account
      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code",'TDS');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("TDS Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."TDS Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."Payable Amount");
      END;

      // BONUS Account

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Addition);
      LSalaryPosting.SETRANGE("Pay Element Code", 'BONUS');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("Bonus Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."Bonus Payable A/c";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."Payable Amount");
      END;

      // LOAN Account

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'LOAN');
      IF LSalaryPosting.FINDSET THEN BEGIN
        PayElements.GET(LSalaryPosting."Pay Element Code",LSalaryPosting."Location Code",
          LSalaryPosting."Salary Plan Code");
        PayElements.TESTFIELD("GL Code");
        LSalaryPosting."Account No." := PayElements."GL Code";
        LSalaryPosting."Pay Element Description" := LSalaryPosting."Pay Element Code" + ' ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."Payable Amount");
      END;

      // Salary Payable Account
      Additions := 0;
      Deductions := 0;

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code",GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code",GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code",GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry",GSalaryPosting."Salary Due Entry");
      IF LSalaryPosting.FINDSET THEN BEGIN
        REPEAT
          CASE LSalaryPosting."Pay Type" OF
            LSalaryPosting."Pay Type"::Addition,LSalaryPosting."Pay Type"::Reimbursement :
              Additions := Additions + LSalaryPosting."Payable Amount";

            LSalaryPosting."Pay Type"::Deduction :
              Deductions := Deductions + LSalaryPosting."Payable Amount";
          END;
        UNTIL LSalaryPosting.NEXT = 0;

        PayrollEmployeePostingGroup.TESTFIELD("Salary Payable1 A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."Salary Payable1 A/c";
        LSalaryPosting."Pay Element Description" := 'Net Amount ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,-(Additions-Deductions));
      END;

      // PF ADMIN CHARGES , ELDI CHARGES, RIFA CHARGES

      LSalaryPosting.RESET;
      LSalaryPosting.SETRANGE("Location Code", GSalaryPosting."Location Code");
      LSalaryPosting.SETRANGE("Salary Plan Code", GSalaryPosting."Salary Plan Code");
      LSalaryPosting.SETRANGE("Salary Cycle Code", GSalaryPosting."Salary Cycle Code");
      LSalaryPosting.SETRANGE("Employee Category", GSalaryPosting."Employee Category");
      LSalaryPosting.SETRANGE("Salary Due Entry", GSalaryPosting."Salary Due Entry");
      LSalaryPosting.SETRANGE("Pay Type", LSalaryPosting."Pay Type"::Deduction);
      LSalaryPosting.SETRANGE("Pay Element Code", 'PF');
      IF LSalaryPosting.FINDFIRST THEN BEGIN
        PayrollEmployeePostingGroup.TESTFIELD("PF Admin Charge Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."PF Admin Charge Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF Admin ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."PF Admin Charges Amount");

        PayrollEmployeePostingGroup.TESTFIELD("EDLI Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."EDLI Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF EDLI ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."PF EDLI Amount");

        PayrollEmployeePostingGroup.TESTFIELD("RIFA Payable A/c");
        LSalaryPosting."Account No." := PayrollEmployeePostingGroup."RIFA Payable A/c";
        LSalaryPosting."Pay Element Description" := 'PF RIFA ' + LSalaryPosting."Salary Cycle Code";
        InitGenJnlLine(LSalaryPosting,- LSalaryPosting."PF RIFA Amount");
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------------------------------------------------
      Firstware Sofware Solutions : Project Name : HR & PAYROLL
      -----------------------------------------------------------------------------------------------
      No.  Date          Developer     Spec/CU/CR      Description
      -----------------------------------------------------------------------------------------------
      1    04.APR.2009   RAJAH.A                       New Codeunit Created for PAYROLL Module
      -----------------------------------------------------------------------------------------------
    }
    END.
  }
}

